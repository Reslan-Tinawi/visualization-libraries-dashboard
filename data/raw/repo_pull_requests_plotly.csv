index,id,number,repo_id,created_at,closed_at,state,title,body,total_comments,total_commits,labels
0,707563255,3343,14579099,2021-08-10 18:20:01,,open,Bump path-parse from 1.0.6 to 1.0.7 in /packages/javascript/jupyterlab-plotly,"Bumps [path-parse](https://github.com/jbgutierrez/path-parse) from 1.0.6 to 1.0.7.
<details>
<summary>Commits</summary>
<ul>
<li>See full diff in <a href=""https://github.com/jbgutierrez/path-parse/commits/v1.0.7"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=path-parse&package-manager=npm_and_yarn&previous-version=1.0.6&new-version=1.0.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/plotly/plotly.py/network/alerts).

</details>",0,1,"['dependencies', 'javascript']"
1,707563246,3342,14579099,2021-08-10 18:19:59,,open,Bump tar from 6.1.0 to 6.1.7 in /packages/javascript/jupyterlab-plotly,"Bumps [tar](https://github.com/npm/node-tar) from 6.1.0 to 6.1.7.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/npm/node-tar/commit/d61628cb40381d89f119431a16a4aab2fbecb056""><code>d61628c</code></a> 6.1.7</li>
<li><a href=""https://github.com/npm/node-tar/commit/9e018cf2a5e289d6b34d1a0157980070b3a14c75""><code>9e018cf</code></a> tests: run (and pass) on windows</li>
<li><a href=""https://github.com/npm/node-tar/commit/c2a0948fb7b70862f92828e7b37b622566ed367e""><code>c2a0948</code></a> fix: refactoring to pass tests on Windows</li>
<li><a href=""https://github.com/npm/node-tar/commit/d0ce670bdb7eed5861837538a0d18c7864ff71c6""><code>d0ce670</code></a> update deps</li>
<li><a href=""https://github.com/npm/node-tar/commit/53602669f58ddbeb3294d7196b3320aaaed22728""><code>5360266</code></a> fix: normalize paths on Windows systems</li>
<li><a href=""https://github.com/npm/node-tar/commit/9bc1729939eec1c822b528385b1cc513b9888835""><code>9bc1729</code></a> 6.1.6</li>
<li><a href=""https://github.com/npm/node-tar/commit/bdf4f5171340b890a62a5e578962ac143d34b3a9""><code>bdf4f51</code></a> fix: properly prefix hard links</li>
<li><a href=""https://github.com/npm/node-tar/commit/94b2a740115fdce20f265a029b0404d53c0a18c6""><code>94b2a74</code></a> chore: remove benchmarks from git repo</li>
<li><a href=""https://github.com/npm/node-tar/commit/ecaafb4777b7137421f2f0d6f40ab827654f9247""><code>ecaafb4</code></a> update deps</li>
<li><a href=""https://github.com/npm/node-tar/commit/bd4691c90478f41b2649a97048199e34927dc046""><code>bd4691c</code></a> 6.1.5</li>
<li>Additional commits viewable in <a href=""https://github.com/npm/node-tar/compare/v6.1.0...v6.1.7"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=tar&package-manager=npm_and_yarn&previous-version=6.1.0&new-version=6.1.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/plotly/plotly.py/network/alerts).

</details>",0,1,"['dependencies', 'javascript']"
2,707020373,3341,14579099,2021-08-10 04:30:48,2021-08-10 18:19:07,closed,Unpin six in requirements.txt,"Closes #3301. See that for context.

(Regarding the checklist, this change is so trivial that I think most things are not applicable.)

## Code PR

- [X] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).
",4,2,[]
3,706876492,3340,14579099,2021-08-09 21:44:37,,open,Change URL from githubusercontent.com to github.io,"Shorter and nicer!

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",0,1,[]
4,704813716,3336,14579099,2021-08-05 15:34:30,,open,Initial stab at supporting pandas NAType with json serialization,"Starts addressing https://github.com/plotly/plotly.py/issues/3253

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",0,1,[]
5,702935127,3331,14579099,2021-08-04 03:59:40,2021-08-10 18:20:04,closed,Bump tar from 6.1.0 to 6.1.5 in /packages/javascript/jupyterlab-plotly,"Bumps [tar](https://github.com/npm/node-tar) from 6.1.0 to 6.1.5.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/npm/node-tar/commit/bd4691c90478f41b2649a97048199e34927dc046""><code>bd4691c</code></a> 6.1.5</li>
<li><a href=""https://github.com/npm/node-tar/commit/d694c4f810d864badf223efa35d24a000d780179""><code>d694c4f</code></a> ci: test on node 16</li>
<li><a href=""https://github.com/npm/node-tar/commit/84acbd31288541100910a528e437f901f8012214""><code>84acbd3</code></a> fix(unpack): fix hang on large file on open() fail</li>
<li><a href=""https://github.com/npm/node-tar/commit/97c46fcee7e4e7849ea3432086c4537fb6197025""><code>97c46fc</code></a> fix(unpack): always resume parsing after an entry error</li>
<li><a href=""https://github.com/npm/node-tar/commit/488ab8c01de69379406d937419fa3e5550e651c0""><code>488ab8c</code></a> chore: WriteEntry cleaner write() handling</li>
<li><a href=""https://github.com/npm/node-tar/commit/be89aafd95296e9721e124b77eee7c745e1c1e97""><code>be89aaf</code></a> WriteEntry backpressure</li>
<li><a href=""https://github.com/npm/node-tar/commit/ba73f5eea55f9cf65048b4d9578462ec8f80bc5e""><code>ba73f5e</code></a> chore: track fs state on WriteEntry class, not in arguments</li>
<li><a href=""https://github.com/npm/node-tar/commit/bf693837b3dcfeb76878b212310302dc5dc3d3dc""><code>bf69383</code></a> 6.1.4</li>
<li><a href=""https://github.com/npm/node-tar/commit/06cbde5935aa7643f578f874de84a7da2a74fe3a""><code>06cbde5</code></a> Avoid an unlikely but theoretically possible redos</li>
<li><a href=""https://github.com/npm/node-tar/commit/0b78386c53b00dce422742e19de94f2a4d9389f3""><code>0b78386</code></a> 6.1.3</li>
<li>Additional commits viewable in <a href=""https://github.com/npm/node-tar/compare/v6.1.0...v6.1.5"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=tar&package-manager=npm_and_yarn&previous-version=6.1.0&new-version=6.1.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/plotly/plotly.py/network/alerts).

</details>",1,1,"['dependencies', 'javascript']"
6,702517868,3330,14579099,2021-08-03 18:55:22,,open,PX ECDF and KDE,"Resolves #3010 and supersedes https://github.com/plotly/plotly.py/pull/2765 by adding ECDF to PX itself, as well as KDE.",0,8,[]
7,701906843,3326,14579099,2021-08-03 02:38:43,2021-08-03 20:46:28,closed,ability to show markers on lines,"Closes #2719  

- [x] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [x] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

",0,5,[]
8,696363234,3316,14579099,2021-07-24 15:04:45,2021-07-25 00:11:09,closed,Remove duplicate import in documentation,"It is a very small modification to documentation: no substantial changes.

Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [x] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [x] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [x] Every new/modified example is independently runnable
- [x] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] ...",1,1,[]
9,696170471,3314,14579099,2021-07-23 19:38:08,,open,bumping Plotly.js to 2.3.0,,0,1,[]
10,694582301,3310,14579099,2021-07-21 17:59:17,2021-07-21 19:05:06,closed,improve browser error messages,Followup to https://github.com/plotly/plotly.py/pull/3278 because `webbrowser._browsers` is an unreliable private object.,0,5,[]
11,691723936,3305,14579099,2021-07-16 20:20:48,2021-07-17 12:08:11,closed,add some extra options to various demo datasets,,0,2,[]
12,690216405,3302,14579099,2021-07-14 20:51:22,2021-07-18 01:04:34,closed,Allow plotly.io.from_json to accept dictionaries,"Changes `from_json` and `from_json_plotly` take dict-like objects.


## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [x] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).
",4,1,[]
13,688064359,3299,14579099,2021-07-12 18:13:35,2021-07-17 11:47:13,closed,Fix typo: missing 'as',"### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch

",1,1,[]
14,686230198,3293,14579099,2021-07-08 18:19:05,2021-07-15 18:11:18,closed,Fix: customdata is sometimes a tuple,"This PR is a fix for https://github.com/plotly/plotly.py/issues/3292

The regression was that numpy/pandas arrays with Object `dtype` were getting converted into Python lists when added to a `Figure`.  This was caused by an unnecessary changed I made in the JSON serialization PR in commit https://github.com/plotly/plotly.py/pull/2955/commits/6cea61db9280b33d4870ff527be9dcafeed45bd3.

This PR is largely a manual revert of that commit, with an added test to make sure serialization is still behaving properly when object arrays are included in a figure.",3,3,[]
15,685009040,3290,14579099,2021-07-07 09:08:53,,open,"Small fix in documentation: date-index mismatch in ""Update Dropdown""","Code in this example assumed the index to be the date stamp. However, the file is read from CSV and does not take the 0 col ('Date') as the index for the pd.DataFrame. A simple ""index_col=0"" argument fixed this. Without this fix the chart does not display the expected behavior. 


### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch


## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
",0,1,[]
16,679095215,3282,14579099,2021-06-28 14:22:35,2021-06-28 14:53:55,closed,bumping Plotly.js to 2.2,"<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",0,1,[]
17,677578893,3278,14579099,2021-06-25 02:47:45,2021-07-21 17:21:01,closed,fix for chromium renderer on linux systems (issue #2348),"- [✓ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ✓] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

This PR is a fix for issue https://github.com/plotly/plotly.py/issues/2348. I have read the documentation and the contributing notes. Test cases have been added for the same fix.  Im not sure if I need to add anything in the changelog. Let me know if anything needs to be changed.
",7,3,[]
18,675908666,3272,14579099,2021-06-23 03:00:02,,open,Fix make_subplots documentation of print_grid's default,"Fixes small inconsistency pointed out in https://github.com/plotly/plotly.py/issues/3234 in the API reference documentation.
This makes the API reference match the code for the default value of `print_grid` in `make_subplots`

### Documentation PR

- [X] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [X] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch

## Code PR

- [X] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
",0,1,[]
19,674850547,3267,14579099,2021-06-21 20:17:22,2021-06-21 20:17:51,closed,Update webgl-vs-svg.md,"<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
Fixes a very, very small typo.

<img width=""1135"" alt=""image"" src=""https://user-images.githubusercontent.com/38958867/122822505-26143b00-d2ac-11eb-9417-26f60082e909.png"">
",0,1,[]
20,674533140,3265,14579099,2021-06-21 13:02:58,2021-06-21 16:15:39,closed,Release 5.0.0,,0,14,[]
21,673909692,3258,14579099,2021-06-19 17:21:06,2021-06-20 17:03:32,closed,undo partly-built work,,0,1,[]
22,673799574,3257,14579099,2021-06-19 01:33:44,2021-06-19 17:20:56,closed,fix PX category ranges,,0,2,[]
23,673726487,3256,14579099,2021-06-18 20:53:05,2021-06-18 22:04:50,closed,Icicle cherrypick,Cherry-picking the appropriate bits of #3139,1,6,[]
24,673715997,3255,14579099,2021-06-18 20:32:49,2021-06-18 20:46:19,closed,bumping to Plotly.js 2.1,,0,1,[]
25,673494941,3254,14579099,2021-06-18 13:53:56,2021-06-21 13:03:11,closed,Doc updates for 5.0,"- [x] `orjson` in performance section of renderers
- [x] treemap/icicle root nodes and colors - add root node to coffee dataset
- [x] sunburst/treemap/icicle cross links
- [x] treemap/icicle pathbar font size in uniform text
- [x] pattern shapes
- [x] modebar
- [x] legend rank
- [ ] CHANGELOG - go through 2.0 and 2.1 and pull out items
",1,11,[]
26,673098574,3252,14579099,2021-06-18 01:31:55,2021-06-18 21:08:16,closed,adding pattern_shape to PX,,0,2,[]
27,671896311,3249,14579099,2021-06-16 20:58:33,2021-06-17 13:03:36,closed,uniquify category_orders,,0,1,[]
28,669821724,3247,14579099,2021-06-14 19:34:00,2021-06-16 15:56:00,closed,PX val_map now respects category_orders,"Closes #3048

TODO:
- [x] categorical axes should force range to include every value of `categorical_orders`",0,7,[]
29,668553848,3245,14579099,2021-06-11 20:55:07,2021-06-12 02:27:32,closed,bump deps for security issues,,0,1,[]
30,668489981,3244,14579099,2021-06-11 19:35:07,2021-06-11 20:50:00,closed,allow / pattern in bars,,0,1,[]
31,668468913,3242,14579099,2021-06-11 19:07:18,2021-06-11 19:44:26,closed,Add missing double quotations,"The current lines do not work correctly as follows:
 
```zsh
# suppose zsh
$ conda install jupyterlab>=3 ""ipywidgets>=7.6""
zsh: 3 not found
```

I think bash also does not work with these commands.


<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",3,1,[]
32,668443387,3241,14579099,2021-06-11 18:38:16,2021-06-11 19:30:56,closed,Bump normalize-url from 4.5.0 to 4.5.1 in /packages/javascript/jupyterlab-plotly,"Bumps [normalize-url](https://github.com/sindresorhus/normalize-url) from 4.5.0 to 4.5.1.
<details>
<summary>Commits</summary>
<ul>
<li>See full diff in <a href=""https://github.com/sindresorhus/normalize-url/commits"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=normalize-url&package-manager=npm_and_yarn&previous-version=4.5.0&new-version=4.5.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/plotly/plotly.py/network/alerts).

</details>",0,1,"['dependencies', 'javascript']"
33,668358073,3240,14579099,2021-06-11 17:01:23,2021-06-11 18:35:49,closed,Remove default width/height for static image renderers,"This takes care  of https://github.com/plotly/plotly.py/issues/2651.

Now the image size precedence is:
 - width/height provided to fig.show() (e.g. `fig.show(width=700, height=400))
 - width/height specified in figure (e.g. `px.scatter(..., width=800, height=500))
 - default_width/default_height specified in the kaleido scope (e.g. pio.kaleido.scope.default_width)",7,1,[]
34,666262239,3235,14579099,2021-06-09 19:36:59,2021-06-09 19:37:32,closed,Update line-and-scatter.md,"

### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [x] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [x] Every new/modified example has a descriptive title and motivating sentence or paragraph",0,1,[]
35,664498362,3231,14579099,2021-06-08 08:40:47,2021-06-11 18:36:08,closed,Add prebuilt assets when installing from sdist,Fixes #3230,5,1,[]
36,662456295,3222,14579099,2021-06-05 14:09:11,,open,Fix an IndexError in .../figure_factory/_trisurf.py::map_face2color,"The function map_face2color in _trisurf.py compared face value (face) to max face value (vmax) and if equal did a quick exit by returning the last element in a list. Later it would compare normalized face value to indexed values. Because of floating point errors the normalized value could be 1.0 and lead to attempted look up at an index past the end of a list. This would raise an IndexError.

The essence of the problem is
```
def map_face2color(face, colormap, scale, vmin, vmax):
    if face == vmax: return colormap[-1];
    t = (face - vmin) / (vmax - vmin)  # normalized position
    # t can be equal to 1.0 even when face != vmax.
    # when t is equal to 1.0 finding first element past t in a list fails with IndexError
```

## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

",3,1,[]
37,661933980,3221,14579099,2021-06-04 17:09:39,2021-06-07 17:19:31,closed,bumping to JS 2.0.0 rc3,,2,1,[]
38,658444134,3217,14579099,2021-05-31 17:25:25,2021-05-31 17:25:49,closed,Doc prod,,0,7,[]
39,658442714,3216,14579099,2021-05-31 17:21:33,2021-06-11 19:31:34,closed,Bump hosted-git-info from 2.8.8 to 2.8.9 in /packages/javascript/jupyterlab-plotly,"Bumps [hosted-git-info](https://github.com/npm/hosted-git-info) from 2.8.8 to 2.8.9.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/npm/hosted-git-info/blob/v2.8.9/CHANGELOG.md"">hosted-git-info's changelog</a>.</em></p>
<blockquote>
<h2><a href=""https://github.com/npm/hosted-git-info/compare/v2.8.8...v2.8.9"">2.8.9</a> (2021-04-07)</h2>
<h3>Bug Fixes</h3>
<ul>
<li>backport regex fix from <a href=""https://github-redirect.dependabot.com/npm/hosted-git-info/issues/76"">#76</a> (<a href=""https://github.com/npm/hosted-git-info/commit/29adfe5"">29adfe5</a>), closes <a href=""https://github-redirect.dependabot.com/npm/hosted-git-info/issues/84"">#84</a></li>
</ul>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/npm/hosted-git-info/commit/8d4b3697d79bcd89cdb36d1db165e3696c783a01""><code>8d4b369</code></a> chore(release): 2.8.9</li>
<li><a href=""https://github.com/npm/hosted-git-info/commit/29adfe5ef789784c861b2cdeb15051ec2ba651a7""><code>29adfe5</code></a> fix: backport regex fix from <a href=""https://github-redirect.dependabot.com/npm/hosted-git-info/issues/76"">#76</a></li>
<li>See full diff in <a href=""https://github.com/npm/hosted-git-info/compare/v2.8.8...v2.8.9"">compare view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a href=""https://www.npmjs.com/~nlf"">nlf</a>, a new releaser for hosted-git-info since your current version.</p>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=hosted-git-info&package-manager=npm_and_yarn&previous-version=2.8.8&new-version=2.8.9)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/plotly/plotly.py/network/alerts).

</details>",0,1,"['dependencies', 'javascript']"
40,658442708,3215,14579099,2021-05-31 17:21:32,2021-06-11 19:31:43,closed,Bump ws from 7.3.1 to 7.4.6 in /packages/javascript/jupyterlab-plotly,"Bumps [ws](https://github.com/websockets/ws) from 7.3.1 to 7.4.6.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/websockets/ws/releases"">ws's releases</a>.</em></p>
<blockquote>
<h2>7.4.6</h2>
<h1>Bug fixes</h1>
<ul>
<li>Fixed a ReDoS vulnerability (00c425ec).</li>
</ul>
<p>A specially crafted value of the <code>Sec-Websocket-Protocol</code> header could be used
to significantly slow down a ws server.</p>
<pre lang=""js""><code>for (const length of [1000, 2000, 4000, 8000, 16000, 32000]) {
  const value = 'b' + ' '.repeat(length) + 'x';
  const start = process.hrtime.bigint();
<p>value.trim().split(/ *, */);</p>
<p>const end = process.hrtime.bigint();</p>
<p>console.log('length = %d, time = %f ns', length, end - start);
}
</code></pre></p>
<p>The vulnerability was responsibly disclosed along with a fix in private by
<a href=""https://github.com/robmcl4"">Robert McLaughlin</a> from University of California, Santa Barbara.</p>
<p>In vulnerable versions of ws, the issue can be mitigated by reducing the maximum
allowed length of the request headers using the <a href=""https://nodejs.org/api/cli.html#cli_max_http_header_size_size""><code>--max-http-header-size=size</code></a>
and/or the <a href=""https://nodejs.org/api/http.html#http_http_createserver_options_requestlistener""><code>maxHeaderSize</code></a> options.</p>
<h2>7.4.5</h2>
<h1>Bug fixes</h1>
<ul>
<li>UTF-8 validation is now done even if <code>utf-8-validate</code> is not installed
(23ba6b29).</li>
<li>Fixed an edge case where <code>websocket.close()</code> and <code>websocket.terminate()</code> did
not close the connection (67e25ff5).</li>
</ul>
<h2>7.4.4</h2>
<h1>Bug fixes</h1>
<ul>
<li>Fixed a bug that could cause the process to crash when using the
permessage-deflate extension (92774377).</li>
</ul>
<h2>7.4.3</h2>
<h1>Bug fixes</h1>
<ul>
<li>The deflate/inflate stream is now reset instead of reinitialized when context
takeover is disabled (<a href=""https://github-redirect.dependabot.com/websockets/ws/issues/1840"">#1840</a>).</li>
</ul>
<h2>7.4.2</h2>
<h1>Bug fixes</h1>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/websockets/ws/commit/f5297f7090f6a628832a730187c5b3a06a247f00""><code>f5297f7</code></a> [dist] 7.4.6</li>
<li><a href=""https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff""><code>00c425e</code></a> [security] Fix ReDoS vulnerability</li>
<li><a href=""https://github.com/websockets/ws/commit/990306d1446faf346c76452409a4c11455690514""><code>990306d</code></a> [lint] Fix prettier error</li>
<li><a href=""https://github.com/websockets/ws/commit/32e3a8439b7c8273b44fe1adb5682f529e34d0ba""><code>32e3a84</code></a> [security] Remove reference to Node Security Project</li>
<li><a href=""https://github.com/websockets/ws/commit/8c914d18b86a7d1408884d18eeadae0fa41b0bb5""><code>8c914d1</code></a> [minor] Fix nits</li>
<li><a href=""https://github.com/websockets/ws/commit/fc7e27d12ad0af90ce05302afc85c292024000b4""><code>fc7e27d</code></a> [ci] Test on node 16</li>
<li><a href=""https://github.com/websockets/ws/commit/587c201bfc22c460658ca304d23477fc7ebd2a60""><code>587c201</code></a> [ci] Do not test on node 15</li>
<li><a href=""https://github.com/websockets/ws/commit/f67271079755e79a1ac2b40f3f4efb94ca024539""><code>f672710</code></a> [dist] 7.4.5</li>
<li><a href=""https://github.com/websockets/ws/commit/67e25ff50230d131d76b1061ca0be5c991df161f""><code>67e25ff</code></a> [fix] Fix case where <code>abortHandshake()</code> does not close the connection</li>
<li><a href=""https://github.com/websockets/ws/commit/23ba6b2922f521f2b656891a997ab562b7139dd4""><code>23ba6b2</code></a> [fix] Make UTF-8 validation work even if utf-8-validate is not installed</li>
<li>Additional commits viewable in <a href=""https://github.com/websockets/ws/compare/7.3.1...7.4.6"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ws&package-manager=npm_and_yarn&previous-version=7.3.1&new-version=7.4.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/plotly/plotly.py/network/alerts).

</details>",0,1,"['dependencies', 'javascript']"
41,658442703,3214,14579099,2021-05-31 17:21:31,2021-06-11 19:31:50,closed,Bump browserslist from 4.16.3 to 4.16.6 in /packages/javascript/jupyterlab-plotly,"Bumps [browserslist](https://github.com/browserslist/browserslist) from 4.16.3 to 4.16.6.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/browserslist/browserslist/blob/main/CHANGELOG.md"">browserslist's changelog</a>.</em></p>
<blockquote>
<h2>4.16.6</h2>
<ul>
<li>Fixed <code>npm-shrinkwrap.json</code> support in <code>--update-db</code> (by Geoff Newman).</li>
</ul>
<h2>4.16.5</h2>
<ul>
<li>Fixed unsafe RegExp (by Yeting Li).</li>
</ul>
<h2>4.16.4</h2>
<ul>
<li>Fixed unsafe RegExp.</li>
<li>Added artifactory support to <code>--update-db</code> (by Ittai Baratz).</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/browserslist/browserslist/commit/6fe3614db05b40f9dc1c63588a83d2ada05bae75""><code>6fe3614</code></a> Release 4.16.6 version</li>
<li><a href=""https://github.com/browserslist/browserslist/commit/33ebac933839847a62ede680273449f6cdca1e18""><code>33ebac9</code></a> Update dependencies</li>
<li><a href=""https://github.com/browserslist/browserslist/commit/2128170f231a6c9f462276006e09f302d811df31""><code>2128170</code></a> Add support for npm-shrinkwrap files alongside package-lock (<a href=""https://github-redirect.dependabot.com/browserslist/browserslist/issues/595"">#595</a>)</li>
<li><a href=""https://github.com/browserslist/browserslist/commit/7cc2aedd0047d800d44aa0259c02b6db1414105c""><code>7cc2aed</code></a> Release 4.16.5 version</li>
<li><a href=""https://github.com/browserslist/browserslist/commit/27e4afdc68798ca93f8c01c5ea6208b4b361a704""><code>27e4afd</code></a> Update dependencies</li>
<li><a href=""https://github.com/browserslist/browserslist/commit/1013a1847931a209c34a704aebc85a8c091286e7""><code>1013a18</code></a> Fix version RegExp</li>
<li><a href=""https://github.com/browserslist/browserslist/commit/b879a1a304def2563f42cc3d3f5711e760662be3""><code>b879a1a</code></a> Use Node.js 16 on CI</li>
<li><a href=""https://github.com/browserslist/browserslist/commit/bd1e9e01c95cad24be706fb11be7d151cd99ed0a""><code>bd1e9e0</code></a> Fix ReDoS (<a href=""https://github-redirect.dependabot.com/browserslist/browserslist/issues/593"">#593</a>)</li>
<li><a href=""https://github.com/browserslist/browserslist/commit/209adf9e0051fa39a2b25354cffd493300f34b02""><code>209adf9</code></a> Release 4.16.4 version</li>
<li><a href=""https://github.com/browserslist/browserslist/commit/3e2ae3b52daf7f5203247fd4f583b3bda66ea57d""><code>3e2ae3b</code></a> Fix types</li>
<li>Additional commits viewable in <a href=""https://github.com/browserslist/browserslist/compare/4.16.3...4.16.6"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=browserslist&package-manager=npm_and_yarn&previous-version=4.16.3&new-version=4.16.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/plotly/plotly.py/network/alerts).

</details>",0,1,"['dependencies', 'javascript']"
42,658428977,3213,14579099,2021-05-31 16:46:02,2021-05-31 17:20:49,closed,bumping to JS 2.0.0 RC 2,,0,2,[]
43,657872987,3211,14579099,2021-05-31 01:38:20,2021-05-31 03:16:40,closed,remove 'latest' CDN URLs,Follow-up to #2961,0,1,[]
44,657155836,3208,14579099,2021-05-28 21:59:56,2021-05-28 22:02:28,closed,Fix typo in express/_doc.py,"<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",2,1,[]
45,652374674,3203,14579099,2021-05-25 14:00:36,2021-05-31 17:21:19,closed,pull in JS master as a smoke test,not for merging.,0,1,[]
46,638786823,3193,14579099,2021-05-11 00:29:57,2021-05-11 00:43:42,closed,Fix sample colorscale,,0,2,[]
47,635640030,3188,14579099,2021-05-09 09:45:05,2021-05-09 10:46:29,closed,Fix a typo in configuration-options doc,"- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch",1,1,[]
48,634205688,3187,14579099,2021-05-08 09:18:34,2021-05-08 16:51:42,closed,Update _html.py,"Remote duplicated docs

## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).


",2,1,[]
49,632895937,3186,14579099,2021-05-07 14:55:00,2021-05-07 15:53:28,closed,Implements getting a colorscale by name,"A utility function to get a colorscale by name.
This follows the convention set by `plotly.colors.named_colorscales` and only gives access to scales defined in the `sequential`, `diverging` and `cyclical` namespaces.

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [x] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).
",1,1,[]
50,631547589,3184,14579099,2021-05-06 15:28:08,2021-05-06 16:06:44,closed,old file cleanup,Closes #3141 without needing original committer to do additional work :),0,1,[]
51,627109526,3177,14579099,2021-04-30 08:32:49,,open,Update tree-plots.md,"- ""labels"" was not defined inside the ""make_annotations"" function.
- ""M"" is not defined as well, I believe the intended variable name was ""L"".

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",0,1,[]
52,622350393,3171,14579099,2021-04-23 22:02:46,2021-04-24 05:20:32,closed,Orca to Kaleido,"<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",1,1,[]
53,622189952,3169,14579099,2021-04-23 16:26:41,2021-06-17 13:05:31,closed,Do not merge: CircleCI work for issue3036,,0,33,[]
54,622187077,3168,14579099,2021-04-23 16:21:44,2021-04-23 16:26:06,closed,Do not merge: Work on fixing CI tests for fcollonval/issue3036,Working on fixing CircleCI tests for https://github.com/plotly/plotly.py/pull/3142,0,22,[]
55,622077109,3165,14579099,2021-04-23 13:37:49,2021-06-17 13:05:50,closed,Bump pillow from 5.2.0 to 8.1.1 in /packages/python/plotly/test_requirements,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 5.2.0 to 8.1.1.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>
<blockquote>
<h2>8.1.1</h2>
<p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.1.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.1.1.html</a></p>
<h2>8.1.0</h2>
<p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.1.0.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.1.0.html</a></p>
<h2>Changes</h2>
<ul>
<li>Fix TIFF OOB Write error <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5175"">#5175</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Fix for Buffer Read Overrun in PCX Decoding <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5174"">#5174</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Fix for SGI Decode buffer overrun <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5173"">#5173</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Fix OOB Read when saving GIF of xsize=1 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5149"">#5149</a> [<a href=""https://github.com/wiredfool""><code>@​wiredfool</code></a>]</li>
<li>Add support for PySide6 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5161"">#5161</a> [<a href=""https://github.com/hugovk""><code>@​hugovk</code></a>]</li>
<li>Moved QApplication into one test <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5167"">#5167</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Use disposal settings from previous frame in APNG <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5126"">#5126</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Revert &quot;skip wheels on 3.10-dev due to wheel#354&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5163"">#5163</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Better _binary module use <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5156"">#5156</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Added exception explaining that <em>repr_png</em> saves to PNG <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5139"">#5139</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Use previous disposal method in GIF load_end <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5125"">#5125</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Do not catch a ValueError only to raise another <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5090"">#5090</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Allow putpalette to accept 1024 integers to include alpha values <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5089"">#5089</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Fix OOB Read when writing TIFF with custom Metadata <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5148"">#5148</a> [<a href=""https://github.com/wiredfool""><code>@​wiredfool</code></a>]</li>
<li>Removed unused variable <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5140"">#5140</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Fix dereferencing of potential null pointers <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5111"">#5111</a> [<a href=""https://github.com/cgohlke""><code>@​cgohlke</code></a>]</li>
<li>Fixed warnings assigning to &quot;unsigned char *&quot; from &quot;char *&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5127"">#5127</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Add append_images support for ICO <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4568"">#4568</a> [<a href=""https://github.com/ziplantil""><code>@​ziplantil</code></a>]</li>
<li>Fixed comparison warnings <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5122"">#5122</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Block TIFFTAG_SUBIFD <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5120"">#5120</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Fix dereferencing potential null pointer <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5108"">#5108</a> [<a href=""https://github.com/cgohlke""><code>@​cgohlke</code></a>]</li>
<li>Replaced PyErr_NoMemory with ImagingError_MemoryError <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5113"">#5113</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Remove duplicate code <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5109"">#5109</a> [<a href=""https://github.com/cgohlke""><code>@​cgohlke</code></a>]</li>
<li>Moved warning to end of execution <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/4965"">#4965</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Removed unused fromstring and tostring C methods <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5026"">#5026</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>init() if one of the formats is unrecognised <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5037"">#5037</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
</ul>
<h2>Dependencies</h2>
<ul>
<li>Updated libtiff to 4.2.0 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5153"">#5153</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Updated openjpeg to 2.4.0 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5151"">#5151</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Updated harfbuzz to 2.7.4 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5138"">#5138</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Updated harfbuzz to 2.7.3 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5128"">#5128</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Updated libraqm to 0.7.1 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5070"">#5070</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Updated libimagequant to 2.13.1 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5065"">#5065</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Update FriBiDi to 1.0.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5064"">#5064</a> [<a href=""https://github.com/nulano""><code>@​nulano</code></a>]</li>
<li>Updated libraqm to 0.7.1 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5063"">#5063</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
<li>Updated libjpeg-turbo to 2.0.6 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5044"">#5044</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>
</ul>
<h2>Deprecations</h2>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst"">pillow's changelog</a>.</em></p>
<blockquote>
<h2>8.1.1 (2021-03-01)</h2>
<ul>
<li>
<p>Use more specific regex chars to prevent ReDoS. CVE-2021-25292
[hugovk]</p>
</li>
<li>
<p>Fix OOB Read in TiffDecode.c, and check the tile validity before reading. CVE-2021-25291
[wiredfool]</p>
</li>
<li>
<p>Fix negative size read in TiffDecode.c. CVE-2021-25290
[wiredfool]</p>
</li>
<li>
<p>Fix OOB read in SgiRleDecode.c. CVE-2021-25293
[wiredfool]</p>
</li>
<li>
<p>Incorrect error code checking in TiffDecode.c. CVE-2021-25289
[wiredfool]</p>
</li>
<li>
<p>PyModule_AddObject fix for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5194"">#5194</a>
[radarhere]</p>
</li>
</ul>
<h2>8.1.0 (2021-01-02)</h2>
<ul>
<li>
<p>Fix TIFF OOB Write error. CVE-2020-35654 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5175"">#5175</a>
[wiredfool]</p>
</li>
<li>
<p>Fix for Read Overflow in PCX Decoding. CVE-2020-35653 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5174"">#5174</a>
[wiredfool, radarhere]</p>
</li>
<li>
<p>Fix for SGI Decode buffer overrun. CVE-2020-35655 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5173"">#5173</a>
[wiredfool, radarhere]</p>
</li>
<li>
<p>Fix OOB Read when saving GIF of xsize=1 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5149"">#5149</a>
[wiredfool]</p>
</li>
<li>
<p>Makefile updates <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5159"">#5159</a>
[wiredfool, radarhere]</p>
</li>
<li>
<p>Add support for PySide6 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5161"">#5161</a>
[hugovk]</p>
</li>
<li>
<p>Use disposal settings from previous frame in APNG <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5126"">#5126</a>
[radarhere]</p>
</li>
<li>
<p>Added exception explaining that <em>repr_png</em> saves to PNG <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5139"">#5139</a>
[radarhere]</p>
</li>
<li>
<p>Use previous disposal method in GIF load_end <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5125"">#5125</a>
[radarhere]</p>
</li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/python-pillow/Pillow/commit/741d8744a54bedbc49f16922c61a06fcb3681f53""><code>741d874</code></a> 8.1.1 version bump</li>
<li><a href=""https://github.com/python-pillow/Pillow/commit/179cd1c8f94aabc47e9e522e01683ea9aadbd3a5""><code>179cd1c</code></a> Added 8.1.1 release notes to index</li>
<li><a href=""https://github.com/python-pillow/Pillow/commit/7d296653da045e18b379c991797f933e054a7476""><code>7d29665</code></a> Update CHANGES.rst [ci skip]</li>
<li><a href=""https://github.com/python-pillow/Pillow/commit/d25036fca7c8658b698492088361453bb20073e2""><code>d25036f</code></a> Credits</li>
<li><a href=""https://github.com/python-pillow/Pillow/commit/973a4c333ab6d603e82f6eb2aa6f39d1cfcecccb""><code>973a4c3</code></a> Release notes for 8.1.1</li>
<li><a href=""https://github.com/python-pillow/Pillow/commit/521dab94c7ab72b037bd9a83e9663401e0fd2cee""><code>521dab9</code></a> Use more specific regex chars to prevent ReDoS</li>
<li><a href=""https://github.com/python-pillow/Pillow/commit/8b8076bdcb3815be0ef0d279651d8d1342b8ea61""><code>8b8076b</code></a> Fix for CVE-2021-25291</li>
<li><a href=""https://github.com/python-pillow/Pillow/commit/e25be1e33dc526bfd1094bc778a54d8e29bf66c9""><code>e25be1e</code></a> Fix negative size read in TiffDecode.c</li>
<li><a href=""https://github.com/python-pillow/Pillow/commit/f891baa604636cd2506a9360d170bc2cf4963cc5""><code>f891baa</code></a> Fix OOB read in SgiRleDecode.c</li>
<li><a href=""https://github.com/python-pillow/Pillow/commit/cbfdde7b1f2295059a20a539ee9960f0bec7b299""><code>cbfdde7</code></a> Incorrect error code checking in TiffDecode.c</li>
<li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/5.2.0...8.1.1"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=5.2.0&new-version=8.1.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/plotly/plotly.py/network/alerts).

</details>",3,1,"['dependencies', 'python']"
56,621114693,3164,14579099,2021-04-22 13:49:47,2021-04-23 13:37:18,closed,"CircleCI updates: Unify requirements, drop conda, refactor to reduce duplication","This PR is a follow-on to https://github.com/plotly/plotly.py/pull/3160 that inlcudes a bit more cleanup to the CI/CD architecture.

 - Previously, the orca test job used conda to install orca and the other python dependencies, and the python dependencies were not the same as those used in the optional environment.  Now, the orca tests use an identical environment to the optional tests, and they install orca using npm (no more conda).
 - Previously the percy tests used an environment configured with a custom set of python dependencies that didn't match anything else. Now it uses the same optional requirements.txt file as optional.
 - I updated the circleci configuration to version 2.1, and refactored it to use commands and parameters (https://circleci.com/docs/2.0/reusing-config/#using-the-parameters-declaration) to significantly reduce configuration duplication.


Not done:
 - This PR does not unify the requirements of the documentation build with the other CI test jobs. I played with it a little bit, but ran into some documentation build failures and so I decided not to lump that into this PR.",4,28,[]
57,620287373,3160,14579099,2021-04-21 14:50:51,2021-04-22 13:41:24,closed,Require python 3.6 and CI maintenance,"This PR removes support for Python versions prior to 3.6 and does some clean up of the CI test suite.  In particular, it removes the use of tox and instead relies on a separate requirements.txt file for each Python version.  This makes it possible to test different versions of dependencies.

Still to do in follow-on PR(s)
 - Remove use of six for Python 2/3 compatibility
 - Unify optional requirements and doc requirements
 - Unify dependencies for conda+orca test job with optional requirements

Addresses parts of https://github.com/plotly/plotly.py/issues/3159 and closes https://github.com/plotly/plotly.py/issues/3158",4,37,[]
58,619599018,3157,14579099,2021-04-20 19:05:07,2021-04-21 00:55:09,closed,latex docs,,0,11,[]
59,614686869,3146,14579099,2021-04-13 18:51:16,,open,added function create_annotated_heatmap_of_categorical_data to create…,"… annotated heatmap of categorical data from DateFrame and individual series objects
### This is my first PR request, that's why i am little bit of nervous and afraid.
### If there are any mistakes then tell me i will definately clear those mistakes.


Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [x] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [x] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).


",3,1,[]
60,612716343,3143,14579099,2021-04-09 20:37:23,2021-06-04 16:35:19,closed,Matplotlylib fixes,"## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [x] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

This PR fixes compatibility of matplotlylib with matplotib `3.3` and above and specifically tested with the latest release (`3.4.1`). Before fixing the compatibility, I fixed any matplotlylib tests that were not passing. Then I fixed the code.

Specifically, this addresses changes to `matplotlib`:
- axis._gridOnMajor moved
- spine.is_frame_like() deprecated
- FuncFormatter instead of FixedFormatter
- changes in dash patterns
- number of points for bounding boxes

It also renders the shapes for the matplotib legend (previously, only the text would display in a legend). This is mainly done through the method `draw_legend_shapes` which is called by `draw_marked_line` and handles lines, markers and lines+markers. It doesn't handle the legend bounding box.

Tested with matplotlib 3.2,2 (last known working with matplotlylib, with warnings) and 3.4.1 (current), from notebooks with various charts / markers. Also tested with `hotelling` package with `matplotlib 3.4.1.
![newplot(1)](https://user-images.githubusercontent.com/1105325/114237382-0928c680-9951-11eb-9596-482b0bb94e6c.png)
",3,128,[]
61,612272503,3142,14579099,2021-04-09 08:37:27,2021-05-05 18:58:58,closed,Refactor JupyterLab JS extensions and package as federated extension,"This PR:

- [x] merges the widget and the jupyterlab render extensions into one unique package (an example out there is https://github.com/deathbeds/ipydrawio/blob/master/packages/ipydrawio).
- [x] packages the jupyterlab extension as federated module (fixes #3036)
- [x] import asynchronously plotly.js

---

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [x] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).
",55,3,[]
62,612005691,3141,14579099,2021-04-08 22:25:21,2021-05-06 16:06:44,closed,remove obsolete files,"<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

-->

## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).


This simply removes three very old files at root level related to building a conda package that obsolete since at least commit 8586a2ab2971563f4a9cb4973db8351d1dd2c363 (about 2.5 years ago, release v3.2.0). The content is very outdated and its very unlikely that it is going to be useful for anyone.",4,1,[]
63,610844506,3139,14579099,2021-04-07 17:18:08,2021-06-18 22:06:05,closed,Add Icicle Trace to Plotly.py,"## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [x] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

#### Other changes in this PR
- [x] Correct `setup.py` by changing `publish` to `publish-dist`. See [this line](https://github.com/plotly/plotly.py/blob/master/packages/python/plotly/setup.py#L248)
- [x] Correct the path to plotly express in `contributing.md`
",3,6,[]
64,610835367,3138,14579099,2021-04-07 17:09:00,2021-04-07 17:16:58,closed,Add(icicle trace),"## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

This PR has also corrected `setup.py` by changing `publish` to `publish-dist` .",1,1,[]
65,610502506,3136,14579099,2021-04-07 09:27:06,2021-05-10 23:31:10,closed,Adds function to sample colorscales,"Addition to the colors module which can sample a colorscale at arbitrary or equally spaced points. 
Solves #2484.

## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [x] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).
",8,7,[]
66,608068030,3132,14579099,2021-04-02 14:55:50,,open,2646 - Add faceting support for all figure factory methods,"## Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).
",5,13,[]
67,604664162,3128,14579099,2021-03-31 00:03:21,2021-04-22 00:23:25,closed,Bump y18n from 3.2.1 to 3.2.2 in /packages/javascript/plotlywidget,"Bumps [y18n](https://github.com/yargs/y18n) from 3.2.1 to 3.2.2.
<details>
<summary>Commits</summary>
<ul>
<li>See full diff in <a href=""https://github.com/yargs/y18n/commits"">compare view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a href=""https://www.npmjs.com/~oss-bot"">oss-bot</a>, a new releaser for y18n since your current version.</p>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=y18n&package-manager=npm_and_yarn&previous-version=3.2.1&new-version=3.2.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/plotly/plotly.py/network/alerts).

</details>",0,1,['dependencies']
68,601113806,3123,14579099,2021-03-25 22:27:31,,open,Multiple plots in iframe renderer,"
### Documentation PR

Only a couple sentences added to the documentation--no new examples.

- [x ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [N/A ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [N/A ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [N/A ] Every new/modified example is independently runnable
- [N/A ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [N/A ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [N/A ] The random seed is set if using randomly-generated data in new/modified examples
- [N/A ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [N/A ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [N/A ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [N/A ] Data frames are always called `df`
- [N/A ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [N/A ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [N/A ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [N/A ] `fig.show()` is at the end of each new/modified example
- [N/A ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [N/A ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [x ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

This is not a feature change, just a behavior change. It allows multiple outputs from a single jupyter cell to be stored and displayed when using the iframe renderer.

I ran relevant test files and all passed, but I didn't add any new tests since this is such a minor behavior change.

This is my first time contributed to any significant package on Github, so please let me know if I'm doing anything wrong.
",1,2,[]
69,595767469,3117,14579099,2021-03-18 16:58:16,,open,add optionial gzip compression in html export,"Exporting big 3d meshes resulted in huge files since the data is stored as plain text in the html file. By storing the data in compressed base64 the file size can be reduced by 85%.

Reduction Examples:
  96.8mb to 15.4mb
  42.2mb to   2.7mb
  27.6mb to   6.8mb

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

-->

## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [x] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

",2,3,[]
70,587882517,3106,14579099,2021-03-09 12:09:44,2021-04-22 00:23:34,closed,Bump elliptic from 6.5.3 to 6.5.4 in /packages/javascript/plotlywidget,"Bumps [elliptic](https://github.com/indutny/elliptic) from 6.5.3 to 6.5.4.
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/indutny/elliptic/commit/43ac7f230069bd1575e1e4a58394a512303ba803""><code>43ac7f2</code></a> 6.5.4</li>
<li><a href=""https://github.com/indutny/elliptic/commit/f4bc72be11b0a508fb790f445c43534307c9255b""><code>f4bc72b</code></a> package: bump deps</li>
<li><a href=""https://github.com/indutny/elliptic/commit/441b7428b0e8f6636c42118ad2aaa186d3c34c3f""><code>441b742</code></a> ec: validate that a point before deriving keys</li>
<li><a href=""https://github.com/indutny/elliptic/commit/e71b2d9359c5fe9437fbf46f1f05096de447de57""><code>e71b2d9</code></a> lib: relint using eslint</li>
<li><a href=""https://github.com/indutny/elliptic/commit/8421a01aa3ff789c79f91eaf8845558a7be2b9fa""><code>8421a01</code></a> build(deps): bump elliptic from 6.4.1 to 6.5.3 (<a href=""https://github-redirect.dependabot.com/indutny/elliptic/issues/231"">#231</a>)</li>
<li>See full diff in <a href=""https://github.com/indutny/elliptic/compare/v6.5.3...v6.5.4"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=elliptic&package-manager=npm_and_yarn&previous-version=6.5.3&new-version=6.5.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/plotly/plotly.py/network/alerts).

</details>",0,1,['dependencies']
71,586943888,3105,14579099,2021-03-08 17:07:46,2021-04-21 13:00:28,closed,"correct misspells, fix #3074","### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

",1,1,[]
72,581380832,3094,14579099,2021-02-27 18:25:41,2021-04-23 13:02:30,closed,Kaleido v5 updates,"Two small kaleido updates that I'd like to get into v5

1) When neither kaleido nor orca is installed, display the kaleido installation instructions instead of orca. 92b8954

2) Don't override kaleido's MathJax path (with the CDN url) if kaleido was successful in autodetecting a local MathJax installation. Local MathJax support will be released in Kaleido 0.2 (See https://github.com/plotly/Kaleido/pull/75). 2b66c73",2,2,[]
73,577140080,3083,14579099,2021-02-21 16:35:28,2021-02-23 04:16:31,closed,fixing documents,"In continuation with https://github.com/plotly/plotly.py/pull/3073 and https://github.com/plotly/plotly.py/pull/3079, this pull request targets on batch fixing the docstrings instead of documents(.md files).",0,1,[]
74,575386370,3079,14579099,2021-02-18 04:32:30,2021-02-18 18:15:50,closed,Doc prod,"In continuation with the previous pull request #3073, I have fixed the iteration logic of my ""spelling mistakes detection"" script to iterate over all directories and its subdirectories. Fixing a few more documents which were missed in the previous sweep. I guess all documents are completely covered.

For my next step I'm modifying my script to fix docstrings within python files. The regex to extract comments between """""" """""" is in place but not for ''' ''' and # ...

Let me know if the pull request for docstring correction within python files goes to doc-prod or master",2,3,[]
75,575381444,3078,14579099,2021-02-18 04:17:28,2021-02-18 04:29:38,closed,document corrections,"In continuation with the previous pull request https://github.com/plotly/plotly.py/pull/3073, I have fixed the iteration logic of my ""spelling mistakes detection"" script to iterate over all directories and its subdirectories. Fixing a few more documents which were missed in the previous sweep. I guess all documents are completely covered.

For my next step I'm modifying my script to fix docstrings within python files. The regex to extract comments between """""" """""" is in place but not for ''' ''' and # ...

Let me know if the pull request for docstring correction within python files goes to ```doc-prod``` or ```master```",0,1,[]
76,573911611,3073,14579099,2021-02-16 04:14:09,2021-02-16 13:59:53,closed,fixing documents,"<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",5,1,[]
77,573067870,3072,14579099,2021-02-14 10:10:32,2021-02-16 14:00:43,closed,fixing documents,"- [ ✓] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)

While going through the documentation on https://plotly.com/python/colorscales/ I realised that this parameter ```color_continous_midpoint``` does not exist. This was a typo for ```color_continuous_midpoint```.  
While fixing this I noticed a few other misspelt words. So I made a little NLP project for myself and wrote a script which would print all misspelt words to a file. I then went through the spellings and  corrected them manually.",3,7,[]
78,568016769,3063,14579099,2021-02-05 01:12:21,2021-04-22 00:19:39,closed,Update dot-plots with mislabeled data,"The dot plot documentation swapped the labels for men's and women's salaries in the dataset. This reflects the earning disparity in the second plot.

### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

",1,1,[]
79,567386155,3062,14579099,2021-02-04 06:57:02,,open,Update _dendrogram.py,"cleaning

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",4,1,[]
80,567329884,3061,14579099,2021-02-04 04:43:54,,open,Update _dendrogram.py,"Little bug

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",1,1,[]
81,557760519,3034,14579099,2021-01-19 22:06:42,,open,Fix wrong doc for 3d volume plot opacityscale,"This fixes a small bug in the documentations of 3d volume plots opacityscale.
In the docs the scale is wrongfully described as specifying opacities from -limit to +limit. 
The implementation however wants opacity values from 0 to 1

### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch",0,1,[]
82,556849551,3030,14579099,2021-01-18 14:32:23,2021-06-14 15:11:26,closed,upgrade js to pre-2.0,"WIP: upgrading plotly.js to master, which previews most of the 2.0 changes.",0,4,[]
83,556359553,3029,14579099,2021-01-17 14:54:50,2021-01-19 13:39:25,closed,Fixing the browser rendering issue for chrome and chromium browsers,"... by modifying the ""using"" argument passed to open_html_in_browser method to be a tuple of strings.

This PR is to resolve this issue https://github.com/plotly/plotly.py/issues/2348.

File changes include
plotly.py/packages/python/plotly/plotly/io/_base_renderers.py
plotly.py/packages/python/plotly/plotly/io/_renderers.py

There would be no changes to documentation as the existing examples and tests would still apply, just the underlying implementation was changed to perform string matching.",0,2,[]
84,554353080,3022,14579099,2021-01-13 17:39:46,2021-01-14 02:04:13,closed,Pandas and Numpy datetime serialization fixes,"Should close https://github.com/plotly/plotly.py/issues/2518
 - Add support to `PlotlyJSONEncoder` for `numpy` `datetime64` arrays (1 or more dimensions) (050dd8a)
 - Add support to `DataArrayValidator` for homogeneous pandas DataFrames of datetime values (46d6a59)

cc @nicolaskruchten ",2,5,[]
85,553517675,3021,14579099,2021-01-12 14:50:48,2021-01-12 14:52:22,closed,Small change to packaging of  extension,Follow up to https://github.com/plotly/plotly.py/pull/3016 to address @jasongrout's comments.,0,2,[]
86,553516207,3020,14579099,2021-01-12 14:48:44,2021-01-12 14:54:22,closed,volume was spelled volum,"added the e onto volum so it spelled volume.

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",1,1,[]
87,553479211,3018,14579099,2021-01-12 14:02:20,2021-01-12 14:33:41,closed,reuse x/y/z/base in hover data,Closes https://github.com/plotly/plotly.py/issues/2934 and partly addresses some of the cases reported in https://github.com/plotly/plotly.py/issues/2518 but does not address https://github.com/plotly/plotly.py/issues/3019,0,2,[]
88,552948851,3016,14579099,2021-01-11 19:01:49,2021-01-11 19:07:25,closed,support JupyterLab 3 in extensions,Closes https://github.com/plotly/plotly.py/issues/2994,16,1,[]
89,552857882,3014,14579099,2021-01-11 16:18:55,2021-01-11 17:13:28,closed,"Extra tests, bugfix and finish histnorm labelling","This PR moves forward some of the work from https://github.com/plotly/plotly.py/pull/3011 into its own PR, and also closes #3010",0,2,[]
90,551957734,3012,14579099,2021-01-08 21:02:02,2021-06-17 13:06:20,closed,JSON encoding engine instrumentation,"This PR should not be merged!

This PR is instrumented for testing the new JSON encoding engine being introduced in https://github.com/plotly/plotly.py/pull/2955#issuecomment-756273237. Idea from @nicolaskruchten in https://github.com/plotly/plotly.py/pull/2955#issuecomment-756273237.

With this branch, every call to `to_plotly_json` performs JSON encoding with all three engines, then decodes the result and checks that identical dictionaries are produced.  When they are not identical, and exception is raised.

Locally, nearly all of the documentation examples work. The two exceptions are `imshow` and `ml-tsne-umap-projections`. Both of these fail due to difference in how the orjson encoding handles floating-point numbers with precision less than 64 bits.

When encoding a `float32` numpy array, the `legacy` and `json` encoders will convert this to a list of regular Python 64-bit floats before encoding them.  This results extra digits in the JSON representation. In contrast, the `orjson` encoder will only write out the number of digits corresponding to the original 32-bit values.
",6,18,[]
91,551807642,3011,14579099,2021-01-08 15:46:16,2021-08-03 18:55:41,closed,PX ECDF and KDE ,"Resolves #3010 and supersedes https://github.com/plotly/plotly.py/pull/2765 by adding ECDF to PX itself, as well as KDE.",1,3,[]
92,546580945,2997,14579099,2020-12-29 17:56:45,,open,Trendline options,"Refactors trendline code to extract a common interface (an ugly one!), including an `options` dict, which enables new functions like rolling mean (needed an argument for the window size at least!) and OLS options like `log_x` and `add_constant`, plus a configurable LOWESS `frac` parameter.

## Code PR

- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [x] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

",0,22,[]
93,546576300,2996,14579099,2020-12-29 17:41:23,2020-12-29 17:55:43,closed,Add missing whitespaces in ImportError message.,"## Minor PR

I stumbled across the error myself and it read ""ImportError: orca and psutil are required to use the `sphinx-gallery-orca` renderer. See https://plotly.com/python/static-image-export/ for instructions **onhow** to install orca. Alternatively, you can use the **`sphinx-gallery`renderer** (note that png thumbnails can only be generated **withthe** `sphinx-gallery-orca` renderer).""",1,1,[]
94,544423757,2990,14579099,2020-12-22 23:34:29,2020-12-23 19:51:20,closed,"docs: fix simple typo, specfic -> specific","There is a small typo in contributing.md.

Should read `specific` rather than `specfic`.


Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md",1,1,[]
95,544267299,2989,14579099,2020-12-22 17:39:38,2020-12-23 19:55:10,closed,Fix histogram labels,Closes #2986,0,2,[]
96,542147963,2984,14579099,2020-12-17 21:46:42,2020-12-17 22:06:31,closed,Fix typo in hover-text-and-formatting doc,"""deceptively-power"" should be ""deceptively-powerful""

### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [x] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [x] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [x] Every new/modified example is independently runnable
- [x] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [x] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [x] The random seed is set if using randomly-generated data in new/modified examples
- [x] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [x] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [x] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [x] Data frames are always called `df`
- [x] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [x] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [x] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [x] `fig.show()` is at the end of each new/modified example
- [x] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [x] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)",1,1,[]
97,539486733,2974,14579099,2020-12-14 14:18:24,2021-04-29 00:02:51,closed,Handle pathlib.Path in write_image,"Closes #2753

## Code PR

- [X] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [x] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).
",19,5,[]
98,536303263,2967,14579099,2020-12-10 22:32:32,2020-12-10 22:49:23,closed,Add Dash Snippet to t-sne page,"<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",1,1,[]
99,534689428,2962,14579099,2020-12-08 19:59:53,2020-12-08 20:00:00,closed,try to pin nbconvert,"<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",0,1,[]
100,534564746,2961,14579099,2020-12-08 16:21:48,2021-05-31 01:34:37,closed,Specify version of plotly.js in CDN URL,"## Summary of Changes
1. To prevent version changes of `plotly.js` breaking old html exports, these exports now included a version URL that matches `plotly.py`'s bundled `plotly.js`. This is the default behaviour of `include_plotlyjs='cdn'`.
2. `include_plotlyjs='cdn-latest'` added to preserve original behaviour.
3. Refactored tests and code that rely on the `plotly.js` URL to use a function in `io/_utils.py`

## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] ~~For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).~~ Not Applicable
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [x] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).
",10,8,[]
101,533956084,2959,14579099,2020-12-07 21:22:19,2020-12-10 15:02:42,closed,Added 11 new Dash Snippets to Python Docs,"- renderers
- builtin-colorscales
- interactive-html-export
- network-graphs
- multiple-axes
- mapbox-county-choropleth
- knn-classification
- roc-and-pr-curves
- pca-visualization
- troubleshooting
- horizontal-vertical-shapes

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",0,2,[]
102,533578547,2958,14579099,2020-12-07 10:53:33,2020-12-07 13:54:08,closed,Update kaleido instructions to install from conda-forge,"Now that Kaliedo is on conda-forge, new versions will only be published there. This PR updates the installation instructions in the README and docs to install from conda-forge.

cc @nicolaskruchten because I don't remember the doc deployment sequence :slightly_smiling_face: ",1,1,[]
103,533243491,2957,14579099,2020-12-06 18:27:22,2020-12-07 14:14:24,closed,improved PX defaults,"
## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.",2,1,[]
104,533087212,2955,14579099,2020-12-05 20:24:20,2021-05-27 19:43:34,closed,JSON encoding refactor and orjson encoding,"## Overview
Initial implementation of the idea from https://github.com/plotly/plotly.py/issues/2944 of refactoring the JSON encoding pipeline and optionally performing JSON encoding with orjson.

orjson is impressively fast, and it includes built-in support for numpy arrays which is many times faster than the current approach of converting them to lists before encoding.

Also, orjson automatically converts all non-finite values to JSON `null` values, so we don't need workarounds like re-encoding as discussed in https://github.com/plotly/plotly.py/pull/2880.

## JSON config object
To configure the JSON encoding engine, this PR adds a `plotly.io.json.config` object that mirrors `plotly.io.orca.config` and `plotly.io.kaleido.config`.  Currently the only option is `default_engine` which can be set to ""json"" for the current encoder based on `PlotlyJSONEncoder` or ""orjson"" which is pretty much always much faster.

The `to_json`/`write_json` also provide an engine argument to override the default.

To try it out, install orjson with pip
```
$ pip install orjson
```
or conda
```
$ conda install -c conda-forge orjson
```
Then configure plotly to use it with
```python
import plotly.io as pio
import numpy as np
import plotly.graph_objects as go
```

## Quick timing example
Then time the encoding speed
```python
N = 1000000
dtype = ""float32""
x = np.random.randn(N).astype(dtype)
y = np.random.randn(N).astype(dtype)
size = np.random.rand(N).astype(dtype) * 10
opacity = np.random.rand(N).astype(dtype)
fig = go.Figure(data=[go.Scatter(x=x, y=y, marker_size=size, marker_opacity=opacity)])
```

```python
%%timeit
res1 = pio.to_json(fig, engine=""legacy"")
```
```
2.06 s ± 18.5 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
```

```python
%%timeit
res1 = pio.to_json(fig, engine=""orjson"")
```
```
169 ms ± 2.12 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
```

In this large figure case of encoding a figure with four one-million element arrays, the orjson encoding is 12x faster on my machine!

## Relationship to base64 encoding
This approach is fully compatible with the base64 encoding work in https://github.com/plotly/plotly.py/pull/2943. I think we should focus on this approach first because there are substantial performance gains to be had without changing the schema of the resulting JSON and (hopefully) without requireing changes in Plotly.js

After this is merged, we can add base64 encoding on top of it for additional performance improvements.

## Correctness testing
In addition to adding a new test suite, this PR has been tested against all of the documentation figures using the slightly modified instrumentation branch at https://github.com/plotly/plotly.py/pull/3012.  This branch executes all json encoding requests using both the `json` and `orjson` encoders, and checks that the encoded string are identical.

There are two documentation examples that fail this test: `imshow` and `ml-tsne-umap-projections`. Both of these fail due to difference in how the orjson encoding handles floating-point numbers with precision less than 64 bits (see next section)

### Numpy floating point preceision
The ""json"" encoder handles numpy arrays by first converting them to lists, and then encoding the lists.  All numpy floating point types are converted to 64-bit python float values.  For floating point numpy arrays with less than 64 bit precision, converting them to 64 bits before encoding artificially increases the precision of the values in the array, but this is really the only option.

The orjson encoder accepts numpy arrays directly, and it will output the appropriate amount of decimal places for precision of the input array. 

So the encoded JSON values between the legacy `json` encoder and the `orjson` encoder will not agree when encoding floating point numpy arrays with less than 64-bit precision.  This is the only known discrepancy.

## Benchmarking
To compare the performance of the `orjson` encoder against the legacy `json`, https://github.com/plotly/plotly.py/pull/3012 records the encoding time for both encoders and writes the results to a file.  Here are plots of the relative timing results across all of the figures in the plotly.py documentation

Note that ``length` here is the number of characters is the encoded JSON string

![newplot (11)](https://user-images.githubusercontent.com/15064365/105531041-bb3be500-5cb6-11eb-9399-ec08549f3f81.png)

![newplot (12)](https://user-images.githubusercontent.com/15064365/105531068-c1ca5c80-5cb6-11eb-8a6a-d4a1cb0a18cd.png)

the `orjson` encoder is almost always faster (up to 40x in one case).  The handful of cases that have equivalent or slower performance are cases that include values that are not natively supported by orjson (e.g. `pd.Timestamp` or `PIL.Image` objects), and that don't have sizable numpy arrays.

All of the cases where it's slower run in less than half a *millisecond*.

My conclusion is that defaulting to `orjson` when the package is installed is a safe default that will almost always improve performance.

## TODO
 - [x] The current tests are pretty much passing with the new encoder, but before merging I want to add some more tests specifically around JSON encoding, especially with dates and datetimes. And make sure that all of the encoding engines are tested.
",19,49,[]
105,532098568,2953,14579099,2020-12-03 20:30:03,2020-12-04 14:09:40,closed,sphinx-gallery fix: don't save plotlyjs in every figure,,2,3,[]
106,531814255,2952,14579099,2020-12-03 14:23:57,2020-12-03 15:10:41,closed,do not repeat axes labels with facets,,0,1,[]
107,531416853,2951,14579099,2020-12-03 02:46:35,2020-12-03 15:11:55,closed,set default templates to autotypenumbers=strict,,0,2,[]
108,530491722,2949,14579099,2020-12-01 18:26:12,2020-12-02 16:13:44,closed,Add 6 new dash snippets to python docs,"Those are the 6 most popular docs pages:
- bar-charts
- getting-started
- line-charts
- line-and-scatter
- plotly-express
- axes",0,1,[]
109,529147714,2943,14579099,2020-11-29 18:04:01,,open,WIP: base64 encoding for numpy arrays,"## Overview
This is a WIP PR to support encoding n-dimensional numpy arrays using a base64 encoding convention rather than as lists during JSON serialization.

This requires a corresponding plotly.js WIP PR at https://github.com/plotly/plotly.js/pull/5230, but I've committed a `plotly.js.min` bundle from that PR so that folks can test this branch without building plotly.js.

## Activation with future flag
In order to trigger base64 encoding, you need to import the `b64_encoding` future flag before import plotly. e.g. 
```python
from _plotly_future_ import b64_encoding
import plotly.express as px
```

## Encoding Format
When activated, numpy arrays will be serializaed to JSON objects with `dtype`, `shape`, and `bvals` keys.  `dtype` is a numpy compatible `dtype` string, shape can be a scalar integer (for a 1-d array) or a list of N integers (for an N-d array).  `bvals` is a base64 encoded string representing the underlying binary array buffer.

Note that N-d arrays are arranged in row-major ordering (Like C and Python), not column major (like Fortran and MATLAB). 

Here is an example of how the array `np.arange(3, dtype=""int16"")` is encoded:
```
{
  ""bvals"": ""AAABAAIA"",
  ""dtype"": ""int16"",
  ""shape"": [3]
}
```

When this new branch of plotly.js encounters this, it will decode the base64 string in a contiguous `ArrayBuffer` and wrap that with a `Int16Array` typed array with value `new Int16Array([0, 1, 2])`.

Multi dimensional arrays are also supported. For example, `np.arange(6, dtype=""float32"").reshape(2, 3)` will be encoded into:

```
{
  ""bvals"": ""AAAAAAAAgD8AAABAAABAQAAAgEAAAKBA"",
  ""dtype"": ""float32"",
  ""shape"": [2, 3]
}
```

Plotly.js will then decode this into a contiguous `ArrayBuffer`. Then two `Float32Array` instances will be created as views onto this `ArrayBuffer` (no copy is performed here), and these will be nested inside a regular `Array`.  The final decoded value will be equal to:

`[new Float32Array([0, 1, 2]), new Float32Array(3, 4, 5)]`

## Limitations

`int64` and `uint64` arrays are not supported (they will still be converted to lists). This is because there are no native `Int64Array` and `Uint64Array` instances in JavaScript.   Interesting side note here is that the reason for these omissions is that, under the hood, JavaScript represents all numbers as 64-bit floats, so it can only faithfully represent integers up to `2^53 - 1`.

## Call for help with QA

I've interactively played around with `scatter`, `scattergl`, `scatter3d`, `heatmap`, `image`, `isosurface`, and `volume` traces and I think most everything is working there. But there are surely things that aren't currently working so I'd appreciate any early QA help that folks could pitch in with.

In particular, we should check that all properties that support arrays work properly with these base64 encoded array specifications.  Feel free to add comments to this PR with any issues you run into. Remember to enable the feature with the future flag as described above!

## Call for help with benchmarking

I haven't done any rigorous benchmarking yet, but early notebook `%timeit` results look promising. For figures that involve arrays in the tens of thousands to a couple of millions of elements, I've been seeing json encoding speedups of ~2x to ~20x. This is measuring the `fig.to_json()` method in isolation.

It would also be nice to measure whether there is a speedup on the JavaScript side from the start of decoding process to the display of a figure, but I don't know off hand how to measure this. So any help here would be greatly appreciated.

One thing to note is that with this paradigm, there is a substantial encoding time and space savings associated with lowering the precision of arrays.  For a lot of plots, dropping down to `float32` or `float16` won't change the appearance and will encode substantially faster than `float64`.

I would especially appreciate json encoding benchmarks on figures that folks have built for real world use cases. And if there are performance regressions anywhere, it would be good to be aware of that.

## Where rendering should work
After activating the future flag, this branch can be tested in these contexts:

 - classic notebook
 - standalone html files (`fig.write_html`)
 - Kaleido image export (`fig.write_image(engine=""kaleido"")`)

It will not work (yet) in JupyterLab, vscode, or nteract because they supply there own version of plotly.js instead of using the one bundled with plotly.py

## Testing with Dash
To test this branch with Dash, copy the `plotly.min.js` file from `packages/python/plotly/plotly/package_data/` to the `assets` folder of your Dash application. And again, make sure to activate the future flag described above before importing `plotly` or `dash`.

Note, there may be adverse impacts on non-`Graph` dash components that currently accept numpy/pandas data structures.  Please post a comment here if you run into anything in dash that breaks when this feature is active.

## CCs

CCing folks who have expressed interest in this feature in the past:

@nicolaskruchten @emmanuelle @archmoj @almarklein @chriddyp @alexcjohnson @cboulay @Marc-Andre-Rivet 

CCing folks involved with other plotly.js wrappers as support for this base64 encoding could be added there as well once this plotly.js update is merged and released.  If you want to play around with this in your own wrapper, you can grab the corresponding `plotly.min.js` file from `packages/python/plotly/plotly/package_data/` directory of this PR.

@rpkyle @sglyon @igiagkiozis @kMutagene @waralex

Thanks!",21,6,[]
110,528729141,2939,14579099,2020-11-27 17:42:25,,open,use master branch to push updates to plotly master,"- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [x] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).
",0,4,[]
111,528340808,2937,14579099,2020-11-27 00:41:18,2020-11-30 18:49:19,closed,Add 5 new dash snippets,"- creating-and-updating-figures
- tick-formatting
- distplot
- filled-area-plots
- ml-regression

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",0,1,[]
112,526536083,2932,14579099,2020-11-24 14:54:56,,open,add colormodel parameter into px.imshow and test,"- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [x] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).
",8,4,[]
113,525803725,2927,14579099,2020-11-23 15:19:26,2020-11-23 18:26:32,closed,add some additional jupyter instructions,"small change to jupyter instructions
- ref to multi-kernel setup in getting-started.md
- verbose ""what goes where"" added in troubleshooting.md

### Documentation PR

- [X] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [X] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch",1,1,[]
114,525163648,2923,14579099,2020-11-21 17:53:53,2020-11-23 13:06:39,closed,"enable faceting for geo, geojson everywhere possible, text/symbols fo…","…r scatter_geo

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",0,5,[]
115,524919830,2921,14579099,2020-11-20 19:55:16,2020-11-26 02:26:34,closed,honor zmin/zmid/zmax in annotated_heatmap font colors,"Alternative to https://github.com/plotly/plotly.py/pull/2892 to close https://github.com/plotly/plotly.py/issues/2187, cc @bensdm.

This is a more targeted fix for the zmin/zmax problem specifically, and doesn't address the difficulty of light colors in the middle range of a diverging colorscale.",0,3,[]
116,524372330,2919,14579099,2020-11-20 02:53:02,2020-11-20 14:31:48,closed,5 new dash snippets,"- animations
- candlestick-charts
- figure-structure
- plot-data-from-csv
- sankey-diagram

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",0,1,[]
117,523954388,2917,14579099,2020-11-19 13:28:36,2020-11-19 14:43:58,closed,changelog entries,,1,1,[]
118,522744720,2912,14579099,2020-11-17 22:25:51,2020-11-19 17:20:51,closed,Add 5 more Dash snippets,"- 3d-mesh
- 3d-scatter-plots
- figure-labels
- heatmaps
- shapes

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",0,1,[]
119,522691587,2911,14579099,2020-11-17 20:36:17,2021-04-22 11:45:39,closed,Replaced 'retrying' dependency with 'tenacity' in plotly package,"The plotly dependency 'retrying' is no longer being maintained. The currently-maintained fork, 'tenacity', is compatible with both Python 2 and 3, and is feature-compatible (although not API compatible). This pull request changes the few instances where the retrying package is used in plotly to use tenacity instead. 

One motivation for this is to get plotly working in Pyodide (a means developed by Firefox to run Python in the browser, which currently supports numpy, pandas, matplotlib, and a number of other datascience packages). 'Retrying' seems to be incompatible with Pyodide.

closes https://github.com/plotly/plotly.py/issues/2907",18,10,[]
120,521961638,2908,14579099,2020-11-16 21:13:52,2020-11-17 15:12:52,closed,Add 5 more Dash Snippets,"Adding Dash snippets to the following pages:

- histograms
- legend
- subplots
- text-and-annotations
- time-series",0,1,[]
121,521749412,2906,14579099,2020-11-16 15:45:38,2020-11-23 14:50:37,closed,add note on jupyter multikernel,"Very small doc change:
- explained that in multi-kernel jupyter setups, the default kernel needs plotly jupyterlab extension (as per existing docs), and the processing kernel needs plotly + nbformat
- noted two failure scenarios if this isn't done correctly (blank figure or error asking to install `nbformat`)",3,1,[]
122,520231682,2900,14579099,2020-11-13 00:00:09,2020-11-17 18:32:03,closed,Dev,"<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",0,3,[]
123,520220013,2898,14579099,2020-11-12 23:26:04,2020-11-16 14:58:38,closed,Add 5 more Dash Snippets,"Adding Dash snippets to the following pages:
* marker-style
* setting-graph-size
* table
* colorscales
* static-image-export",0,1,[]
124,520218120,2897,14579099,2020-11-12 23:21:31,2020-11-16 20:23:18,closed,Descriptive error when subplot spacing impossible,"Indicates range of values that are accepted.

closes #2556
and closes #2026 ",3,3,[]
125,519492434,2895,14579099,2020-11-11 22:44:56,2020-11-12 14:42:40,closed,"Python Docs Dash Snippets: hover-text-and-formatting, pie-charts, choropleth-maps, box-plots, discrete-color","<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",1,2,[]
126,519478505,2894,14579099,2020-11-11 22:09:43,2020-11-19 02:28:57,closed,Selector accept int string,closes #2891 ,6,11,[]
127,519439944,2893,14579099,2020-11-11 20:42:07,2020-11-20 17:36:58,closed,"add width, height, and config to .show docstring","<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [x] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
For #2653 - added width, height, and config to docstring of `figure.show()`.

@nicolaskruchten - I think I edited the docstrings properly, but let me know if not! I saw in one file the note about the automatic docstring generation, but couldn't find the file referenced. ",1,1,[]
128,519382871,2892,14579099,2020-11-11 18:43:01,,open,fix annotations font color,"Correct the font annotation color when using zmin and zmax or zmid https://github.com/plotly/plotly.py/issues/2187
![image](https://user-images.githubusercontent.com/29406515/98850989-e3f16400-2455-11eb-9cdf-d2f60c58f3f3.png)
![image](https://user-images.githubusercontent.com/29406515/98851037-f53a7080-2455-11eb-8cd7-06102695598d.png)
![image](https://user-images.githubusercontent.com/29406515/98851055-fd92ab80-2455-11eb-9493-2a5bf6479002.png)
",2,5,[]
129,518813582,2890,14579099,2020-11-10 22:57:06,2020-11-11 14:29:41,closed,Add Dash Snippet to discrete-color,"A lower impact addition compared to https://github.com/plotly/plotly.py/pull/2884



<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->
",2,1,[]
130,518063707,2884,14579099,2020-11-09 21:57:17,2020-11-12 15:27:54,closed,[ON HOLD] Add paragraph and IFrame about Dash for popular docs pages,"<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
- [ ] For a new feature or a change in behaviour, I have updated the relevant docstrings in the code to describe the feature or behaviour (please see the doc checklist as well).

-->

Spiritual successor to https://github.com/plotly/plotly.py/pull/2859

In this PR, I have added a snippet for the following doc pages:
* https://plotly.com/python/bar-charts
* https://plotly.com/python/getting-started
* https://plotly.com/python/line-charts

> EDIT 11/10/20: Putting this on hold, let's first merge https://github.com/plotly/plotly.py/pull/2890 before continuing this one
",0,1,[]
131,517365641,2882,14579099,2020-11-08 20:29:59,2020-11-16 14:53:40,closed,adding Turbo colorscale and continuous swatches,"Closes #2656 
",1,3,[]
132,516965646,2880,14579099,2020-11-06 20:30:41,2020-11-17 13:10:58,closed,accelerate plotly JSON encoder for numpy arrays without nans,"This is a proof of concept PR, I need to add a bunch of tests to be sure it behaves well for numpy arrays of different types, but the idea is to remove the encoding-decoding-reencoding process when JSON-serializing a numpy array without nans or infs (which is the reason why there is this 3-step process).

For large data arrays (for example a 1000x1000 array) there is a large performance gain. For example for
```python
from time import time
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.utils import PlotlyJSONEncoder
import json
img = np.random.randint(255, size=(1000, 1000)).astype(np.uint8)
fig = go.Figure(go.Image(z=img))
t1 = time()
_ = json.dumps(fig, cls=PlotlyJSONEncoder)
t2 = time()
print(t2 - t1)
```
the proposed change results in a 2.5x performance gain on my machine (0.11 s instead of 0.27). The performance gain is interesting in Dash apps in particular.

@jonmmease what do you think of this?",12,10,[]
133,516868100,2879,14579099,2020-11-06 16:57:46,2020-11-17 14:30:59,closed,move array_to_imagestr function to be part of public API,"Solves #2863.

Now you can do 
`from plotly.utils import array_to_imagestr`

However, `plotly.utils` is not a subpackage but just a module so it does not appear in the API doc. It'd be easy to change this to use a subpackage like what was done for `plotly.colors` when working on the API doc. One the other hand it's enough for me if the function appears in image-related docs of plotly.py and dash so I won't push hard for this change.

",1,3,[]
134,513299631,2868,14579099,2020-10-30 21:43:56,,open,Prototype demonstrating possible px.overlay,"NOT meant to be merged like this, just showing what such a call might look like.
Also see #2648 ",0,8,[]
135,513145139,2866,14579099,2020-10-30 17:04:07,2020-11-05 15:44:34,closed,`go.Figure.set_subplots`,"Closes #2405 

This is now possible

```python
import plotly.graph_objects as go
figgy=go.Figure().set_subplots(2,3)
```
and `figgy` is equivalent to what is given by:

```python
from plotly.subplots import make_subplots
figgy=make_subplots(2,3)
```

## Code PR

- [ x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
",1,5,[]
136,512579794,2862,14579099,2020-10-29 21:26:22,2020-11-04 21:37:33,closed,selector argument accepting function now correctly documented,closes  #2861 ,2,2,[]
137,511612960,2859,14579099,2020-10-28 14:58:11,2020-11-05 21:42:44,closed,[WIP] Testing iframe in ML docs,PLEASE DO NOT MERGE,2,1,[]
138,508481701,2855,14579099,2020-10-22 18:32:25,2020-10-23 01:42:18,closed,Exclude totally empty subplots,"closes #2854 
We should be able to select subplots containing anything, and also added is the feature to select subplots containing any combination of traces, shapes, annotations or layout_images.",2,5,[]
139,507631381,2852,14579099,2020-10-21 15:20:22,2020-10-21 18:49:39,closed,"Fix error in ""Multiclass ROC Curve""","<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",0,1,[]
140,506923380,2849,14579099,2020-10-20 15:57:10,2020-10-20 17:29:49,closed,Fix missing commit info in auto-generated archives,"When the repository was restructured to what it is now, the
`.gitattributes` file was not updated to reflect the new paths. As a
result, the current commit information is no longer inserted into
`ploty/_version.py` during automatic tarball exports (as done by
Github). With no information being provided implicitly by Git itself,
this means the version information is entirely unavailable to the build
system at `packages/python/ploty/setup.py`; this in turn results in a
reported version number of `0+unknown` for builds from these archives.

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",1,1,[]
141,506698136,2848,14579099,2020-10-20 11:04:41,,open,Display html offline patch,"<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",1,20,[]
142,506243106,2846,14579099,2020-10-19 20:00:50,,open,"Default facet_{row,col}_spacing now based on fraction","Computed as some fraction divided by the number of rows or number of
columns respectively.

Calls for some discussion as I have not used it in all places where a default might be useful, I have just tried to close #2026 . ",3,2,[]
143,506107809,2844,14579099,2020-10-19 16:22:09,2020-10-20 15:43:56,closed,Figure select function selector,"Closes #2629 and more.
Any function calling `BaseFigure._selector_matches` can now pass a function for the `selector` argument. This function is called on each object and if it returns True, then that object is included in the selection.",4,7,[]
144,506096408,2843,14579099,2020-10-19 16:03:36,2020-11-16 20:23:51,closed,Deep magic underscore error messages rebase,"See https://github.com/plotly/plotly.py/issues/2072

Rebase of 

https://github.com/plotly/plotly.py/pull/2824",24,26,[]
145,505880270,2842,14579099,2020-10-19 11:01:17,,open,--auto-servernum argument is deprecated,"According to ""xvfb-run"": --auto-servernum - try to get a free server number, starting at --server-num (deprecated, use --auto-display instead).

Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [X] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [X] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [X] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [X] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
",1,1,[]
146,505125875,2840,14579099,2020-10-16 22:11:44,2020-10-22 15:03:50,closed,"`add_{hline,vline,hrect,vrect}` and `add_{shape,image,annotation}` to multiple facets, squashed",Closes #2141 and closes #2140,10,8,[]
147,504918828,2838,14579099,2020-10-16 15:12:58,2020-10-16 17:24:21,closed,Make plotly.py's validator compatible with plotly.js 1.57.0 which now allows domain referenced axis references,This just involves adding ' domain' to `EnumeratedValidator.build_regex_replacement`,10,3,[]
148,504401896,2836,14579099,2020-10-15 21:37:14,2020-10-20 15:44:00,closed,`select_traces` `selector` argument can now be a function,closes #2629,1,1,[]
149,504154610,2833,14579099,2020-10-15 14:37:36,2020-11-23 02:09:04,closed,update px colormodel parameter and pytest,"## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
**added parameter instructions in docstring of imshow function**
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
",4,0,[]
150,503460107,2832,14579099,2020-10-14 15:30:55,2020-10-14 23:06:40,closed,publish IPYNB and strip nbconvert colors,,0,2,[]
151,501884213,2828,14579099,2020-10-12 23:49:05,,open,Remove KeyError handling in _Dendrogram.get_color_dict,"`new_old_color_map` is hardcoded, and `default_colors` has a minimal key set that includes all the values.

Drive-by: simplify the overlay of `rgb_colorscale` onto `default_colors`.

Closes #2806

## Code PR

- [X] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
",2,1,[]
152,501177938,2826,14579099,2020-10-11 17:51:41,2020-11-20 17:16:36,closed,"Correct ""Y Axis Title"" label","<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",1,1,[]
153,501015228,2825,14579099,2020-10-10 18:04:56,2020-11-20 17:17:10,closed,Minor update to waterfall-charts.md,"Spotted some minor issue while reading about waterfall charts:
- link to doc could be more precise (`[decreasing, increasing, and total](https://plotly.com/python/reference/waterfall/#waterfall-increasing)`)
- small typo
- inconsistent single and double quote in an example",2,1,[]
154,500819874,2824,14579099,2020-10-09 21:04:26,2020-11-04 15:34:53,closed,Deep magic underscore error messages,"Addresses https://github.com/plotly/plotly.py/issues/2072
Not finished yet, just putting up so others can review and comment.
",4,15,[]
155,500698516,2823,14579099,2020-10-09 16:26:16,2020-11-20 17:17:31,closed,Update sankey-diagram.md,"I think this was an error? 
the third option in source should be A1 if it is by label indices.

Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [* ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [* ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [*] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.


",1,1,[]
156,500454682,2820,14579099,2020-10-09 09:09:36,2020-10-09 12:49:58,closed,Fix typo in imshow docs.,"I stumbled upon this typo while checking out [imshow](https://plotly.com/python/imshow) and #2746 :)

@emmanuelle @nicolaskruchten ",1,1,[]
157,500325513,2819,14579099,2020-10-09 03:45:41,2020-10-09 12:51:33,closed,Fixed Kaggle link!,"Kaggle kernels link was broken. Now it is fixed!!

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

closes #2750
",1,1,[]
158,500102894,2817,14579099,2020-10-08 18:18:58,2020-10-08 18:22:24,closed,Update README.md,"Corrected syntax mistake - unneeded 'the'.

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",1,1,[]
159,499810472,2814,14579099,2020-10-08 10:12:33,2020-11-17 10:08:39,closed,Update deprecated method in subplots docs,"<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",0,1,[]
160,499761919,2813,14579099,2020-10-08 08:49:05,,open,Import problem does not work in Jupyter lab,"Should this be 'uninstall' instead of 'remove'?

`$ pip remove plotly` gives:
```
ERROR: unknown command ""remove""
```
in JupyterLab -> Terminal v2.2.8 on Windows 10.

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",0,1,[]
161,498716951,2809,14579099,2020-10-06 17:33:33,2020-11-19 02:11:42,closed,Add pxlinks,"Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

",2,32,[]
162,496882334,2802,14579099,2020-10-02 12:41:03,,open,DOC: Add histogram category order example (#2779),"### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [x] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [x] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [x] Every new/modified example is independently runnable
- [x] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [x] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [x] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [x] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [x] Data frames are always called `df`
- [x] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [x] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [x] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [x] `fig.show()` is at the end of each new/modified example
- [x] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [x] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

This PR resolves #2779",0,2,[]
163,496683167,2801,14579099,2020-10-02 05:10:44,2020-10-02 08:35:56,closed,Update README.md,"<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",1,1,['spam']
164,496251634,2799,14579099,2020-10-01 13:16:24,2020-10-01 13:16:43,closed,Doc prod,"<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",0,15,[]
165,491978041,2792,14579099,2020-09-23 18:56:10,2020-09-24 01:53:19,closed,Update sankey-diagram.md: fix reference link,Hi! This is just fixing a broken link from a typo with an extra `/`.,1,1,[]
166,487216477,2771,14579099,2020-09-15 11:03:37,2021-04-23 13:47:43,closed,Fix selection of histograms with multiple traces,"This change addresses the selection behaviour of histograms with more than one trace and fixes a bug introduced in my last change #2711.

In the previous change, the point_indexes were sorted before being returned. This is not a problem when there is only one trace, however, with multiple traces, the indices of the values get mixed and result in incorrect behaviour.

So for example consider two traces with a random distribution and both traces are being selected. Firstly, all the indices are combined into one large array with the corresponding trace_indices [0,0,…,0,0,1,1 …,1,1].
Then the index-array is sorted and all the indices get reordered while the trace information is unchanged, which causes indices being assigned to the incorrect traces later on.

A quick solution is not sorting the array, which results in correct behaviour. This has the effect that the results are also not sorted in Python in each trace. Please let me know if this is an issue.

![Screenshot 2020-09-15 at 12 57 24](https://user-images.githubusercontent.com/37695050/93202529-1e3ecd80-f753-11ea-9043-7d528371d6e7.png)",9,3,[]
167,486718171,2769,14579099,2020-09-14 15:51:55,2020-09-14 17:28:05,closed,Fix wrong slicing in performance improvement example,"Fix wrong slicing in performance improvement example and remove unused variable

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",1,1,[]
168,486259694,2768,14579099,2020-09-13 23:59:33,2020-09-14 14:53:53,closed,add mapbox argument source attribution to example in docs,"#1965


Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [x] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [x] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [x] Every new/modified example is independently runnable
- [x] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [x] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [x] The random seed is set if using randomly-generated data in new/modified examples
- [x] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [x] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [x] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [x] Data frames are always called `df`
- [x] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [x] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [x] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [x] `fig.show()` is at the end of each new/modified example
- [x] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [x] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)
",1,1,[]
169,485775247,2767,14579099,2020-09-12 05:58:32,2021-04-22 00:23:43,closed,Bump node-fetch from 2.6.0 to 2.6.1 in /packages/javascript/plotlywidget,"Bumps [node-fetch](https://github.com/bitinn/node-fetch) from 2.6.0 to 2.6.1.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/bitinn/node-fetch/releases"">node-fetch's releases</a>.</em></p>
<blockquote>
<h2>v2.6.1</h2>
<p><strong>This is an important security release. It is strongly recommended to update as soon as possible.</strong></p>
<p>See <a href=""https://github.com/node-fetch/node-fetch/blob/master/docs/CHANGELOG.md#v261"">CHANGELOG</a> for details.</p>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href=""https://github.com/node-fetch/node-fetch/blob/master/docs/CHANGELOG.md"">node-fetch's changelog</a>.</em></p>
<blockquote>
<h2>v2.6.1</h2>
<p><strong>This is an important security release. It is strongly recommended to update as soon as possible.</strong></p>
<ul>
<li>Fix: honor the <code>size</code> option after following a redirect.</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/b5e2e41b2b50bf2997720d6125accaf0dd68c0ab""><code>b5e2e41</code></a> update version number</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334""><code>2358a6c</code></a> Honor the <code>size</code> option after following a redirect and revert data uri support</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/8c197f8982a238b3c345c64b17bfa92e16b4f7c4""><code>8c197f8</code></a> docs: Fix typos and grammatical errors in README.md (<a href=""https://github-redirect.dependabot.com/bitinn/node-fetch/issues/686"">#686</a>)</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/1e99050f944ac435fce26a9549eadcc2419a968a""><code>1e99050</code></a> fix: Change error message thrown with redirect mode set to error (<a href=""https://github-redirect.dependabot.com/bitinn/node-fetch/issues/653"">#653</a>)</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/244e6f63d42025465796e3ca4ce813bf2c31fc5b""><code>244e6f6</code></a> docs: Show backers in README</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/6a5d192034a0f438551dffb6d2d8df2c00921d16""><code>6a5d192</code></a> fix: Properly parse meta tag when parameters are reversed (<a href=""https://github-redirect.dependabot.com/bitinn/node-fetch/issues/682"">#682</a>)</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/47a24a03eb49a49d81b768892aee10074ed54a91""><code>47a24a0</code></a> chore: Add opencollective badge</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/7b136627c537cb24430b0310638c9177a85acee1""><code>7b13662</code></a> chore: Add funding link</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/5535c2ed478d418969ecfd60c16453462de2a53f""><code>5535c2e</code></a> fix: Check for global.fetch before binding it (<a href=""https://github-redirect.dependabot.com/bitinn/node-fetch/issues/674"">#674</a>)</li>
<li><a href=""https://github.com/node-fetch/node-fetch/commit/1d5778ad0d910dbd1584fb407a186f5a0bc1ea22""><code>1d5778a</code></a> docs: Add Discord badge</li>
<li>Additional commits viewable in <a href=""https://github.com/bitinn/node-fetch/compare/v2.6.0...v2.6.1"">compare view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a href=""https://www.npmjs.com/~akepinski"">akepinski</a>, a new releaser for node-fetch since your current version.</p>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=node-fetch&package-manager=npm_and_yarn&previous-version=2.6.0&new-version=2.6.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/configuring-github-dependabot-security-updates)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/plotly/plotly.py/network/alerts).

</details>",0,1,['dependencies']
170,485396202,2766,14579099,2020-09-11 19:39:16,2021-05-31 17:22:27,closed,assign Figure object to a variable,"<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",3,1,[]
171,484616545,2765,14579099,2020-09-11 04:00:35,,open,[WIP] Add ECDF plot to figure factory,"### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [x] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [x] Every new/modified example is independently runnable
- [x] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [x] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [x] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [x] Data frames are always called `df`
- [x] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [x] `fig.show()` is at the end of each new/modified example
- [x] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [x] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
",8,3,[]
172,483810810,2761,14579099,2020-09-10 12:52:11,2020-11-17 18:51:14,closed,Use x and y parameters for Image trace in imshow (for RGB or binary_string=True),"Closes #2758 

I could only get it to work for numerical data types, I don't think the `x0` and `dx` parameters of `go.Image` are meant to work with str or datetime types (could you please confirm @antoinerg?)

For example for the `airtemps` dataset used in the [imshow tutorial](https://plotly.com/python/imshow/#display-an-xarray-image-with-pximshow), this now works
![image](https://user-images.githubusercontent.com/263366/92730940-bfeda580-f374-11ea-8438-6719b36c8b82.png)
",6,6,[]
173,480820802,2752,14579099,2020-09-06 16:39:05,2020-09-07 16:19:39,closed,Added support for posix paths when saving.,"## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).

-->
",0,2,[]
174,480367223,2749,14579099,2020-09-05 01:56:49,2020-09-08 14:50:31,closed,fix PX timezone treatment,"Closes https://github.com/plotly/plotly.py/issues/2311 essentially by removing calls to `pd.Series.values`, which seems to always convert datetimes to UTC.

- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
",2,1,[]
175,478621701,2747,14579099,2020-09-03 13:10:47,2020-09-03 13:11:50,closed,CHANGELOG for imshow,,0,2,[]
176,478602467,2746,14579099,2020-09-03 12:39:18,2020-12-03 02:25:54,closed,Add facet_col and animation_frame argument to imshow,"Work in progress in order to represent a 3d images as a series of facetted slices or as an animation
![image](https://user-images.githubusercontent.com/263366/92115500-cdde7c00-edf2-11ea-8212-a51fa605122d.png)

![image](https://user-images.githubusercontent.com/263366/92380340-51f17600-f109-11ea-8a77-145172ef097f.png)


To do:
[x] Support xarrays and dimensions given by name instead of number
[x] Add some checks (what happens if facet_col is passed but the array is 2d etc) for various corner cases
[x] Add animation_frame argument following the same logic
[x] Write doc
[x] Make it possible to have at the same time `animate_frame` and `facet_col` so that it's possible to visualize 4d datasets.
[ ] If possible, address in parallel https://github.com/plotly/plotly.js/issues/3539 so that it's possible to have square pixels in subplots. Otherwise probably I'll just unmatch axes.

The PR should be rebased once #2691 is merged, for now it was branched off #2691's branch.",10,31,[]
177,476762562,2737,14579099,2020-09-01 02:19:34,2020-09-02 12:21:18,closed,full_figure_for_development,"Addresses the non-error portion of #1967

@jonmmease I'm not sure how to best test this or if such a trivial function is worth a test... ?",4,7,[]
178,475296018,2730,14579099,2020-08-28 09:30:51,2020-09-03 02:16:32,closed,distplot: only compute traces that will be shown,"In this pull request I make a small change to ff.create_distplot. ff.create_distplot produces a figure showing the distribution of some data. It can create three traces (histogram, kernel density estimation (KDE) and rug) and it has switches that let users select, which of the aforementioned traces to include in the resulting figure.

Independent of the user choice (boolean parameters: show_hist, show_curve and show_rug), it will compute all three traces whether they will be included in the resulting figure or not. I changed the code so that only the traces that will be included in the resulting figure get computed. 

This will make the function more efficient in situations where a user doesn't need all three traces. 

Also (this is my use case), it allows one corner case that currently doesn't work: The function currently doesn't support being called with a dataset (hist_data parameter) that only contains a single entry. What happens in this case is that scipy throws an exception when trying to compute the KDE. However, in some use cases, there is no need for a KDE (show_curve=False). It should be possible to create a distplot with a single-entry dataset without a KDE.

## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
",2,1,[]
179,473844085,2728,14579099,2020-08-26 11:33:37,2020-09-03 02:16:47,closed,Fix warning regarding ABC import from collections,"Similar to https://github.com/plotly/plotly.py/pull/1417
",1,2,[]
180,472631801,2724,14579099,2020-08-24 16:29:59,2020-08-24 18:57:36,closed,Clarified where to find higher-level functions on figures,"I think it is important to clarify which code needs to be generated and which code needs to be written in Python. For example, I think in the contributing guide, the `packages/python/plotly/codegen/figure.py` file is being referred to, but there also might be cases where one needs to contribute to `packages/python/plotly/plotly/basedatatypes.py`. My change is not the final one, but I wanted to get the conversation going.
",1,1,[]
181,469678755,2715,14579099,2020-08-18 18:57:47,2020-08-18 18:58:07,closed,safe merge of master to doc prod,Nothing here will break the docs and the CI will go green :) ,0,6,[]
182,469658907,2713,14579099,2020-08-18 18:14:04,2020-08-18 18:40:57,closed,skip legend arg in pandas hist,Resolves #2706,0,2,[]
183,468959673,2711,14579099,2020-08-17 17:09:29,2020-09-03 19:10:32,closed,Fix selection behaviour of histograms,"This change addresses the selection behaviour in histograms. 

A selection now returns the point indices in a single list like scatter plots or others. In the past, the selection was just a list of empty objects due to histograms having a different structure of the selected points. More information can be found in my [comment](https://github.com/plotly/plotly.py/issues/2698#issuecomment-674785363) on the original issue.

Now the indices of the selection are passed correctly:
<img width=""1000"" alt=""histogram selection"" src=""https://user-images.githubusercontent.com/37695050/90419421-d165c980-e0b6-11ea-95c8-2b39fb53a311.png"">



Fixes #2698.
",6,5,[]
184,466310700,2702,14579099,2020-08-11 19:32:05,2020-08-18 19:20:24,closed,Starting AI/ML section in python docs [3rd attempt],"1st attempt: https://github.com/plotly/plotly.py/pull/2172
2nd attempt: https://github.com/plotly/plotly.py/pull/2276
Original Issue: https://github.com/plotly/plotly.py/issues/2153

Had to make a new PR since I messed up the branch with unresolved conflicts after rebasing on `doc-prod`. This one should be fine (hopefully).

Changes:
- Added scikit-learn to requirements

Todo list:
- [x] Create a ML section
- [x] kNN Classification notebook
- [x] Regression notebook
- [x] ROC notebook
- [x] PCA notebook
- [ ] tSNE/UMAP notebook
- [ ] LIME (follow [this example](https://marcotcr.github.io/lime/tutorials/Tutorial%20-%20images.html))
",7,36,[]
185,464045560,2691,14579099,2020-08-06 13:57:58,2020-09-03 02:07:46,closed,Fast image: add `binary_string` parameter to imshow,"Work in progress!

This PR adds a `use_binary_string` parameter to imshow, which default value is 
- True for multichannel images (where the Image trace is always used)
- False for single-channel images, in which case the Heatmap trace is used (when True, an Image trace is used)

I added another new parameter `contrast_rescaling` in order to reconcile the computation of `zmin` and `zmax`, which were computed differently for 2D/Heatmap and 3D/Image before (2D used the min and max of the array as Heatmap does, and 3D used 0 for the min and a max value deduced from the data type and the image range). The former behaviour corresponds to the `image` value of the newly introduced `contrast_rescaling` parameter, while `dtype` corresponds to the latter, and when the value is None it is set internally to ensure backwards compatibility with the current version.

To do

- [x] hovertemplate when using source
- [x] remove color from hover when data have been rescaled
- [x] update doc notebook",18,37,[]
186,463490087,2688,14579099,2020-08-05 16:08:22,2020-08-05 16:25:27,closed,Sphinx test njk,,0,4,[]
187,463398481,2687,14579099,2020-08-05 13:51:54,2020-08-05 14:19:30,closed,Sphinx fixes (against doc-prod),"Follow-up of #2681, but against doc-prod (I had to create a new PR because of the complicated merge history). I will of course squash before merging.",1,17,[]
188,462036596,2681,14579099,2020-08-03 08:41:18,2020-08-05 16:48:18,closed,Sphinx fixes,"I'll be working on fixing the sphinx documentation, but this is a first PR to store the generated files in a sphinx artifact so that reviewers can check the result without checking out the branch. With this idea in mind, I did not zip the output so that the html doc can be browsed directly on circleCI.",6,24,[]
189,459696434,2677,14579099,2020-07-31 00:52:32,2020-08-03 13:49:32,closed,Doc prod- ,"I would like to add about stream-lit and plotly details and example. 
This might help users to create web-apps easily. This is my first pull request and contribution. Let me know if you have any feedback. Thank you.

Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).
 Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [x] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [x] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
",2,25,[]
190,455771443,2662,14579099,2020-07-23 14:57:30,2020-07-24 16:37:41,closed,Update time-series.md,"Hi,
There is a missing library for figures 6-7 and 9-10.
So, I added (import plotly.express as px) into the script for these figures. 
BW,
Nermin

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",1,1,[]
191,449609242,2640,14579099,2020-07-15 16:56:12,2020-07-15 17:19:11,closed,Sunburst parent copy,"close #2607, follow-up of #2639 ",1,14,[]
192,448926432,2639,14579099,2020-07-14 14:43:55,2020-07-30 14:15:11,closed,"remove bug in sunburst / treemap when passing a column named ""parent""","Closes #2607 


[x] check what happens when 'parent' is passed for a column not in the path (color, hover, etc.)
[x] add tests",1,14,[]
193,448908520,2638,14579099,2020-07-14 14:14:45,2020-07-14 20:14:28,closed,Finishing up Hexbin Mapbox PR,Small fixes on top of #2559 ,0,17,[]
194,448486111,2636,14579099,2020-07-13 20:58:29,2020-07-14 13:55:53,closed,Rebuild extensions using Node 12,"Addresses parts of #2441 :
* deleted package-lock.json
* changed to the non-min version of plotly.js
* reinstalled and rebuilt using Node 12 LTS",0,7,[]
195,447393594,2631,14579099,2020-07-10 11:45:38,2020-07-10 13:49:50,closed,Fixed make_docstring's override_dict ,"For arguments that are not in `docs`, the override_dict only displayed the first argument of the docstring (the type) but not the rest of the description. This was the case for `px.pie` with the `hole` argument for instance.",1,1,[]
196,446511200,2627,14579099,2020-07-08 22:10:51,2020-07-13 13:57:40,closed,KeyError when running the create_dendrogram example,"closes #2618 

With the new color names ('C0','C1', 'C2', ...) I only added 5 colours whereas with the old names 8 colours were added. Looking at `matplotlib.rcParams['axes.prop_cycle']` it seems up to `'C9'` is possible, so do we add mappings for colours 'C5' to 'C9'?

",11,4,[]
197,446440146,2626,14579099,2020-07-08 19:28:43,2020-07-14 13:58:24,closed,bar base and timeline,"Closes #2585 

- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

",5,3,[]
198,444558450,2617,14579099,2020-07-06 06:02:22,2020-07-06 12:55:26,closed,Update legend.md,"typo fix

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",1,1,[]
199,444557907,2616,14579099,2020-07-06 06:01:04,2020-07-06 12:55:37,closed,Update dropdowns.md,"just a tiny typo fix.

Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

",1,1,[]
200,444227082,2614,14579099,2020-07-04 02:04:40,2020-07-08 21:02:19,closed,px.NO_COLOR,"## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

",9,9,[]
201,444176758,2613,14579099,2020-07-03 19:47:06,2020-07-14 19:45:58,closed,Add Kaleido image export support,"This PR adds preview support for performing static image export using [Kaleido](https://github.com/plotly/Kaleido) instead of [Orca](https://github.com/plotly/orca). See the Kaleido README for discussion of project motivations and how it compares to Orca.  There has not yet been a stable release of Kaleido, so the API may still evolve a little.

With this PR, Kaleido support is enabled by installing the `kaleido` package from PyPI...
```
$ pip install kaleido
```
and setting the new `engine` kwarg in `plotly.io.to_image` and `plotly.io.write_image` to `""kaleido""`.  `""kaleido""` is also the default value when `kaleido` is installed.

TODO:
 - [x] Add `engine` kwarg to image renderers to make it possible to override default engine
 - [x] Add tests

----
### Original Approach

With this PR, Kaleido support is enabled by installing the `kaleido` package from PyPI...
```
$ pip install kaleido
```
and importing the `kaleido_export` future flag before importing plotly
```python
from _plotly_future_ import kaleido_export
import plotly.io as pio
pio.to_image
```
```
 <function plotly.io._kaleido.to_image(fig, format=None, width=None, height=None, scale=None, validate=True)>
```
When Kaleido mode is enabled, the `to_image` and `write_image` functions use Kaleido rather than Orca.

There is no change in default behavior if the `kaleido_export` future flag is not imported

There are still open questions about how we will roll out the transition from Orca to Kaleido. For example, do we wait for a version 5 for the switch? Do we support both Orca and Kaleido for a time and design a mechanism to dynamically select between them? What should we do with the `plotly.io.orca` module after orca support is dropped? Should we remove it, or remap compatible options to `plotly.io.kaleido` even though only a subset of the options are compatible?

This PR doesn't make any assertions about how we should do that going forward except that the Kaleido approach will still be invoked using the current `plotly.io.to_image` and `plotly.io.write_image` functions. I'd like to release this preview support in version 4.9.0 so we can start asking people to try it out and gathering feedback (especially when people have problems getting Orca working).

",17,31,[]
202,440740419,2605,14579099,2020-06-26 19:01:02,,open,Add `colorscale_range` to `create_gantt()` for custom gradient min/max,"Also dealt with a few colour-related bugs in the gantt figure_factory file to minimize migration disruption to plotly 3/4. 

There likely were not many users encountering this error as it required a fairly specific use of range scales in gantt charts, but for those of us who were getting that value error it was a game stopper and required holding plotly.py at version 2.7.0.  This should allow those users to upgrade to the newest versions. 

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to 
 **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)
-->
## Code PR

- [X] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [X] I have added tests (if submitting a new feature or correcting a bug) or modified existing tests.
- [X] For a new feature, I have added documentation examples in an existing or new tutorial notebook (please see the doc checklist as well).
- [X] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.",3,1,[]
203,440376695,2603,14579099,2020-06-26 04:40:16,2020-07-06 13:28:34,closed,"Typo fix in hover-text-and-formatting.md ""expectany""",,1,1,[]
204,440006382,2600,14579099,2020-06-25 13:03:24,2020-06-25 16:25:13,closed,unset marginal ranges,"Closes #2589

## Code PR

- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

",1,1,[]
205,439995080,2599,14579099,2020-06-25 12:42:59,2020-06-25 16:27:42,closed,set line_group in wide mode,"closes #2583

## Code PR

- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
",1,1,[]
206,439990250,2598,14579099,2020-06-25 12:33:43,2020-06-25 16:06:55,closed,accept integer and float columns in wide mode,"Closes #2561

## Code PR

- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
",2,3,[]
207,439615804,2597,14579099,2020-06-25 02:23:29,2020-06-26 14:18:32,closed,Add `colorscale_range` to `create_gantt()` for custom gradient min/max,"Also dealt with a few colour-related bugs in the gantt figure_factory file to minimize migration disruption to plotly 3/4. 

There are likely few who were getting this error as it required a fairly specific use of range scales in gantt charts, but for those of us who were getting that value error it was a game stopper and required holding plotly at version 2.7.0.  This should allow those users to easily upgrade to the newest versions. 

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)
-->
## Code PR

- [X] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [X] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [X] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.


",2,1,[]
208,438918788,2595,14579099,2020-06-24 02:18:00,2020-06-24 02:29:14,closed,fix 404 hyperlink in px doc,"The link to the graph objects doc in first paragraph links to `/graph_objects`, not `/graph-objects`
",1,1,[]
209,438771961,2593,14579099,2020-06-23 19:23:55,2020-06-23 19:47:51,closed,Update plotly-express.md,@nicolaskruchten just a couple of suggested tweaks as I read through the fantastic new PX landing page.,1,1,[]
210,438642206,2592,14579099,2020-06-23 15:18:33,2020-06-23 17:01:59,closed,bumping plotly.js to 1.54.5,"<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",0,1,[]
211,438635041,2591,14579099,2020-06-23 15:07:27,2020-06-26 13:07:07,closed,Correct bug when color and values correspond to the same color in treemap or sunburst,Closes #2567 ,3,10,[]
212,438056370,2588,14579099,2020-06-22 16:36:01,2020-06-22 16:49:09,closed,Go docs,,0,2,[]
213,437158570,2578,14579099,2020-06-19 15:18:36,2020-06-19 16:01:44,closed,new Structure of Figures page,,0,3,[]
214,436696026,2577,14579099,2020-06-18 18:40:03,2020-06-24 09:17:11,closed,Correct some regular expression syntax.,"To test:
  python3 -W once -c 'from plotly.graph_objs import _layout'
  python3 -W once -c 'from plotly import basedatatypes'

## Code PR

- [X] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [X] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [X] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [X] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
",0,8,[]
215,436482086,2576,14579099,2020-06-18 13:41:50,2020-06-18 15:33:14,closed,"Issue 2141, add_hline, add_vline, add_hrect, etc.","## Code PR

- [x ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial. 
",0,17,[]
216,434613510,2568,14579099,2020-06-15 15:26:38,2020-07-20 14:21:20,closed,Bar chart data formats,"The purpose of this PR is to update the bar charts doc with examples of data in wide, long, and mixed form. ",0,3,[]
217,433889617,2563,14579099,2020-06-12 21:21:23,2020-07-06 19:53:45,closed,fixed typo,"Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

",1,1,[]
218,432793720,2559,14579099,2020-06-11 02:00:21,2020-07-14 20:14:31,closed,Feature/hexbin mapbox,"### Feature: hexbin_mapbox

Creates an hexagonal binning of lat/lon points and aggregates for a metric.

### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [x] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [x] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [x] Every new/modified example is independently runnable
- [x] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [x] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [x] The random seed is set if using randomly-generated data in new/modified examples
- [x] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [x] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [x] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [x] Data frames are always called `df`
- [x] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [x] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [x] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [x] `fig.show()` is at the end of each new/modified example
- [x] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [x] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

",14,14,[]
219,432657387,2558,14579099,2020-06-10 19:33:49,2020-11-12 15:32:28,closed,"add_shape, add_layout_image, add_annotation for multiple facets at once, add_hline and add_vline (+add_vrect/add_hrect)","Closes #2141 and closes #2140 

Making it possible to specify multiple rows and columns when using `add_shape`, `add_layout_image` or `add_annotation`. 
This pull request is to share the work, so a lot is missing still.

## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
",38,59,[]
220,431359581,2554,14579099,2020-06-08 19:47:29,2020-06-22 13:38:49,closed,make trendlines more robust,"Closes #2549 (trendlines with zero slope) as well as a couple of other issues I found while testing:

* trendlines over timeseries data was just broken 🙈  https://stackoverflow.com/questions/61644142/plotly-how-to-show-trendline-for-time-series-data-using-plotly-express
* although we check for length > 1, we don't check for non-None/non-NaN length > 1
* we didn't have a lot of testing in general on trendlines/results, so I added a bunch",0,4,[]
221,431353866,2553,14579099,2020-06-08 19:35:32,2020-06-10 13:27:59,closed,Issue 2552,"Simply included `black` in `packages/python/plotly/optional-requirements.txt`.
closes #2552 ",0,3,[]
222,431270469,2551,14579099,2020-06-08 16:52:52,2020-06-10 13:27:30,closed,Clarified installation process for development,"Included the words ""install from source"" and links to documentation on pip -e
and setuptool's ""developer mode"".
closes #2550 ",0,2,[]
223,428947415,2546,14579099,2020-06-06 03:24:06,2020-06-22 21:59:11,closed,bug_2410: Allowing Ints to be passed for rows/cols and refactored int…,"## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

**Changes in this PR:**

- Now allowing the ""add_traces"" method to take single integers for the rows/cols parameters.
- Also refactored the numpy integer check to be more reusable, and added more tests


Fixes #2410",3,3,[]
224,428731868,2544,14579099,2020-06-05 20:23:12,2020-06-22 13:09:34,closed,fixed bug in hover data,Closes #2529 ,2,2,[]
225,428731035,2543,14579099,2020-06-05 20:21:59,,open,Added documentation for create_gantt function,Please see suggested docstrings in lines 852-854.,3,3,[]
226,428716416,2542,14579099,2020-06-05 20:03:08,2020-06-05 20:16:36,closed,"Added documentation for tasks, task_names and group_tasks parameters","Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [x ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

",0,3,[]
227,428444111,2541,14579099,2020-06-05 13:18:30,2020-07-08 19:21:16,closed,more Pandas backend options,"
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

",2,2,[]
228,428434093,2540,14579099,2020-06-05 12:58:37,2020-06-08 19:54:23,closed,export colors only once,"This should be a no-op but still good to clean up, right?",3,1,[]
229,428411452,2539,14579099,2020-06-05 12:10:18,2020-07-08 19:19:35,closed,imshow now handles DataFrame indexes and names by default,"- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
",2,5,[]
230,427820124,2536,14579099,2020-06-04 13:03:24,,open,Changed opacity to 0.2 in sankey docs in order to obtain hover effect,"<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->

The sankey documentation contains a paragraph showing how to customize color of links. Currently, the example proposes to change the opacity to 0.4 which is the value at which the opacity is set during hover. This implies that no hover effect is obtained in the resulting plot. By using opacity equal to 0.2 the hover effect works properly.
",3,1,[]
231,427323157,2532,14579099,2020-06-03 16:34:57,2020-06-03 19:40:43,closed,Fixed wrong axis titles,"
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [x] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [x] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [x] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)
<--
## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",1,1,[]
232,426785578,2528,14579099,2020-06-02 19:28:42,2020-06-03 01:31:30,closed,enforce order,The purpose of this PR is to re-order examples in this repo so that the order of posts in each post family is consecutive. ,0,1,[]
233,426148586,2524,14579099,2020-06-01 18:40:01,2020-06-05 12:40:26,closed,fixing hover_data and hover_name bugs in path API,This approach is a bit less brittle I think.,1,3,[]
234,425599673,2520,14579099,2020-05-31 11:43:58,2020-06-01 12:57:51,closed,Update README.md,"""import plotly.graph_objects as go"" doesn't work but ""import plotly.graph_objs as go"" do work.

Thanks

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",3,1,[]
235,424500744,2513,14579099,2020-05-28 13:52:09,2020-05-28 14:08:11,closed,docstring of county choropleth,"
![image](https://user-images.githubusercontent.com/263366/83150055-24089880-a0fb-11ea-8e7e-1e05c4720568.png)

",1,1,[]
236,424073300,2510,14579099,2020-05-27 19:35:14,2020-05-28 12:50:56,closed,complete the API of plotly.colors and plotly.express.colors,"API exposed:

![image](https://user-images.githubusercontent.com/263366/83064140-a2b0f780-a061-11ea-82b4-01f0443d0947.png)
",3,3,[]
237,423527210,2507,14579099,2020-05-27 00:06:08,2020-06-02 19:22:44,closed,Enforce sequential order,,0,2,[]
238,423323641,2504,14579099,2020-05-26 16:41:39,2020-05-26 16:52:38,closed,bump statsmodels,"<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",0,1,[]
239,423176800,2502,14579099,2020-05-26 12:32:37,2020-05-26 13:13:07,closed,Bar fix,"This is needed so we can pass in column names as e.g. `bool` or `Timestamp`, which anyway fail in the `else` branch. The Pandas visualization docs have this example, which doesn't run without this fix and does with it:

```python
import pandas as pd
import numpy as np
pd.options.plotting.backend=""plotly""
ts = pd.Series(np.random.randn(1000), index=pd.date_range('1/1/2000', periods=1000))
df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index, columns=list('ABCD'))
df.iloc[5].plot.bar()
```",1,8,[]
240,422322574,2496,14579099,2020-05-23 20:22:10,2020-05-23 23:21:55,closed,remove dash app section from 3d scatter doc,"This section should have been removed as part of https://github.com/plotly/plotly.py/pull/2085. 

It's existence was brought up by https://community.plotly.com/t/part-of-plotlys-webpage-appears-to-be-broken/39976/4.

I have searched the rest of the documentation for similar occurrences of this- this is the only instance still in production. 

Screenshot:

![Screen Shot 2020-05-23 at 4 18 48 PM](https://user-images.githubusercontent.com/1557650/82739868-86375700-9d11-11ea-96db-58511128e478.png)
",0,1,[]
241,422322038,2495,14579099,2020-05-23 20:18:02,2020-05-23 20:21:25,closed,remove dash app example section,"This section should have been removed as part of https://github.com/plotly/plotly.py/pull/2085. 

It's existence was brought up by https://community.plotly.com/t/part-of-plotlys-webpage-appears-to-be-broken/39976/4.",0,4,[]
242,421924105,2493,14579099,2020-05-22 13:39:31,2020-05-26 13:13:25,closed,added links to px.data and px.colors in API doc,"This PR add links to `px.data` and `px.colors` at the end of the API doc page on plotly.express.

For `px.data`

![Screenshot_2020-05-22 plotly data package — 4 7 0 documentation](https://user-images.githubusercontent.com/263366/82673406-1efea180-9c42-11ea-8daf-2e3d9522a54c.png)

For `px.colors`, the objects which we want to list are not functions but lists, and they are not listed in an `__all__` somewhere already so I figured out it would be easier to link to the corresponding doc tutorials.

![image](https://user-images.githubusercontent.com/263366/82821858-1954c600-9ea5-11ea-83f1-b657f1ff5ac0.png)



In the main `px` page:
![image](https://user-images.githubusercontent.com/263366/82821891-2a9dd280-9ea5-11ea-842f-43d1f49d2a1a.png)

",15,15,[]
243,421913896,2492,14579099,2020-05-22 13:18:42,2020-05-22 13:41:11,closed,Colab doc,tiny fixup on #2486,0,2,[]
244,421910282,2491,14579099,2020-05-22 13:10:40,2020-05-22 13:48:25,closed,order fixups,The purpose of this PR is to fixup the order of examples in the `advanced_opt` and `chart_events` sections. ,1,1,[]
245,421461457,2489,14579099,2020-05-21 16:46:18,2020-06-03 11:51:16,closed,changelog for _repr_html_ and co,"
",0,1,[]
246,420790157,2488,14579099,2020-05-20 14:31:04,2020-07-20 14:18:51,closed,Wishlist doc examples WIP,"The purpose of this PR is to add some examples from the wishlist.

- [x] multicategory bar example 
- [x] in slider page, add example using the update method 
- [x] example using px.strip in box plot page, and add a link also in violin page.
- [x] example of sparkline in scatter and line page
- [x] example using surfacecolor in 3d surface tutorial
",2,1,[]
247,420418900,2486,14579099,2020-05-19 23:29:11,2020-05-22 13:41:14,closed,Update static-image-export.md,"Added Documentation for Installing Orca on Google Colab.
issue #2346

Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [x] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [x] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [x] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [x] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [x] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [x] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.


",3,1,[]
248,419882421,2481,14579099,2020-05-19 05:14:50,2020-05-20 02:07:48,closed,Update static-image-export.md,"Added Documentation for Installing Orca on Google Colab.
issue #2346

Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [x] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [x] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [x] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [x] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [x] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [x] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.


",1,2,[]
249,418235537,2472,14579099,2020-05-14 20:41:23,2020-05-14 21:13:27,closed,Fixed command for installing ipywidgets using pip,"There's a minor typo on the README for installing `ipywidgets` using `pip`, which I've fixed now.",1,1,[]
250,417930521,2469,14579099,2020-05-14 11:23:46,2020-09-03 20:01:09,closed,div formatting with `to_html()` + full_html=False,"## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.

The inclusion of newlines ""`\n`"" as well as the plot `id` tag being referenced by single quotes
instead of double quotes results in the following output of a figure:

This has been resolved by ensuring now newline characters are included in the formatted string for
and `base_url_line` now encapsulates `plotly_platform_url` in double quotes.

This has been tested in a markdown setting:

*Before*:
![image](https://user-images.githubusercontent.com/8843728/81928852-dc9fe980-95dd-11ea-95c5-6f49c7e3f436.png)

*After*:
![image](https://user-images.githubusercontent.com/8843728/81928872-e1fd3400-95dd-11ea-9f17-6fd419702c37.png)


Fixes #2468 ",2,3,[]
251,416721691,2463,14579099,2020-05-12 13:21:35,2020-05-12 13:58:50,closed,adding choropleth to apidoc,,0,1,[]
252,415652295,2455,14579099,2020-05-10 01:07:31,2020-05-10 17:12:34,closed,"Fix markdown syntax, typo in docs","Pretty simple fix.

[This list in the docs](https://plotly.com/python/creating-and-updating-figures/#other-update-methods) doesn't render properly. This commit fixes the markdown source, and for one other list just like it.

### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [x] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [x] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [x] Every new/modified example is independently runnable
- [x] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [x] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [x] The random seed is set if using randomly-generated data in new/modified examples
- [x] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [x] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [x] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [x] Data frames are always called `df`
- [x] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [x] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [x] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [x] `fig.show()` is at the end of each new/modified example
- [x] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [x] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)
",1,5,[]
253,415606037,2454,14579099,2020-05-09 17:31:26,2021-05-05 19:04:16,closed,Lazyload,Supersedes and closes #2260 and closes #1913 ,3,5,[]
254,415215445,2451,14579099,2020-05-08 12:41:19,2020-06-03 12:26:00,closed,bug_2931: resolving numpy integer check and adding test,"Thanks to @emmanuelle for directing where this fix would live and even some code to make it work!

I also looked for similar checks and found some in subplots.py, but by that time this check must have already passed since I'm using subplots in my unit test. 

Also considered if we should leverage what is in `packages\python\plotly\_plotly_utils\basevalidators.py` for coercion, but opted for this simple import try. Open to all feedback on how to improve this PR!


## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
",3,1,[]
255,414893279,2447,14579099,2020-05-07 20:06:13,2020-05-07 20:59:30,closed,Fix TypeError: unhashable type: 'Template' during Figure construction,"... when `plotly.io.templates.default` is set to a `Template` object rather than a string.

## Code PR
- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
",1,1,[]
256,414634120,2445,14579099,2020-05-07 11:46:57,2020-05-07 12:10:43,closed,Fix FigureWidget attribute error on wildcard import with ipywidgets not installed,"Fixes the regression in 4.7.0 reported in https://github.com/plotly/plotly.py/issues/2443.  Also takes care of https://github.com/plotly/plotly.py/issues/1111 by producing a more informative error message.

The problem is that with Python 3.7+, we add `""FigureWidget""` to the `__all__` list in the `plotly.graph_objs`/`plotly.graph_objects` modules regardless of whether `ipywidgets` is installed.  But when `FigureWidget` is lazily imported, an exception is raised if a supported version of `ipywidgets` is not installed.  This results in the reported error when a user, or library, calls `from plotly.graph_objs import *`.

One option would be to check for the proper version of `ipywidgets` when `plotly.graph_objs` is imported and only add `FigureWidget` to `__all__` if it is found. But this results in a performance hit on every import of `plotly.graph_objs`, whether or not `FigureWidget` is used.

Another option would be to always allow `FigureWidget` to be imported, but raise an exception when a user tries to construct a `FigureWidget` if `ipywidgets` is not found.  Unfortunately, this isn't possible because `ipywidgets` is required in order to define the `FigureWidget` class itself so we can't import it without `ipywidgets`.

Instead, this PR introduces a new `plotly.missing_ipywidgets.FigureWidget` class. This class is a subclass of `BaseFigure` (just like the standard `Figure`), but all it does is raise an informative exception in the constructor informing the user that they need to install `ipywidgets` in order to use `FigureWidget`.  With this approach, `""FigureWidget""` is still always added to `__all__`, but on lazy import we check whether `ipywidgets` is installed. If it is, the current `plotly.graph_objs._figurewidget.FigureWidget` class is returned, otherwise the new `plotly.missing_ipywidgets.FigureWidget` class is returned.

Tests added in `plotly/tests/test_core/test_figure_widget_backend/test_missing_ipywigets.py`.

## Code PR
- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [x] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.
",2,2,['bug']
257,414311042,2442,14579099,2020-05-06 20:14:46,2020-06-03 14:51:35,closed,Update contributing.md for Windows contributors,"Went through the steps on my Windows development machine and ran into errors (below). Discovered that this was likely Windows specific and wanted to simply update this so others can avoid similar issues.

Also updated some of the bash commands so that they highlighted having an activated virtual environment for consistency.

Complete output (1 lines):
    A GDAL API version must be specified. Provide a path to gdal-config using a GDAL_CONFIG environment variable or use a GDAL_VERSION environment variable.
    ----------------------------------------
ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.


Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

",2,1,[]
258,413762563,2439,14579099,2020-05-05 21:28:42,2020-05-05 23:22:44,closed,Don't disable validation when constructing FigureWidget's template.,"Closes https://github.com/plotly/plotly.py/issues/2437.

As things are structured right now, we need to run through all of the validation logic in order to generate the messages to send to the `FigureWidget` front-end.  This PR makes sure that we leave validation on when constructing a `FigureWidget`'s default template.
",0,1,[]
259,413530867,2436,14579099,2020-05-05 13:53:36,2020-05-05 15:13:12,closed,bump plotly.js to 1.54.1,,2,1,[]
260,412808191,2431,14579099,2020-05-04 08:31:37,2020-05-04 13:47:56,closed,"Fix ""Advanced Hover Template"" typo","Tiny typo fix: x and y were swapped ([rendered](https://plotly.com/python/hover-text-and-formatting/)):
![image](https://user-images.githubusercontent.com/2772505/80948454-68ea2980-8df2-11ea-80b8-295634335e1c.png)

",1,1,[]
261,412149072,2427,14579099,2020-05-01 14:20:04,2020-05-01 16:49:47,closed,upgrade to plotly.js 1.54,I will also add a changelog comment.,2,2,[]
262,410819780,2421,14579099,2020-04-29 16:27:08,2020-05-20 08:05:59,closed,Repr html,"This PR proposes to add a `_repr_html_` method to `go.Figure` and `go.FigureWidget`, which is a hook used by some notebook-like environments and other packages such as sphinx-gallery. For notebook environments using an ipython kernel, `_ipython_display_` has precedence over `_repr_html_`  (see https://ipython.readthedocs.io/en/stable/config/integrating.html) so this will not change anything.

When/if this PR is accepted I will submit a pull request to sphinx-gallery to show a plotly figure on their website (not possible at the moment) since they don't want to user scrapers in their configuration.

@jonmmease ",6,8,[]
263,410221669,2419,14579099,2020-04-28 16:17:00,2020-04-28 20:56:22,closed,Sg scraper,"This is an improvement of the sphinx-gallery scraper, which crawls only the directory of the example and now works for different structures of galleries (I was trying to add a plotly example to the gallery of scikit-image and it did not work with the scraper, with this change it is working).

A more sustainable mid-term change would be to add a `_repr_html_` method to the `BaseFigure` class (since the html would then be captured by sphinx-gallery) but for now the scraper works. ",4,5,[]
264,409330446,2415,14579099,2020-04-27 08:16:46,2020-04-27 13:14:04,closed,Update datashader.md,"typo on subheader

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",1,1,[]
265,408781134,2409,14579099,2020-04-24 21:52:26,2020-04-27 13:17:55,closed,Update animations.md,"In the 'gapminder' example, the current code snippets appear to assign a list to `fig_dict[""layout""][""sliders""]` twice. Once when the figure layout is initially created, and then again when more information is added to `sliders_dict`. This dictionary entry is overwritten before the figure is constructed. My proposed change just removes the initial assignment which seems to be of no consequence. Striving for clarity!

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
- [ ] I have added a CHANGELOG entry if fixing/changing/adding anything substantial.

-->
",1,1,[]
266,408190362,2407,14579099,2020-04-23 20:53:36,2020-05-02 22:56:36,closed,Shape drawing doc,"I've prepared the tutorials for shape drawing in preparation JS 1.54 / py 4.7. The CI will obviously fail until we upgrade the code to 1.54.

If you wish to test these tutorials locally, you should fetch this branch and run 
```
python setup.py updateplotlyjsdev --devbranch shape-drawing
```
to get the right plotly.js branch",2,5,[]
267,407380133,2406,14579099,2020-04-22 15:52:54,2020-04-29 14:03:29,closed,Makefile: modify docstrings to use temporarily graph_objs,"This PR fixes the build of the API doc. The problem was that `graph_objs` objects have docstrings with intersphinx references like :class:`plotly.graph_objects.scatter.Marker` but (from my understanding, which might be incorrect) graph_objects are lazily imported and not found by sphinx when generating html files from the docstrings, hence no links were generated.

I solved the problem by temporarily changing the docstrings thanks to a massive sed, and reverting everything with git checkout after the sphinx build. A more robust long-term solution would be to have all the codegened code inside the `graph_objects` directory.

I tested that the solution works both on master and on the branch of #2403. 

@nicolaskruchten @jonmmease ",10,3,[]
268,406959024,2403,14579099,2020-04-21 23:26:42,2020-04-28 12:30:41,closed,Replace global validate state with Figure level validate flag,"This PR removes the global `graph_objects.validate` class. This class was introduce in https://github.com/plotly/plotly.py/pull/2368 as a way to globally disable figure property validation. While testing master, it seems that this global validation state can result in race conditions.  Fortunately, this class was never included in a plotly.py release so we can still change the design.

This PR replaces that approach with Figure-level `_validate` property.  Validation for a Figure (or other graph object) can be disabled by passing a `validate=False` kwarg.

cc @nicolaskruchten ",11,9,[]
269,406897147,2402,14579099,2020-04-21 20:40:31,2020-04-27 19:28:47,closed,title.text everywhere in PX,"PX should use `title.text` instead of `title` everywhere... This should be a no-op as the validators handle this internally, but it's cleaner for PX not to rely on that so much IMO.",1,2,[]
270,406066214,2397,14579099,2020-04-20 13:32:00,2020-04-21 12:30:31,closed,short-circuit instead of bypass flag,Just a little refactoring proposal to be merged into #2377 before it hits master.,1,1,[]
271,406028900,2396,14579099,2020-04-20 12:19:20,2020-04-21 20:12:27,closed,Add CHANGELOG step to PR template,"@emmanuelle @jonmmease what do think of this process change?

If you agree, could you please add such an entry to the in-progress https://github.com/plotly/plotly.py/pull/2377 hover_data PR @emmanuelle  and @jonmmease can you please PR one in for your #2368 (optimization) changes?",2,1,[]
272,404764938,2390,14579099,2020-04-16 21:44:29,2020-04-17 11:07:04,closed,Remove plotly express from delayed submodule import.,"Follow on to https://github.com/plotly/plotly.py/pull/2368 to address https://github.com/plotly/plotly.py/issues/2389.

The `express` module was mistakenly added as a submodule to auto-import on demand. This module was not previously auto-imported because it requires pandas.  It seems that requesting tab completion in ipython from an environemnt without pandas installed triggers an error here.",2,2,[]
273,404697218,2388,14579099,2020-04-16 20:24:51,2020-07-20 14:35:21,closed,"change logo, link colors, typography, header color","The purpose of this PR is to update the styling of the figure API reference to reflect Plotly's new branding. 

- [x] new logo asset
- [x] hyperlink color and hover color updated
- [x] updated typography to `campaign` for headings and `jubilat` for body text
- [x] changed header background color

Screenshot Before:

![Screen Shot 2020-04-22 at 5 23 24 PM](https://user-images.githubusercontent.com/1557650/80035447-0f166500-84be-11ea-8189-3b279bbac8d1.png)

Screenshots After:
![Screen Shot 2020-04-16 at 4 22 49 PM](https://user-images.githubusercontent.com/1557650/79503221-c7e02e00-7ffe-11ea-9054-5d0bb2c8c290.png)
![Screen Shot 2020-04-16 at 4 23 38 PM](https://user-images.githubusercontent.com/1557650/79503229-c9a9f180-7ffe-11ea-886e-39f204645c8c.png)

",1,1,[]
274,403160761,2381,14579099,2020-04-14 12:42:51,2020-04-14 12:43:26,closed,Update renderers.md,Closes #2376,0,1,[]
275,402656278,2377,14579099,2020-04-13 13:57:34,2020-04-21 21:39:34,closed,Hover format or skip,"Closes #1774 

Still need to add doc (and probably more tests), but early feedback is welcome.
",16,23,[]
276,402211597,2374,14579099,2020-04-11 16:12:29,2020-04-13 08:32:05,closed,"Fixed code block in ""Displaying Figures Using Dash"" on Renderers help page","No code was changed. Just edited the markdown to show the code block correctly.

Since this is a minor change, I am not including the checklist. I didn't run any build, I wasn't sure if that was needed with this minor change.  Thanks!

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to **documentation**/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

If your PR modifies code of the `plotly` package, we have a different checklist
below :-).

### Documentation PR

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

## Code PR

- [ ] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [ ] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).

-->
",4,3,[]
277,402191092,2372,14579099,2020-04-11 13:35:28,2020-04-14 13:31:45,closed,Update sunburst-charts.md,@nicolaskruchten please confirm that this was a typo and my change is correct.,3,2,[]
278,401677985,2368,14579099,2020-04-09 22:38:36,2020-04-16 20:28:50,closed,Import and initialization optimizations,"# Overview
This PR contains a variety of optimizations targeted and improving plotly.py's import and Figure creation/serialization speed.

## Lazy submodule imports in Python 3.7+
[PEP-562](https://www.python.org/dev/peps/pep-0562/) in Python 3.7 introduced a nice approach for implementing lazy loading of submodules. The top-level `plotly/__init__.py`, `plotly/io/__init__.py` and the full `graph_objs` hierarchy have been updated to use lazy submodule importing for Python 3.7+. For older Python versions, all submodule imports are still performed immediately.

Part of this process involved codegen updates to split graph object and validator classes into their own files.

## Lazy creation of validators
Previously, each graph object would instantiate a set of validators (one per property) in the constructor.  Now, validators are constructed when first used, and they are stored in a global cache (`plotly/validator_cache.py`)

## Lazy creation of child graph objects
Previously, child graph objects were created in the constructor, and they were initialized for every possible property.  Now, graph objects initialized either on property access or when the property is set to a non-`None` value (if validation is enabled, see below).

## Avoid loading numpy and pandas when not in use
In several places in the codebase, we attempt to import numpy/pandas using our `get_module` function, and then use the pandas/numpy module handle to check whether an argument is a data structure from that library.  The `get_module` function now has a `should_load` option. When set to `False`, `get_module` will only return the module if it is already loaded. This is useful because if pandas isn't loaded, then we don't need to check whether a value is a `DataFrame`. This keeps us from having to pay the pandas/numpy import cost when these libraries are installed but not in use.  This saves ~200ms when pandas/numpy are installed but not in use.

## Avoid dynamic docstring generation
This PR removes the dynamic docstring generation that was used to populate the docstrings for the Figure methods corresponding to `plotly.io` functions (e.g. `Figure.show` with created by transforming `plotly.io.show`). These docstrings were added statically. This saves ~200ms on import time.

## Support optional validation
This PR adds support for disabling property validation using the `go.validation` object.  This can be used as a callable to enable/disable validation for the session (e.g. `go.validation(False)`), or it can be used as a context manager to enable/disable validation within block of code (e.g. `with go.validation(False):`).

API inspired by Bokeh's implementation in https://github.com/bokeh/bokeh/issues/6042.

# Results
Here are some before/after performance results on Python 3.7 with this PR:

## top-level import
```python
%%time
import plotly
```

Version 4.6: 239 ms
PR: 2.5ms
95x speedup

## Import, create empty figure, and serialize to JSON
```python
%%time
import plotly.graph_objects as go
go.Figure().to_json()
```
Version 4.6: 696 ms
PR: 27ms
25x speedup

## Repeatedly create empty figure and serialize to json (after import)
```
%%timeit
go.Figure().to_json()
```
Version 4.6: 68 ms
PR: 1.5ms
45x speedup

## Import, load data, create animated plotly express figure, serialize to json

```python
%%time
import plotly.express as px
df = px.data.gapminder()
fig = px.scatter(df, x=""gdpPercap"", y=""lifeExp"", animation_frame=""year"", animation_group=""country"",
           size=""pop"", color=""continent"", hover_name=""country"", facet_col=""continent"",
           log_x=True, size_max=45, range_x=[100,100000], range_y=[25,90])
fig.to_json()
```
Version 4.6: 1530 ms
PR: 550 ms
2.7x speedup

## Repeatedly create px plot after import and data are loaded
```python
%%timeit
fig = px.scatter(df, x=""gdpPercap"", y=""lifeExp"", animation_frame=""year"", animation_group=""country"",
           size=""pop"", color=""continent"", hover_name=""country"", facet_col=""continent"",
           log_x=True, size_max=45, range_x=[100,100000], range_y=[25,90])
fig.to_json()
```
Version 4.6: 663 ms
PR: 167 ms
4x speedup

## Import, load data, create animated plotly express figure, serialize to json, skip validation
```python
%%time
import plotly.express as px
import plotly.graph_objects as go
df = px.data.gapminder()
with go.validate(False):
    fig = px.scatter(df, x=""gdpPercap"", y=""lifeExp"", animation_frame=""year"", animation_group=""country"",
               size=""pop"", color=""continent"", hover_name=""country"", facet_col=""continent"",
               log_x=True, size_max=45, range_x=[100,100000], range_y=[25,90])
    fig.to_json()
```
PR (no validation): 449 ms
PR (with validation): 550 ms
Version 4.6: 1530 ms

## Repeatedly import, load data, create animated plotly express figure, serialize to json, skip validation
```python
%%timeit
with go.validate(False):
    fig = px.scatter(df, x=""gdpPercap"", y=""lifeExp"", animation_frame=""year"", animation_group=""country"",
               size=""pop"", color=""continent"", hover_name=""country"", facet_col=""continent"",
               log_x=True, size_max=45, range_x=[100,100000], range_y=[25,90])
```
PR (no validation): 127ms
PR (with validation): 167ms
Version 4.6: 663 ms

cc @nicolaskruchten @emmanuelle ",39,14,[]
279,399672933,2363,14579099,2020-04-06 14:07:43,2020-04-06 16:55:23,closed,Clean up CI in doc-prod,New new code commits are on `master` so I'd like to merge `master` to `doc-prod` again today so that `doc-prod` gets the CI improvements now :),1,2,[]
280,399671567,2362,14579099,2020-04-06 14:05:33,2020-04-06 19:37:19,closed,Px density docs,Missing docs for two PX functions! This forum post gets a ton of clicks and we never documented the answer: https://community.plotly.com/t/plotly-express-heatmap/21857,2,3,[]
281,398492255,2357,14579099,2020-04-04 08:53:42,2020-04-27 19:49:57,closed,fix bug in trendline in the case of missing values,"See https://community.plotly.com/t/plotly-trendlines-not-displaying-correctly-due-to-np-nan-values/37202

The case of nan values was not handled properly for trendlines:
- for lowess, the default value of statsmodels is to drop nans which is fine, but then the x values were not properly aligned with the y
- for ols, the default value is to do nothing with nans, resulting in all nans in the estimation.

This PR fixes the two cases and adds a test.",2,8,[]
282,398361188,2355,14579099,2020-04-03 20:03:48,2020-04-03 20:48:14,closed,clean up ci jobs,"as discussed in the meeting, plus uncommenting something that seems like it should work.",2,5,[]
283,397806281,2349,14579099,2020-04-02 21:08:19,2020-04-06 20:49:28,closed,adding repo and branch options to updateplotlyjsdev,"PR to address #2344 

## Code PR

- [x] I have read through the [contributing notes](https://github.com/plotly/plotly.py/blob/master/contributing.md) and understand the structure of the package. In particular, if my PR modifies code of `plotly.graph_objects`, my modifications concern the `codegen` files and not generated files.
- [ ] I have added tests (if submitting a new feature or correcting a bug) or
  modified existing tests.
- [x] For a new feature, I have added documentation examples in an existing or
  new tutorial notebook (please see the doc checklist as well).
",5,1,[]
284,397596053,2347,14579099,2020-04-02 13:56:40,2020-04-02 17:11:34,closed,Create announcement_4.6.md,,0,1,[]
285,396613667,2342,14579099,2020-03-31 21:27:30,2020-04-01 12:41:41,closed,minimal example with customdata for sankey nodes,,1,2,[]
286,396480356,2341,14579099,2020-03-31 17:24:24,2020-04-01 12:28:18,closed,changelog,,1,1,[]
287,396440907,2340,14579099,2020-03-31 16:13:34,2020-03-31 16:35:59,closed,bump plotly.js to 1.53.0,,0,1,[]
288,396021666,2336,14579099,2020-03-31 02:23:59,2020-05-25 19:38:35,closed,"PX Input upgrades - wide form, constant, identity, auto-orientation etc","Closes #2333 - wide mode
Closes #2119 - constant and identity
Closes #2331 - auto-orientation
Closes #2332 - `x` XOR `y` behaviour
Closes #2005 - Pandas backend
Closes #1735 - multiple columns for x, y & Pandas backend

Also addresses previously-resolved issues in a better way:
  * #2224 & https://github.com/plotly/plotly_express/issues/127- multiple columns for x, y
  * https://github.com/plotly/plotly_express/issues/126 - defaulting `x` to the index
  * https://github.com/plotly/plotly_express/issues/141 - simple single-column inputs
  * https://stackoverflow.com/questions/55822042/how-to-draw-a-multiple-line-chart-using-plotly-express
  * https://community.plotly.com/t/how-to-plot-multiple-lines-on-the-same-y-axis-using-plotly-express/29219
  * https://community.plotly.com/t/multiple-traces-plotly-express/23360

Note: the scope of ""wide mode"" has been broadly expanded to include all cartesian-2d PX functions other than `imshow`, and to include selection of `y=[col1, col2]` and optional overriding of the perpendicular `x` value to be something other than the index as well. This seems like an odd fit for `density_contour`/`density_heatmap` until you think of them as a drop-in replacements for `scatter` to deal with overplotting ;)

Todo:
- write medium post
- write forum post
- write readable docs
  - identity in the color section
  - pandas backend dedicated page
  - update px inputs page
  - remove ""tidy"" references everywhere",17,74,[]
289,396007268,2335,14579099,2020-03-31 01:37:55,2020-04-03 19:53:34,closed,initial pass at PX auto-orientation,"Closes #2331 

Docs and tests still missing, but this is the approach I was going to take... verbose but seems to work OK.",4,5,[]
290,395303852,2330,14579099,2020-03-29 19:19:11,2020-04-03 19:53:58,closed,Px special inputs,Closes #2119 ... @emmanuelle LMK what you think of the API and testing approach and if it makes sense I'll document it.,11,4,[]
291,395151046,2329,14579099,2020-03-28 20:32:07,2020-04-29 08:26:57,closed,Mention extra tag in hovertemplate tutorial,"Following various interactions on the forum, including https://community.plotly.com/t/tooltip-in-dash-shows-trace-0-how-to-get-rid-of-that/36844/2

",8,3,[]
292,394808912,2325,14579099,2020-03-27 15:08:54,2020-03-27 16:15:02,closed,Port cufflinks,New version of https://plotly.com/python/v3/ipython-notebooks/cufflinks/,5,5,[]
293,394293918,2318,14579099,2020-03-26 16:54:16,2020-03-26 19:17:36,closed,use relative hyperlink for https://plotly.com/python,"
",1,1,[]
294,394112682,2317,14579099,2020-03-26 11:29:52,2020-03-31 16:17:28,closed,Opacity in px.density_mapbox,"Hello,
This is a fix for #2316 that correctly map the opacity attribute in the `trace_path`.
It allows to correctly pass `opacity` as an attribute in `px.density_mapbox`. Check the issue for reproducible code.

***Limitations:*** I'm not aware of another mapbox figure that would require this change as they use proper markers (scatter, line), but if you are, then please comment and I'll add that.

Thanks for your time.
plotly version=4.5.4
<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to documentation/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

- [ ] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

-->
",10,3,[]
295,394021621,2315,14579099,2020-03-26 08:20:08,2020-03-26 13:47:51,closed,try to fix tests by changing plotly urls,"Tests are failing at the moment on the python-2.7-plot_ly build, this is an attempt to fix it.",2,6,[]
296,393637598,2312,14579099,2020-03-25 14:56:41,2020-03-26 15:58:12,closed,change .ly to .com,"The purpose of this PR is to change hyperlinks in the documentation from the `.ly` to the `.com` TLD. 
",2,2,[]
297,393342353,2309,14579099,2020-03-25 01:59:39,2020-03-25 11:44:07,closed,what about dash?,Closes https://github.com/plotly/documentation/issues/1654,1,1,[]
298,392672991,2307,14579099,2020-03-23 22:33:26,2020-03-27 01:00:54,closed,bump Orca to 1.3.1,"This PR closes https://github.com/plotly/plotly.py/issues/2301 by:

- we pin Orca's version to 1.3.1 to sync the releases (https://github.com/plotly/plotly.py/pull/2307/commits/44f4d6f7f7450c2d2cc38e316cbe60fa3003875f)
- update EPS baselines used in test images (https://github.com/plotly/plotly.py/pull/2307/commits/313ee4d3cd51904cad67ee68bf84c49262db0fec)",3,2,[]
299,391941016,2304,14579099,2020-03-22 01:17:57,2020-03-27 00:22:06,closed,hide name from within hovertemplate,"This should result in no change (i.e. the trace name still will not appear in at the edge of the hoverlabel) but makes it easier to use the upcoming ""unified"" `hovermode` with PX. With this PR, simply using `.update_traces(hovertemplate=None)` will result in a nice-looking unified hoverlabel, but without it, users will also have to set `namelength` back to some non-zero value.

Mind you, they might have to set it to some higher value than the default of 15 anyway, but at least the trace name will mostly/partly show up!",1,1,[]
300,391688963,2300,14579099,2020-03-20 18:47:09,2020-04-27 13:22:38,closed,Update sliders.md,"'Simple Slider Control' section: change method to 'update', add title. 
Add 'Sliders in Plotly Express', 'Methods' sections.
Issue #1965 

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [x] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [x] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [x] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [x] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [x] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [x] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [x] `fig.show()` is at the end of each new/modified example
- [x] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)",2,1,[]
301,391460168,2298,14579099,2020-03-20 10:38:10,2020-03-23 22:33:43,closed,start orca with --no-sandbox flag,fix proposed by @antoinerg ,4,3,[]
302,391431848,2297,14579099,2020-03-20 09:31:19,2020-03-26 11:02:45,closed,Patch 7,"Bolded phrases and additional explanations in the ""method"" section. The previous version can be misleading to non-heavy users.

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [x] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [x] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [x] Every new/modified example is independently runnable
- [x] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)
",5,2,[]
303,391228032,2295,14579099,2020-03-19 20:42:47,2020-03-20 12:28:51,closed,Pin orca docs,docs version of #2293,1,1,[]
304,391225451,2294,14579099,2020-03-19 20:36:37,2020-03-20 12:26:37,closed,Remove unsupported opacity kwarg from pie-like functions,"Whoops, `marker_opacity` isn't supported in `pie`-like traces! See https://community.plot.ly/t/possible-bug-color-discrete-map-and-opacity-in-px-pie-plotly-io-as-pio/36386/2",1,1,[]
305,391165620,2293,14579099,2020-03-19 18:24:39,2020-03-20 12:28:50,closed,pinning orca,Temporary solution to prevent CI break.,3,2,[]
306,390843059,2291,14579099,2020-03-19 07:33:32,2020-03-27 16:19:31,closed,Update sankey-diagram.md,"Add colorful links to the Sankey diagram.
#1965 

Please uncomment this block and take a look at this checklist if your PR is making substantial changes to documentation/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [x] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [x] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [x] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [x] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [x] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [x] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [x] `fig.show()` is at the end of each new/modified example
- [x] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)
",5,3,[]
307,390618253,2290,14579099,2020-03-18 19:16:14,2020-03-26 13:26:04,closed,Update contributing notes,"
",1,6,[]
308,390536781,2289,14579099,2020-03-18 16:23:23,2020-05-04 13:50:45,closed,Clarify `histnorm` description,"This is consistent with https://plot.ly/python-api-reference/generated/plotly.express.histogram.html#plotly.express.histogram and https://plot.ly/python/reference/#histogram-histnorm.

<!--
Please uncomment this block and take a look at this checklist if your PR is making substantial changes to documentation/impacts files in the `doc` directory. Check all that apply to your PR, and leave the rest unchecked to discuss with your reviewer! Not all boxes must be checked for every PR :)

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [x] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)

-->
",1,1,[]
309,390511270,2288,14579099,2020-03-18 15:40:14,2020-03-19 23:04:59,closed,Minor typo in text and annotations docs,"I had a peek at the contributing guidelines etc but this seems so minor that I've probably already spent more time reading those than the change merits.

- [x] I've [seen the `doc/README.md` file](https://github.com/plotly/plotly.py/blob/master/doc/README.md)
- [ ] This change runs in the current version of Plotly on PyPI and targets the `doc-prod` branch OR it targets the `master` branch
- [ ] If this PR modifies the first example in a page or adds a new one, it is a `px` example if at all possible
- [ ] Every new/modified example has a descriptive title and motivating sentence or paragraph
- [ ] Every new/modified example is independently runnable
- [ ] Every new/modified example is optimized for short line count	and focuses on the Plotly/visualization-related aspects of the example rather than the computation required to produce the data being visualized
- [ ] Meaningful/relatable datasets are used for all new examples instead of randomly-generated data where possible
- [ ] The random seed is set if using randomly-generated data in new/modified examples
- [ ] New/modified remote datasets are loaded from https://plotly.github.io/datasets and added to https://github.com/plotly/datasets
- [ ] Large computations are avoided in the new/modified examples in favour of loading remote datasets that represent the output of such computations
- [ ] Imports are `plotly.graph_objects as go` / `plotly.express as px` / `plotly.io as pio`
- [ ] Data frames are always called `df`
- [ ] `fig = <something>` call is high up in each new/modified example (either `px.<something>` or `make_subplots` or `go.Figure`)
- [ ] Liberal use is made of `fig.add_*` and `fig.update_*` rather than `go.Figure(data=..., layout=...)` in every new/modified example
- [ ] Specific adders and updaters like `fig.add_shape` and `fig.update_xaxes` are used instead of big `fig.update_layout` calls in every new/modified example
- [ ] `fig.show()` is at the end of each new/modified example
- [ ] `plotly.plot()` and `plotly.iplot()` are not used in any new/modified example
- [ ] Hex codes for colors are not used in any new/modified example in favour of [these nice ones](https://github.com/plotly/plotly.py/issues/2192)",1,1,[]
310,388697181,2280,14579099,2020-03-15 13:00:53,2020-03-16 13:39:59,closed,debug,to test the new js build,4,1,[]
311,387988170,2278,14579099,2020-03-13 21:11:20,2020-03-18 14:53:44,closed,unpinned versions of pandas (and scipy and numpy),"I did this unpinning mostly because no wheels exist for the version of pandas which was pinned, therefore building the binder container takes forever.
",1,4,[]
312,387984844,2277,14579099,2020-03-13 21:05:42,2020-06-03 14:54:34,closed,Update README.md,jupyter build times-out. Updated steps from this thread https://discourse.jupyter.org/t/installing-extensions-extremely-slow/2627,5,1,[]
313,387873126,2276,14579099,2020-03-13 16:37:39,2020-08-11 19:33:08,closed,Starting AI/ML section in python docs [New],"# THIS WAS MOVED TO https://github.com/plotly/plotly.py/pull/2702

Continuation of this PR: https://github.com/plotly/plotly.py/pull/2172
Please refer to: https://github.com/plotly/plotly.py/issues/2153

Changes:
- Added scikit-learn to requirements

Todo list:
- [x] Create a ML section
- [x] kNN Classification notebook
- [x] Regression notebook
- [x] ROC notebook
- [x] PCA notebook
- [ ] tSNE/UMAP notebook
- [ ] LIME (follow [this example](https://marcotcr.github.io/lime/tutorials/Tutorial%20-%20images.html))
",2,513,[]
314,387869510,2275,14579099,2020-03-13 16:29:39,2020-03-13 16:32:18,closed,Move the PR to plotly,,1,16,[]
315,387223980,2269,14579099,2020-03-12 12:48:22,2020-03-12 14:04:14,closed,fixed search index graph_objs/graph_objects,,1,1,[]
316,386850132,2268,14579099,2020-03-11 18:24:19,2020-03-11 18:57:07,closed,changelog updates,,1,1,[]
317,386416606,2265,14579099,2020-03-10 23:49:29,2020-03-11 15:56:12,closed,ipywidgets import bug,Closes #2264 ,3,1,[]
318,386006434,2262,14579099,2020-03-10 08:50:52,2020-03-11 14:32:14,closed,python: fix python 3.8 Syntax Warning,Closes #2230 ,2,1,[]
319,385978541,2261,14579099,2020-03-10 07:34:54,2020-03-11 14:41:16,closed,Support JupyterLab 2.0.0 - plotlywidget,"See https://github.com/plotly/plotly.py/issues/2249#issuecomment-596944197

Attempted fix for #2249, but not tested and mainly a suggestion without deep comprehension. This should had been part of #2245 if I had done it right from the start.",17,1,[]
320,385959131,2260,14579099,2020-03-10 06:28:17,2021-05-05 19:04:07,closed,Added lazy loading to jupyterlab-plotly,"With this change, plotly.js will be loaded on demand. This uses dynamic
imports to achieve this.

Fixes #1913",14,7,[]
321,385287667,2256,14579099,2020-03-08 16:47:18,2020-03-10 19:00:23,closed,trying to make plotlywidget work with Jlab 1.2 and 2.0,,1,1,[]
322,384946584,2255,14579099,2020-03-06 17:49:38,2020-03-11 02:32:40,closed,tried to fix default renderer for ipython terminal,"Closes #2254 

I'm not sure yet whether this is the right place to add the check for the terminal. Also need to check tests.",3,2,[]
323,384870454,2253,14579099,2020-03-06 15:09:20,2020-03-18 13:05:55,closed,documentation PR checklist,feedback welcome!,1,2,[]
324,383585179,2245,14579099,2020-03-04 14:18:40,2020-03-06 02:05:21,closed,Support JupyterLab 2.0.0,"I think this is a backward compatible change that makes the jupyterlab extension `jupyterlab-plotly` support JupyterLab 2.0.0 by accepting also JupyterLab 2.0.0 required dependencies.

Fixes #2244

## JupyterLab 2.0.0 references
- [Change log for developers](https://jupyterlab.readthedocs.io/en/stable/getting_started/changelog.html#for-developers)
- [A migration guide](https://jupyterlab.readthedocs.io/en/stable/developer/extension_migration.html#extension-migration)",6,2,[]
325,383156857,2243,14579099,2020-03-03 20:25:33,2020-03-11 17:00:43,closed,Apigen recursive,"still WIP, and it's been some time since I worked on this. Basically the idea is to call `sphinx-apidoc` to generate all the doc pages.",10,14,[]
326,382763221,2242,14579099,2020-03-03 06:10:37,2020-03-06 17:53:36,closed,Update histograms.md,Added `Accessing the y-axis values` section,6,2,[]
327,380720462,2235,14579099,2020-02-27 09:10:24,2020-03-04 15:18:21,closed,Update facet-plots.md,Added section 'Zooming subplots to the same range'. A part of #1965 ,2,3,[]
328,380718567,2234,14579099,2020-02-27 09:06:08,2020-03-04 15:23:09,closed,Update axes.md,Added section 'Zooming subplots to the same range'. Part of the #1965. ,1,2,[]
329,380475457,2233,14579099,2020-02-26 19:59:06,2020-02-26 20:21:20,closed,Update marker-style.md,,0,1,[]
330,379482379,2227,14579099,2020-02-25 10:06:44,2020-02-26 15:34:32,closed,Update legend.md,"Add 'Hide the Trace Implicitly' section. #1965 
Change 'Size of Legend Items' header from h3 to h4.",1,1,['documentation']
331,379462856,2226,14579099,2020-02-25 09:30:29,2020-03-02 16:14:13,closed,Update subplots.md,Add information about coloraxis in subplots.  #1965 ,1,2,['documentation']
332,379149575,2225,14579099,2020-02-24 18:40:41,2020-02-25 04:35:26,closed,Pin @types/plotly.js,Closes #2223,1,1,[]
333,378403100,2221,14579099,2020-02-21 18:00:06,2020-02-24 16:43:31,closed,add example showing how to customize figure subplot titles,"The purpose of this PR is to add an example which demonstrates how to customize figure subplot titles. 

see https://github.com/plotly/plotly_express/issues/36",1,1,[]
334,377777803,2220,14579099,2020-02-20 14:10:30,2020-02-20 17:14:37,closed,updating release docs,,1,1,[]
335,377380163,2219,14579099,2020-02-19 20:30:00,2020-02-19 20:55:59,closed,4.5.1 release,,0,5,[]
336,377277574,2218,14579099,2020-02-19 17:00:12,2020-02-19 18:39:48,closed,[WIP] Update bug patch2 pytest - debugging - do not merge,,0,8,[]
337,377268097,2217,14579099,2020-02-19 16:42:51,2020-03-03 20:01:39,closed,attempt to replace nose with pytest,,6,10,[]
338,377249544,2216,14579099,2020-02-19 16:11:18,2020-02-19 18:40:04,closed,[WIP] Update bug patch2 debug - do not merge,For debugging nosetests problems - DO NOT MERGE,0,7,[]
339,376889310,2215,14579099,2020-02-18 23:32:52,2020-05-04 14:18:02,closed,adding example for multiple disconnected lines,"I found this feature very helpful for plotting large networks with many many edges.
I think it might be valuable for others who stumble across this article, too.  
",6,3,['documentation']
340,376837975,2213,14579099,2020-02-18 21:12:51,2020-02-19 19:44:58,closed,corrected color bug in pie/sunburst etc,Closes #2212 ,1,2,[]
341,376297104,2208,14579099,2020-02-17 20:08:10,2020-02-19 19:38:40,closed,fixing the bug of update_ methods,resolves https://github.com/plotly/plotly.py/issues/2167,20,8,[]
342,376287118,2207,14579099,2020-02-17 19:33:32,2020-02-17 20:11:20,closed,Update bug patch,,2,9,[]
343,375611334,2201,14579099,2020-02-14 23:16:59,2020-04-06 19:56:11,closed,Updates to examples in fundamentals section,The purpose of this PR is to update 3 of our examples. ,3,6,['documentation']
344,375554659,2199,14579099,2020-02-14 20:10:44,2020-04-06 20:02:14,closed,Config options update,"
The purpose of this PR is twofold:

- [x] update config page with more examples
- [x] closes https://github.com/plotly/plotly.py/issues/2191",6,13,['documentation']
345,375552941,2198,14579099,2020-02-14 20:05:35,2020-02-14 20:08:50,closed,Update config options examples,,0,5,[]
346,375496688,2197,14579099,2020-02-14 17:33:21,2020-02-19 19:53:11,closed,add examples for customizing marker symbols,"supersedes https://github.com/plotly/plotly.py/pull/2188 due to merge conflict issues

closes https://github.com/plotly/plotly.py/issues/2182",3,4,['documentation']
347,375331325,2195,14579099,2020-02-14 11:02:00,2020-02-17 15:44:39,closed,Minor correction,"Name of the window around ""ideal"" line plot should be ""ideal"" but is instead marked as ""fair"".",1,1,[]
348,375118709,2193,14579099,2020-02-13 22:26:00,2020-02-13 22:35:25,closed,Fix docprod mess,"I merged doc-prod into master locally, and then pushed a branch to open a PR and accidentally squashed and merged. This PR does not modify any files, but just includes the original commits to have in particular the contributors listed.",0,12,[]
349,374464109,2188,14579099,2020-02-12 18:35:59,2020-02-14 17:33:34,closed,Add marker symbols example,"closes https://github.com/plotly/plotly.py/issues/2182

The purpose of this PR is to update the marker styling example to show how to use custom marker symbols.

Here is the figure I ended up with:

<img width=""1063"" alt=""Screen Shot 2020-02-12 at 1 33 29 PM"" src=""https://user-images.githubusercontent.com/1557650/74365676-8a5fea00-4d9c-11ea-8388-f84cc5804a4a.png"">

Hovering over a symbol shows its name.",4,27,[]
350,374118133,2185,14579099,2020-02-12 05:37:59,,open,a bandage solution to issue #2177,"A naive attempt to fix issue #2177.
When the field is ""custom_data"", it ensures the input is a list.",2,2,[]
351,374094520,2184,14579099,2020-02-12 04:04:08,2020-02-12 18:42:11,closed,Fix typo,,1,1,[]
352,373945280,2183,14579099,2020-02-11 22:57:30,2020-02-12 17:17:44,closed,prevent the creation of new px.default properties at run time,"closes https://github.com/plotly/plotly.py/issues/2168

The purpose of this PR is to prevent the creation of new px.default properties at run time.

Testing Plan:

Prior to this PR, the following code does not throw an exception:

```python
import plotly.express as px

px.defaults.template = ""ggplot2""
px.defaults.color_continuous_scale = px.colors.sequential.Blackbody
px.defaults.width = 600
px.defaults.height = 400
px.defaults.should_not_work = ""test""

df = px.data.iris()
fig = px.scatter(df, x=""sepal_width"", y=""sepal_length"", color=""sepal_length"", width=400)
fig.show()
```

When running this PR, the above code throws:

```
Traceback (most recent call last):
  File ""app.py"", line 6, in <module>
    px.defaults.should_not_work = ""test""
AttributeError: 'PxDefaults' object has no attribute 'should_not_work'
```",3,7,[]
353,373850257,2181,14579099,2020-02-11 19:55:26,2020-02-13 21:45:24,closed,Fix pytest2,,0,18,[]
354,373849266,2180,14579099,2020-02-11 19:53:12,2020-02-11 20:02:33,closed,Fix pytest,,0,12,[]
355,373843451,2179,14579099,2020-02-11 19:40:03,2020-02-11 19:52:18,closed,Merge doc prod2,,0,11,[]
356,372670811,2172,14579099,2020-02-08 02:39:26,2020-03-13 16:38:36,closed,[Deprecated] Starting AI/ML section in python docs,"**Moved to here**: https://github.com/plotly/plotly.py/pull/2276

Please refer to: https://github.com/plotly/plotly.py/issues/2153

Changes:
- Added scikit-learn to requirements

Todo list:
- [x] Create a ML section
- [x] kNN Classification notebook
- [x] Regression notebook
- [ ] ROC notebook
- [ ] PCA notebook
- [ ] tSNE/UMAP notebook
- [ ] LIME (follow [this example](https://marcotcr.github.io/lime/tutorials/Tutorial%20-%20images.html))
",9,16,['documentation']
357,372524501,2171,14579099,2020-02-07 17:38:07,2020-02-11 21:10:17,closed,removed go.layout. in docs,,1,1,[]
358,371670786,2166,14579099,2020-02-06 01:55:50,2020-03-23 21:11:25,closed,xarray support in imshow,"I'm planning to complete the docstring and add examples in the tutorials, but I would like first to discuss whether this xarray support should rather go here in imshow or/and in a `px.matrix_heatmap` / `px.heatmap` function which is yet to be written (but could be adapted from the imshow code). @nicolaskruchten interested in your thoughts here :-).",6,25,[]
359,371163616,2163,14579099,2020-02-05 03:21:16,2020-03-10 19:12:32,closed,fixed pandas 1.0 problem in sunburst/treemap example,triggered by https://30182-14579099-gh.circle-artifacts.com/0/doc/build/failures/sunburst-charts (CI attempt to use pandas 1.0),1,2,['documentation']
360,371063102,2162,14579099,2020-02-04 21:37:57,2020-02-17 22:23:21,closed,Edited a typo,,4,2,[]
361,370996644,2161,14579099,2020-02-04 18:55:27,2020-02-19 16:56:39,closed,shapes on subplots,,5,4,[]
362,370988513,2160,14579099,2020-02-04 18:34:45,2020-02-05 16:06:51,closed,Shapes subplots,,2,11,[]
363,370478097,2156,14579099,2020-02-03 19:16:35,2020-02-03 21:26:24,closed,finally: how to style px,,3,3,[]
364,370449951,2155,14579099,2020-02-03 18:07:28,2020-02-04 14:46:40,closed,add the word background to bgcolor description so it will get indexed by algolia,"The purpose of this PR is to make sure that `plot_bgcolor` and `paper_bgcolor` show up in algolia search results for `background`. 

Related to https://github.com/plotly/plotly.js/pull/4536",3,1,[]
365,370398615,2154,14579099,2020-02-03 16:10:01,2020-02-03 20:47:47,closed,Datashader tutorial,,7,4,[]
366,369263943,2147,14579099,2020-01-30 20:09:12,2020-01-30 20:44:31,closed,target the new graphing-library-docs repo,The purpose of this PR is to target the new `graphing-library-docs` repo for deploys and as the source of CI check scripts. ,0,1,[]
367,368511166,2136,14579099,2020-01-29 11:40:13,2020-01-29 18:07:35,closed,Actually display the tidy table in example,,1,1,[]
368,368214848,2135,14579099,2020-01-28 20:31:24,2020-01-31 16:58:37,closed,PX internals renaming,,4,6,[]
369,367710307,2133,14579099,2020-01-27 21:23:03,2020-02-04 03:45:02,closed,Sunburst improvements,,1,2,[]
370,367631920,2132,14579099,2020-01-27 18:13:10,2020-01-27 19:17:23,closed,changed order of imports for better error messages,Closes #2125 (check if pandas if installed first for a meaningful error message),1,1,[]
371,366970325,2128,14579099,2020-01-24 18:56:27,2020-02-04 01:20:35,closed,added some items in release process notes,"@jonmmease can you please check that what I wrote is correct? I was not sure about the `jupyterlab-plotly` parts in particular. But thanks heaps for writing such detailed release notes, it's really amazing. ",0,2,[]
372,366866138,2127,14579099,2020-01-24 14:36:19,2020-03-11 15:45:59,closed,Px bool,Closes #2121 ,6,6,[]
373,366446271,2118,14579099,2020-01-23 16:17:12,2020-01-23 18:22:36,closed,Fixed typo,of -> or,2,1,[]
374,366405016,2117,14579099,2020-01-23 14:56:21,2020-01-23 15:07:25,closed,added discrete color examples,,1,1,[]
375,366092208,2115,14579099,2020-01-22 22:21:24,2020-01-28 16:53:54,closed,get 3d subplots post to render on language index,"The purpose of this PR is to get the 3d subplots example to render on the language index. 

This PR needs to be merged ahead of https://github.com/plotly/documentation/pull/1666, since that PR adds a check for this situation to CI. ",0,2,[]
376,366069747,2113,14579099,2020-01-22 21:22:09,2020-02-04 02:39:00,closed,4.5 forum post draft,,0,3,[]
377,366041010,2112,14579099,2020-01-22 20:10:43,2020-01-29 17:00:11,closed,switch thumbnail for ternary plots doc to ternary scatter plot,closes https://github.com/plotly/documentation/issues/1553,0,1,[]
378,365950982,2111,14579099,2020-01-22 16:35:40,2020-01-22 20:10:47,closed,4.5.0 release,,0,9,[]
379,365928753,2110,14579099,2020-01-22 15:51:59,2020-01-22 16:15:22,closed,fix simple_white colorbar,"OLD

![image](https://user-images.githubusercontent.com/203523/72909552-331eaa80-3d05-11ea-8132-4a9cd99e4e8b.png)


NEW

![image](https://user-images.githubusercontent.com/203523/72909530-2bf79c80-3d05-11ea-9260-3fbbbbccdfac.png)
",1,1,[]
380,365646024,2109,14579099,2020-01-22 03:32:59,2020-01-22 15:34:43,closed,big batch of layout.geo docs,Sorry for the big drop but I had to just write it allll out.,2,4,[]
381,365514790,2108,14579099,2020-01-21 21:13:35,2020-01-22 01:57:24,closed,legend items example,,1,1,[]
382,365067727,2105,14579099,2020-01-21 02:33:22,2020-01-21 17:02:09,closed,preload val_map from orders,Closes #2084 by populating `val_map` in a group-independent way. @emmanuelle  thoughts on the approach?,1,5,[]
383,364957378,2104,14579099,2020-01-20 18:26:59,2020-02-12 19:41:18,closed,remove go.layout.shape from the tutorial,closes https://github.com/plotly/plotly.py/issues/2093,4,6,[]
384,364952643,2103,14579099,2020-01-20 18:10:41,2020-01-22 14:18:48,closed,Use plotly.min.js in both JS bundles,"Closes #1873 the opposite way from #1891 so as not to bloat the classic nbextension size. If we wanted to do things the #1891 way we would need to add minification in `plotlywidget/webpack.config.js` so that the nbextension stays small. I'm indifferent but this way seemed easy :) 

This PR also inlines the `randstr` function the same way, and removes the `prepublish: webpack` line that fails if webpack isn't globally installed, as well as the nonfunctional `build` target that calls `tsc`, replacing them with a `build: webpack` target that gets called explicitly in the CI step.

The bundle size savings of this change are substantial on a percentage basis: both bundles together are now roughly the size of either bundle, as expected, instead of twice. Also PS I resurrected the jupyterlab-chart-editor and it uses the `min` bundle right now so the savings should be compounded if all three are installed.

(closes #1891 if merged!)",2,4,[]
385,364887557,2102,14579099,2020-01-20 15:22:09,2020-01-21 21:52:11,closed,More flexible parallel_categories magic,"Closes #2008 by:

* Exposing the `dimensions_max_cardinality` cutoff in kwargs
* Bumping the default from 20 to 50
* Exempting the columns in `dimensions` from the cutoff

This means that a user can now do `px.parallel_categories(tips, dimensions=[""smoker"", ""total_bill""])` if they like and get both columns in the output even though `total_bill` has more than 50 unique values. The user can also now do `px.parallel_categories(tips, dimensions_max_cardinality=1000)` to get similar output to parallel coordinates although less readable/useful.

@emmanuelle if you like this approach to solving the problem I'll add some tests and docs.",4,5,[]
386,364310174,2096,14579099,2020-01-17 20:37:51,2020-05-04 13:55:00,closed,filled contour plot,closes https://github.com/plotly/plotly.py/issues/2071,2,1,['documentation']
387,364307482,2095,14579099,2020-01-17 20:30:11,2020-01-22 16:47:51,closed,uniformtext examples,,0,1,[]
388,364239420,2092,14579099,2020-01-17 17:13:14,2020-01-17 17:48:51,closed,update plotly.js to 1.52.1,,1,1,[]
389,364234218,2091,14579099,2020-01-17 16:59:24,2020-01-17 18:06:03,closed,add a geojson dataset and link from election dataset,"This PR adds a compressed GeoJSON file for choropleth demos. It has an `id` and something in `properties` to demo `featureidkey`. In order for this demo to work I had to add a column to the tabular `elections` dataset.
",3,2,[]
390,363913543,2089,14579099,2020-01-17 00:44:56,2020-01-21 15:18:46,closed,filled area,closes https://github.com/plotly/plotly.py/issues/2080,1,3,[]
391,363809592,2088,14579099,2020-01-16 19:34:00,2020-01-17 16:07:54,closed,fix deprecation warning in inspect,Closes #2045 ,2,3,[]
392,363801804,2087,14579099,2020-01-16 19:13:07,2020-01-17 16:13:16,closed,modified trendline formatting,"Closes #1984. 
For example 
```
import plotly.express as px

df = px.data.tips()
fig = px.scatter(df, x=""total_bill"", y=1.e-6 * df.tip, trendline=""ols"")
fig.show()
```
Master:
![image](https://user-images.githubusercontent.com/263366/72555260-3aa80480-386a-11ea-8ea2-5ca1fe081e71.png)

Now:
![image](https://user-images.githubusercontent.com/263366/72555183-1ba97280-386a-11ea-8359-211e8551e175.png)

Existing examples should not be modified, I checked with the doc example of `trendline`.
",1,1,[]
393,363721501,2085,14579099,2020-01-16 16:01:27,2020-01-16 20:00:54,closed,removing dash-example section,The purpose of this PR is to remove the `dash example` section from these docs per https://github.com/plotly/documentation/issues/1654,1,1,[]
394,363322540,2078,14579099,2020-01-15 20:26:20,2020-01-22 14:02:10,closed,Fix for Python 4,"Python 4 is some way off, but it may be a good idea to clean some of these up, similar to #2076.

---

This comparison is `True` for Python 3.3 - 3.99, but is `False` for Python 4 and would run the Python 2 - 3.2 code:

```python
if sys.version_info.major == 3 and sys.version_info.minor >= 3:	
    from unittest.mock import patch
else:
    from mock import patch	
```

Because Python 3.3 is the minimum Python 3.x supported, it can be simplified:

```diff
-if sys.version_info.major == 3 and sys.version_info.minor >= 3:	
+if sys.version_info.major >= 3:	
```

---

Another couple of cases which fail on Python 4.0, here we need to compare the `version_info` tuple and avoid comparing the `sys.version_info.minor` integer:

```diff
-if sys.version_info.major == 3 and sys.version_info.minor >= 4:
+if sys.version_info >= (3, 4):
```

```diff
-if sys.version_info.major != 3 or sys.version_info.minor < 6:
+if sys.version_info < (3, 6):
```

---

Finally, there's some code which uses `six.PY3`, a bit like:

```python
if six.PY3:
    print(""Python 3+ code"")
else:
    print ""Python 2 code""
```

Where in six.py:

```python
PY3 = sys.version_info[0] == 3
```

When run on Python 4, this will run the Python 2 code!

Instead, use `six.PY2`.

---


Found with https://github.com/asottile/flake8-2020.
",11,3,[]
395,363300529,2076,14579099,2020-01-15 19:31:06,2020-01-16 14:30:23,closed,Fix for Python 3.10: don't compare to sys.version string,"When dealing with version numbers, it's generally safer to use the `sys.version_info` tuple that the `sys.version` string.

```pycon
>>> sys.version
'3.7.5 (default, Nov  1 2019, 02:16:32) \n[Clang 11.0.0 (clang-1100.0.33.8)]'
>>> sys.version[:3]
'3.7'
>>> fake_version310_info = '3.10.5 (default, Nov  1 2019, 02:16:32) \n[Clang 11.0.0 (clang-1100.0.33.8)]'
>>> fake_version310_info[:3]
'3.1'
```

When Python 3.10 comes around (probably in [May 2020 when Python 3.9 reaches beta](https://www.python.org/dev/peps/pep-0596/#schedule)), it will claim to be on Python 3.1!

In this case, Python 3.2 is no longer supported, so this check can be removed. (And in fact, it wouldn't have failed until Python 3.20, but it's good to clean up.)

---

Found with https://github.com/asottile/flake8-2020
",6,1,[]
396,363299635,2075,14579099,2020-01-15 19:28:51,2020-01-15 19:29:50,closed,Doc prod merge,,0,20,[]
397,363296683,2074,14579099,2020-01-15 19:21:26,2020-01-15 20:52:37,closed,remove references to old name,,1,3,[]
398,362735310,2069,14579099,2020-01-14 16:46:33,2020-01-15 16:00:14,closed,Added missing dependency to make cell standalone,,3,1,[]
399,362677787,2068,14579099,2020-01-14 14:54:45,2020-01-15 18:41:25,closed,Refactoring of axes tutorial,"- removed calls to `go.Layout` or `go.layout.XAxis`
- quite a lot of shuffling existing examples to have a more consistent structure: first types of axes, then axis properties (ticks, then lines, then titles, then range and domain)
- links to other kinds of axis at the top
- added example with `constrain='domain'` and another one setting `domain`. ",5,4,[]
400,362596455,2067,14579099,2020-01-14 11:57:25,2020-01-14 13:38:25,closed,Update subplots.py,fixed typo in comment,1,1,[]
401,362268334,2065,14579099,2020-01-13 18:50:49,2020-01-15 20:03:21,closed,correct confusing indentation level,"Cosmetic change, but the identation in https://plot.ly/python/3d-axes/#range-of-axes was confusing so I corrected this.",1,1,[]
402,362256914,2064,14579099,2020-01-13 18:22:53,2020-01-13 18:46:10,closed,merged README and contributing.md,Following a suggestion from @jdamiba (thanks!).,1,1,[]
403,362164584,2063,14579099,2020-01-13 15:03:55,2020-01-13 19:17:09,closed,Update box plots doc with precomputed quartiles and quartilemethod,"closes https://github.com/plotly/plotly.py/issues/2049

The purpose of this PR is to update the box plots doc to include information about using precomputed quartile values and using the `quartilemethod` attribute to select algorithms for quartile computation. ",2,4,[]
404,361733101,2058,14579099,2020-01-11 14:13:59,2020-01-22 20:04:51,closed,Update plotly-express.md,I think it would be a good idea to include a link that shows all the built in data sets. I had to go looking into the package code to find this file.,0,1,[]
405,361557474,2057,14579099,2020-01-10 17:47:54,2020-01-15 20:52:23,closed,categorical choropleths,,5,2,[]
406,361542917,2055,14579099,2020-01-10 17:08:07,2020-01-10 19:43:37,closed,contributing notes for the doc,,2,1,[]
407,361161704,2053,14579099,2020-01-09 21:10:31,2020-01-15 16:59:28,closed,config list,"workaround for now, we would need to do this through the codegen instead",2,2,[]
408,361138661,2052,14579099,2020-01-09 20:14:38,2020-01-10 18:31:56,closed,doc example with intensitymode for mesh3d,,1,1,[]
409,361124202,2051,14579099,2020-01-09 19:39:06,2020-01-09 21:29:39,closed,use legend titles in PX,,3,3,[]
410,361111893,2050,14579099,2020-01-09 19:07:19,2020-01-14 17:06:40,closed,text orientation for pie and sunburst: doc,Addresses one of #2044 's items,1,2,[]
411,360758562,2048,14579099,2020-01-09 04:05:52,2020-01-10 17:08:28,closed,added example with legend title,I made a small example to discover how legend titles work :-). ,1,1,[]
412,360610544,2047,14579099,2020-01-08 19:09:40,2020-01-08 21:49:25,closed,bump to js 1.52 and codegen,,2,1,[]
413,360112273,2043,14579099,2020-01-07 18:18:52,2020-01-07 19:49:31,closed,fix CI by disabling test,"Same PR as the last one, but in doc-prod... I should have done it here first and then merged doc-prod to master but oh well.",1,1,[]
414,360100956,2041,14579099,2020-01-07 17:46:55,2020-01-07 18:16:18,closed,fix CI by disabling test,,1,3,[]
415,359802438,2038,14579099,2020-01-07 03:06:00,2020-01-08 23:13:27,closed,bumping JS to 1.52pre,,6,2,[]
416,359738710,2036,14579099,2020-01-06 22:20:25,2020-01-13 22:50:46,closed,document configuration setting plotly.io.orca.config.server_url,Follow-up to closed https://github.com/plotly/plotly.py/pull/2034,2,1,[]
417,359668951,2035,14579099,2020-01-06 19:00:54,2020-01-09 01:37:04,closed,update mapbox token,The purpose of this PR is to removed references to the mapbox api key from version control in favor of environment variables in CircleCI. ,3,1,[]
418,359652710,2034,14579099,2020-01-06 18:14:39,2020-01-06 22:01:19,closed,document usage of an externally hosted Orca instance,"This PR adds documentation for the new feature introduced in https://github.com/plotly/plotly.py/pull/1850 and https://github.com/plotly/plotly.py/pull/1915 that enables using an externally running Orca to produce static images.

Please feel free to rephrase/modify the text!

cc @nicolaskruchten ",1,1,[]
419,359648049,2033,14579099,2020-01-06 18:01:44,2020-01-22 20:11:24,closed,switch ternary scatter and ternary contour doc order,"closes https://github.com/plotly/documentation/issues/1553

The purpose of this PR is to swap the order of the ternary contour and scatter plot examples so that the countour example shows up on the index page. ",3,2,[]
420,359267003,2032,14579099,2020-01-05 03:09:52,2020-01-06 13:43:34,closed,Add some comments about the configuration of the legend,"~~Remove ""Legend Entries"" in the title since it is already in an individual page.~~

Add some comments about the configuration of the legend.",3,2,[]
421,359266372,2031,14579099,2020-01-05 02:54:25,2020-01-05 20:35:31,closed,"Fix a typo: remove duplicate word ""the""",,1,1,[]
422,359246702,2030,14579099,2020-01-04 20:54:19,2020-01-08 14:36:16,closed,Color docs,"Once this is merged, I'll update https://github.com/plotly/plotly.py/pull/2016 and https://github.com/plotly/plotly.py/pull/2017",3,3,[]
423,358485150,2025,14579099,2020-01-01 12:49:52,2020-01-01 22:25:19,closed,Add an example with `constrain='domain'`,Add a following example demonstrating Fixed Ratio Axes with Compressed domain to [axes tutorial](https://plot.ly/python/axes/).,1,1,[]
424,357119320,2020,14579099,2019-12-27 04:12:12,2019-12-27 18:25:16,closed,Merge doc-prod into master,,0,11,[]
425,356942014,2019,14579099,2019-12-26 10:53:15,,open,jupyterlab-plotly: make it importable in normal package,"To support import `jupyterlab-plotly` in normal typescript package.

```typescript
import {
  RenderedPlotly,
  MIME_TYPE as PLOTLY_MIME_TYPE
} from 'jupyterlab-plotly';
```",0,2,[]
426,356825289,2017,14579099,2019-12-25 17:21:48,2020-01-15 19:48:17,closed,add continuous color to bar_polar,,1,1,[]
427,356825281,2016,14579099,2019-12-25 17:21:45,2020-01-15 20:51:28,closed,first and last color of cyclicals should match,,4,4,[]
428,356473725,2015,14579099,2019-12-23 23:08:12,2020-01-16 15:08:40,closed,corrected bug in plotly scraper,Closes #2014.,3,1,[]
429,355762882,2013,14579099,2019-12-20 14:52:23,2019-12-20 18:30:29,closed,removed outdated comments about offline in configuration tutorial,,1,1,[]
430,354581650,2011,14579099,2019-12-18 12:11:04,2019-12-18 14:49:50,closed,:alien: upgrade code so it no longer uses deprecated pandas method ix,closes #2010 ,1,1,[]
431,354174039,2007,14579099,2019-12-17 15:44:29,2019-12-17 16:08:19,closed,standardize on df variable name,,2,2,[]
432,353751495,2006,14579099,2019-12-16 20:35:37,2020-01-22 19:40:39,closed,Sunburst/treemap path,"Still WIP, TODO
- [x] write doc
- [x] discuss the different cases we want to support
- [x] discuss case of hover columns",16,34,[]
433,353568794,2004,14579099,2019-12-16 13:41:33,2019-12-19 03:40:40,closed,mention PIL in Layout image tutorial,(triggered by a question on the community forum).,4,1,[]
434,352603691,2001,14579099,2019-12-12 20:47:27,2019-12-12 21:03:18,closed,Doc prod back merge,,0,9,[]
435,352525328,2000,14579099,2019-12-12 17:18:14,2019-12-12 18:16:05,closed,[DOC] px example in heatmap,I started using the [DOC] prefix in PRs so that it makes it easier to review the list of merged PRs when writing the changelog for a release.,1,1,[]
436,352062947,1998,14579099,2019-12-11 18:51:15,2019-12-11 19:08:09,closed,mapbox examples with px,,1,2,[]
437,351974444,1997,14579099,2019-12-11 15:31:06,2019-12-11 18:36:40,closed,example with reversed colorscale,,1,2,[]
438,351523390,1996,14579099,2019-12-10 18:06:08,,open,Add support for MultiIndex levels in px,"This is one feature I'm missing in my standard workflow where I often end up with a nice MultiIndex but need to drop its levels (or use horribly verbose `index.get_level_values()`) every time I try to plot something.

Here I provide an implementation which in a situation like `px(df, x='x')` searches for 'x' in the levels of `df.index` if its not found in `df.columns`.

I also provided a test function and updated suitable docstring. I hope to see this extension in future versions of Plotly :)",2,7,[]
439,351491659,1995,14579099,2019-12-10 16:49:45,2019-12-11 19:37:42,closed,"px examples for pie, funnel/funnelarea, sunburst/treemap","~Sunburst and treemap examples will go to another PR because I did not want to slow down the review process.~ 

For sunburst and treemap I included only a minimal example since we will probably have a nicer API in the future, with `path`.",3,4,[]
440,351490273,1994,14579099,2019-12-10 16:46:45,2019-12-10 16:52:13,closed,Release 4.4.1,Hotfix release to fix https://github.com/plotly/plotly.py/pull/1993,0,2,[]
441,351484882,1993,14579099,2019-12-10 16:35:35,2019-12-10 16:40:53,closed,Fix improper JSON encoding exception when pillow module not installed,"4.4.0 regression.  When the `pillow` module is not installed, and an attempt is made to JSON serialize a figure that includes unsupported object types, an `AttributeError: 'NoneType' object has no attribute 'Image'` exception was raised.

With this fix, the proper `TypeError` exception is raised once more.",0,1,[]
442,351405753,1992,14579099,2019-12-10 14:00:55,2019-12-10 14:16:43,closed,Release 4.4.0,Release branch for version 4.4.0 (formerly called 4.3.1),0,2,[]
443,351381470,1991,14579099,2019-12-10 13:08:29,2019-12-10 13:28:37,closed,Convert PIL image objects to data uri strings in JSON serialization.,"This conversion is already done by the `layout.image.source` validator, but this way it will also happen when serializing from a dict without validation, and for images that show up elsewhere in the figure (as mapbox layers for example)",0,1,[]
444,351138831,1990,14579099,2019-12-10 00:20:12,2019-12-10 12:59:13,closed,Px should not hardcode height,,0,2,[]
445,351099131,1989,14579099,2019-12-09 22:08:03,2019-12-09 22:30:10,closed,changelog,,1,1,[]
446,350916465,1988,14579099,2019-12-09 19:09:20,2019-12-09 20:17:38,closed,update to plotly.js 1.51.2,,2,2,[]
447,350626016,1987,14579099,2019-12-09 10:06:49,,open,Doc: 'stack' barmode also works for px.bar,"Hi, this is my first pull request, if I choose the wrong branch, please let me know :)

Just a small extension to the available options of `px.bar` to begin with.",4,5,[]
448,349646376,1981,14579099,2019-12-05 21:09:13,2019-12-05 22:08:33,closed,correct zmin/zmax/range_color bug,Closes #1931,1,2,[]
449,349636895,1980,14579099,2019-12-05 20:44:11,2020-05-04 13:56:08,closed,Mapbox attribution,,1,2,['documentation']
450,349624304,1979,14579099,2019-12-05 20:12:17,2019-12-06 19:40:56,closed,multiple tooltips,,2,4,[]
451,349120342,1977,14579099,2019-12-04 22:15:27,2019-12-06 13:46:18,closed,added example about customdata and hovertemplate,,1,1,[]
452,349094710,1975,14579099,2019-12-04 21:11:42,2019-12-05 20:45:36,closed,removing colorbar imshow example,,1,1,[]
453,349087383,1974,14579099,2019-12-04 20:52:17,2019-12-06 15:05:13,closed,3d surface example,,1,1,[]
454,349058789,1972,14579099,2019-12-04 19:39:04,2019-12-04 19:40:09,closed,added 3d surface example,,0,4,[]
455,348990898,1969,14579099,2019-12-04 16:51:47,2019-12-05 21:30:55,closed,add range_theta kwarg,Closes https://github.com/plotly/plotly_express/issues/160,3,3,[]
456,348565870,1966,14579099,2019-12-03 21:40:09,2019-12-04 14:03:58,closed,fix facet labels,Closes #1944,1,1,[]
457,348525579,1955,14579099,2019-12-03 20:05:54,2019-12-03 22:02:20,closed,added imshow to px tutorial,Ported from https://github.com/plotly/plotly.py-docs/pull/199/,1,1,[]
458,348522962,1954,14579099,2019-12-03 20:00:03,2019-12-03 21:46:02,closed,pull example in pie chart,Ported from https://github.com/plotly/plotly.py-docs/pull/209,1,1,[]
459,348501901,1953,14579099,2019-12-03 19:12:27,2019-12-03 19:35:28,closed,Merge doc prod,In a PR to be sure that the CI is happy.,0,6,[]
460,348495327,1952,14579099,2019-12-03 18:56:56,,open,Offsetgroup alignmentgroup,,2,3,['documentation']
461,348460558,1951,14579099,2019-12-03 17:35:55,2019-12-05 16:47:45,closed,bingroup,,1,2,[]
462,348459889,1950,14579099,2019-12-03 17:34:20,2019-12-03 17:36:25,closed,bingroup,,0,1,[]
463,348458672,1949,14579099,2019-12-03 17:31:34,2019-12-03 18:56:58,closed,symlink root readme,Closes #1898 and replaces #1905 ,1,1,[]
464,348390132,1948,14579099,2019-12-03 15:21:01,2019-12-03 16:52:22,closed,Ci bug,,0,8,[]
465,348389706,1947,14579099,2019-12-03 15:20:15,2019-12-03 16:14:57,closed,Ci bug,,0,12,[]
466,348360731,1946,14579099,2019-12-03 14:27:53,2019-12-03 14:55:42,closed,changed repo where to deploy built branch,,1,2,[]
467,348350812,1945,14579099,2019-12-03 14:09:31,2019-12-03 14:17:00,closed,bump CI,,0,1,[]
468,348119947,1943,14579099,2019-12-03 04:54:25,2019-12-06 17:10:02,closed,connectgaps,,1,1,[]
469,347942191,1942,14579099,2019-12-02 19:39:06,2019-12-02 20:27:07,closed,removed submodules,,1,1,[]
470,347782255,1941,14579099,2019-12-02 17:21:14,2019-12-02 18:29:59,closed,bypass confirmation when uninstalling stable plotly,"The doc build is currently failing on master since it waits for a confirmation which never comes, this should fix this failure.",1,2,[]
471,347680947,1939,14579099,2019-12-02 15:24:41,2019-12-03 17:10:45,closed,Set docstring linewidth to 75 to avoid wrapping in jupyterlab help popup,"I noticed that I didn't cover the one line chart descriptions in #1866, so adding them in this PR.

Current:
![image](https://user-images.githubusercontent.com/4560057/69971234-de8a5a80-151f-11ea-9360-98300bc68dcf.png)

Suggested:
![image](https://user-images.githubusercontent.com/4560057/69971262-e77b2c00-151f-11ea-88e5-9767cf88750d.png)

When I did this I noticed that the exact line width that jupyterlab breaks at is 76, not 78, so I updated the autoformatting of the docs as well.
",2,2,[]
472,347407924,1937,14579099,2019-12-02 02:29:43,2019-12-02 20:22:00,closed,New mapbox functions in PX,I'll add a couple of tests here and then this should be good to go :),5,8,[]
473,347349147,1936,14579099,2019-12-01 17:03:42,2019-12-02 17:01:56,closed,Doc migration,,4,13,[]
474,347187444,1934,14579099,2019-11-30 03:12:06,2019-12-01 01:16:28,closed,fix a PX input bug when using data frame indices,,2,1,[]
475,346882406,1933,14579099,2019-11-29 03:37:15,2019-12-10 11:17:42,closed,Reversed colorscale,Closes #1681,10,17,[]
476,346834152,1932,14579099,2019-11-28 21:11:53,2019-11-29 02:07:58,closed,dataframe parameter in px docstrings,Closes #1926 . Is this enough?,1,3,[]
477,344680942,1921,14579099,2019-11-22 20:12:00,2019-11-29 02:07:28,closed,first round of changes towards doctesting,"Not a full doctest workflow yet, but some required changes.",12,18,[]
478,343806734,1915,14579099,2019-11-21 01:57:37,2019-12-09 18:55:12,closed,Fix validate_executable behavior,"Validate orca executable only if server_url is not provided

Fixes #1914",2,1,[]
479,342370683,1909,14579099,2019-11-18 21:28:21,2019-11-28 18:12:41,closed,"adding pie, treemap, sunburst, funnel and funnelarea to px",,10,15,[]
480,341445878,1905,14579099,2019-11-15 12:27:42,2019-12-03 18:57:20,closed,Use main readme as long_description for PyPi,https://pypi.org/project/plotly/,2,1,[]
481,340678290,1900,14579099,2019-11-13 21:33:12,2019-12-03 17:12:27,closed,added imshow visual test for percy,,2,2,[]
482,340639717,1899,14579099,2019-11-13 19:56:52,2019-12-03 19:00:07,closed,updated subplots import in figure factories,,4,1,[]
483,340041507,1896,14579099,2019-11-12 18:10:36,2019-11-12 21:37:32,closed,version update in README,@jonmmease I think this one needed to be updated as well,2,1,[]
484,339688627,1894,14579099,2019-11-12 01:44:26,2019-11-12 11:02:41,closed,Release 4.3.0,Release branch for 4.3.0,0,6,[]
485,339643212,1893,14579099,2019-11-11 22:26:15,2019-11-12 01:42:41,closed,Template bis,,5,4,[]
486,339540336,1892,14579099,2019-11-11 17:31:32,2019-11-11 22:39:02,closed,Propagate empty templates,"When a template is explicitly set to `{}`, it is now replaced by `{""data"": {""scatter"": [{}]}}` so that it will not get overridden by a default template when a figure is passed along to other functions/libraries.

cc @nicolaskruchten ",5,2,[]
487,339494665,1891,14579099,2019-11-11 15:42:06,2020-01-22 14:18:47,closed,load plotly.js from unminified dist bundle in plotlywidget,"With this PR, both `jupyterlab-plotly` and `plotlywidget` now load plotly.js from the unminified dist bundle, so jupyterlab should be able to de-duplicate plotly.js when both extensions are installed.

Closes https://github.com/plotly/plotly.py/issues/1873

cc @vidartf",7,1,[]
488,339396404,1888,14579099,2019-11-11 11:55:37,2019-11-11 20:17:18,closed,"Remove ""paper"" as default reference when adding annotations/shapes/images","This PR updates `add_annotations`/`add_shapes`/`add_images` so that if no `row`/`col` are specified, the `xref`/`yref` properties are left unset rather than being set to `""paper""`.  Now, to use `add_annotations` to add an annotation in ""paper"" coordinates you leave `row`/`col` unset and simply pass `xref=""paper"" and yref=""paper` kwargs.

Similarly, `select_annotations` no longer accepts `row=""paper""`/`col=""paper`. Instead, to select only the annotations in paper coordinates, you would use `xref=""paper""`, `yref=""paper""` in the `selector`.

@nicolaskruchten 

Closes #1881",2,2,[]
489,338924239,1886,14579099,2019-11-09 01:51:10,2019-11-11 19:43:54,closed,apply defaults cascade to swatches(),,3,4,[]
490,338831202,1885,14579099,2019-11-08 19:46:14,2019-11-08 21:06:19,closed,Move imshow closer to px pattern,"@emmanuelle here's the first pass on the PX-ification of the `imshow` function. I'm realizing that to align better with the other `px` methods we should probably add `height`, `width` and `template` and the rest of the `px` defaulting machinery...",5,3,[]
491,338662559,1884,14579099,2019-11-08 12:49:01,2019-12-10 13:37:50,closed,Update contribution guidelines,"I was setting up a plotly dev env again and documented a few things I did differently from the current guidelines. The only thing that I didn't include was that I had issues installing the optional dependencies via `pip`. This might be a local problem, but fwiw I installed these packages via conda instead:

```
conda create -n plotly-dev pandas seaborn jupyterlab scipy simplegeneric
conda activate plotly-dev
conda install -c plotly plotly-orca psutil requests
```",2,5,[]
492,338133434,1882,14579099,2019-11-07 16:38:37,2019-11-08 19:26:53,closed,Hide ticks and axis line for the marginal value axes,"**Current behavior**
![image](https://user-images.githubusercontent.com/4560057/68408048-e5be8280-0184-11ea-8965-ee66780aef39.png)


**Proposed behavior**
![image](https://user-images.githubusercontent.com/4560057/68407965-bd368880-0184-11ea-9110-d9ba7cbdec5a.png)",3,1,[]
493,337375384,1880,14579099,2019-11-06 13:59:17,2019-11-11 20:43:18,closed,Bump lodash from 4.17.5 to 4.17.13 in /packages/javascript/jupyterlab-plotly,"Bumps [lodash](https://github.com/lodash/lodash) from 4.17.5 to 4.17.13.
<details>
<summary>Commits</summary>

- [`e371828`](https://github.com/lodash/lodash/commit/e37182845f16715a0d1c391c8662d83c55609cee) Bump to v4.17.13.
- [`357e899`](https://github.com/lodash/lodash/commit/357e899e685872b4af5403ecc4b2a928f961ae63) Rebuild lodash and docs.
- [`fd9a062`](https://github.com/lodash/lodash/commit/fd9a062d57646450b61f74029315abd4cc834b08) Bump to v4.17.12.
- [`e77d681`](https://github.com/lodash/lodash/commit/e77d68121ff00ba86b53eed5893d35adfe94c9dd) Rebuild lodash and docs.
- [`629d186`](https://github.com/lodash/lodash/commit/629d1865793182cd967196716f4beff223aa4a91) Update OpenJS references.
- [`2406eac`](https://github.com/lodash/lodash/commit/2406eac542b2a1282be8d812a6d8a45433ade80a) Fix minified build.
- [`17a34bc`](https://github.com/lodash/lodash/commit/17a34bc5854bb982ef333bfe7ae469f4dfcee0ec) Fix test bootstrap for core build.
- [`53838a3`](https://github.com/lodash/lodash/commit/53838a38f8e4f6204ef2f837fecc4e07d09afe77) Fix tests in older browsers.
- [`29e2584`](https://github.com/lodash/lodash/commit/29e258497b5ff45494a85cfa58743517aaeeff52) Fix style:test lint nits.
- [`8f4d3eb`](https://github.com/lodash/lodash/commit/8f4d3eb018884d96eb57fba3f724bfff494df724) Update deps.
- Additional commits viewable in [compare view](https://github.com/lodash/lodash/compare/4.17.5...4.17.13)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=lodash&package-manager=npm_and_yarn&previous-version=4.17.5&new-version=4.17.13)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/plotly/plotly.py/network/alerts).

</details>",0,1,['dependencies']
494,337375327,1879,14579099,2019-11-06 13:59:09,2019-11-11 23:17:34,closed,Bump ecstatic from 2.2.1 to 2.2.2 in /packages/python/plotly/plotly/tests/test_optional/test_jupyter,"Bumps [ecstatic](https://github.com/jfhbrook/node-ecstatic) from 2.2.1 to 2.2.2.
<details>
<summary>Changelog</summary>

*Sourced from [ecstatic's changelog](https://github.com/jfhbrook/node-ecstatic/blob/2.2.2/CHANGELOG.md).*

> 2019/05/03 Version 2.2.2
> - Backport redirects bugfix
> 
> 2017/06/06 Version 2.2.1
> - Fix version number in CHANGELOG.md
> 
> 2017/06/06 Version 2.2.0
> - Will now properly serve gzip files when defaulting the extension
> - Will fall back to serving non-gzip files if file with .gz extension is
>   missing the magic bytes
> - Updated he, url-join
> - Updated devDependencies
> - Added .npmrc
> - Added package-lock.json
> - Much improved documentation for the cli component
> 
> 2016/08/10 Version 2.1.0
> - New, prettier showDir pages with icons!
> 
> 2016/08/09 Version 2.0.0
> - No longer strip null bytes from uris before parsing. This avoids a regexp dos
>   attack. The stripping was to avoid a bug regarding c++ null terminated
>   strings shenanigans in some versions of node, but it *appears* fixed in LTS
>   versions of node.
> - When both showDir and autoIndex are turned off, do not redirect from /foo to
>   /foo/.
> - Add code coverage reports and codecov.io
> 
> 2015/05/10 Version 1.4.1
> - Compare if-modified-since header against server-generated last-modified
>   header rather than raw mtime
> 
> 2015/12/22 Version 1.4.0
> - Add ability to specify custom mimetypes via a JSON blob (on the CLI)
> - Started test suite around CLI options parsing
> - Workaround for egregious v8 bug around date parsing throwing during
>   modified-since checks
> 
> 2015/11/15 Version 1.3.1
> - Add recent contributors to CONTRIBUTORS.md
> - Document showDotFiles in main options example
> 
> 2015/11/14 Version 1.3.0
> - opts.showDotFiles allows hiding dot files
> 
> 2015/11/03 Version 1.2.0
> - opts.cache supports function argument
> 
> 2015/10/03 Version 1.1.3
> - Add CORS=false to defaults
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`709c0f0`](https://github.com/jfhbrook/node-ecstatic/commit/709c0f09a419ebb3419eeb969b4ba987dc3b547a) Release 2.2.2
- [`4e2a944`](https://github.com/jfhbrook/node-ecstatic/commit/4e2a944445727294421ded2f8549714d9b29d6f7) Backport redirect vuln fix
- See full diff in [compare view](https://github.com/jfhbrook/node-ecstatic/compare/2.2.1...2.2.2)
</details>
<details>
<summary>Maintainer changes</summary>

This version was pushed to npm by [jfhbrook](https://www.npmjs.com/~jfhbrook), a new releaser for ecstatic since your current version.
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ecstatic&package-manager=npm_and_yarn&previous-version=2.2.1&new-version=2.2.2)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/plotly/plotly.py/network/alerts).

</details>",0,1,['dependencies']
495,337375264,1878,14579099,2019-11-06 13:59:03,2019-11-11 23:16:34,closed,Bump lodash from 4.17.5 to 4.17.13 in /packages/javascript/plotlywidget,"Bumps [lodash](https://github.com/lodash/lodash) from 4.17.5 to 4.17.13.
<details>
<summary>Commits</summary>

- [`e371828`](https://github.com/lodash/lodash/commit/e37182845f16715a0d1c391c8662d83c55609cee) Bump to v4.17.13.
- [`357e899`](https://github.com/lodash/lodash/commit/357e899e685872b4af5403ecc4b2a928f961ae63) Rebuild lodash and docs.
- [`fd9a062`](https://github.com/lodash/lodash/commit/fd9a062d57646450b61f74029315abd4cc834b08) Bump to v4.17.12.
- [`e77d681`](https://github.com/lodash/lodash/commit/e77d68121ff00ba86b53eed5893d35adfe94c9dd) Rebuild lodash and docs.
- [`629d186`](https://github.com/lodash/lodash/commit/629d1865793182cd967196716f4beff223aa4a91) Update OpenJS references.
- [`2406eac`](https://github.com/lodash/lodash/commit/2406eac542b2a1282be8d812a6d8a45433ade80a) Fix minified build.
- [`17a34bc`](https://github.com/lodash/lodash/commit/17a34bc5854bb982ef333bfe7ae469f4dfcee0ec) Fix test bootstrap for core build.
- [`53838a3`](https://github.com/lodash/lodash/commit/53838a38f8e4f6204ef2f837fecc4e07d09afe77) Fix tests in older browsers.
- [`29e2584`](https://github.com/lodash/lodash/commit/29e258497b5ff45494a85cfa58743517aaeeff52) Fix style:test lint nits.
- [`8f4d3eb`](https://github.com/lodash/lodash/commit/8f4d3eb018884d96eb57fba3f724bfff494df724) Update deps.
- Additional commits viewable in [compare view](https://github.com/lodash/lodash/compare/4.17.5...4.17.13)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=lodash&package-manager=npm_and_yarn&previous-version=4.17.5&new-version=4.17.13)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/plotly/plotly.py/network/alerts).

</details>",0,1,['dependencies']
496,337147817,1877,14579099,2019-11-06 03:26:16,2019-11-06 13:57:31,closed,Codegen + black,Let's try to update the codegen + fix black at the same time,1,5,[]
497,336908559,1875,14579099,2019-11-05 17:51:18,2019-11-06 15:07:13,closed,PX shouldn't modify attrs controlled by template,This supersedes #1863,5,4,[]
498,336808100,1874,14579099,2019-11-05 14:32:36,2019-11-05 19:58:43,closed,Add additional templates to control grid lines,Together with the xgridoff template these allow full control over which gridlines are visible.,7,4,[]
499,336697029,1872,14579099,2019-11-05 10:10:32,2019-11-11 20:33:23,closed,Use the default template's background color for swatches,"This is a suggestion to use the default template's background color for swatches Instead of always using the plotly template. The potential benefit of this change would be that it is easier to tell which colors sequence go well with the currently used template.

It would be neat if this also checked if there was a PX template set, and I asked a related question about how PX and PIO templates synergize in #1869.

Screenshots:

![image](https://user-images.githubusercontent.com/4560057/68197772-1226a300-ffbb-11e9-9042-b7b7ab772807.png)
---

![image](https://user-images.githubusercontent.com/4560057/68198161-ce806900-ffbb-11e9-84c6-0860cda6c254.png)
---

![image](https://user-images.githubusercontent.com/4560057/68198029-924d0880-ffbb-11e9-8a89-352020257189.png)
---

![image](https://user-images.githubusercontent.com/4560057/68198089-ab55b980-ffbb-11e9-8d30-09317b7c70cb.png)
---

![image](https://user-images.githubusercontent.com/4560057/68198134-bdcff300-ffbb-11e9-975d-657dc9db3065.png)
---

![image](https://user-images.githubusercontent.com/4560057/68197994-85c8b000-ffbb-11e9-8391-a3b10b04fd92.png)
",8,5,[]
500,336581095,1871,14579099,2019-11-05 03:34:50,2019-11-05 22:14:59,closed,"PX templates should override, not merge into default","Right now, passing `template={}` to any `px` method gives strange output: it uses the `pio.templates.default` for most things but then uses `px`'s internal defaults for colors. This is pretty weird and annoying, and it means that if a user wants to inline any template information, they *first* have to set `pio.templates.default` to `""none""`, or they have to override the entire default template. Also they can't use `template={}`, they have to use `template=""none""`.

I think the behaviour in this PR is better, but I welcome feedback.",5,2,[]
501,336461361,1867,14579099,2019-11-04 20:25:08,2019-11-06 03:00:46,closed,Make colorbars respect template configurations,"Currently, none of the colorbar options in the templates are effective and colorbars are rendered the same regardless of the template. This PR adds the template colorbar options under the `layout.coloraxis` key instead of assigning them to individual figures. As a bonus the json template files are now about half the size.

I removed the colorbar helper function because I didn't see any other use for it. I also removed the figure level colorscale assignments because it seems like the figures pick up these from the template just fine.

You can see the effect of the proposed changes below.

## ========== Current =================== This PR =======
![image](https://user-images.githubusercontent.com/4560057/68154668-4dd45500-ff48-11e9-9b40-983c09091675.png)
",10,2,[]
502,336116491,1866,14579099,2019-11-04 04:13:38,2019-11-04 16:12:48,closed,Docstring touchups,I noticed these minor issues while working on the other PRs.,0,8,[]
503,336111738,1864,14579099,2019-11-04 03:38:06,2019-11-07 19:40:32,closed,Add mpl-like template,"@nicolaskruchten The PR is finally here! There are still a few things to test, but please have a look nd let me know if this makes sense so far. Notably, I still have to tend to these items

- [x] ~test table colors~ #1869 
- [x] test annotations
- [x] ~no axes lines in scatter matrix~ see comment posted below
- [x] ~no ticks on colorbars~ #1867
- [x] consider adding weak transparency on plots that are likely to overlap such as scatters
- [x] take final decision on the sequential colormap

I suggest naming this template mpl as a reference to the default style in matplotlib. The most notable difference would be that the top and rightmost axis lines are omitted here whereas matplotlib plots full boxes around the plots by default. The ticks, bg color, and color rotations are all the same as the default matplotlib style (altuogh I kept gray14 as the black color for now). I thought it made sense with this consistency so I included Viridis as the default color map instead of Inferno or Blues which I would be more likely to choose myself. For complete adherence, I could add the full box and then make another template called ""despine"" or similar to remove the topmost and rightmost axis lines.

I would also be happy to call this template xticks or axes lines and be more liberal in some of the choices, let me know what you think makes the most sense.

Some screens:
![image](https://user-images.githubusercontent.com/4560057/68098276-115b1780-febc-11e9-999b-6d8eff703819.png)

![image](https://user-images.githubusercontent.com/4560057/68098307-410a1f80-febc-11e9-80cf-6b1cae66fd00.png)

![image](https://user-images.githubusercontent.com/4560057/68098321-54b58600-febc-11e9-96b5-d29b26429def.png)

![image](https://user-images.githubusercontent.com/4560057/68098337-672fbf80-febc-11e9-9f3b-4e62484d10a0.png)

close #1834 



",14,16,[]
504,336085562,1863,14579099,2019-11-04 00:06:20,2019-11-05 17:51:49,closed,Remove marginal plot grids as hardcoded default,"I suggest to remove that hardcoded grids for marignal plots and instead inherit the grid settings from the template. This is particularly useful for templates that don't use grids.

The second commit sets two defaults that I think are almost always wanted: No y-axis line or ticks for the marginal plots. I am happy to drop this change with the same logic as above if you think these should be configurable from templates as well. ",11,6,[]
505,336083398,1862,14579099,2019-11-03 23:42:34,,open,Even spacing for marginal x and y plots,"Previously, the marginal y plot was closer to the main plot compared to the marginal x plot:

![image](https://user-images.githubusercontent.com/4560057/68093782-7c472700-fe99-11e9-94e1-313879aac95e.png)

After this change, both the marginal plots appear to be as far from the main plot:
![image](https://user-images.githubusercontent.com/4560057/68093805-c8926700-fe99-11e9-9dd0-2f1c8a8b6ba2.png)

I also increased the distance of both plots a tiny bit over the previous max distance because I think it looks better, but happy to change that if you disagree. The improvement is clearer (but still subtle) when using axes lines and a white background:

Old max:
![image](https://user-images.githubusercontent.com/4560057/68093949-95e96e00-fe9b-11e9-9d2e-902563087ca4.png)

New max:
![image](https://user-images.githubusercontent.com/4560057/68093933-663a6600-fe9b-11e9-9d29-2a3d1e187805.png)



",7,4,[]
506,335499642,1856,14579099,2019-11-01 16:15:52,2019-11-03 19:54:58,closed,Fix pandas future warning on create_choropleth,This PR resolves https://github.com/plotly/plotly.py-docs/issues/164,2,1,[]
507,334514094,1855,14579099,2019-10-30 20:59:42,2019-11-07 20:43:53,closed,Imshow,"This is still WIP, I need to track some corner cases, but this is to give an idea of what the `imshow` function could look like.",2,6,[]
508,333275366,1850,14579099,2019-10-28 19:03:39,2019-11-11 20:52:40,closed,Add server_url to plotly.io.orca to allow for external orca server,"Add server_url to plotly.io.orca.config to allow an external orca server.

Implementation of #1570 ",9,6,[]
509,332727365,1848,14579099,2019-10-26 02:20:47,2019-10-26 02:58:44,closed,Fixes minor typos in compatibility.md,,1,1,[]
510,330815928,1840,14579099,2019-10-22 05:48:41,2019-10-22 12:16:22,closed,Update _orca.py,"Currently, this link guides user to [orca.](https://github.com/plotly/orca.) instead of [orca](https://github.com/plotly/orca)",2,1,[]
511,330691953,1838,14579099,2019-10-21 21:03:45,2019-10-22 04:48:21,closed,initial build-out of facet wrapping,"* Closes https://github.com/plotly/plotly_express/issues/2
* Closes https://github.com/plotly/plotly.py/issues/1836",8,5,[]
512,330167399,1837,14579099,2019-10-20 22:53:39,2019-11-11 20:11:45,closed,docstring refactoring in figure factory,"Goals
- update docstring `iplot` --> `fig.show()`
- format code blocks so that they render nicely (syntax highlighting) in API ref

![image](https://user-images.githubusercontent.com/263366/67167670-b62d0f00-f36a-11e9-90be-ae3413a4cdd9.png)

Note that the `>>>` do not prevent pasting in a notebook cell, jupyter know how to handle them.

I'll work through the list of figure factories but I wanted to open this first as WIP for the sake of discussing this update.",4,8,[]
513,330090789,1835,14579099,2019-10-20 07:10:28,2019-10-22 04:11:14,closed,Reformat docstrings,"@nicolaskruchten As per our discussion in https://github.com/plotly/plotly_express/issues/154

I tried not making more changes than necessary so I didn't go after things like changing ""numbers"" to ""int"" or ""float"". I used `make_subplots.py` as a guide and tried to be consistent with the formatting there (with the one exception being dict that I changed there instead according to what seemed to be the most frequently used elsewhere in plotly).

Please have a thorough look through since I might have missed some parenthesis somewhere. 

Close https://github.com/plotly/plotly_express/issues/154",6,12,[]
514,329973427,1833,14579099,2019-10-19 02:17:49,2019-10-20 14:06:10,closed,remove pywavelets from CI,"The pywavelets team has been pretty quick at fixing the py2 issue, so let's remove this tox dep before we forget why it was introduced....",1,1,[]
515,329835980,1832,14579099,2019-10-18 16:53:54,2019-10-18 20:53:40,closed,fixed skimage import,Closes #1826 and #1829,4,6,[]
516,328699008,1823,14579099,2019-10-16 11:01:35,2019-10-16 22:09:12,closed,Release 4.2.0,Release branch for version 4.2.0,0,3,[]
517,328482459,1822,14579099,2019-10-15 21:55:53,2019-10-16 09:25:53,closed,Python 2 iframe renderer follow-on to (#1809),,0,2,[]
518,328305624,1820,14579099,2019-10-15 14:34:43,2019-10-15 19:21:30,closed,Update to to plotly.js 1.50.1,,0,2,[]
519,328222153,1819,14579099,2019-10-15 11:35:48,2019-10-15 14:35:09,closed,Template specification fixes,"Closes https://github.com/plotly/plotly.py/issues/1807

Also fixes the case where a template is specified as a string to `fig.update`",0,2,[]
520,327982192,1817,14579099,2019-10-14 21:35:45,2019-10-15 14:27:21,closed,"Add convenience methods for annotations, shapes, and images","## Overview
This PR adds a set of new convenience methods for annotations, shapes, and images
 - `fig.add_*`
 - `fig.select_*` 
 - `fig.for_each_*`
 - `fig.update_*`

Where `*` is annotation(s), shape(s), or image(s).

cc @nicolaskruchten ",5,8,[]
521,327459457,1813,14579099,2019-10-12 12:15:06,2019-10-14 21:42:08,closed,Capitalized the letters in the hex codes,Just for consistency.,1,2,[]
522,326815358,1810,14579099,2019-10-10 16:03:57,2019-10-15 21:22:33,closed,Fix for #1809 Python 2.7 incompatibility in the iframe renderer,Fixes #1809,7,1,[]
523,325068038,1803,14579099,2019-10-06 19:53:39,2019-10-07 12:36:23,closed,__all__ for figure_factory and io (for sphinx),I modified the `__all__` variable of `figure_factory` and `io` so that sphinx finds the functions when autodocumenting modules.,1,2,[]
524,324939479,1802,14579099,2019-10-05 13:24:07,2019-10-09 21:29:19,closed,Graph objects structure and __all__ specifications,"Code generation update to close  https://github.com/plotly/plotly.py/issues/1799 and the `graph_objects` part of https://github.com/plotly/plotly.py/issues/1800.

@emmanuelle could you check if the placement of the `__all__` statements under `graph_objects` helps sphinx find the classes to document?",18,2,[]
525,324014423,1796,14579099,2019-10-03 02:11:31,2019-10-06 19:54:32,closed,[WIP] document API using sphinx,"This is very much WIP! Just a proof of concept showing how to use sphinx in order to document the API. I have only included a few modules, but if we decide to pursue this path it's not a big effort to add the other ones.",1,3,[]
526,322324447,1791,14579099,2019-09-27 20:54:48,,open,"Dont create unnecessary lists, use more generators and comprehensions",I tried to improve the speed by preventing the creation of lists that are not needed and the use of generators and comprehensions. In some cases this could mean significant speedups.,12,8,[]
527,320037902,1786,14579099,2019-09-22 11:46:19,2019-10-16 17:52:00,closed,Update _chart_types.py,"`points` parameter in `plotly.express.box()` is default to `""outliers""` instead of `None`",1,1,[]
528,320035113,1785,14579099,2019-09-22 11:06:37,2019-10-15 20:52:12,closed,Update _chart_types.py,barnorm is default to None instead of '',4,1,[]
529,320028142,1784,14579099,2019-09-22 09:29:51,2019-10-15 14:36:16,closed,Update _doc.py,Update comments,2,1,[]
530,319740295,1782,14579099,2019-09-20 14:10:48,2019-11-01 15:02:50,closed,Update README.md for using install plotly jupyter widget,The build system needs to have git and node.js.,2,1,[]
531,317326034,1768,14579099,2019-09-13 13:28:11,2019-10-04 01:33:39,closed,more flexible type of input arguments for px functions,"This is a first a draft for accepting more flexible types of input arguments for `px` functions, eg numpy arrays, dataframe columns, mixed type etc. At the moment the transformation done by `build_or_augment_dataframe` is done argument by argument, so having different arguments with different types is ok. 

Todo:
- write more tests
- decide what to do with arguments which are lists, such as `hover_data`, `custom_data`, `dimensions`. At the moment they are just skipped so they should be column names. I did this because I wanted to discuss the names they should have, should it be `customdata_0`, `customdata_1` etc. ?

For the cases which are taken into account, please see the test file.

Closes #1767 , follow-up on https://github.com/plotly/plotly_express/pull/87 (thank you @malmaud !)",32,69,[]
532,316115037,1765,14579099,2019-09-10 18:10:10,2019-09-10 18:46:07,closed,removed streaming tests,,2,1,[]
533,316005142,1764,14579099,2019-09-10 13:50:31,2019-09-12 19:46:41,closed,Add custom_data argument to px functions,closes https://github.com/plotly/plotly.py/issues/1751,23,22,[]
534,315671385,1763,14579099,2019-09-09 19:02:55,2020-04-28 12:54:25,closed,new regressions Huber and Theil-Sen for trendline,"Hi! I've added  two robust regressions for trendlines. There's an import from scipy, maybe it's not great. But I think that robust regressions will be helpful for analyzing data.",3,1,[]
535,315214308,1760,14579099,2019-09-07 18:05:05,2019-09-10 13:26:01,closed,Fix typo in plotly.subplots.py which mentioned a non-existing filepath,closes #1759 ,1,2,[]
536,315078536,1758,14579099,2019-09-06 19:07:33,2019-09-11 14:08:42,closed,percy tests,,14,20,[]
537,314650407,1754,14579099,2019-09-05 18:57:22,2019-09-12 16:52:01,closed,added minimal test for px,"Of course many more tests for px, but I'm opening this PR as a placeholder to comment about how px tests should look like.",6,12,[]
538,313347949,1750,14579099,2019-09-02 18:55:32,2019-09-03 09:23:51,closed,Release 4.1.1,"Release branch for `plotly==4.1.1`, `plotlywidget@1.1.1`, and `jupyterlab-plotly@1.1.1`",2,4,[]
539,312946898,1747,14579099,2019-08-31 10:34:26,2019-09-02 18:29:23,closed,Update to plotly.js 1.49.4,,0,1,[]
540,308321450,1726,14579099,2019-08-17 22:08:35,2019-10-14 22:00:21,closed,"Add ""overwrite"" kwarg to all update* figure methods.","Closes https://github.com/plotly/plotly.py/issues/1717

This PR adds a new `overwrite` kwarg to all of the figure `update*` methods.  The default behavior, with `overwrite=False`, is to apply updates recursively to the existing nested property structure.  With `overwrite=True`, the prior value of existing properties is overwritten with the provided value.

",3,1,[]
541,307778324,1724,14579099,2019-08-15 16:52:54,2019-08-31 10:14:29,closed,responsive Gantt-chart,"Hi,

#1211 mentioned that the created figure is not responsive, so I removed the default values for width and height of the figure.

Csaba",3,24,[]
542,307075097,1723,14579099,2019-08-13 20:54:23,2019-08-31 10:12:27,closed,Avoid crash in iframe renderers when running outside iPython,"when running

```
echo '{""hour"":""2019-01-01T00:00:00Z"",""perf"":1}' | python <(                     
echo ""                                                                                                                        
import pandas as pd                                                                                                           
from plotly import express as px                                                                                              
import sys                                                                                                                    
data = pd.read_json(sys.stdin.read(), lines=True, convert_dates=['hour'])                                                     
fig = px.line(data, x='hour', y='perf')                                                                                       
fig.show(renderer='iframe')                                                                                                   
"")
```

if `ipython` is not installed you get:

```
Traceback (most recent call last):
  File ""/dev/fd/63"", line 7, in <module>
  File ""/home/marco/src/plotly.py/packages/python/plotly/plotly/basedatatypes.py"", line 2658, in show
    return pio.show(self, *args, **kwargs)
  File ""/home/marco/src/plotly.py/packages/python/plotly/plotly/io/_renderers.py"", line 376, in show
    bundle = renderers._build_mime_bundle(fig_dict, renderers_string=renderer, **kwargs)
  File ""/home/marco/src/plotly.py/packages/python/plotly/plotly/io/_renderers.py"", line 296, in _build_mime_bundle
    bundle.update(renderer.to_mimebundle(fig_dict))
  File ""/home/marco/src/plotly.py/packages/python/plotly/plotly/io/_base_renderers.py"", line 564, in to_mimebundle
    filename = self.build_filename()
  File ""/home/marco/src/plotly.py/packages/python/plotly/plotly/io/_base_renderers.py"", line 601, in build_filename
    ip = IPython.get_ipython()
AttributeError: 'NoneType' object has no attribute 'get_ipython'
```

if instead `ipython` is installed
```
Traceback (most recent call last):
  File ""/dev/fd/63"", line 7, in <module>
  File ""/home/marco/src/plotly.py/packages/python/plotly/plotly/basedatatypes.py"", line 2658, in show
    return pio.show(self, *args, **kwargs)
  File ""/home/marco/src/plotly.py/packages/python/plotly/plotly/io/_renderers.py"", line 376, in show
    bundle = renderers._build_mime_bundle(fig_dict, renderers_string=renderer, **kwargs)
  File ""/home/marco/src/plotly.py/packages/python/plotly/plotly/io/_renderers.py"", line 296, in _build_mime_bundle
    bundle.update(renderer.to_mimebundle(fig_dict))
  File ""/home/marco/src/plotly.py/packages/python/plotly/plotly/io/_base_renderers.py"", line 564, in to_mimebundle
    filename = self.build_filename()
  File ""/home/marco/src/plotly.py/packages/python/plotly/plotly/io/_base_renderers.py"", line 602, in build_filename
    cell_number = list(ip.history_manager.get_tail(1))[0][1] + 1
AttributeError: 'NoneType' object has no attribute 'history_manager'
```",3,1,[]
543,305163403,1711,14579099,2019-08-07 13:58:28,2019-08-17 09:19:14,closed,Fixed the hyperlink for Changelog.md,Currently `Changelog.md` points to a blank page.,1,1,[]
544,304519965,1707,14579099,2019-08-06 02:08:52,2019-08-06 13:34:08,closed,Fix row title order on PX facets,,1,1,[]
545,304112732,1705,14579099,2019-08-05 01:26:09,2019-08-06 16:38:22,closed,prevent schema error in PX when mapbox token not set,,0,1,[]
546,304098689,1704,14579099,2019-08-04 22:05:15,2019-08-07 00:39:45,closed,Release 4.1.0,Version 4.1.0 release branch,2,14,[]
547,304096750,1703,14579099,2019-08-04 21:28:47,2019-08-04 21:53:27,closed,Databricks and CoCalc Renderers,"This PR adds new renderers for displaying figures from within the Databricks and CoCalc notebook services.

cc @nicolaskruchten 

### Databricks:
![Screen Shot 2019-08-04 at 5 23 11 PM](https://user-images.githubusercontent.com/15064365/62429474-29fd3b00-b6dd-11e9-889a-9e920d8b01f5.png)

### CoCalc:
![Screen Shot 2019-08-04 at 5 27 18 PM](https://user-images.githubusercontent.com/15064365/62429475-2f5a8580-b6dd-11e9-993d-8fa0120c14f9.png)
",0,2,[]
548,304026062,1701,14579099,2019-08-03 21:17:28,2019-08-03 22:06:36,closed,Update plotlyjs to 1.49.1,,0,4,[]
549,302135038,1694,14579099,2019-07-29 16:01:47,2019-09-11 13:50:01,closed,Custom template for trace labels,"Hi!

Thank you so much for plotly express!

Previously, I was using custom hand-made grouper loop to do what I can do now in one line.
However, I had full control of the label of the trace, which is no more the case.

This PR aims to give full access to the trace label, thanks to `template_label` kwarg.
I just made it available for `scatter` right now, and didn't run any test yet (I'm default to python 3.5, have to setup env and co first...). 

Are you interested in such feature? If so, I may continue on it.

Example:

```python
data = {""group"": [""group1""]*2 + [""group2""]*2, ""color"": [""1"",""1"",""1"",""2""], ""value"": [1,2,3,4], ""x"": [10, 20, 30, 40]} 

df = pd.DataFrame(data) 
fig = px.scatter(df, x=""x"", y=""value"", color=""color"", symbol=""group"", 
             template_label=""{color_key} = {color_val} ({toto_val})"", 
             labels={""group"": ""toto"", ""color"": ""color""} 
) 
fig.show()
```

![trace_labels_px](https://user-images.githubusercontent.com/25247745/62062958-4b1be280-b22a-11e9-890a-d4f7c3dc6c85.png)


PS : I needed it because I have plots with `station` and `specie`, and all traces was displayed as `station=A, specie=SP1`, and I want to display only `A (SP1)`",2,1,[]
550,301594846,1690,14579099,2019-07-26 15:50:06,2019-07-27 11:28:25,closed,Only attempt to import np/pd once in basevalidators,"Use get_module to import numpy and pandas once at the load of _plotly_utils.basevalidators

Significantly speeds up graph rendering when using large (10K entry)
pandas dataframe columns.

Graph rendering time changed when using Dash, updating a graph after a slider change from 1200-1500ms to 240-350ms by avoiding
many (~10K) calls to get_module().

2 potential downsides, but both seem minor:

1.) numpy and pandas will only be attempted to be imported once. If they're somehow added after the application has started, it would have previously worked, now will require application restart to get numpy / pandas functionality

2.) Loading the numpy and pandas modules (if available), even when they won't be used.


Both of these seem pretty minor in the grand scheme of things, particularly with the significant performance difference in graph setup.",7,1,[]
551,300790677,1685,14579099,2019-07-24 15:57:12,2019-08-03 21:20:25,closed,"Fix ""The truth value of an array with more than one element is ambiguous""","Fixes ""ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()""",5,4,[]
552,300414562,1678,14579099,2019-07-23 18:19:12,2019-07-23 18:40:45,closed,spelling: visulizing -> visualizing,,1,1,[]
553,299518168,1671,14579099,2019-07-19 23:59:22,2019-07-21 10:05:38,closed,Send the moveTraces message after the figure's data has been updated.,"This way, subclasses have access to the new figure state.",0,2,[]
554,299491129,1670,14579099,2019-07-19 21:23:53,2019-08-31 10:41:22,closed,FIX: fix incorrect import in deprecation warning for Scene class,"I noticed a minor issue in the text of a deprecation warning on the `Scene` class the other day, where the recommended fully-qualified class name is the same as the one being used:
```
In [1]: from plotly.graph_objs import Scene

In [2]: Scene()
/Users/skern/.edm/envs/mb_test_plotly3/lib/python3.6/site-packages/plotly/graph_objs/_deprecations.py:477: DeprecationWarning:

plotly.graph_objs.Scene is deprecated.
Please replace it with one of the following more specific types
  - plotly.graph_objs.Scene
```

The correct class that should be recommended is `plotly.graph_objs.layout.Scene`. This PR just corrects the few occurrences of that.",2,2,[]
555,298168627,1667,14579099,2019-07-16 18:54:50,2019-07-17 19:15:58,closed,adds back in missing function name,,1,1,[]
556,298094628,1666,14579099,2019-07-16 15:24:32,2019-07-16 16:41:01,closed,Version 4 integration,This is the version 4 integration branch,1,78,[]
557,297433298,1665,14579099,2019-07-14 22:38:33,2019-08-03 21:35:07,closed,Gantt chart to scatterplots,"Gantt chart now uses scatter plots:
- updating all the functions accordingly
- unit tests updated
- new param: show_hover_fill for hiding the text for the filled area

I updated the Gantt chart to use scatter plots with ""toself"" fills to draw the recantgles, instead of shapes. This allows hiding and isolating traces.
I tested on all the examples and the results were visually the same as with the shapes.",16,21,[]
558,294611628,1657,14579099,2019-07-04 14:44:27,2019-07-16 09:50:40,closed,Fix typo in the documentation.,Fix typo in the docstring.,1,1,[]
559,294192063,1656,14579099,2019-07-03 14:19:57,2019-07-04 10:03:17,closed,Error bar template colors,"Replacement for #1643 against the `v4_integration` branch.  Thanks to @Olof-Hojvall for the report and fix.

This sets the error bar color in templates, for bar traces, to the font color.  Before it was defaulting to the bar's line color, which is the background color, making the error bars not visible.

Before:
![newplot (2)](https://user-images.githubusercontent.com/15064365/60599083-d2854b80-9d7b-11e9-95ec-6e6f51cd971f.png)

After (`plotly` template):
![newplot (3)](https://user-images.githubusercontent.com/15064365/60599123-dfa23a80-9d7b-11e9-8a5e-f995ba4f8c7d.png)

Afrer (`plotly_dark` template):
![newplot (4)](https://user-images.githubusercontent.com/15064365/60599162-f5176480-9d7b-11e9-8625-5b018f379c31.png)



",1,1,[]
560,293500131,1650,14579099,2019-07-01 21:11:16,2019-07-01 21:35:40,closed,v4: Split jupyterlab extensions,This PR splits the `jupyterlab-plotly` JupyterLab extension into the `plotlywidget` and `jupyterlab-plotly` extensions.  The reason for this is that the combined extension made compatibility with nbviewer and voila challenging.,0,9,['V4']
561,293309324,1648,14579099,2019-07-01 12:03:45,2019-07-01 12:23:07,closed,Updated chart-studio logic to not overwrite files when filename not p…,"Addresses https://github.com/plotly/plotly.py/issues/1622

Now when a filename isn't provided in `chart-studio.plotly.plot`, don't make up a filename, let chart-studio name it.  This way anonymous figures don't overwrite each other",0,1,[]
562,293135373,1647,14579099,2019-06-30 22:00:07,2019-07-01 10:20:25,closed,v4 colorscale updates,"This PR makes some updates to colorscale handling to smooth over the distinction between specifying colorscales to plotly express functions and to graph objects.

 1.  Update the colorscale validator to accept lists of colors, and automatically construct a plotly.js colorscale as a list of pairs with uniformly spaced colors.  Previously this was the only way that plotly express accepted custom color scales and it was not supported by graph object colorscales.
 2. Update the colorscale validator to accept the name of colorscales from the `sequential`, `diverging`,  and `cyclical` modules in the `plotly.colors` package.
 3. Add definitions for the remaining plotly.js built-in color scales to `plotly.colors`.  Now the colorscale is never left as a string, it is always coerced into a list-of-pairs color scale.
 4. Update the plotly.express functions to use the colorscale validator, thus accepting all of the same colorscale forms as the graph objects.
 5. Added the 'rebeccapurple' named css color.
 6. Change default colorscale for the annotated heatmap figure factory to Plasma
 7. Rename `Plotly` sequential colorscale to `Plotly3` since this was only
the theme default for version 3

@nicolaskruchten ",0,8,[]
563,292852163,1643,14579099,2019-06-28 14:25:18,2019-07-03 14:27:04,closed,Fix template error bar coloring for bar plots,"Previous addition of bar outline in templates also changed color of error bars, since errorbar seems to use the colorof marker line over default. This shows a minimum change to fix it back, but I suspect that it would be preferably to set correct color it a better way. Would be happy to adjust the PR, if any suggestions on that could be done. Maybe something like default_line_color should be passed as argument like initialize_template(..., default_line_color=GRAY27) to allow templates to set the color of error bars.

See this notebooks for error and fix: https://nbviewer.jupyter.org/github/Olof-Hojvall/plotly.py/blob/error_bar_notebook/Bar%20Plot%20Errorbar%20Template%20Example.ipynb",2,1,[]
564,291598504,1637,14579099,2019-06-25 14:55:35,2019-06-25 15:49:06,closed,changed column name in wind dataset,,1,1,[]
565,290179489,1633,14579099,2019-06-20 11:41:30,2019-06-20 12:06:57,closed,V4 alpha4 release,"Release branch for `plotly==1.0.0a4`, `chart_studio==1.0.0a4`, and `jupyterlab-plotly@1.0.0-alpha.2`",0,4,[]
566,290154533,1632,14579099,2019-06-20 10:27:47,2019-06-20 11:20:35,closed,Update to plotly.js 1.48.3,Update the `v4_integration` branch to plotly.js 1.48.3,0,1,[]
567,289800200,1631,14579099,2019-06-19 17:17:53,2019-06-19 21:12:57,closed,V4 refine dependencies,"This PR cleans up the distribution package dependencies for the `plotly` package now that `chart_studio` has been split off.

I was able to remove 3 hard dependencies:

 1. I replaced the `nbformat` hard-dependency with runtime validation (this fully resolves https://github.com/plotly/plotly.py/issues/771).  nbformat is only needed for mimetype rendering, so that's where the validation happens.  It's not needed to generate HTML output.
2. The `pytz` library is no longer needed now that we stopped performing time-zone translation (https://github.com/plotly/plotly.py/pull/1581)
3. The `requests` library is only used for orca image export.  There was already validation to make sure the optional `psutil` library is installed for use with orca, so I added `requests` validation there too.
 4. the `decorator` package was only being used for an unused `memoize` function. So both the function and dependency have been removed.

Required dependencies for the `plotly` package are now: `install_requires=[""retrying>=1.3.3"", ""six""],`",0,8,[]
568,289693467,1629,14579099,2019-06-19 12:59:16,2019-06-19 16:26:03,closed,V4: Have side-effect renderers show figure on display,"The mimetype renderers already did this.

Now, px can be used easily with the 'browser' renderer for non-jupyter contexts.",0,11,[]
569,289472891,1628,14579099,2019-06-18 22:15:58,2019-06-19 11:25:45,closed,Remove plot.ly URL in exported HTML if user didn't enable link or sendToCloud,"Small update to HTML export logic inspired by question in https://github.com/plotly/plotly.py/issues/1602.  The HTML generated by `plotly.offline.plot`/`plotly.io.write_html` is fully offline (no way to share data with cloud servers) by default.  But even though the buttons/links to share data are disabled by default, the https://plot.ly URL was still included in the exported HTML.

For peace of mind, this PR only includes the Chart Studio base URL (e.g. https://plot.ly) if the user overrides the defaults to turn on the `showLink` or `sendToCloud` config options.",0,1,[]
570,289458181,1627,14579099,2019-06-18 21:22:18,2019-06-19 11:22:45,closed,V4 remove chunked_requests submodule,This PR removes `chunked_requests` as a submodule.  The `chunked_requests`  functionality will now be maintained in this repo directly.,0,3,[]
571,289363278,1626,14579099,2019-06-18 16:36:25,2019-06-18 18:21:28,closed,V4 insitute code formatting standard using Black,"This PR does the following:
 - Formats the codebase using Black (https://black.readthedocs.io/en/stable/)
 - Adds a pre-commit hook specification for running black prior to commit
 - Adds instructions to contributing.md for setting up pre-commit.
 - Adds a circleci test case to check that formatting is valid

cc @nicolaskruchten 
",0,14,['V4']
572,289254146,1625,14579099,2019-06-18 12:19:11,2019-06-18 12:59:39,closed,V4 chart_studio: Delete existing file before creating rather than update,"Hopefully addresses https://github.com/plotly/plotly.py/issues/1622.

It looks like the update endpoint (https://api.plot.ly/v2/files#update) only updates the metadata of a file, not the content. So with this PR we manually delete existing files/grids with the same name and then use `create` to upload.

cc @michaelbabyn ",0,2,[]
573,289199394,1624,14579099,2019-06-18 10:10:07,2019-06-18 12:52:29,closed,"V4 Update add_trace, add_traces, and add_{trace} methods to return figure","This PR updates the `add_trace`, `add_traces`, and `add_{trace}` figure method to return the figure their called on, rather than the newly created trace(s).

This is a breaking change for v4, as these methods used to return the newly created traces.  The motivation for the change is to support method chaining. e.g.

```python
(make_subplots(rows=2)
 .add_scatter(y=[2, 1, 3], row=1, col=1)
 .add_bar(y=[2, 1, 3], row=2, col=1)
 .update_layout(title_text='Figure Title', template='plotly_white'))
```
![newplot](https://user-images.githubusercontent.com/15064365/59673530-7a512580-918f-11e9-860b-14f00b348ab6.png)

Code that formerly relied on the returned trace
```
bar = fig.add_bar(...)
```

will need to be updated for v4 compatibility to grab the newly added trace from the returned figure's data array
```python
bar = fig.add_bar(...).data[-1]
```
@nicolaskruchten ",0,3,"['breaking change', 'V4']"
574,289028033,1623,14579099,2019-06-17 21:30:50,2019-06-18 12:53:26,closed,V4 merge plotly jupyterlab extensions,"## Overview
This PR merges the current `plotlywidget` JupyterLab extension and the [`@jupyterlab/plotly-extension`](https://github.com/jupyterlab/jupyter-renderers/tree/master/packages/plotly-extension) JupyterLab extension into a single JupyterLab extension simply named `jupyterlab-plotly`.

This one extension will handle displaying `FigureWidget` objects, and it will handle displaying `Figure` objects by their mimetype (the current `plotly.offline.iplot` approach).

## Other changes
I made two changes to the mimetype rendering with respect to the `@jupyterlab/plotly-extension` extension.

### Static image preview on load
The current `@jupyterlab/plotly-extension` extension automatically saves a PNG rendering of each figure back to the notebook as soon as it is displayed. This makes it possible to export the notebook to static output formats like PDF and get a static image rendering of each plot.  The `jupyterlab-plotly` extension will display this static image rendering of each figure (if it is available)  when the notebook is first loaded.  This static image will then be replaced with a Plotly.js figure when the user mouses over the image.

This workflow makes a significant improvement in notebook load time for notebooks that contain lots of plotly figures.  For the intensive notebook I've been experimenting on (20+ figures), this gives a load time improvement of 40s down to 7s.

### Remove auto-animate behavior
The `@jupyterlab/plotly-extension` extension automatically animates any figures that have frames.  Now that we've started making notebooks with plotly express with lots of figures involving frames, it's become apparent that this is not a great default.  So this PR just removes the auto-animate behavior.  In the future, we could add support for the `auto_play` argument to `plotly.offline.plot` if folks find that they need this auto play behavior back.

cc @timkpaine @gnestor ",5,9,['V4']
575,288614012,1621,14579099,2019-06-16 10:17:06,2019-06-16 19:57:48,closed,V4 chart studio updates,"This PR contains a few updates to the `chart-studio` package

 1.  The clientresp-based `chart_studio.plotly.plot` implementation has been replaced by the v2 API logic that was formerly used only for `chart_studio.plotly.create_animations`.
 2. All clientrest API logic has been removed from the library 🎉 
 3. Switch to using the `IPython.display.IFrame` object instead of the custom `PlotlyDisplay` class. This removes the warning that was being raised by `chart_studio.plotly.iplot`.
 4. Added initial CHANGELOG and README",0,10,[]
576,288572148,1620,14579099,2019-06-15 17:55:52,2019-06-15 17:56:25,closed,V4 alpha2 release,Fix for plotly.express data packaging,0,7,[]
577,288569419,1619,14579099,2019-06-15 17:06:11,2019-06-15 17:07:04,closed,V4 alpha release,Prep for first alpha release,0,2,[]
578,288564675,1618,14579099,2019-06-15 15:45:21,2019-06-15 16:02:45,closed,V4 release instructions,Initial work on updating the release process for the three separate distribution packages,0,11,[]
579,288520325,1615,14579099,2019-06-15 01:00:17,2019-06-15 18:39:15,closed,don't override plotlyServerURL if one is set in iplot/plot,"This resolves #1609.

I tested this out locally using so that first example mentioned in the issue which didn't set the base url for the edit in chart studio button before the change does after.

```python
import plotly.offline as py
import plotly.graph_objs as go
py.init_notebook_mode()

py.iplot([go.Scatter(y=[2,3,4])], config=dict(showSendToCloud = True, plotlyServerURL='https://myserver.com'))
```",1,2,[]
580,288459067,1614,14579099,2019-06-14 19:48:45,2019-06-14 21:46:00,closed,Version 4 odds and ends,"This PR includes a handful of small v4 updates

 - Add `plotly.graph_objects` as alias for `plotly.graph_objs`
 - Add `fig.update_layout` method
 - Add support for specifying `fig.data` as a single scalar trace
 - Add `dict`-style `pop` method to both Figure and graph objects.

@nicolaskruchten ",0,9,[]
581,288382760,1613,14579099,2019-06-14 15:40:34,2019-06-14 16:03:52,closed,plotly_express integration,"This PR integrates `plotly_express` branch https://github.com/plotly/plotly_express/pull/88 into the plotly.py v4 integration branch.  

Changes:

1) This PR adds a new `plotly.express` package that contains the contents of the `plotly_express`package from https://github.com/plotly/plotly_express/pull/88.
2) The `plotly_express.data` module has been moved to `plotly.data` and aliased as `plotly.express.data`. Similarly, the `plotly_express.colors` module has been moved to `plotly.colors` and aliased as `plotly.express.colors`.

cc @nicolaskruchten ",0,4,[]
582,287409226,1607,14579099,2019-06-12 08:58:39,2019-07-04 12:16:14,closed,gantt ff should return go.Figure object,,1,7,['V4']
583,286858412,1604,14579099,2019-06-10 22:23:44,2019-06-13 10:46:51,closed,Restructure repo with a top-level `packages/` directory,"This PR restructures the repo as follows:

 - packages
   - python
     - plotly
     - plotly-geo
     - chart-studio
   - javascript
     - plotlywidget

",0,8,[]
584,286452738,1600,14579099,2019-06-09 06:52:26,2019-06-10 13:22:12,closed,create_choropleth figure factory returns go.Figure,"With this PR, the `create_choropleth` returns a `go.Figure`, so that `fig.show()` is possible on the returned figure.",1,1,[]
585,286452519,1599,14579099,2019-06-09 06:46:19,2019-06-09 06:53:10,closed,County choropleth,"Replaces #1598, now branching from `v4_integration`. 

With this PR, the `create_choropleth` figure factory returns a `go.Figure`, so that it is possible to call `fig.show()`.",1,3,[]
586,286409542,1598,14579099,2019-06-08 14:52:07,2019-06-09 06:47:57,closed,county_choropleth figure factory should return a go.Figure,Should figure factories return a `go.Figure` object? It would be nicer to be able to do `fig.show()` on the returned object.,3,1,[]
587,285362028,1597,14579099,2019-06-05 12:55:43,2019-06-05 16:39:38,closed,V4 chart studio extraction,"## Overview
This PR restructures the plotly.py repo to break the `plotly` package into three distribution packages. 

 - The existing `plotly` modules have been moved into a top-level `plotly-package` directory, with a setup.py file to publish as the `plotly` distribution package.
 - The `chart_studio` module has been moved into a top-level `chart-studio-package` directory, with a setup.py file to publish as the `chart-studio` distribution package.
 - The geo shape files that were previously in `plotly/package_data` have been moved to the `_plotly_geo` module under the `plotly-geo-package` directory.  A setup.py file has been added to publish these shape files as `plotly-geo` distribution package.
",0,34,[]
588,284576509,1594,14579099,2019-06-03 13:56:23,2019-06-03 15:54:01,closed,[v4 integration] Remove future flags,"## Overview
This PR enables all future flags and removes the legacy logic associated with the future flags being disabled.

It also fixes up the test suite to expect the v4 behavior

This should be merged into the v4_integration branch, not master.",0,14,[]
589,284334791,1592,14579099,2019-06-02 11:21:49,2019-06-03 11:18:41,closed,Mapbox raster,"This PR include:
- [ ] add Raster Layer(EX: geoserver wms layer)

**plotly.js Pull Request [Link](https://github.com/plotly/plotly.js/pull/3928)**
",2,3,[]
590,284000711,1590,14579099,2019-05-31 11:03:05,2019-05-31 19:02:39,closed,Bug fix - animation_opts docstring example,Bug fix: The example for the animation_opts argument in the doc strings of the plot and iplot functions doesn't work. ,1,3,[]
591,283222986,1587,14579099,2019-05-29 11:50:42,2019-05-31 19:31:07,closed,version 3.10.0,Version 3.10.0 release branch,0,18,[]
592,282790780,1585,14579099,2019-05-28 11:39:07,2019-05-29 09:50:03,closed,[WIP] plotlyjs 1.48.0,Plotly.js 1.48.0 integration branch.  Right now still on the plotlyjs dev-build.,0,4,[]
593,282631235,1583,14579099,2019-05-28 00:00:04,2019-05-28 09:50:36,closed,Fix missing comma so example compiles.,,1,1,[]
594,282543102,1582,14579099,2019-05-27 14:50:59,2019-05-27 22:47:15,closed,Elide template in repr for Layout objects,"When displaying `go.Figure` and `go.Layout` with `__repr__`, elide the representation of `layout.template`.

#### Display Figure
```python
import plotly.graph_objs as go

fig = go.Figure(
    data=[go.Scatter(y=[2, 1, 3])],
    layout={'xaxis': {'range': [-1, 4]},
            'template': 'plotly'}
)
fig
```
```
Figure({
    'data': [{'type': 'scatter', 'uid': 'e783f9bc-fb40-4fde-b89a-f5d16e83653b', 'y': [2, 1, 3]}],
    'layout': {'template': '...', 'xaxis': {'range': [-1, 4]}}
})
```

#### Display Layout
```python
print(fig.layout)
```
```
Layout({
    'template': '...', 'xaxis': {'range': [-1, 4]}
})
```

#### Display Template
```python
print(fig.layout.template)
```
```
layout.Template({
    'data': {'bar': [{'marker': {'line': {'color': '#E5ECF6', 'width': 0.5}}, 'type': 'bar'}],
             'barpolar': [{'marker': {'line': {'color': '#E5ECF6', 'width': 0.5}}, 'type': 'barpolar'}],
             'carpet': [{'aaxis': {'endlinecolor': '#2a3f5f',
                                   'gridcolor': 'white',
                                   'linecolor': 'white',
                                   'minorgridcolor': 'white',
                                   'startlinecolor': '#2a3f5f'},
                         'baxis': {'endlinecolor': '#2a3f5f',
                                   'gridcolor': 'white',
                                   'linecolor': 'white',
                                   'minorgridcolor': 'white',
                                   'startlinecolor': '#2a3f5f'},
                         'type': 'carpet'}],
             'choropleth': [{'colorbar': {'outlinewidth': 0, 'ticks': ''}, 'type': 'choropleth'}],
             'contour': [{'colorbar': {'outlinewidth': 0, 'ticks': ''},
                          'colorscale': [[0.0, '#0508b8'], [0.0893854748603352,
                                         '#1910d8'], [0.1787709497206704,
                                         '#3c19f0'], [0.2681564245810056,
                                         '#6b1cfb'], [0.3575418994413408,
                                         '#981cfd'], [0.44692737430167595,
                                         '#bf1cfd'], [0.5363128491620112,
                                         '#dd2bfd'], [0.6256983240223464,
                                         '#f246fe'], [0.7150837988826816,
                                         '#fc67fd'], [0.8044692737430168,
                                         '#fe88fc'], [0.8938547486033519,
                                         '#fea5fd'], [0.9832402234636871,
                                         '#febefe'], [1.0, '#fec3fe']],
                          'type': 'contour'}],
             'contourcarpet': [{'colorbar': {'outlinewidth': 0, 'ticks': ''}, 'type': 'contourcarpet'}],
             'heatmap': [{'colorbar': {'outlinewidth': 0, 'ticks': ''},
                          'colorscale': [[0.0, '#0508b8'], [0.0893854748603352,
                                         '#1910d8'], [0.1787709497206704,
                                         '#3c19f0'], [0.2681564245810056,
                                         '#6b1cfb'], [0.3575418994413408,
                                         '#981cfd'], [0.44692737430167595,
                                         '#bf1cfd'], [0.5363128491620112,
                                         '#dd2bfd'], [0.6256983240223464,
                                         '#f246fe'], [0.7150837988826816,
                                         '#fc67fd'], [0.8044692737430168,
                                         '#fe88fc'], [0.8938547486033519,
                                         '#fea5fd'], [0.9832402234636871,
                                         '#febefe'], [1.0, '#fec3fe']],
                          'type': 'heatmap'}],
             'heatmapgl': [{'colorbar': {'outlinewidth': 0, 'ticks': ''}, 'type': 'heatmapgl'}],
             'histogram': [{'marker': {'colorbar': {'outlinewidth': 0, 'ticks': ''}}, 'type': 'histogram'}],
             'histogram2d': [{'colorbar': {'outlinewidth': 0, 'ticks': ''},
                              'colorscale': [[0.0, '#0508b8'],
                                             [0.0893854748603352, '#1910d8'],
                                             [0.1787709497206704, '#3c19f0'],
                                             [0.2681564245810056, '#6b1cfb'],
                                             [0.3575418994413408, '#981cfd'],
                                             [0.44692737430167595, '#bf1cfd'],
                                             [0.5363128491620112, '#dd2bfd'],
                                             [0.6256983240223464, '#f246fe'],
                                             [0.7150837988826816, '#fc67fd'],
                                             [0.8044692737430168, '#fe88fc'],
                                             [0.8938547486033519, '#fea5fd'],
                                             [0.9832402234636871, '#febefe'], [1.0,
                                             '#fec3fe']],
                              'type': 'histogram2d'}],
             'histogram2dcontour': [{'colorbar': {'outlinewidth': 0, 'ticks': ''},
                                     'colorscale': [[0.0, '#0508b8'],
                                                    [0.0893854748603352,
                                                    '#1910d8'],
                                                    [0.1787709497206704,
                                                    '#3c19f0'],
                                                    [0.2681564245810056,
                                                    '#6b1cfb'],
                                                    [0.3575418994413408,
                                                    '#981cfd'],
                                                    [0.44692737430167595,
                                                    '#bf1cfd'],
                                                    [0.5363128491620112,
                                                    '#dd2bfd'],
                                                    [0.6256983240223464,
                                                    '#f246fe'],
                                                    [0.7150837988826816,
                                                    '#fc67fd'],
                                                    [0.8044692737430168,
                                                    '#fe88fc'],
                                                    [0.8938547486033519,
                                                    '#fea5fd'],
                                                    [0.9832402234636871,
                                                    '#febefe'], [1.0, '#fec3fe']],
                                     'type': 'histogram2dcontour'}],
             'mesh3d': [{'colorbar': {'outlinewidth': 0, 'ticks': ''}, 'type': 'mesh3d'}],
             'parcoords': [{'line': {'colorbar': {'outlinewidth': 0, 'ticks': ''}}, 'type': 'parcoords'}],
             'scatter': [{'marker': {'colorbar': {'outlinewidth': 0, 'ticks': ''}}, 'type': 'scatter'}],
             'scatter3d': [{'marker': {'colorbar': {'outlinewidth': 0, 'ticks': ''}}, 'type': 'scatter3d'}],
             'scattercarpet': [{'marker': {'colorbar': {'outlinewidth': 0, 'ticks': ''}}, 'type': 'scattercarpet'}],
             'scattergeo': [{'marker': {'colorbar': {'outlinewidth': 0, 'ticks': ''}}, 'type': 'scattergeo'}],
             'scattergl': [{'marker': {'colorbar': {'outlinewidth': 0, 'ticks': ''}}, 'type': 'scattergl'}],
             'scattermapbox': [{'marker': {'colorbar': {'outlinewidth': 0, 'ticks': ''}}, 'type': 'scattermapbox'}],
             'scatterpolar': [{'marker': {'colorbar': {'outlinewidth': 0, 'ticks': ''}}, 'type': 'scatterpolar'}],
             'scatterpolargl': [{'marker': {'colorbar': {'outlinewidth': 0, 'ticks': ''}}, 'type': 'scatterpolargl'}],
             'scatterternary': [{'marker': {'colorbar': {'outlinewidth': 0, 'ticks': ''}}, 'type': 'scatterternary'}],
             'surface': [{'colorbar': {'outlinewidth': 0, 'ticks': ''}, 'type': 'surface'}],
             'table': [{'cells': {'fill': {'color': '#EBF0F8'}, 'line': {'color': 'white'}},
                        'header': {'fill': {'color': '#C8D4E3'}, 'line': {'color': 'white'}},
                        'type': 'table'}]},
    'layout': {'annotationdefaults': {'arrowcolor': '#506784', 'arrowhead': 0, 'arrowwidth': 1},
               'colorscale': {'diverging': [[0, '#8e0152'], [0.1, '#c51b7d'],
                                            [0.2, '#de77ae'], [0.3, '#f1b6da'],
                                            [0.4, '#fde0ef'], [0.5, '#f7f7f7'],
                                            [0.6, '#e6f5d0'], [0.7, '#b8e186'],
                                            [0.8, '#7fbc41'], [0.9, '#4d9221'], [1,
                                            '#276419']],
                              'sequential': [[0.0, '#0508b8'],
                                             [0.0893854748603352, '#1910d8'],
                                             [0.1787709497206704, '#3c19f0'],
                                             [0.2681564245810056, '#6b1cfb'],
                                             [0.3575418994413408, '#981cfd'],
                                             [0.44692737430167595, '#bf1cfd'],
                                             [0.5363128491620112, '#dd2bfd'],
                                             [0.6256983240223464, '#f246fe'],
                                             [0.7150837988826816, '#fc67fd'],
                                             [0.8044692737430168, '#fe88fc'],
                                             [0.8938547486033519, '#fea5fd'],
                                             [0.9832402234636871, '#febefe'], [1.0,
                                             '#fec3fe']],
                              'sequentialminus': [[0.0, '#0508b8'],
                                                  [0.0893854748603352, '#1910d8'],
                                                  [0.1787709497206704, '#3c19f0'],
                                                  [0.2681564245810056, '#6b1cfb'],
                                                  [0.3575418994413408, '#981cfd'],
                                                  [0.44692737430167595, '#bf1cfd'],
                                                  [0.5363128491620112, '#dd2bfd'],
                                                  [0.6256983240223464, '#f246fe'],
                                                  [0.7150837988826816, '#fc67fd'],
                                                  [0.8044692737430168, '#fe88fc'],
                                                  [0.8938547486033519, '#fea5fd'],
                                                  [0.9832402234636871, '#febefe'],
                                                  [1.0, '#fec3fe']]},
               'colorway': [#636efa, #EF553B, #00cc96, #ab63fa, #19d3f3, #e763fa,
                            #FECB52, #FFA15A, #FF6692, #B6E880],
               'font': {'color': '#2a3f5f'},
               'geo': {'bgcolor': 'white',
                       'lakecolor': 'white',
                       'landcolor': '#E5ECF6',
                       'showlakes': True,
                       'showland': True,
                       'subunitcolor': 'white'},
               'hoverlabel': {'align': 'left'},
               'hovermode': 'closest',
               'mapbox': {'style': 'light'},
               'paper_bgcolor': 'white',
               'plot_bgcolor': '#E5ECF6',
               'polar': {'angularaxis': {'gridcolor': 'white', 'linecolor': 'white', 'ticks': ''},
                         'bgcolor': '#E5ECF6',
                         'radialaxis': {'gridcolor': 'white', 'linecolor': 'white', 'ticks': ''}},
               'scene': {'xaxis': {'backgroundcolor': '#E5ECF6',
                                   'gridcolor': 'white',
                                   'gridwidth': 2,
                                   'linecolor': 'white',
                                   'showbackground': True,
                                   'ticks': '',
                                   'zerolinecolor': 'white'},
                         'yaxis': {'backgroundcolor': '#E5ECF6',
                                   'gridcolor': 'white',
                                   'gridwidth': 2,
                                   'linecolor': 'white',
                                   'showbackground': True,
                                   'ticks': '',
                                   'zerolinecolor': 'white'},
                         'zaxis': {'backgroundcolor': '#E5ECF6',
                                   'gridcolor': 'white',
                                   'gridwidth': 2,
                                   'linecolor': 'white',
                                   'showbackground': True,
                                   'ticks': '',
                                   'zerolinecolor': 'white'}},
               'shapedefaults': {'fillcolor': '#506784', 'line': {'width': 0}, 'opacity': 0.4},
               'ternary': {'aaxis': {'gridcolor': 'white', 'linecolor': 'white', 'ticks': ''},
                           'baxis': {'gridcolor': 'white', 'linecolor': 'white', 'ticks': ''},
                           'bgcolor': '#E5ECF6',
                           'caxis': {'gridcolor': 'white', 'linecolor': 'white', 'ticks': ''}},
               'title': {'x': 0.05},
               'xaxis': {'automargin': True,
                         'gridcolor': 'white',
                         'linecolor': 'white',
                         'ticks': '',
                         'zerolinecolor': 'white',
                         'zerolinewidth': 2},
               'yaxis': {'automargin': True,
                         'gridcolor': 'white',
                         'linecolor': 'white',
                         'ticks': '',
                         'zerolinecolor': 'white',
                         'zerolinewidth': 2}}
})
```",0,1,[]
595,282501972,1581,14579099,2019-05-27 12:49:39,2019-05-27 23:15:10,closed,Stop auto-converting timezones to UTC and stripping timezone info,"## Overview
This PR introduces a new v4 `timezones` future flag that changes the behavior of datetime serialization in plotly.py.

The current (version 3) behavior for datetimes with timezone info is for plotly.py to automatically convert datetimes to UTC and then remove the timezone info during serialization.  This has resulted in a lot of confusion over the years (See https://github.com/plotly/plotly.py/issues/209).

The new behavior is for plotly.py to stop performing the UTC conversion and leave the timezone info in the string that is passed along to plotly.js.  Plotly.js currently drops the timezone info (https://github.com/plotly/plotly.js/issues/1532) and displays everything in local time, but hopefully at some point in the future Plotly.js will process the timezone info and provide a way to specify the desired display timezone in the figure specification.

## Example
v3 behavior

```python
from _plotly_future_ import renderer_defaults
import plotly.graph_objs as go
import plotly.io as pio
import pandas as pd
import sys, datetime

x1 = pd.to_datetime(
        ['2015-04-04 12:00:00', '2015-04-04 13:00:00', '2015-04-04 15:00:00'])
x2 = x1.tz_localize('UTC').tz_convert('US/Eastern')

fig1 = go.Figure(data=[go.Scatter(x=x2, y=[1, 3, 2])])
fig1
```
![newplot-1](https://user-images.githubusercontent.com/15064365/58420409-315bf480-805b-11e9-9697-b63173d8846c.png)

```python
print(pio.to_json(fig1, pretty=True))
```
```
{
  ""data"": [
    {
      ""type"": ""scatter"",
      ""x"": [
        ""2015-04-04 12:00:00"",
        ""2015-04-04 13:00:00"",
        ""2015-04-04 15:00:00""
      ],
      ""y"": [
        1,
        3,
        2
      ]
    }
  ],
  ""layout"": {}
}
```

v4 behavior
```python
from _plotly_future_ import renderer_defaults, timezones
import plotly.graph_objs as go
import plotly.io as pio
import pandas as pd
import sys, datetime

x1 = pd.to_datetime(
        ['2015-04-04 12:00:00', '2015-04-04 13:00:00', '2015-04-04 15:00:00'])
x2 = x1.tz_localize('UTC').tz_convert('US/Eastern')

fig1 = go.Figure(data=[go.Scatter(x=x2, y=[1, 3, 2])])
fig1
```
![newplot-2](https://user-images.githubusercontent.com/15064365/58420551-91529b00-805b-11e9-9a7f-95a681a9769b.png)

```python
print(pio.to_json(fig1, pretty=True))
```
```
{
  ""data"": [
    {
      ""type"": ""scatter"",
      ""x"": [
        ""2015-04-04T08:00:00-04:00"",
        ""2015-04-04T09:00:00-04:00"",
        ""2015-04-04T11:00:00-04:00""
      ],
      ""y"": [
        1,
        3,
        2
      ]
    }
  ],
  ""layout"": {}
}

```

cc @nicolaskruchten @chriddyp @alexcjohnson ",2,3,['V4']
596,282245926,1580,14579099,2019-05-25 18:13:48,2019-05-27 22:45:23,closed,Future flag to prevent generation of UIDs for traces added to plain Figure objects,"Closes https://github.com/plotly/plotly.py/issues/1512 (for version 4)

## Overview
This PR introduces a `'trace_uids'` future flag that, when enabled, results in trace UIDs no longer being automatically generated for traces that belong to `Figure` objects.  UIDs are still auto-generated for traces that belong to `FigureWidget` instances because these are needed in order to sync the front-end and backend widget models.",0,1,[]
597,282237698,1579,14579099,2019-05-25 15:47:35,2019-05-27 22:42:18,closed,Check for figure height in the figure template in html export,"Closes https://github.com/plotly/plotly.py/issues/1560

cc @nicolaskruchten ",0,1,[]
598,282235978,1578,14579099,2019-05-25 15:19:06,2019-05-27 22:38:12,closed,Support specifying default renderer using PLOTLY_RENDERER env variable,"Closes https://github.com/plotly/plotly.py/issues/1559

Support specifying the default renderer using the `PLOTLY_RENDERER` environment variable.  This environment variable is only checked when the `renderer_defaults` future flag is set.

cc @nicolaskruchten ",3,1,['V4']
599,281888178,1577,14579099,2019-05-24 06:49:53,2019-07-03 13:59:54,closed,"Scraper function for sphinx-gallery, in plotly.io","This PR proposes the addition of a scraper function in ``plotly.io``, to be used by the ``sphinx-gallery`` sphinx extension when a sphinx-based doc contains a gallery of examples. At the moment ``sphinx-gallery`` has a scraper for matplotlib figures, but some open-source projects have expressed their interest in having figures with plotly.py instead. 

The PR also contains a minimal sphinx doc with two gallery examples (one for 2D, one for 3D). It's not necessary to merge this but I thought that having gallery examples in the code base could be useful.

Note that this PR does not require a sphinx-gallery dependency, because it will be sphinx-gallery which calls the scraper function and not the other way around. 

One thing to decide is whether the function used in examples is ``plot`` or ``iplot``. Do most users work in notebooks and therefore use ``iplot``? The function is monkey-patched anyway so it's easy to change.",17,17,['V4']
600,281793671,1576,14579099,2019-05-23 21:38:34,2019-05-25 14:23:20,closed,Fix honouring of `validate=False` for all renderers,"Greetings!

We have been working with Plotly recently and attempting to plot Plotly JSON blobs generated from R in Python, and (as it happens) these blobs are not conformant to the Plotly JSON schema. Passing `validate=False` to the `plotly.offline.plot` method works fine, but not for `plotly.offline.iplot`, due to validation being enabled by default for some of the rendering backends. One approach to fixing this would be to pass `validate` down to the renderers, but it appears based on `validate=False` being passed by default to some backends that this may have been an oversight in the default passed to these mimebundle renderers. This patch makes this consistent, and causes all mimebundle generations to no longer validate. Since validation would have happened earlier if not explicitly passing `validate=False`, I believe this should be okay.

",3,1,[]
601,281572906,1574,14579099,2019-05-23 11:55:31,2019-05-25 10:30:18,closed,Treat 'coloraxis1' as 'coloraxis',Small fix to be able to treat 'coloraxis1' as 'coloraxis' in coloraxis subplot validator,2,1,[]
602,280724183,1571,14579099,2019-05-21 10:41:29,2019-05-25 10:29:36,closed,A few renderers default updates," - init notebook* renderers at the end when set with `init_notebook_mode` to work around https://github.com/plotly/plotly_express/issues/75
 - Use `notebook` rather than `notebook_connected` in default v4 renderer defaults so it works offline by default.",0,3,[]
603,278302041,1564,14579099,2019-05-13 14:33:31,2019-05-25 13:04:30,closed,Secondary y-axis subplot support,"## Overview
This PR introduces secondary `y-axis` support to the `subplots.make_subplots` and associated functions.  This functionality is only available in the `v4_subplots` future mode.

## make_subplots update
The `subplots.make_subplots` function not supports a `secondary_y` key in the elements of the `specs` argument.  The figure methods for adding traces now also support a `secondary_y` argument.

For example:

```python
from _plotly_future_ import v4_subplots, renderer_defaults
from plotly import subplots
import plotly.graph_objs as go
fig = subplots.make_subplots(
    rows=1,
    cols=2,
    specs=[[{'secondary_y': True},
            {'secondary_y': True}]]
)

fig.add_bar(y=[1, 3, 2], name='First',
            row=1, col=1);
fig.add_scatter(y=[10, 30, 20], name='Second',
                row=1, col=1, secondary_y=True)

fig.add_bar(y=[2, 1, 3], name='Third',
            row=1, col=2)
fig.add_trace(
    go.Scatter(y=[2, 1, 3], name='Forth'),
    row=1, col=2, secondary_y=True)

fig
```
![newplot-23](https://user-images.githubusercontent.com/15064365/57771346-70478d00-76e0-11e9-8577-157ad3c54f57.png)

## get_subplot
```python
fig.get_subplot(1, 1).yaxis.update(title_text='Y-axis 0')
fig.get_subplot(1, 1, secondary_y=True).yaxis.update(title_text='Y-axis 1')
fig.get_subplot(1, 2).yaxis.update(title_text='Y-axis 2')
fig.get_subplot(1, 2, secondary_y=True).yaxis.update(title_text='Y-axis 3')
```
![newplot-21](https://user-images.githubusercontent.com/15064365/57770959-78eb9380-76df-11e9-85a2-3d70f498dca2.png)

## Update traces
```python
fig.for_each_trace(
    lambda t: t.update(name=t.name.upper()),
    row=1, col=2, secondary_y=True)
```
![newplot-22](https://user-images.githubusercontent.com/15064365/57771300-5017ce00-76e0-11e9-8155-ebf5fe22e6bf.png)

## Update yaxis
```python
fig.update_yaxes(title_font_color='red', secondary_y=True)
```
![newplot-24](https://user-images.githubusercontent.com/15064365/57771475-d03e3380-76e0-11e9-8034-10a84a799187.png)

cc @nicolaskruchten @chriddyp 


",5,18,['V4']
604,277796430,1561,14579099,2019-05-10 14:39:36,2019-05-25 14:13:52,closed,Replace requests.compat.json with real json,"requests.compat.json may use simplejson, which is incompatible
with plotly.py usage of json.

Fixes https://github.com/plotly/plotly.py/issues/1556",2,1,[]
605,276361531,1554,14579099,2019-05-06 22:05:23,2019-05-06 22:15:18,closed,Support **kwargs in update_traces and update_{subplot} methods,"Add support for specifying property updates as `**kwargs` in the `update_traces` and `update_*` subplot methods of Figure.  E.g.

```
fig.update_traces(marker_color='red', row=1)
```",0,1,[]
606,276161773,1552,14579099,2019-05-06 12:08:21,2019-05-06 22:57:39,closed,Release 3.9.0,Release branch for version 3.9.0,0,7,[]
607,276137593,1551,14579099,2019-05-06 10:36:56,2019-05-06 11:24:07,closed,Fix get_config_plotly_server_url on .config load error,"Closes https://github.com/plotly/plotly.py/issues/1550

If .config was not found or not loaded properly, it should be treated as empty, but it was resulting in an `UnboundLocalError`.

",0,1,[]
608,275991085,1549,14579099,2019-05-05 11:54:32,2019-05-06 10:22:39,closed,Template updates,"## Changes

### autocolorscale
Closes https://github.com/plotly/plotly.py/issues/1454 by turning off `autocolorscale` in heatmap (and related) trace templates and setting the colorscale to the theme colorscale. See https://github.com/plotly/plotly.js/issues/3829 for discussion.

### default colorscale
Closes https://github.com/plotly/plotly.py/issues/1274 setting default sequential colorscale to plasma.

### colorway
Closes https://github.com/plotly/plotly.py/issues/1508 by reordering template colorway to improve contrast.  Also slightly lighten the former 6th color in the colorway (Plotly brand ""Lavender"") to improve contrast with the former 4th color (Plotly brand ""Lavender shade"").

*Before:* https://projects.susielu.com/viz-palette?colors=[%22#636efa%22,%22#EF553B%22,%22#00cc96%22,%22#ab63fa%22,%22#19d3f3%22,%22#e763fa%22,%22#FECB52%22,%22#FFA15A%22,%22#FF6692%22,%22#B6E880%22]&backgroundColor=%22#ffffff%22&fontColor=%22black%22

*After:* https://projects.susielu.com/viz-palette?colors=[%22#636efa%22,%22#EF553B%22,%22#00cc96%22,%22#ab63fa%22,%22#FFA15A%22,%22#19d3f3%22,%22#FF6692%22,%22#B6E880%22,%22#ff97ff%22,%22#FECB52%22]&backgroundColor=%22#ffffff%22&fontColor=%22black%22&mode=%22normal%22

### future flag
The default colorscale and colorway changes are only in effect when using the built-in `plotly`, `plotly_white`, and `plotly_dark` templates if the `template_defaults`  (or `v4`) future flag is activated.  E.g. 

```python
from _plotly_future_ import template_defaults
import plotly
...
```
The intention is for this to become the default behavior in plotly.py version 4.

## v3 template plotly template examples
![newplot-9](https://user-images.githubusercontent.com/15064365/57193497-c01c9c00-6f09-11e9-8093-9f2bf535b109.png)

![newplot-10](https://user-images.githubusercontent.com/15064365/57193501-cc085e00-6f09-11e9-9094-0a44b8c4ad53.png)

## v4 template plotly template examples (candidate default)
![newplot-11](https://user-images.githubusercontent.com/15064365/57193519-ee01e080-6f09-11e9-99f1-b5ce505e4e82.png)

![newplot-12](https://user-images.githubusercontent.com/15064365/57193523-f9eda280-6f09-11e9-8bd0-419794f854d4.png)




",0,3,[]
609,275955414,1548,14579099,2019-05-04 23:39:16,2019-05-06 10:20:34,closed,subplot select/update methods for batch updates,"## Overview
This PR is part two of https://github.com/plotly/plotly.py/issues/1484 and a follow-on to https://github.com/plotly/plotly.py/pull/1534.

This adds `select_*`, `for_each_*`, and `update_*` methods to the figure class for each subplot container type.  These methods work exactly like the trace counterparts from https://github.com/plotly/plotly.py/pull/1534.

These will be especially useful when used with `plotly_express`.  Note that the `row`/`col` filtering will not work with `plotly_express` until it is updated to use the new v4 subplot logic (https://github.com/plotly/plotly.py/pull/1528) for faceting.  But the `selector` based filtering should work now.

## Examples
Here are some examples:

Set the `tickprefix` of all xaxis objects to '$';
```
fig.update_xaxes({'tickprefix': '$'})
```
Or only those in the first column
```
fig.update_xaxes({'tickprefix': '$'}, col=1)
```

In addition to row/col filters. updates can also be filtered on selectors as described in https://github.com/plotly/plotly.py/pull/1534.

So if, for some reason, you needed to update only the y axis objects that were configured in log scale to show length 5 ticks:
```
fig.update_yaxes({'ticks': 'outside', 'ticklen': 5}, selector={'type': 'log'})
```

## Other notes
With this PR, we now rely on code generation to determine the set of subplot types.  So when new ones show up, like coloraxis, these should now be handled automatically.

cc @nicolaskruchten 
",2,7,[]
610,275873537,1547,14579099,2019-05-03 23:07:16,2019-05-03 23:12:35,closed,Update plotly.js to 1.47.4,,0,1,[]
611,275178507,1543,14579099,2019-05-01 22:34:21,2019-05-02 10:09:42,closed,Fix package listing in setup.py,"The package listing in plotly's setup.py is non-standard; rather than file paths, it should list Python package paths (see https://docs.python.org/3/distutils/setupscript.html#writing-the-setup-script). This PR fixes the issue.

I tested this by running the following
```bash
$ python setup.py sdist
$ cat plotly.egg-info/top_level.txt
_plotly_future_
_plotly_utils
chart_studio
plotly
plotlywidget
```
The top-level package listing is now correct.",1,1,[]
612,275086498,1542,14579099,2019-05-01 16:56:40,2019-05-03 22:59:10,closed,Adding support to plotly_unselect event,"When active selections are cleared using double-click interaction over a plotly plot,  python objects are not updated properly. This code enables plotly_deselect events to update points properly",2,5,['enhancement']
613,274918469,1541,14579099,2019-04-30 23:15:57,2019-05-02 10:12:28,closed,Enable DDK compatibility,"In Dash Design Kit, we allow for colors to be specified with `var(--*)` syntax, similar to CSS variable syntax. This will allow for Graph colors to dynamically match theme colors when the theme is changed with the Theme Editor.

When using `plotly.py` to generate Graph data, a `ValueError` is raised when using this syntax:

``` bash
 ValueError: 
 Invalid value of type 'builtins.str' received for the 'color' property of scatter.marker
 Received value: 'var(--colorway-1)'
```

This crashes the Dash app, despite the fact that DDK will safely evaluate colors with the above syntax based on the currently defined theme.

This PR allows for these dynamic variables to be passed. It's my first PR, so feedback is welcome, especially on my RegEx :sweat_smile: 

cc @nicolaskruchten — I've tested this with `px` as well as `plotly.graph_objs`",9,3,[]
614,272924786,1534,14579099,2019-04-23 23:18:32,2019-05-03 22:27:00,closed,"traces selection/update methods and ""magic underscore"" support","Closes https://github.com/plotly/plotly.py/issues/1481 and the trace portion of https://github.com/plotly/plotly.py/issues/1484.

## Overview
This PR introduces 3 new figure methods to make it easier to make updates to traces that have already been added to a Figure (e.g. a Figure from `plotly_express` or a figure factory). It also introduces a convenient shorthand for updating nested properties that we've been calling ""magic underscore"" support.

### New Figure methods
All 3 methods allow the user to select certain traces from the figure using a ""selector"". This is an `update` style dict that can be used to specify the desired values of arbitrary properties in the trace. For example, a selector of `{'type': 'scatter'}` will select all scatter traces in the figure.  A selector of `{'type': 'scatter', 'mode': 'markers'}` will select only those scatter traces that are in `'markers'` mode. 

In addition to the selector, for figures created using `plotly.subplots.make_subplots`, the trace row and column index may also be used as selection criteria.

The lowest level method is `select_traces`. This returns a generator that iterates over all of the traces in the figure that satisfy the selection criteria.

The `for_each_trace` method applies a custom function to each trace produced by `select_traces`

The `update_traces` method accepts a ""patch"" to update all of the traces that satisfy the selection criteria. This ""patch"" is a dict that is passed to `trace.update` for all selected traces.

### ""Magic underscore"" support
For background on ""magic underscore"" support, see https://github.com/plotly/plotly.py/pull/919 and https://github.com/plotly/plotly.py/issues/1481.

The goal of magic underscore support is to make it more convenient to reference nested figure properties without the need to created deeply nested `dict` instances.

Here are the updates that have been implemented:

#### Figure and graph_objs constructors
Here's a current approach to creating a figure with a particular title:
```python
import plotly.graph_objs as go
fig = go.Figure(layout={'title': {'text': 'Hello, Figure'}})
```
With magic-underscore support:
```python
fig = go.Figure(layout_title_text='Hello, Figure')
```

#### .update operations
Here's a current approach to updating the title text for an existing figure
```python
fig = go.Figure()
fig.update(layout={'title': {'text': 'Hello, Figure'}})
```
with magic-underscore support:

```python
fig = go.Figure()
fig.update(layout_title_text='Hello, Figure')
```
In addition to using underscores to separate nested keys, when the update argument is supplied as a dict (rather than as kwargs), the path parts can be separated by periods.

```python
fig = go.Figure()
fig.update({'layout_title_text': 'Hello, Figure',
            'layout.title.font.color': 'green'})
```

#### add trace methods
Here's a current approach creating a scatter trace with green markers
```
fig = go.Figure()
fig.add_scatter(y=[2, 3, 1], mode='markers', marker={'color': 'green'})
fig
```
With magic underscore support
```
fig = go.Figure()
fig.add_scatter(y=[2, 3, 1], mode='markers', marker_color='green')
fig
```

#### compatibility
One tricky thing to keep track of is that there are a few properties in plotly.js that contain underscores in their proper name. e.g. `scatter.error_y` and `layout.paper_bgcolor`.  These are kept track of as special cases.

Here's an example of using magic underscore logic alongside the `error_y` property:
```python
fig = go.Figure()
fig.add_scatter(
    y=[2, 3, 1],
    mode='markers',
    marker_color='green',
    error_y_array=[2, 1, 3]
)
fig.update(data_0_error_y_color='blue')
```
Note how integer data array indices can be specified directly in the argument.

## All together
Combining `update_traces` and magic-underscore support should make it much easier to selectively update trace properties.

For example, to update the line width of all scatter traces in line mode:
```python
fig.update_traces({'line.width': 4}, selector={'type': 'scatter', 'mode': 'lines'})
```
Or, only the line traces in subplot position 2, 1
```python
fig = make_subplots(3, 3, ...)
...
fig.update_traces({'line.width': 4}, selector={'type': 'scatter', 'mode': 'lines'}, row=2, col=1)
```
",3,13,[]
615,271993411,1530,14579099,2019-04-19 13:09:45,2019-04-19 13:42:27,closed,Release 3.8.1,Release branch of 3.8.1,0,2,[]
616,271991090,1529,14579099,2019-04-19 12:57:18,2019-04-19 13:07:02,closed,Update to plotly.js 1.47.3,,0,1,[]
617,271965902,1528,14579099,2019-04-19 10:37:41,2019-04-19 12:24:13,closed,Version 4 make_subplots,"## Overview
This PR contains the initial implementation of a version 4 rewrite of the `make_subplots` function.

This new function is located in a new `plotly.subplots` module, and to use it the new `v4_subplots` future flag must be enabled.  When `v4_subplots` is enabled, the legacy `plotly.tools.make_subplots` function will delegate to `plotly.subplots.make_subplots, but otherwise the legacy function will operate unchanged for the remainder of plotly.py version 3.

cc: @chriddyp @nicolaskruchten 

## Notable changes
The new implementation has the following notable changes.

### trace types
All subplot/trace types are now supported :tada: To accomplish this, a new 'type' property has been added to elements of the `specs` argument. For example

```
make_subplots(3, 2, specs=[
    [{}, {'type': 'polar'}],
    [{'colspan': 2,
      'rowspan': 2,
      'type': 'parcoords'}, None],
     [None, None]],
    print_grid=True
)
```

The value of `type` may be `'xy'` (the default, for 2D Cartesian subplots), `'scene'` (for 3D Cartesian subplots), `'polar'`, `'ternary'`, `'geo'`, or `'domain`' (for self positioning traces that don't have shared subplots).  In addition, the name of any trace can be used and the subplot type for that trace will be used.

For backward compatibility, the `is_3d` specs flag is still accepted. It is treated as `'type': 'scene'`.

### Shared axes using `matching`
Unlike the legacy implementation, this implementation always creates xaxis/yaxis pairs for each 2D cartesian subplot.  Axis sharing (`shared_xaxes` and `shared_yaxes`) is implemented not by actually sharing the same, for example, xaxis among multiple yaxes.  Instead, sharing is accomplished using the `matches` property introduced in plotly.js version 1.45.  This significantly simplifies the subplot construction logic, and it makes it possible to support more flexible axis ""sharing"". Now, the `shared_xaxes`/`shared_yaxes` arguments may be set to 'rows', 'columns', or 'all'.  Setting these values to `True` will maintain the legacy behavior of sharing xaxes across columns and sharing yaxes across rows.

### Row and column titles
New `row_titles` and `column_titles` arguments have been added for giving titles to subplot columns and rows.  These are alternatives to the existing `subplot_titles` argument for giving titles to each individual subplot.  Column titles are place at the top of each column, while row titles are placed to the right of each row and rotated vertically.

These are added to support faceted subplots

![newplot (17)](https://user-images.githubusercontent.com/15064365/56423457-1935d000-627a-11e9-9f6e-60f068848338.png)

### x_title and y_title
New arguments `x_title` and `y_title` have been added to allow for the placement for a centered titles across all rows and columns.  See image above for example.

### print_grid cleamup
The `print_grid` argument is now `False` by default and when it is printed is uses unicode characters to display spanned subplots in a more readable way.

Before:
![Screenshot_20190417_190547](https://user-images.githubusercontent.com/15064365/56420646-d6213000-626c-11e9-83f1-554d1710f15e.png)

After:
![Screenshot_20190417_190311](https://user-images.githubusercontent.com/15064365/56420680-ef29e100-626c-11e9-87ea-eceb969f4cd2.png)

### row/column width/height cleanup
For API consistency, `column_width` has been renamed `column_widths` and `row_width` has been renamed `row_heights` (The old args still accepted for compatibility, but they don't show up in the function signature of the docstring.

In addition the behavior of `row_heights` has changed slightly for `row_width`.  Now, the height specification followings the ordering specified in `start_cell`.  So when `start_cell='top-left'` the row heights are specified from top to bottom, and when `start_cell='bottom-left'` they are specified from bottom to top.  The old behavior was to always treat the `row_width` argument as specifying heights from bottom to top.

See https://github.com/plotly/plotly.py/issues/1275 for the confusion this has caused.

### figure.get_subplot method
A new figure method, `get_subplot` has been added for retrieving a subplot object from a figure by row/column index.  Here's the docstring

```
        Return an object representing the subplot at the specified row
        and column.  May only be used on Figures created using
        plotly.tools.make_subplots

        Parameters
        ----------
        row: int
            1-based index of subplot row
        col: int
            1-based index of subplot column

        Returns
        -------
        subplot
            * None: if subplot is empty
            * plotly.graph_objs.layout.Scene: if subplot type is 'scene'
            * plotly.graph_objs.layout.Polar: if subplot type is 'polar'
            * plotly.graph_objs.layout.Ternary: if subplot type is 'ternary'
            * plotly.graph_objs.layout.Mapbox: if subplot type is 'ternary'
            * SubplotDomain namedtuple with `x` and `y` fields:
              if subplot type is 'domain'.
                - x: length 2 list of the subplot start and stop width
                - y: length 2 list of the subplot start and stop height
            * SubplotXY namedtuple with `xaxis` and `yaxis` fields:
              if subplot type is 'xy'.
                - xaxis: plotly.graph_objs.layout.XAxis instance for subplot
                - yaxis: plotly.graph_objs.layout.YAxis instance for subplot
```

Among other uses, this will make it possible for folks to construct a faceted plot with `plotly_express` and then customize the subplot properties in the resulting figure.

### Future flag
To activate this functionality, the `v4_subplots` (or `v4`) future flag must be enabled before import plotly.  

### Examples
Faceted subplots with all xaxes and yaxes shared, so all 6 subplots pans/zoom together.

```python
from _plotly_future_ import v4
from plotly.subplots import make_subplots
import plotly.graph_objs as go

fig0 = make_subplots(
    start_cell='bottom-left',
    rows=3,
    cols=2,
    shared_xaxes='all',
    shared_yaxes='all',
    vertical_spacing=0.02,
    horizontal_spacing=0.01,
    column_titles=('First', 'Second'),
    row_titles=['X', 'Y', 'Z'],
    x_title='Dimension A',
    y_title='Dimension B'
)
t = go.Scatter(y=[2, 3, 1])
fig0.add_traces([t]*6, rows=[1, 1, 2, 2, 3, 3], cols=[1, 2, 1, 2, 1, 2])
fig0.layout.margin.r = 0
fig0.layout.title.text = 'MAIN TITLE'
fig0
```
![newplot (17)](https://user-images.githubusercontent.com/15064365/56423710-6cf4e900-627b-11e9-916f-5841c3bf45f6.png)

Mixed type subplots with spanning, and `print_grid=True` to show how the spanned grid is now represented
```python
from _plotly_future_ import v4
from plotly.subplots import make_subplots
import plotly.graph_objs as go

fig2 = make_subplots(rows=4, cols=3,
                    start_cell='top-left',
                    shared_yaxes=False,
                    column_width=[0.5, 1, 1],
                    insets=None,
                    horizontal_spacing=0.1,
                    column_titles=['One', 'Two', 'Three', 'Four'],
                    row_width=[2, 0.5, 0.5, 2],
                    specs=[
                        [{'type': 'polar'}, {}, {'type': 'scene'}],
                        [{'colspan': 3,
                          'rowspan': 2}, None, None],
                        [None, None, None],
                        [{'type': 'domain', 'colspan': 3, 't': 0.1}, None, None]],
                     print_grid=True
                    ).update(layout={'height': 900})
fig2.add_scatter3d(x=[1, 1, 1], y=[2, 1, 3], z=[2, 4, 8],  row=1, col=3)
fig2.add_scatter(y=[2, 1, 3], row=1, col=2)
fig2.add_scatter(y=[2, 1, 3], row=2, col=1)
fig2.add_scatterpolar(r=[2, 3, 1], theta=[0, 45, 90], row=1, col=1)
fig2.add_parcats(
    dimensions=[{'values': ['A', 'A', 'B'], 'label': 'One'},
                {'values': [1, 2, 1], 'label': 'Two'},
                {'values': ['X', 'Y', 'X'], 'label': 'Three'}],
    row=4, col=1
)
fig2
```
```
This is the format of your plot grid:
[ (1,1) polar1        ]  [ (1,2) xaxis1,yaxis1 ]  [ (1,3) scene2        ]
⎡ (2,1) xaxis2,yaxis2           -                        -              ⎤
⎣      :                        :                        :              ⎦
[ (4,1)                         -                        -              ]
```
![newplot-1](https://user-images.githubusercontent.com/15064365/56423869-f60c2000-627b-11e9-9689-25495eac1a60.png)

",1,5,[]
618,271449051,1526,14579099,2019-04-17 20:01:25,2019-04-19 12:51:25,closed,undo overly-aggressive default,I'm not sure how to run the templategen script... just `python templategen/__init__.py` doesn't work for me... ,2,3,[]
619,271442472,1525,14579099,2019-04-17 19:39:47,2019-04-19 09:34:17,closed,Fix 3.8.0 responsive resizing behavior,"Closes #1524 

This PR fixes some regressions in responsive plot resizing that were introduced in 3.8.0.
  - 1) Plots saved to HTML were not resizing vertically
  - 2) The vertical height of plots in the notebook was shrunk down to 450px from 525px

I also tracked down a JavaScript error message that was being raised on resize.  This led to figuring out how to explicitly cleanup the plotly graph_div elements when they are no longer visible in the notebook (output cell cleared or cell deleted).  This may potentially reduce memory usage during long sessions where plots are repeatedly created and destroyed.

Finally, I also worked out how to make the new `iframe` renderer resize responsively as well.",1,1,[]
620,270705823,1523,14579099,2019-04-15 23:30:04,2019-05-25 14:01:47,closed,Support calling orca through xvfb on Linux,"## Overview
This PR adds support for calling orca through Xvfb, simplifying the process of using plotly.py's image export functions in a headless Linux environment.

This is accomplished through the addition of a new `use_xvfb` parameter in `plotly.io.orca.config`.  This parameter may be set to `False`, `True`, or `'auto'`, where:
  - `False`: Never use xvfb
  - `True`: Use Xvfb and raise an error if `xvfb-run` is not found on the system Path
  - `'auto'`:  Use Xvfb if running on Linux, no display serer is detected (determined by checking the `DISPLAY` environment variable), and `xvfb-run` is on the path.

`use_xvfb` will default to `False` for the remainder of version 3, but it will default to `'auto'` in version 4.  The new `orca_defaults` future flag may be used to enable this default behavior now.

## Usage
To perform headless static image export on Linux, first install orca following the instructions at https://github.com/plotly/orca#installation.  Then install [Xvfb](https://www.x.org/releases/X11R7.6/doc/man/man1/Xvfb.1.xhtml) using the package manager for your Linux distribution.  Then configure plotly.py to call orca through Xvfb using:

```python
import plotly.io as pio
pio.orca.config.use_xvfb = True
```

Then export images as usual with:
```python
pio.write_image(fig, 'filename.png')
```

## Additional Changes 
Add `LD_PRELOAD` to the list of environment variables to be excluded to be unset when calling orca to avoid breaking orca in Colab (See https://medium.com/@n0mad/how-i-trained-starcraft-2-ais-using-googles-free-gpus-44bc635b0418 for discussion of the Colab's use of tcmalloc).",4,5,[]
621,270326758,1520,14579099,2019-04-14 20:58:48,2019-04-15 11:56:51,closed,align hoverlabels left and constant-size legend items in builtin themes,,0,2,[]
622,270275459,1519,14579099,2019-04-14 06:35:36,2019-08-17 09:42:21,closed,Update README.md for possible collision of `orca` executable,Fix #1299 by mentioning under Troubleshooting -> Wrong Executable in README.md [here](https://github.com/plotly/plotly.py/blob/master/README.md),2,3,['documentation']
623,270010935,1518,14579099,2019-04-12 13:25:10,2019-04-15 12:28:51,closed,Release 3.8.0,"Release branch for plotly.py 3.8.0 and plotlywidget 0.9.0, build on plotly.js 1.47.1",0,8,[]
624,270000879,1517,14579099,2019-04-12 12:55:45,2019-04-12 13:15:27,closed,Update to plotly.js 1.47.1,,0,1,[]
625,268855825,1509,14579099,2019-04-09 18:32:57,2019-04-09 21:43:51,closed,changed PY36 constant naming to be more explicit for versions >=3.6,"as suggested by @nicolaskruchten.
I took the liberty to make it even more explicit than suggested. 
(Just to finish what I started here. ;-) ) ",1,1,[]
626,268639583,1503,14579099,2019-04-09 08:45:48,2019-04-10 21:36:32,closed,Adding animation opts to python interface,#1496 Added kwarg in plotly/offline/offline.py to allow animation options to be passed through the python interface to the plotly.js functions. ,6,8,[]
627,268127707,1501,14579099,2019-04-07 18:35:54,2019-04-08 13:11:00,closed,Fix for windows os error (#1402) Changed to use py3.6 behavior also with python 3.7 and above.,"Fix for https://github.com/plotly/plotly.py/issues/1402.
Dash/Plotly work fine with python 3.5 and 3.6., but using python 3.7 creates uncaught OS Error exceptions from plotly utils.py.

Reason:
The variable PY36 in utils.py is used to branch code for different behaviour for datetime objects depending on the python version. This was set to 3.6 by using '==', this 1-character change ('>=') fixes the problems on windows when using plotly/dash with python 3.7. Without it 3.7 gets same behaviour as 3.5, which does not work. ;-)
",3,1,[]
628,268041941,1498,14579099,2019-04-06 15:17:51,2019-04-08 13:22:41,closed,Fix race conditions,"This is a ""Heisenbug"", a race condition. You might not be able to reproduce it, but I'll describe it anyway.

We're running this as an automated test, as a user we cannot control, so use `export PLOTLY_DIR=whatever`

re: #1076, addressed in #1195

This is still a problem with `plotly-3.7.1`. In `plotly/files.py`:
```py
 27 def _permissions():
 28     try:
 29         if not os.path.exists(PLOTLY_DIR):
 30             os.mkdir(PLOTLY_DIR)
 31         with open(TEST_FILE, 'w') as f:
 32             f.write('testing\n')
 33         os.remove(TEST_FILE)
 34         return True
 35     except:
 36         return False
```
Lines `30` and `33` can fail, wrongly, if two processes run this at the same time. (`f.write()` is fine here, IMO.)

Note that I want to make warnings into errors in my tests. (`pytest -W error`), so this is a big problem for me even if you simply trap and `warn()`.

I'm not sure if there is still a warning in 3.7.1, but like I said, it's a Heisenbug. I can only spend so much time on this. For me, it was happening via `pytest-xdist`, in a case where I lacked permissions to create `~/.plotly`. `PLOTLY_DIR` lets me reduce the likelihood of error, but the race conditions remain.",2,1,[]
629,265081812,1480,14579099,2019-03-27 20:05:23,2019-04-10 22:24:01,closed,clean up PyPI metadata,,1,2,[]
630,263850152,1476,14579099,2019-03-23 18:00:28,2019-04-12 12:36:31,closed,"Extract chart studio functionality, optimized imports","## Overview
This PR is an important step towards the [version 4 goal](https://github.com/plotly/plotly.py/issues/1420) of removing all of the chart studio (i.e. cloud-service related) functionality from plotly.py, and putting it in a separate optional package.

## chart studio extraction
For the time being, I've done this by creating a new top-level `chart_studio` package next to the top-level `plotly` package.  I've moved all of the cloud-related functionality to the `chart_studio` package, following the same structure as in the current plotly package.  For example, the `plotly.plotly` module was moved to `chart_studio.plotly`.

This PR takes advantage of the `_future_plotly_` system introduced in https://github.com/plotly/plotly.py/pull/1474 to make this refactor backward compatible.

 - By default all of the old entry points are still usable and they are aliased to the `chart_studio` package.
 - If the `extract_chart_studio` future flag is set, then deprecation warnings are raised whenever the `chart_studio` modules/functions are used from their legacy locations under the `plotly` package.
 - If the `remove_deprecations` future flag is set then the chart studio functions are fully removed from the plotly package and are accessible only under `chart_studio`.  When `remove_deprecations`  is set, `plotly` has no dependency on the `chart_studio` package.

## Usage
To remove the chart_studio functionality from the main `plotly` module, use the

```python
from _plotly_future_ import remove_deprecations
```

This will further speed up imports, and will allow for testing code to make sure it will be compatible with the package structure of plotly.py version 4.


## Import optimization
This PR also makes a relatively minor change to the code generation logic for `graph_objs` and `validator` that yields an import time reduction of ~10-20% .  Rather that creating a single file for each datatype and validator class, all of the classes in a `graph_obj` or `validator` module are specified directly in the `__init__.py` file.  This reduces the number of files significantly, which seems to yield a modest but consistent speedup while being 100% backward compatible.

## What's next
For version 4, the `chart_studio` module will be published in a separate PyPI/conda package and all of the aliases to `chart_studio` will be removed from the `plotly` PyPI package.",4,89,[]
631,263440576,1474,14579099,2019-03-21 23:39:36,2019-04-10 11:58:03,closed,"plotly.io HTML functions, modular renderers framework, future flags system","## Overview
This PR is a big one!  It tackles three [version 4 goals](https://github.com/plotly/plotly.py/issues/1420) that ended up being so intertwined that I decided to handle them in the same PR.

 1. Adds `to_html` and `write_html` functions to the `plotly.io` module and re-bases `plotly.offline.plot` on top of these new functions.  This finishes porting the existing figure export logic into the `plotly.io` module as initially described in https://github.com/plotly/plotly.py/issues/1098.
 2. Adds a new `plotly.io.renderers` configuration object to control how figures are rendered, and a new `plotly.io.show` function for displaying figures.  Reimplements `plotly.offline.init_notebook_mode` and `plotly.offline.iplot` on top of the new renderers framework.
 3. A new `_plotly_future_` module that will allow users to opt-in to future (v4) default behaviors before v4 is released.

Despite the breadth of these changes, I believe this PR is 100% backward compatible for users, and so I would like to target releasing this for plotly.py version 3.8.0

## `plotly.io` HTML functions
This PR adds two new public functions to `plotly.io`: `to_html` and `write_html`.  Per the convention discussed in https://github.com/plotly/plotly.py/issues/1098, `to_html` inputs a figure and returns an html representation as as string. And `write_html` inputs a figure and a file string/object and writes the html representation to the specified file.

### post_script
The signatures for these functions map pretty closely to `plotly.offline.plot` with one exception. `plotly.offline.plot` includes a set of image export options that can be used to add JavaScript to the exported figure that will ask plotly.js to export the figure to an image and then ask the browser to download it.

This is not a workflow that we recommend anymore now that orca is available and integrated into plotly.py (See https://github.com/plotly/plotly.py/pull/1120), so I didn't want to add this support directly to `to_html`/`write_html`.  Instead, I added a `post_script` argument that can be used to add any custom JavaScript snippet to the resulting HTML.  This custom HTML is executed after the plot is created (in a `.then` block) and it can include `'{plot_id}'` placeholders that are automatically replaced with the `id` of the `div` that the Plotly.js plot is attached to.  Here's the docstring

```
    post_script: str or None (default None)
        JavaScript snippet to be included in the resulting div just after
        plot creation.  The string may include '{plot_id}' placeholders that
        will then be replaced by the `id` of the div element that the
        plotly.js figure is associated with.  One application for this script
        is to install custom plotly.js event handlers.
```
Another use-case I had in mind where this would have come in handy was this question on the forums of how to add custom JavaScript to a plot exported by plotly.py to open hyperlinks in response to marker clicks. https://community.plot.ly/t/hyperlink-to-markers-on-map/17858/6

### responsive output
One other change I made while I was in there was to remove our custom window resize event handler logic and replace it with the (relatively) new plotly.js `'responsive': true` config parameter.  So if the input figure does not have a predefined `layout.width` and `layout.height` then`to_html` will add `'responsive': true` to the figure config.

## `plotly.io.renderers`
This PR introduces a new `plotly.io.renderers` configuration object.  This work ended up following the design I laid out in https://github.com/plotly/plotly.py/issues/1459 pretty much to the letter, and I've updated the proposal description there to match the details of this implementation.

### Design Influences
This design is somewhat inspired by the approach used by the Altair project (https://altair-viz.github.io/user_guide/renderers.html), the Altair implementation was a helpful reference in implementing this.

The design also draws on elements of the `plotly.io.templates` design (See https://github.com/plotly/plotly.py/pull/1224), and is intended to have a consistent user experience.

### Default renderer
I've added a new configuration object named `renderers` in the `plotly.io` module.  This sits alongside the `plotly.io.templates` and `plotly.io.orca` configuration objects.  Users can view and specify the current default renderer using property assignment. For example, to specify the equivalent of `init_notebook_mode(connected=False)`:

```python
import plotly.io as pio
pio.renderers.default = 'notebook+plotly_mimetype'
```
### repr and show
There are now two ways to display figures.  If one or more mime-type based renderers are defined and the `plotly.io.renderers.render_on_display` property is set to `True`, then the `go.Figure` instances will display themselves automatically as their notebook representation.  If `plotly.io.renderers.render_on_display` is set to `False`, then mimetype based rendering will not be performed when figures are displayed.

In addition, all renderer types (including external renderers that will be described below) can be invoked using a new `plotly.io.show` function.  This function will display the figure as a side effect and will return `None`.

The `show` functions will also allow the user to override the default renderer. e.g.
```python
import plotly.io as pio
pio.renderers.default = 'notebook' 

fig = go.Figure(...)

# By default show will display figure inline, override to display in browser tab
pio.show(fig, renderer='browser')
```
Then to display a figure with the equivalent of `plotly.offline.iplot`:
```python
pio.show(fig)
```

### Available Renderers
Here is a detailed description of the renderers that are included in this PR:

#### `plotly_mimetype`
The `plotly_mimetype` renderer displays figures using the `application/vnd.plotly.v1+json` mime type that is handled in JupyterLab by the [`@jupyterlab/plotly-extension`](https://github.com/jupyterlab/jupyter-renderers/tree/master/packages/plotly-extension) extension, and is handled natively by both [nteract](https://nteract.io/) and the [Visual Studio Code](https://code.visualstudio.com/docs/python/jupyter-support).

For user friendliness,  the `plotly_mimetype` renderer is also aliased as `jupyterlab`, `vscode`, and `nteract`

#### HTML-mimetype
Several renderers that produce bundles with mimetype `text/html` are included.

##### `notebook`
This renderer is equivalent to `plotly.offline.init_notebook_mode(connected=False)` and `plotly.offline.iplot`.  It works in the classic Jupyter Notebook, and works offline. This renderer is also useful for notebooks that will be converted to HTML using nbconvert/nbviewer as it will produce standalone HTML files that include interactive figures.

When the renderer is activated in loads the full plotly.js bundle (~3MB) into the notebook and registers it as `'plotly'` with `requirejs` (which is included in the classic notebook).  Then when figures are renderer, they reference plotly.js using `requirejs`.

##### `notebook_connected`
Same as `notebook` except that the initialization phase uses the plotly CDN rather than loading the full plotly.js bundle into the notebook.  This results in much smaller notebooks but requires an internet connection for use.

This is the best rendering mode for use in kaggle notebooks, so it has also been aliased as `'kaggle'`

##### `colab`
Google Colab has a different architecture than either JupyterLab or the classic notebook in that each output cell is an iframe, so there can be no global initialization for the notebook.  Also, requirejs is not available by default.  The Colab renderer borrows insight from the Altair colab renderer and produces full HTML file bundles that include plotly.js using a `<script>` tag.

##### `iframe`
This renderer was inspired by @Nikolai-Hlubek's observations in https://github.com/plotly/plotly.py/issues/1469.  It works be saving figures to standalone html files (using `plotly.io.write_html`) in a directory next to the notebook.  Then the HTML mimebundles that are inserted into the notebook are `iframe` elements with the relative path to these HTML files.

I haven't tested the performance characteristics yet, but the approach works well in the classic notebook and in JupyterLab and it will result in much smaller notebooks for cases where a notebook contains many large figures.  Export to standalone HTML still works fine as long as a copy of the `iframe_figures` directory is kept alongside the HTML file.

One limitation for this approach is that it doesn't currently support responsive resizing. And I'm not sure if this is something that's possible through an iframe.

#### HTML-external
As an alternative to the mime-type rendering approach, where renderers subclass `MimetypeRenderer`,  there is the external rendering approach, where renderers subclass `ExternalRenderer`.  These renderers are external in the sense that they render the figure outside of the notebook, and don't include any reference to the figure in the notebook itself.

##### `browser`
The `'browser'` renderer displays interactive figures in a new tab/window in the users default browser.  This is done without the use of temporary files (which would be challenging to manage) by creating a single use `HTTPServer` on a local port that responds to exactly one request with the figure's contents and then shuts down.

This approach has no Jupyter/notebook dependencies works fine in the QtConsole, ipython console, and even the vanilla python repl.

##### `firefox` and `chrome`
There are also predefined renderers that allow the user to specify that the new tabs should be opened in firefox or in chrome.

#### Static image renderers
A collection of static image renderers are included that rely on the orca integration to render figures as images.  In addition to the Jupyter Notebook/JupyterLab, these renderers work well in even static contexts like the QtConsole/Spyder.

##### 'png', 'svg', 'jpg', 'pdf'
Static rendereres are predefined for png, svg, jpg, and pdf formats.  I'm especially excited about the `pdf` static renderer because this is picked up by the LaTeX-based PDF export functionality of nbconvert.  This means that with the `pdf` renderer enabled, a notebook can be exported through LaTeX as a PDF and the figures will come along in vector form.

##### `json`
This renderer allows the figure's JSON structure to be displayed in the notebook using the JSON viewers in JupyterLab/VSCode.  This is really handy for being able to navigate the structure of a large figure with expand/collapse toggling and search-based filtering.  Here's a YouTube clip of the what this looks like https://www.youtube.com/watch?v=FRj1r7-7kiQ.

### Combining renderers
Multiple renderers can be registered as the default by separating the renderer names with `'+'` characters.  This is the same combination syntax used to combine templates in `plotly.io.templates`. When multiple mime type renderers are specified this way, a single bundle will be created with the render representation for each one.  As motivation, consider

```python
pio.renderers.default = 'notebook+plotly_mimetype+png'
```
A notebook with this renderer specification would display figures properly in the classic notebook ('notebook'), in jupyterlab/vscode/nteract ('plotly_mimetype'), in exported HTML ('notebook'), in the QtConsole/PyCharm ('png'), and in exported PDFs ('png').

Of course this would result in fairly large notebook sizes, but the user will have the flexibility to define where this code needs to render figures.

### Auto-detecting renderers
In a few cases, we're able to detect when it's appropriate to enable a specific renderer by default.  In particular, this PR includes logic to detect when plotly.py is running in Google Colab, Kaggle, or VSCode.

### Customize renderer properties
Some renderers can expose additional configuration options. In this case, a new renderer can be constructed and named. Each built-in renderer is defined by a class accessible under `plotly.io.base_renderers`.

E.g. to specify a static image renderer with custom properties:

```python
import plotly.io as pio
pio.renderers['my_png'] = pio.base_renderers.PngRenderer(width=1000, height=650, scale=1.5)
pio.renderers.default = 'my_png'
```

Or the properties of an existing renderer can be modified directly:
```python
pio.renderers['png'].width = 1000
pio.renderers['png'].height = 650
pio.renderers['png'].scale = 1.5
pio.renderers.default = 'png'
```
Or the properties can be overridden temporarily in `plotly.io.show`:
```python
pio.show(fig, renderer='png', width=1000, height=650, scale=1.5)
```

### Registering new renderers
Users or third-party-libraries may register new renderers by subclassing `plotly.io.base_renderers.MimetypeRenderer` or `plotly.io.base_renderers.ExternalRenderer`

```python
import plotly.io as pio

# Define custom mimetype renderer
class MyRenderer(pio.base_renderers.MimetypeRenderer):
    ...
    def activate():
        ...

    def to_mimebundle(self, fig_dict):
        ...

# Or a custom external renderer
class MyExternalRenderer(pio.base_renderers.ExternalRenderer):
    ...
    def activate():
        ...

    def render(self, fig_dict):
        ...

# Register for use by name
my_renderer = MyRenderer()
pio.renderers['my_renderer'] = my_renderer

# Set as default
pio.renderers.default = 'my_renderer'
```

### Backward compatibility
For backward compatibility, `plotly.offline.init_notebook_mode` and `plotly.offline.iplot` will stay around, but they will be implemented on top of the new renderer framework.

If we are able to merge this work in version 3, the default renderer will be `plotly_mimetype` and `iplot` will call `plotly.io.show`.  Calling `plotly.offline.init_notebook_mode()` will set the default renderer to `'plotly_mimetype+notebook'` and `plotly.offline.init_notebook_mode(connected=True)` will set the default renderer to `'plotly_mimetype+notebook_connected'.`

## The `_plotly_future_` system
Inspired by the Python [`__future__`](https://docs.python.org/2/library/__future__.html) mechanism for opting in to the default behavior of future version of the language, this PR introduces a `_plotly_future_` module that can be used to enable features/behaviors that will be the default in plotly.py version 4.

In every case, these `_plotly_future_` import must come before `plotly` itself is imported otherwise an error is raised.

For example, the default behavior of this PR for displaying figures matches that of plotly.py version 3. But the `renderer_defaults` flag can be used to enable the future v4 defaults, where figures will display themselves automatically.

```python
from _plotly_future_ import renderer_defaults
```

Or, to enable the `plotly` theme that we plan to make the default in version 4
```python
from _plotly_future_ import template_defaults
```

And to enable all version 4 features that are available (only the two above for now)
```python
from _plotly_future_ import v4
```

I'd like to continue adding flags here as a way to merge in [v4 updates](https://github.com/plotly/plotly.py/issues/1420) before v4 itself.  This way the community can weigh in on changes more easily (no need to download a separate version, just `from _plotly_future_ import v4` at the top of your script), and we can more easily start working on updating documentation to the v4 style before v4 is released.

cc @jackparmer @chriddyp @nicolaskruchten @cldougl @michaelbabyn 

TODO:
 - [x] Add animation options support from https://github.com/plotly/plotly.py/pull/1503
",17,48,[]
632,262426210,1470,14579099,2019-03-19 12:01:28,2019-03-19 12:08:20,closed,3.7.1 release branch,,0,2,[]
633,260556050,1464,14579099,2019-03-12 22:12:48,2019-03-15 21:52:10,closed,Fix dict ordering assumption for Python < 3.6.0,"Fix for #1462, issue is that we were relying on the preservation of dict insertion order during batch updates.  This was fine for Python 3.6+, but not for 2.7 and, I suspect, not for 3.5.  Now use `OrdererdDict` objects.

Some background at https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6

",0,1,[]
634,258930714,1456,14579099,2019-03-07 00:30:09,2019-03-08 14:53:01,closed,Release 3.7.0,,0,17,[]
635,258920301,1455,14579099,2019-03-06 23:36:34,2019-03-06 23:52:57,closed,Update to plotly.js 1.45.1,Update plotly.js and generated graph_objs hierarchy,0,1,[]
636,258713472,1453,14579099,2019-03-06 13:12:37,2019-03-06 23:34:45,closed,Convert conda packages back noarch format,"Closes https://github.com/plotly/plotly.py/issues/1414

Also run `plotlyjs_dev_build` on all branches so that it's possible to QA plotly.py branches built against plotly.js upstream",0,2,[]
637,258545454,1452,14579099,2019-03-06 01:22:34,2019-03-06 11:07:17,closed,Allow init_notebook_mode to redefine/reinitialize plotly.js each time it's run,"Work towards addressing #1448

I don't think this addresses the root of the problem, but hopefully it will make it possible for users to call `init_notebook_mode` to reinitialize plotly.js in the notebook after the issue appears.

I haven't been able to reproduce the error message naturally, but after some research an experimenting it looks like what's happening is that for some reason the requirejs infrastructure is forgetting that a library called `plotly` has been `define`d (which happens in `init_notebook_mode`).  I can force the same error by manually calling `require.undef('plotly')` in the JavaScript console and then running `iplot` again.

![screenshot_20190305_185521](https://user-images.githubusercontent.com/15064365/53876427-c0192200-3fd4-11e9-9e29-919cb603c8ca.png)

I don't have any leads at this point on what might be causing `requirejs` to ""forget"" about a registered module.

But this PR updates the `init_nodebook_mode` logic to take this possibility into account. Now, every time `init_notebook_mode` is called the 'plotly' module is explicitly undefined and redefined and the `window._Plotly` variable is reinitialized.

Now, when I invoke the error state by calling `require.undef('plotly')` I can at least recover from it by running `init_notebook_mode()` a second time.  Before this PR we would get stuck in a state where the requirejs 'plotly' module was undefined but the `window._Plotly` variable was still set and so `init_notebook_mode` would skip redefining the 'plotly' module.
",0,2,[]
638,257967904,1447,14579099,2019-03-04 14:43:41,2019-03-05 14:20:49,closed,Add new auto_play argument to offline plot and iplot,"This controls whether to automatically start the animation on page load if the figure contains frames

Closes #697

cc @nicolaskruchten @richard-muir",1,1,[]
639,257397950,1444,14579099,2019-03-01 10:44:02,2019-03-06 23:17:12,closed,fix to_scalar_or_list when v.ndim == 0,"
* test code

~~~ python3
import plotly.graph_objs as go
import numpy as np
go.Scatter(
    y=[np.array(1), np.array(2)],
    x=[1, 1]
)
~~~

* before fix

~~~ sh
sh-4.2# python test.py
Traceback (most recent call last):
  File ""test.py"", line 5, in <module>
    x=[1, 1]
  File ""/root/review/plotly.py/plotly/graph_objs/_scatter.py"", line 2567, in __init__
    self['y'] = y if y is not None else _v
  File ""/root/review/plotly.py/plotly/basedatatypes.py"", line 2841, in __setitem__
    self._set_prop(prop, value)
  File ""/root/review/plotly.py/plotly/basedatatypes.py"", line 3077, in _set_prop
    val = validator.validate_coerce(val)
  File ""/root/review/plotly.py/_plotly_utils/basevalidators.py"", line 382, in validate_coerce
    v = to_scalar_or_list(v)
  File ""/root/review/plotly.py/_plotly_utils/basevalidators.py"", line 56, in to_scalar_or_list
    return [to_scalar_or_list(e) for e in v]
  File ""/root/review/plotly.py/_plotly_utils/basevalidators.py"", line 56, in <listcomp>
    return [to_scalar_or_list(e) for e in v]
  File ""/root/review/plotly.py/_plotly_utils/basevalidators.py"", line 58, in to_scalar_or_list
    return [to_scalar_or_list(e) for e in v]
TypeError: iteration over a 0-d array
~~~ 

* after fix

~~~ sh
sh-4.2# python test.py
sh-4.2#
~~~
",3,2,[]
640,254851617,1440,14579099,2019-02-21 01:07:11,2019-02-22 01:43:01,closed,CI workflow to build plotly.py against plotly.js master,"Build plotly.py against plotly.js master in a new `dev_build` workflow.  This involved updating the plotly.py versioning to use [versioneer](https://github.com/warner/python-versioneer) so that we have a way to automatically version development builds.

Development packages are now uploaded as artifacts of the `dev_build` workflow.",0,10,[]
641,251737144,1432,14579099,2019-02-10 13:03:42,2019-02-20 16:19:57,closed,"create_animations improvements, progress towards removing clientresp","### Background (as I understand it)
The `plotly.plotly.create_animations` function was introduced to support plotly.js animations because the legacy clientrest API that is used by `plotly.plotly.plot` does not support frames. 

 `plotly.plotly.create_animations` uses the more recent v2 API that supports frames, but it was much more limited than `plotly.plotly.plot`.  In particular is did not support uploading figures that contain inline data arrays, requiring users to manually create grids and assign grid references to their figures (See https://plot.ly/python/gapminder-example/ for example).  It also did not support overwriting existing figures and it did not support creating figures in folders.

This investigation was inspired by this discussion on the forums: https://community.plot.ly/t/trouble-with-converting-offline-animation-to-online/19129/2

### Overview
This PR addresses these limitation mentioned above

 1. When a figure contains inline data arrays, these arrays are extracted into a Grid.  The grid is them uploaded and the column references are inserted into the figure's corresponding `*src` properties. Then the figure itself is uploaded.  If the figure is named, then the associated grid is named `'{filename}_grid'`. If the figure is not named, then the grid is named `'grid_{id}'` where `id` is the url safe base64 encoding of the hash of the JSON representation of the grid.  This way repeated unnamed figure creation with the same data will result in only one grid.
 2.  Use `v2.files.lookup` to check whether the figure already exists (and retrieve the `fid` if it does).  If it exists, update it, if not create it.
 3. Use `v2.folders.create` to create folders before uploading figures.

### What's left
This implementation is nearly ready to fully replace the clientresp backend of `plotly.plotly.plot`.  The only unsupported feature is the `fileopt` option. See https://plot.ly/python/file-options/.  Right now, the only behavior available is the default `fileopt='overwrite'` behavior., and it doesn't look like the other options are directly supportable with the v2 API as it currently stands.

### Testing
There isn't currently a test suite for `create_animations` and I didn't add any additional testing in the PR.  There will be a bunch of testing work to do when this implementation is used to replace the `plotly.plotly.plot` backend.

### Questions
I've never personally used the `fileopt` argument, does anyone have opinions on whether we can deprecate this?  I think my preference would be to start raising a deprecation warning for `fileopt != 'overwrite'` in 3.7.0, and then remove it from the API in 4.0.0.  The alternative would be to do a bit of work on the v2 API in streambed.

@jackparmer @scjody @nicolaskruchten @chriddyp 
",1,11,[]
642,251628181,1430,14579099,2019-02-08 23:22:51,2019-02-08 23:41:39,closed,Release 3.6.1,,0,3,[]
643,251177322,1428,14579099,2019-02-07 16:19:55,2019-02-08 22:51:45,closed,Use '.item' instead of the deprecated 'asscalar'.,Closes #1427. ,2,1,[]
644,250033770,1425,14579099,2019-02-04 12:27:23,2019-02-04 13:01:44,closed,Don't autoimport FigureWidget unless ipywidgets is installed and >= 7.0.0,Closes #1421,0,2,[]
645,250012680,1423,14579099,2019-02-04 11:08:25,2019-02-04 12:23:04,closed,Fix for figure factory import when scipy not installed,Closes https://github.com/plotly/plotly.py/issues/1422,0,3,[]
646,249419494,1418,14579099,2019-01-31 22:11:40,2019-03-04 13:33:36,closed,Updated method for ternary contour figure factory,"Following the suggestions in #1413, and help from @empet, here is an alternative version for implementing contour plots in ternary diagrams. 

Pros: this method uses a ScatterTernary trace, meaning that it is natively an object of a ternary plot, hence it uses the ternary pan/zoom. 
Cons: the trace is not a Contour trace, hence quite a lot of boilerplate code will be needed for handling colorscale, colorbar, etc.

I post here a first proof of concept, the PR is far from being finished (TODO: fix tests, fix documentation, implement annotations better etc.). 

@empet: I haven't had the time yet to compare this method with yours using ILR transform, but I'll surely do!",49,35,[]
647,248435624,1417,14579099,2019-01-29 09:43:38,2019-02-01 12:58:55,closed,Fix DeprecationWarnings,,4,4,[]
648,247985205,1413,14579099,2019-01-27 22:16:15,2019-02-01 11:28:32,closed,Ternary contour plot,"This is a work in progress version of contour plots in ternary diagrams. I'm opening the PR even if it's too early to merge or do a thorough feedback, but I'd appreciate some quick feedback to know whether this is a good direction to go.

TODO
[x] Docstrings for helper functions.
[x] Improve coding style of helper functions in places.
[x] Decide whether other arguments (kw) need to be exposed in ``create_ternaryplot``
[x] Write more tests, in particular when errors are raised.

Other questions : where in the doc can I write a tutorial about this new function?",28,12,[]
649,247899711,1412,14579099,2019-01-26 16:47:12,2019-02-01 22:51:56,closed,Release 3.6.0,Version 3.6.0 release branch,0,8,[]
650,247894227,1411,14579099,2019-01-26 15:04:39,2019-01-26 15:35:05,closed,Fix annotated heatmap text color when values are specified as a nested list,"Closes #1300 

When the `z` value provided to the `create_annotated_heatmap` figure factory was a nested list, the min/max values were being computed incorrectly resulting in subtle errors in font coloring.  When the `z` value was a numpy array, text colors were computed properly.
",0,2,[]
651,247888897,1410,14579099,2019-01-26 13:17:49,2019-01-26 13:28:54,closed,Fix update method with legacy title* properties,Closes #1403,0,1,[]
652,247845321,1409,14579099,2019-01-25 23:43:23,2019-01-26 01:13:05,closed,sync mplexporter submodule,Sync of the mplexporter submodule and updates to matplotlylib tests. Closes #1396,0,4,[]
653,247842655,1408,14579099,2019-01-25 23:24:35,2019-01-26 00:10:01,closed,"Add additional colors to plotly* theme colorways, set mapbox style in plotly* themes","This PR closes #1392 by adding 4 additional colors to the plotly* theme colorways.

It also sets the mapbox style to `'light'` in the plotly and plotly_white themes, and it sets the mapbox style to `'dark'` in the plotly_dark theme.

**no theme:**
![newplot 1](https://user-images.githubusercontent.com/15064365/51778146-3a00e600-20ce-11e9-9aa3-3dd0f4dea6a9.png)

**plotly/plotly_white theme:**
![newplot 2](https://user-images.githubusercontent.com/15064365/51778158-44bb7b00-20ce-11e9-99de-e9edec3b2520.png)

**plotly_dark theme:**
![newplot 3](https://user-images.githubusercontent.com/15064365/51778174-52710080-20ce-11e9-9e57-d5cd93832471.png)

cc @jackparmer @nicolaskruchten ",0,2,[]
654,247837413,1407,14579099,2019-01-25 22:53:04,2019-01-25 23:24:57,closed,Update to plotly.js 1.44.0,,0,1,[]
655,245001706,1397,14579099,2019-01-16 02:20:04,2019-01-16 11:39:06,closed,Fixes documentation typos,Rename `plolty` to `plotly`,1,1,[]
656,244136270,1393,14579099,2019-01-11 20:08:18,2019-01-17 10:46:28,closed,Try to coerce all objects to Numpy arrays.,"This lets you pass a broad array of list-like objects as data to be plotted instead of the current hard-coded list of numpy arrays, lists, tuples, and Pandas objects. Objects such as PyTorch tensors (widely used in the machine-learning world), xarrays, and others know how to convert themselves into Numpy arrays and so might as well be allowed to be passed directly as plotting arguments so users don't have to explicitly convert them.",10,8,[]
657,241989962,1387,14579099,2019-01-03 13:07:15,2019-01-04 13:04:17,closed,Release 3.5.0,Version 3.5.0 release branch,0,5,[]
658,241884863,1386,14579099,2019-01-03 00:57:02,2019-01-03 11:03:12,closed,Small theme updates,"hovermode 'closest'
left-align plotly* themes",0,1,[]
659,241881158,1385,14579099,2019-01-03 00:24:17,2019-01-03 11:02:16,closed,FigureWidget performance fix,"Closes #1305

This PR also removes the `console.log` debugging statements so the widget library will now be silent in the developer console.",0,2,[]
660,241442899,1383,14579099,2018-12-29 12:10:47,2019-01-01 01:53:17,closed,Make update methods return self to support update chaining,Closes #1379 ,1,1,[]
661,241442221,1382,14579099,2018-12-29 11:58:30,2018-12-29 12:11:07,closed,Remove calls to non-existent figure methods in MPL code,Closes #1128 ,0,2,[]
662,241325315,1381,14579099,2018-12-28 12:30:45,2018-12-28 13:18:53,closed,Update theme definitions for plotly.js 1.43.0+,"Closes #1303
1) colorscales are now specified at the layout level (not only per trace)
2) Adds a diverging colorscale for plotly* themes
3) set automargin=True everywhere",1,1,[]
663,241320908,1380,14579099,2018-12-28 11:58:26,2018-12-28 13:23:33,closed,Fix string validation on unicode strings in Python 2.7,"Closes #1289
",0,1,[]
664,241160240,1378,14579099,2018-12-27 14:06:37,2018-12-27 14:23:08,closed,Clear and restore problematic NODE environment variables before calling orca,"Closes #1293 by introducing a new internal `orca_env` context manager that clears and restores select environment variables that are known to interfere with orca

Closes #1297 by increasing the retry timeout for when communicating with the orca server from 8s to 30s.",0,2,[]
665,240986287,1377,14579099,2018-12-26 14:06:10,2018-12-27 11:21:23,closed,Update config options and disable show_link by default,"This PR closes #1290 and #1304.

 1. The list of known config options was updated to include `'responsive'`, `'showSendToCloud'`, and `'watermark'`.
 2. From here on, config options that are not known by plotly.py result in a warning but are still passed along to plotly.js.  Prior to this PR these unknown options were dropped silently.  This way, if plotly.py falls behind plotly.js in the future, it will still be possible to pass unknown options to plotly.js (they will just result in a warning).
 3. The `show_link` option has been set to `False` by default in the offline `plot` and `iplot` functions. Now that the ""send data to cloud"" button has been disabled by default in plotly.js 1.43.0, no buttons/links will be displayed by default that result in data being sent off of the local machine.",0,8,[]
666,240966605,1376,14579099,2018-12-26 11:38:05,2018-12-27 11:34:41,closed,Update to plotlyjs 1.43.1,"This PR updates the bundled version of plotly.js to 1.43.1.

This one required a bit more that simply rerunning code generation due to the changes in `title` parameters.  In plotly.js 1.43.0+ all `title` parameters no longer hold strings but they are objects with multiple sub-properties.  Furtherore, all of the `title*` properties have now been moved under the associated `title` compound property.  

Plotly.js still accepts `title` as a string and it still accepts the legacy `title*` properties, but plotly.py can't rely on this because it looks at the plotly.js `_fullLayout` property to compute differences between what has been specified explicitly and what has been computed automatically by plotly.js.  So plotly.py needs to provide its own backward compatibility support for these properties.  This involved two changes.

 1. When a string is assigned as a `title` property (e.g. `layout.title`), a new validator base class coerces this into the dict `{'text': val}`.
 2. The getter and setter for each legacy `title*` property is remapped to the corresponding `title.*` property.

So these changes are almost entirely backwards compatible. The only exception (and I don't think there's a reasonable way to get around this) is that the getter for `title` properties (e.g. `layout.title`) will no longer return a string, but a compound title obejct (e.g. `go.layout.Title()`)

",0,9,[]
667,240664246,1375,14579099,2018-12-23 04:08:22,2018-12-26 11:39:31,closed,Include the license in wheels,The MIT license requires all copies of the software to include the license text.,1,1,[]
668,238777762,1307,14579099,2018-12-14 16:38:11,2018-12-15 11:42:59,closed,retry on 429 throttled status,resolves #1294. I also needed this change to get the image tests to pass for #1306,1,2,[]
669,238777559,1306,14579099,2018-12-14 16:37:27,2018-12-22 10:46:15,closed,Emf support for save as,"Update `plotly.plotly.image.save_as` to support the `emf` file type. The tests pass on the `add_emf_backend` branch of streambed in this [PR](https://github.com/plotly/streambed/pull/12020).

cc @bpostlethwaite ",4,3,[]
670,237816186,1301,14579099,2018-12-11 20:26:10,2018-12-19 11:59:26,closed,No colors functions in ff utils,"in favor of https://github.com/plotly/plotly.py/pull/1279

Simply, we are making sure there are no function overlap between `plotly/colors.py` and `plotly/figure_factory/utils.py` and all references are updated so all code runs well and smoothly.

@jonmmease this ready for a review",4,5,[]
671,233229163,1285,14579099,2018-11-23 15:22:24,2018-11-23 15:43:13,closed,Release 3.4.2,Release branch for version 3.4.2,0,3,[]
672,233070175,1284,14579099,2018-11-22 20:42:03,2018-11-23 14:19:17,closed,Pass configured plotly_domain to FigureWidget as plotlyServerURL config parameter,"Follow on to #1281 that passes the configured `plotly_domain` to the frontend when a figure is displayed as a `FigureWidget` (affects both classic notebook and JupyterLab).

cc @bpostlethwaite @charleyferrari ",0,1,[]
673,232519999,1281,14579099,2018-11-21 02:30:03,2018-11-22 19:56:38,closed,Pass config object to iplot when rendering plotly JSON,"This fixes an issue where users render a Plotly chart to a Jupyter Notebook or JupyterLab (using Plotly JSON and [@jupyterlab/plotly-extension](https://github.com/jupyterlab/jupyter-renderers/tree/master/packages/plotly-extension) vs. `plotly.offline.init_notebook_mode`) but they're custom Plotly config is not passed to plotly.js (e.g. `plotly_domain` and `plotly_streaming_domain`). 

Demo notebook: ",4,3,[]
674,232461164,1279,14579099,2018-11-20 21:14:21,2018-12-11 20:26:43,closed,remove plotly/colors.py in favour of utils,"Since `figure_factory` is 100% of the code that is using `colors.py`, it makes more sense to move the `colors.py` that are not in `plotly.figure_factory/utils.py` in there.

In favour of PR: https://github.com/plotly/plotly.py/pull/878

TODOs for this PR:
- [x] moved all colors.py functions to figure_factory.utils.py 
- [x] redirect all reference to colors over to utils
- [x] add tests for all `utils.py` functions

For another PR:
- fix how `_scatter`, `_gantt`, `_bullet` (and maybe others) use the plotly color scales. Right now,  the modules are built such that if a user inputs `Viridis` for instance, the color functions will return just a list of the colors found in the Viridis colorscale, but without the appropriate colorscale numbers to indicate how the interpolation works between each color (i.e. these modules linearly interpolate between the colors of the Plotly colorscales)",6,23,[]
675,231284669,1276,14579099,2018-11-15 17:59:50,2019-05-02 10:27:22,closed,Row width intuitive order,"re: https://github.com/plotly/plotly.py/issues/1275

@jonmmease ready for a review",1,3,"['enhancement', 'V4']"
676,228876389,1269,14579099,2018-11-07 00:04:34,2018-11-09 13:07:34,closed,Release 3.4.1,Release branch for version 3.4.1,0,8,[]
677,228872582,1268,14579099,2018-11-06 23:43:06,2018-11-06 23:53:46,closed,Update to plotly.js 1.42.3,"Bump plotly.js version to 1.42.3

This fixes #1257",0,1,[]
678,228827674,1267,14579099,2018-11-06 20:40:48,2018-11-06 23:14:49,closed,Fix incorrect validation error for animate args info array,Fix for #1265 ,0,3,[]
679,228530809,1263,14579099,2018-11-05 23:53:50,2018-11-06 23:16:19,closed,Fix iplot auto-resize in classic notebook,I believe this was broken by https://github.com/plotly/plotly.py/pull/1250,0,1,[]
680,228496117,1262,14579099,2018-11-05 21:23:55,2018-11-06 23:21:35,closed,Redirect orca process stdout to devnull to prevent write_image deadlock,"Fix for #1255 

This only seemed to be causing a problem on Windows after
more than 20 images had been exported.

The reason `stdout` had previously been set to `subprocess.PIPE`
was to prevent orca's stdout from being displayed in the python
shell. Setting it to devnull accomplishes the same thing
but avoids the deadlock problem",0,1,[]
681,228351982,1259,14579099,2018-11-05 13:27:57,2018-11-05 20:02:16,closed,"Work around ""[Error 35] Resource unavailable"" on Python 2.7 during CI conda packaging","Building conda packages for Python 2.7 has been erroring out with ""[Error 35] Resource unavailable"".
This *seems* to be somewhat related to the volume of output that the conda build command produces.  This PR reduces the verbosity of conda-build and redirects output to a file and uploads that as a circle CI artifact",0,2,[]
682,227785775,1254,14579099,2018-11-01 23:03:07,2018-11-02 15:37:15,closed,Release 3.4.0,Release branch for plotly.py 3.4.0 and plotlywidget 0.5.0,0,10,[]
683,227117297,1251,14579099,2018-10-30 23:48:11,2018-10-30 23:59:37,closed,Fix reversed color scale issues in annotated heatmap figure factory,"Builds on #867. Thanks for getting this started @inguar!

In addition to the commit from #867:
 - Merge in current master
 - Fixes existing tests
 - Refactors legacy text color selection logic a little to make intention a little more clear
 - Adds fix error in legacy text color selection logic when a custom colorscale is provided",1,5,[]
684,227106621,1250,14579099,2018-10-30 22:48:56,2018-10-30 23:51:14,closed,"Prevent iplot from breaking when Jupyter notebook has headline named ""Plotly""","See issue description in #816.  This PR works around the issue where a Jupyter Notebook heading named ""Plotly"" clashes with the `window.Plotly` variable where we store the plotly.js module.

The workaround is to name this variable the much less likely `_Plotly`.",0,2,[]
685,227101814,1249,14579099,2018-10-30 22:25:59,2018-10-30 22:50:11,closed,Don't convert None to 'None' string in a non-strict string array,Fix for https://github.com/plotly/plotly.py/issues/1244.  Don't convert `None` to the string `'None'` in a string array during validation.  Leave value as `None` so that plotly.js sees it as `null`.,0,1,[]
686,226749335,1248,14579099,2018-10-29 23:47:59,2018-10-29 23:55:58,closed,Update to plotly.js 1.42.0,Bump plotly.js version to 1.42.0 and rerun code-generation,0,1,[]
687,226291643,1246,14579099,2018-10-27 12:38:55,2018-10-29 10:36:54,closed,Added get_plotlyjs and get_plotlyjs_version functions,"Implements suggestion from #637, introducing a public docstring-documented `plotly.offline.get_plotlyjs` function that returns the contents of the bundled version of plotly.js.

Motivating use-case from the new `get_plotlyjs` docstring :
>  Here is an example of creating a standalone HTML report that contains
    two plotly figures, each in their own div.  The include_plotlyjs argument
    is set to False when creating the divs so that we don't include multiple
    copies of the plotly.js library in the output.  Instead, a single copy
    of plotly.js is included in a script tag in the html head element.
```python
    >>> import plotly.graph_objs as go
    >>> from plotly.offline import plot, get_plotlyjs
    >>> fig1 = go.Figure(data=[{'type': 'bar', 'y': [1, 3, 2]}],
    ...                 layout={'height': 400})
    >>> fig2 = go.Figure(data=[{'type': 'scatter', 'y': [1, 3, 2]}],
    ...                  layout={'height': 400})
    >>> div1 = plot(fig1, output_type='div', include_plotlyjs=False)
    >>> div2 = plot(fig2, output_type='div', include_plotlyjs=False)

    >>> html = '''
    ... <html>
    ...     <head>
    ...         <script type=""text/javascript"">{plotlyjs}</script>
    ...     </head>
    ...     <body>
    ...        {div1}
    ...        {div2}
    ...     </body>
    ... </html>
    ...'''.format(plotlyjs=get_plotlyjs(), div1=div1, div2=div2)

    >>> with open('multi_plot.html', 'w') as f:
    ...      f.write(html)
```

Additionally, this PR also introduces a new `plotly.offline.get_plotlyjs_version` function that returns the semantic version of the Plotly.js bundled that is included with plotly.py.  This version string is updated automatically when the version of plotly.js is updated by the `updatebundle` setup.py command.

",0,2,['enhancement']
688,226145919,1245,14579099,2018-10-26 15:52:33,2018-10-30 14:44:31,closed,subplot titles respecting row_width and column_width,"issue: https://github.com/plotly/plotly.py/issues/1229

Going to write some tests that ensure that subtitles are in the right place w/ row_/column_width, if none exist already.

Still fixing broken tests

![newplot](https://user-images.githubusercontent.com/10369095/47577847-e38cdb80-d915-11e8-914c-017b73e4cbd0.png)

![newplot 1](https://user-images.githubusercontent.com/10369095/47577851-e5ef3580-d915-11e8-927f-6dc9e73574bb.png)

",6,5,[]
689,225577662,1243,14579099,2018-10-24 23:07:36,2018-10-30 12:39:58,closed,Add MathJax / Latex support for offline plot/iplot/FigureWidget,"## Overview
This PR adds support for displaying figures with LaTeX typesetting using:
 - `plotly.offline.plot` for standalone HTML
 - `plotly.offline.iplot` inline in the classic notebook
 - `FigureWidget`:
   - Classic notebook 
   - JupyterLab

To be effective, these changes require unreleased changes in plotly.js master. In particular (https://github.com/plotly/plotly.js/pull/2994). These will be available as plotly.js 1.42 which will be included with plotly.py 3.4.0 release.

## `plotly.offline.plot` changes
A new `include_mathjax` argument has been added to `plotly.offline.plot`.  This argument mirrors the `include_plotlyjs` argument and supports a subset of its options.  It defaults to `False`, matching the existing behavior of not adding any MathJax related code to the resulting HTML file/div.  Setting it to `'cdn'` adds a script tag referencing a predefined CDN locaiton, and setting it to a string ending with `'.js'` allows the user to specify a custom CDN path to be included in the script tag.

Full docstring

```
    include_mathjax (False | 'cdn' | path - default=False) --
        Specifies how the MathJax.js library is included in the output html
        file or div string.  MathJax is required in order to display labels
        with LaTeX typesetting.

        If False, no script tag referencing MathJax.js will be included in the
        output. HTML files generated with this option will not be able to
        display LaTeX typesetting.

        If 'cdn', a script tag that references a MathJax CDN location will be
        included in the output.  HTML files generated with this option will be
        able to display LaTeX typesetting as long as they have internet access.

        If a string that ends in '.js', a script tag is included that
        references the specified path. This approach can be used to point the
        resulting HTML file to an alternative CDN.
```

## iplot and FigureWidget
The `iplot` and `FigureWidget` changes do not involve any API updates.  They make it possible for plotly.js to take advantage of the MathJax instance already in use by the Jupyter Notebook and JupyterLab.

## Outstanding issues
The only outstanding issue is that unlike the classic notebook, JupyterLab doesn't seem to load the global MathJax instance until it is needed by the markdown renderer.  See https://github.com/jupyter-widgets/ipywidgets/issues/2253.  This may not be something we can address in the 3.4.0 timeframe.



",0,8,[]
690,225047859,1240,14579099,2018-10-23 13:52:37,2018-10-23 14:22:35,closed,Add support for 2D arrays in InfoArrayValidator,"Supersedes #1233, which didn't recover from the GitHub outage:

----

Rework `InfoArrayValidator` to fix #1220 ",3,5,[]
691,225043125,1239,14579099,2018-10-23 13:40:04,2018-10-23 13:53:19,closed,Add support for 2D arrays in InfoArrayValidator,"Supersedes #1233, which didn't recover from the GitHub outage:

----

Rework `InfoArrayValidator` to fix #1220 ",0,5,[]
692,225039136,1238,14579099,2018-10-23 13:29:16,2018-10-23 13:39:05,closed,Add support for 2D arrays in InfoArrayValidator,"Supersedes #1233, which didn't recover from the GitHub outage:

----

Rework `InfoArrayValidator` to fix #1220 ",0,8,[]
693,224773025,1236,14579099,2018-10-22 18:39:10,2018-10-23 15:05:25,closed,Use uuid4 instead of uuid1 to generate trace uid,"This PR addresses #1235 .
I didn't see any existing tests which specifically test this functionality. Since this issue and fix has more to do with core Python, I'm not entirely convinced that they would be that useful.",5,5,[]
694,224709297,1234,14579099,2018-10-22 15:00:14,2018-10-23 19:06:31,closed,offline.plot/iplot improvements,"### Overview
This PR includes a variety of small improvements to html generation in `plotly.offline.plot` and `plotly.offline.iplot`.


### Changes
 - Add support for including the auto-resize logic in the HTML div output by `offline.plot` when `output_type='div'` and `include_plotlyjs=False`. See #1043 for discussion. cc @mchels @ryancollingwood @spencercal
 - Adds resize support for iplot use in the classic notebook. This PR now superceeds #970.
 - Adds `'cdn'`, `'directory'`, and path string `include_plotlyjs` options in `offline.plot`
    - When `'cdn'`, the resulting html file/div includes a script tag reference to the plotlyjs cdn. This addresses part of #1227
    - When `'directory'`, the resulting html file/div includes a script tag reference to a plotly.min.js bundle in the same directory as the html file. If output_type is `'file'` then this plotly.min.js bundle is created in the output directory if it doesn't already exist. This is an alternative approach towards the goal of #688
    - When a string ending with `'.js'`, the resulting html file/div includes a script tag that references this exact path. This can be used to point to a plotly.js bundle from an alternative CDN.",4,6,[]
695,224647567,1233,14579099,2018-10-22 11:06:48,2018-10-23 13:27:49,closed,Add support for 2D arrays in InfoArrayValidator,"Rework `InfoArrayValidator` to fix #1220 

cc @michaelbabyn",0,7,[]
696,224479447,1232,14579099,2018-10-20 14:51:35,2019-01-23 23:25:53,closed,Standardize whitespace and comments to follow PEP8,,0,3,[]
697,224351122,1230,14579099,2018-10-19 16:59:46,2018-10-20 10:48:07,closed,added () for v,,1,1,[]
698,222684377,1224,14579099,2018-10-14 00:16:27,2018-10-23 12:24:38,closed,Templates (themes) integration,"## Overview
This PR introduces figure templates (themes) to plotly.py

## Background
Earlier this year the plotly.js team discussed (https://github.com/plotly/plotly.js/issues/2469) and then implemented (https://github.com/plotly/plotly.js/pull/2761) a powerful templating approach that allows plotly.js users to specify default values for all trace and layout properties that make up a figure.  This makes it possible to create custom figure themes that can be applied repeatedly to new figures.

In addition to default property values, themes can also include default object array elements like annotations, shapes, and images.  This way, templates can be used to create figures that include default labels (e.g. ""CONFIDENTIAL"") and/or default images (e.g. a company/project logo).

### Plotly.js Template Representation
Templates in Plotly.js are specified as a part of the declarative structure of the figure itself.  A template is a specification object located at the `layout.template` path in the figure specification.

After a figure has been created, its template can be updated using the same `Plotly.relayout` operation that can be used to update the rest of the figure's layout properties.

## plotly.py integration
This section describes the high-level changes made in this PR to support templates in plotly.py

### Code generation / validation
The specification of the `layout.template` object can't be fully captured in the schema, so a bunch of code generation work was needed in order to provide the same level of validation that plotly.py users have come to expect from the rest of the figure property hierarchy.

In addition to the `layout.template` object itself, templates also introduce a `*defaults` property that corresponds to each object array property (e.g. `layout.annotationsdefaults` corresponds to `layout.annotations`).  These are now included in the code generation / validation process.

These changes are implemented in approximately commits 106426e through f84c8a5

### plotly.io.templates configuration object for registering named templates
Next, this PR adds a new `plotly.io.templates` configuration object for registering templates.  A user can create a template object (an instance of `go.layout.Template`), configure it to their liking, then register it by name with `plotly.io.templates` for use in the future.

If a string is assigned to the `fig.layout.template` property, plotly.py checks the `plotly.io.templates` registry to see if there is a template registered with this name. If there is, then this template is applied to the figure.

### Default template
The `plotly.io.templates` configuration object can also be used to specify a global default template. The global default template will be applied automatically when a figure is constructed (unless an explicit template was provided to the figure constructor).

### Merging templates
A string assigned to the `fig.layout.template` property, or registered as the default template, may contain multiple registered template names joined on `'+'` characters (borrowing the flaglist syntax). In this case the templates are merged together (applied to the figure from left to right).

### Extracting a template from a figure
A new `plotly.io.to_templated` function is introduced that inputs a figure and then returns a copy of the figure where all of the ""styling"" properties have been moved from the figure's `data`/`layout` specification into the figure's `layout.template` object.

The `layout.template` property of the resulting figure can then be applied to another figure, or it can be registered as a named template.

### Custom Theme API example

Imports
```python
    >>> import plotly.graph_objs as go
    >>> import plotly.io as pio
```

Construct a figure with large courier text

```python
    >>> fig = go.Figure(layout={'title': 'Figure Title',
    ...                         'font': {'size': 20, 'family': 'Courier'}})
    >>> fig
    Figure({
        'data': [],
        'layout': {'title': 'Figure Title',
                   'font': {'family': 'Courier', 'size': 20}}
    })
```

Convert to a figure with a template. Note how the 'font' properties have been moved into the template property.
```python
    >>> templated_fig = pio.to_templated(fig)
    >>> templated_fig
    Figure({
        'data': [],
        'layout': {'title': 'Figure Title',
                   'template': {'layout': {'font': {'family': 'Courier',
                                                    'size': 20}}}}
    })
```

Next create a new figure with this template
```python
    >>> fig2 = go.Figure(layout={
    ...     'title': 'Figure 2 Title',
    ...     'template': templated_fig.layout.template})
    >>> fig2
    Figure({
        'data': [],
        'layout': {'title': 'Figure 2 Title',
                   'template': {'layout': {'font': {'family': 'Courier',
                                                    'size': 20}}}}
    })
```

The default font in fig2 will now be size 20 Courier.

Next, register as a named template...

```python
    >>> pio.templates['large_courier'] = templated_fig.layout.template
```
and specify this template by name when constructing a figure.
```python
    >>> go.Figure(layout={
    ...     'title': 'Figure 3 Title',
    ...     'template': 'large_courier'})
    Figure({
        'data': [],
        'layout': {'title': 'Figure 3 Title',
                   'template': {'layout': {'font': {'family': 'Courier',
                                                    'size': 20}}}}
    })
```
Finally, set this as the default template to be applied to all new figures
```python
    >>> pio.templates.default = 'large_courier'
    >>> go.Figure(layout={'title': 'Figure 4 Title'})
    Figure({
        'data': [],
        'layout': {'title': 'Figure 4 Title',
                   'template': {'layout': {'font': {'family': 'Courier',
                                                    'size': 20}}}}
    })
```  

### New built-in named templates
A new `templategen` module is introduced that includes some helper function for us to use in generating templates to bundle with plotly.py.  The `templategen` module was purposely **not** added to setup.py because it should not be distributed with plotly.py, it's only for development (just like the existing `codegen` module).

Built-in templates are generated by running `templategen/__init__.py` and they are output to the new `plotly/package_data/templates` directory. This directory has been added as a `package_data` directory to setup.py as it needs to be distributed along with plotly.py

At this point this PR includes templates for 2 common themes, 3 original themes, and 2 ""add-on"" templates.

### Common themes
This PR includes pre-registered templates that imitate (in the most flattering way possible 🙂) the default ggplot2 and seaborn themes.

#### Current default
First, here is the sample figure with no theme applied
![newplot 17](https://user-images.githubusercontent.com/15064365/46982291-b173b200-d0a9-11e8-9880-a9bb38a9bf62.png)

#### ggplot
![newplot 18](https://user-images.githubusercontent.com/15064365/46982345-e54ed780-d0a9-11e8-9c82-180bc4c410ab.png)

#### seaborn
![newplot 19](https://user-images.githubusercontent.com/15064365/46982358-f26bc680-d0a9-11e8-8000-95d7dc4a0651.png)

### Original themes
This PR currently includes three original themes, including one dark theme that's well suited for use alongside JupyterLab's dark theme.

#### plotly
![newplot 20](https://user-images.githubusercontent.com/15064365/46982376-044d6980-d0aa-11e8-8f21-c830450d8345.png)

#### plotly_white
![newplot 21](https://user-images.githubusercontent.com/15064365/46982392-13ccb280-d0aa-11e8-8e43-4739d8a225ba.png)

#### plotly_dark
Here's a screeshot of the `plotly_dark`, viewed in JupyterLab with JupyterLab dark theme
![screen shot 2018-10-15 at 6 42 56 pm](https://user-images.githubusercontent.com/15064365/46982428-2e069080-d0aa-11e8-98c7-fea5d90d90d1.png)

### Add-on templates
In addition to these theme templates, I've added a couple of ""add-on"" templates.  These are templates that can be used either on their own, or merged with one of the themes above.

#### presentation
The `presentation` template increases the font size, marker size, and line width by about 1.5x   The idea is that this is a templates that can be selectively activated during a presentation, along with JupyterLab's ""View->Presentation Mode"" option, to make figure more readable from a distance.

Here is an example of `'plotly+presentation'`

![newplot 15](https://user-images.githubusercontent.com/15064365/46982199-50e47500-d0a9-11e8-91c3-3aa07744c472.png)

#### xgridoff
The ""xgridoff"" template simply disables x-grid axis lines by default. It can be

Here's an example of `'plotly_dark+presentation+xgridoff'`

![newplot 16](https://user-images.githubusercontent.com/15064365/46982231-7b363280-d0a9-11e8-893f-919e8a3e5b16.png)

## Interactive theme switching
Thanks to the design of templates in Plotly.js and the design of the ipywidgets plotly.py it's possible to interactively apply different templates to a figure after it has already been created and displayed.  Here's what that looks like...

![template_switching](https://user-images.githubusercontent.com/15064365/46982788-c3eeeb00-d0ab-11e8-95a0-42882ad7aef9.gif)

cc @jackparmer @chriddyp @nicolaskruchten @sglyon",2,34,[]
699,220217247,1214,14579099,2018-10-04 00:22:38,2018-10-15 09:51:49,closed,Add option to set dendrogram color threshold,"Hope this works @Elpiro @jonmmease 

---
Adds a new optional `color_threshold` argument to the create_dendrogram function to customize the dendrogram ""cut height"" at which clusters are separated.

This work was initially started by @Elpiro in #1075

---
Examples

```python
import plotly.graph_objs as go
import plotly.figure_factory as ff
import numpy as np

X = np.random.rand(15, 15)
```
Default behavior
```python
dendro = ff.create_dendrogram(X)
fig = go.FigureWidget(dendro)
fig
```
![newplot](https://user-images.githubusercontent.com/15064365/46944218-85bbe200-d03f-11e8-9fda-b6037c04289b.png)

With a color threshold
```python
dendro = ff.create_dendrogram(X, color_threshold=1.6)
fig = go.FigureWidget(dendro)
fig
```
![newplot 1](https://user-images.githubusercontent.com/15064365/46944239-8f454a00-d03f-11e8-9c8a-3c4a92858774.png)
",3,1,[]
700,220188945,1213,14579099,2018-10-03 21:40:55,2018-10-06 10:49:27,closed,ignore divide error in streamline,"Simple fix to warning that pops up when streamline code divides 0 by 0.

See  https://plot.ly/python/streamline-plots/#basic-streamline-plot for an example of the warning.",3,2,[]
701,218484049,1205,14579099,2018-09-26 23:33:17,2018-09-28 11:23:00,closed,Release 3.3.0,Release branch for plotly.py 3.3.0 and plotlywidget 0.4.0. Built on plotly.js 1.41.3.,0,8,[]
702,218412904,1204,14579099,2018-09-26 18:31:03,2018-09-26 18:31:27,closed,incorrect use of mergeWith causing mutation to _fullLayout,"While testing the `barpolar` trace in a `FigureWidget` I came across an error where certain Python update operations did not result in the expected change to the barpolar trace. After hours of Python/JavaScript debugging I found the source.  The lodash `mergeWith` operation mutates the first argument and we were treating it as though it did not mutate any of the arguments.  The fix is simply to pass an empty object as the first argument (7255511).

While debugging, I noticed that the `createDeltaObject` function was sometimes returning a delta object that included property values that were functions.  This didn't seem to be causing any problems, but the result of `createDeltaObject` is the object that is serialized and sent back to the Python side so it's more consistent to remove these function properties here (1a04fbb).",0,2,[]
703,218156619,1202,14579099,2018-09-26 00:24:35,2018-09-26 18:18:58,closed,Update plotlyjs to version 1.41.3,,0,1,[]
704,218140795,1201,14579099,2018-09-25 22:41:39,2018-09-25 23:20:35,closed,Replace pkg_resources.resource_string with pkgutil.get_data,for improved compatibility with cx_Freeze. See #1199 ,0,1,[]
705,218017962,1198,14579099,2018-09-25 15:10:57,2018-11-20 18:12:33,closed,fix v2 requests for onprem,,0,2,[]
706,217814980,1197,14579099,2018-09-24 23:17:57,2018-09-26 19:18:52,closed,Allow forcing a fix axis scale ratio to maintain arrow lengths,"Addresses issue #1187.

A new `scaleratio` parameter is added to the `create_quiver` function to allow forcing a fix scale ratio to the axis of the plot through the `scaleratio` option in the Layout. A distortion is introduced to the arrows length, angle and shape by having a scale ratio different than 1. In this pull request, this distortion is reversed by multiplying or dividing by `scaleratio` at key steps of the arrows construction.

",5,10,[]
707,217807387,1196,14579099,2018-09-24 22:33:00,2018-09-25 23:18:11,closed,Fix licence name in manifest and update license copyright year,Closes https://github.com/plotly/plotly.py/issues/765,0,1,[]
708,217779388,1195,14579099,2018-09-24 20:32:42,2018-09-25 23:15:41,closed,Support configurable settings directory with lazy initialization,"This PR makes 2 changes to our handling of the `.plotly` settings directory.

 1. The default location of this directory is still `~/.plotly`, but it can now be overridden by setting the `PLOTLY_DIR` environment variable before Python starts.  These changes are built on this PR by @itsb: https://github.com/plotly/plotly.py/pull/661
 2. Previously this settings directory was created and initialized during the initial import of the plotly library. Now, the creation of the directory and the initialization of the configuration files is delayed until an operation is performed that needs to write to the directory.  Defaults are now returned when settings are accessed and the config directory does not exist.

Change 1 provides a way to customize the location of plotly.py's settings, and makes it possible for users to create and maintain multiple profiles.

Change 2 removes the concurrency issues associated with launching many plotly processes simultaneously.

This PR addresses the following issues:
 - https://github.com/plotly/plotly.py/issues/1076
 - https://github.com/plotly/plotly.py/pull/661
 - https://github.com/plotly/plotly.py/issues/728
 - https://github.com/plotly/plotly.py/issues/533
 - https://github.com/plotly/plotly.py/issues/225",2,9,[]
709,217615239,1192,14579099,2018-09-24 10:43:20,2018-09-25 23:17:27,closed,Handle optional import where imported module raises exception on import,See #696 ,0,2,[]
710,217424531,1191,14579099,2018-09-21 23:39:24,2018-09-25 22:58:05,closed,Add deepcopy and pickle support to figures and graph objects,"This PR adds support for `deepcopy` and `pickle` operations on figures and `graph_objs`.

This PR addresses:
 - https://github.com/plotly/plotly.py/issues/579
 - https://github.com/plotly/plotly.py/issues/786
 - https://github.com/plotly/plotly.py/issues/1165

This does not address the performance optimizations described in https://github.com/plotly/plotly.py/issues/1078. Support for `pickle` and `deepcopy` is added by implementing a `__reduce__` method that simply calls the figure/graph_obj constructor with the `dict` representation of the object.

To lay a foundation for potential future optimization work, this PR also adds support for performing `deepcopy` on all validator classes.",0,5,[]
711,216804389,1188,14579099,2018-09-19 23:23:29,2018-09-21 12:05:55,closed,Add to/from/read/write json functions to the plotly.io module,"This PR introduces 4 new functions to the `plotly.io` module for converting figures to and from JSON strings and files.

These functions follow the `plotly.io` module conventions described in https://github.com/plotly/plotly.py/issues/1098

Pending bug fixes in https://github.com/jupyterlab/jupyter-renderers/pull/159, the JSON files written by `plotly.io.write_json` will be compatible with the `@jupyterlab/plotly-extension` JupyterLab extension.  This means it will be possible to create a figure in plotly.py, write it to a `fig.plotly.json` file, then double click the file in JupyterLab to view the figure right inside JupyterLab.
",1,6,[]
712,216175901,1186,14579099,2018-09-18 03:55:52,2018-09-25 19:23:39,closed,fix wrong leaves determination bug,"@jonmmease Sorry for multiple pull request beacuse I am new to github cooperation.

Here is the formal request with code and example.

Before, run the code below
```
import plotly
import plotly.figure_factory as ff
import pandas as pd
demo_data = pd.DataFrame([[1,2,3,4],[1,2,3,4],[1,3,5,6],[1,4,2,3]])
figure = ff.create_dendrogram(demo_data)
plotly.offline.plot(figure)
```
demo_data looks like 
![image](https://user-images.githubusercontent.com/16633223/45663499-5649b080-bb39-11e8-9229-a59c63159dbc.png)
The data is some simple data and it mainly simulated the situation which has three and more rows are identical. When we using the euclidean distance, the distance between 0,1 and 3 will be identical.

we could get the dendrogram like that
![wrong dendrogram](https://user-images.githubusercontent.com/16633223/45663326-6d3bd300-bb38-11e8-8436-de217508eef3.png)

In the graph above, we can see wrong multiple x-axis ticks text raised. It will be severely when we pass the leaves name. 35 in the graph is the original x-coordinate of the leaves.

After, run the same code above.
![after bug fixed](https://user-images.githubusercontent.com/16633223/45663422-ea674800-bb38-11e8-8fb1-529b5f6d70f6.png)

Relative issue and request: 
#1180 
#1181 

",5,3,[]
713,215885027,1180,14579099,2018-09-17 06:42:37,2018-09-20 11:58:33,closed,For wrong alignment of the leaves of dendrogram ,,2,3,[]
714,215546732,1178,14579099,2018-09-14 10:14:01,2019-08-17 09:54:14,closed,Use latest plotly.js,"Is there a reason to lock the version of plotly.js used?

This results in a WARNING when building Jupyterlab:

```
WARNING in plotly.js
  Multiple versions of plotly.js found:
    1.40.1 ./~/plotly.js from ./~/plotly.js\src\components\colorscale\get_scale.js
    1.41.0 ./~/@jupyterlab\plotly-extension/~/plotly.js from ./~/@jupyterlab\plotly-extension\lib\index.js
```

Reference:
- Jupyterlab 0.34.8
- plotly.py 3.2.1
- plotlywidget@0.3.0 
- @jupyterlab/plotly-extension@0.17

Nota: I did not try it yet",8,1,[]
715,214294611,1171,14579099,2018-09-10 12:19:37,2018-09-14 13:19:21,closed,Release 3.2.1,"Release branch for 3.2.1

See updated changelog in this branch for details.",0,6,[]
716,214168691,1169,14579099,2018-09-09 22:30:31,2018-10-24 23:31:03,closed,[WIP] Towards offline Mathjax support,,1,5,[]
717,214097395,1167,14579099,2018-09-08 14:15:30,2018-09-08 23:13:55,closed,Added figure to_ordered_dict method,"Adds a new `BaseFigure` method, `to_ordered_dict`.  This builds and returns a representation of the figure as a nested structure of `OrderedDict` and `list` instances.  The `OrderedDict` keys are sorted alphabetically.  This makes it possible for library users to iterate over the nested structure of a figure in a deterministic order.

This method takes the place of the `Figure.get_ordered` method in plotly.py < 3.0.0.

See #1158 for some discussion

cc @scjody ",0,4,[]
718,213934627,1163,14579099,2018-09-07 13:51:21,2018-09-08 22:27:41,closed,Pandas datetime and numpy numeric array fixes," 1) Preserve numeric numpy types as-is in validator output, even if that
    numeric type is not supported as JavaScript TypedArray.
 2) Update widget serializer to check numeric numpy arrays for whether
    they are compatible with `TypedArrays`. If not, serialize as list.
 3) Call `to_pydatetime()` on pandas datetime series/index values
    when passed to `copy_to_readonly_numpy_array`. This returns numpy
    array of datetimes (which we already know how to serialize)
 4) Add new `_plotly_utils/tests/validators/test_pandas_series_input.py` test suite

Fixes datetime issue in #1160 (cc @VelizarVESSELINOV)
Fixes FigureWidget issue in #1155",0,3,[]
719,213792016,1162,14579099,2018-09-07 01:22:21,2018-09-08 23:04:25,closed,Introduce skip_invalid argument to figure,"This PR introduces a new public `skip_invalid` kwarg to `Figure` and `FigureWidget`.

When set to `False` (the default) invalid properties in the specification of `data`, `layout`, or `frames` will raise a `ValueError`.  This is the current behavior.

When set to `True`, invalid properties in the figure specification (invalid by property name or by property value) will be silently skipped, and no `ValueError` will be raised.

This new property serves a similar function to the pre-v3 internal `_raise` kwarg. But it's been renamed and made public as I expect it to be a useful option to expose to users, especially in the context of loading a figure specification from an outside source.

See discussion in https://github.com/plotly/plotly.py/issues/1158
cc: @scjody ",0,4,[]
720,212975284,1157,14579099,2018-09-04 13:24:51,2018-09-05 13:47:47,closed,Release 3.2.0,"Release branch for plotly.py 3.2.0 and plotlywidget 0.3.0

Includes a codegen update to specialize the schema descriptions for Python (e.g. `*true*` -> `True`)

Next steps
 - [x] Publish release candidates to PyPI, npm, and anaconda
 - [x] QA
 - [x] Review changelog and README and contributing
 - [x] Merge https://github.com/plotly/documentation/pull/1058
 - [x] Merge this PR and release to PyPI, anaconda cloud, and npm",0,16,[]
721,212727577,1154,14579099,2018-09-03 12:02:14,2018-09-04 11:41:55,closed,Use circleci to build conda packages,"Build conda packages using circle ci.

Previously the conda package was a `noarch` Python package that was not specific to Python version of operating system. This works fine, except for one problem.

Conda always ensures that all *.py files are byte-compiled to *.pyc when a package is installed, and this can take a long time (~5-10 minutes) for plotly.py since we have so many python files thanks to code generation.

To avoid this problem, this PR uses circleci to build conda packages for each Python version, and then converts that build to each operating system using `conda convert`.  This way, each package includes the pre-compiled byte code for the correct version of Python.  This results in a much fast installation experience (compared to conda noarch) and a faster initial import (compared to pip wheel).",0,38,[]
722,212722975,1153,14579099,2018-09-03 11:42:24,2018-09-03 12:01:20,closed,"Retry on ""Uh oh, an error occurred"" request exceptions","Follow on to #1146 
Also retry on ""Uh oh, an error occurred"" `PlotlyRequestException`s",0,1,[]
723,212585178,1152,14579099,2018-09-02 10:02:10,2018-09-02 10:44:30,closed,"Fix JavaScript ""Error: addFrames failure"" in offline html export","Fix for ""Problem 3"" in #1147.

Since version 3.0, stand-alone html files/divs generated by `plotly.offline.plot` resulted in a harmless JavaScript error on load if no Frames were defined.

```
Uncaught (in promise) Error: addFrames failure: frameList must be an Array of frame definitions[object Object]
    at Object.r.addFrames (pca:73)
    at pca:79
```

The problem was that the no-frames case was being represented by an empty `dict` rather than an empty `list`. Also, the frames logic should not have been output at all for the empty frames case.

cc: @CiaranWelsh",0,2,[]
724,212568835,1151,14579099,2018-09-01 23:36:22,2018-09-02 00:03:34,closed,Annotated heatmap figure factory fixes and improvements," - Fix `map object not subscriptable` error #1122 (This happened on Python 3 when specifying a custom colormap using `rgb` colors)
 - Use colorscale validator to validate specified colorscale (and produce helpful error message) before trying to do text color inference.
 - Handle case where some colors are specified as rgb and some as hex.
 - Add 'Cividis"" to list of know lighter-to-darker colorscales.

Thanks for bring this up @andy-lz!",0,1,[]
725,212567495,1149,14579099,2018-09-01 22:43:33,2018-09-02 00:15:43,closed,Optimize copy_to_readonly_numpy_array for numeric pandas series/index objects,"See #1081 
cc: @RZachLamberty",0,3,[]
726,212536365,1148,14579099,2018-09-01 08:21:06,2018-09-01 10:45:00,closed,Fixing docstring for manually converting from mpl to plotly,updating documentation for the manual process of converting from matplotlib to plotly,1,1,[]
727,212366287,1146,14579099,2018-08-31 12:22:04,2018-08-31 12:51:47,closed,Only retry on request errors with 5XX status code and use exponential backoff,"Implements #1114 and changes from random retry every second or so to exponential backoff.

This should be more reliable for when the back-end servers are temporarily overwhelmed.

Tries in seconds:
     0, 1, 2, 4, 8, 16, 16, 16... for up to 3 minutes total.

cc @priyatharsan ",0,3,[]
728,212357068,1145,14579099,2018-08-31 11:40:22,2018-09-01 10:47:20,closed,Remove stream write validation to avoid incorrect validation failures,"Fix for #1108

Removed validation since stream writes don't actually have the same validation rules as traces.

cc @gnthibault",3,2,[]
729,212349118,1144,14579099,2018-08-31 11:04:10,2018-08-31 12:23:02,closed,Accept proxy-related environment variables as lower or upper case,"Follow on to #1133.

Support `HTTP_PROXY`, `HTTPS_PROXY`, and `NO_PROXY`, in addition to the lowercase variants, as environment variables to configure a stream proxy.

cc @imscaradh ",0,1,[]
730,211915481,1140,14579099,2018-08-29 23:27:38,2018-08-30 11:46:44,closed,Add workaround for orca segmentation fault,"See discussion in https://github.com/plotly/orca/issues/124

This PR adds a line to unset the `NODE_OPTIONS` environment variable before calling orca, thereby avoiding the segmentation fault.
",0,3,[]
731,211773154,1138,14579099,2018-08-29 14:25:20,2018-08-29 21:55:22,closed,Fix deprecation warning for go.Annotations.,"Fix for #1125.
There is no `go.layout.Annotations` (it should not have been plural)

Thanks @timkpaine",1,1,[]
732,211594546,1136,14579099,2018-08-29 00:21:07,2018-08-29 11:13:09,closed,Add dash length list to dash property validator,"Fix for #1107

This PR introduces a new custom `DashValidator`. This is a `EnumerationValidator` subclass that adds a regular expression to the acceptable values list that covers the dash list case.

It also customizes the validator description so that we don't simple tell users that their specification must match the regular expression `^\d+(\.\d+)?(px|%)?((,|\s)\s*\d+(\.\d+)?(px|%)?)*$` 🙂 

The new `DashValidator` is used for all `dash` properties that support dash lists. At the moment this includes the `dash` properties in all non-WebGL trace types.  The validators for the dash properties in WebGL trace types have not been modified.

cc @APlowman",0,1,[]
733,211428956,1135,14579099,2018-08-28 13:47:00,2018-08-28 22:50:41,closed,Improve error messages when trying to validate orca,"This PR works to improve the error messages displayed during the validator orca process.  In particular, it appends the full text of the error at the end of the message.

Also adds a special case error for Linux without a display server configured.",0,8,[]
734,210924796,1134,14579099,2018-08-25 22:52:31,2018-08-25 23:07:23,closed,Update to plotly.js 1.40.1,"This PR updates the plotly.js version to 1.40.1. This updates the bundled version, the version compiled into the classic notebook widget, the version declared for the JupyterLab widget, the bundled schema, and the code generation output.

Note: The docstring changes to add 'Cividis' aren't from the plotly.js change. It was a prior oversight that the code generation was run after adding the 'Cividis' colorscale to the `ColorscaleValidator`",0,2,[]
735,210729292,1133,14579099,2018-08-24 12:41:52,2018-08-31 10:55:56,closed,Using basic auth for proxy tunnel,"This is a PR for using Plotly behind a corporate firewall with basic authentication. Although server and port were respected, the basic auth string inside environment variables like `$http_proxy` is ignored at this stage.



(My question here: https://github.com/plotly/plotly.py/issues/1129)",1,2,[]
736,209933632,1126,14579099,2018-08-21 19:38:50,2020-05-19 19:57:06,closed,adding resize,"![tmp](https://user-images.githubusercontent.com/3105306/44424852-4b125d80-a558-11e8-8212-3396ccc4dcc2.gif)
",6,1,[]
737,209351209,1120,14579099,2018-08-19 09:26:50,2018-08-25 21:45:22,closed,Orca integration for static image export,"## Overview
This PR integrates [orca](https://github.com/plotly/orca) into plotly.py to support exporting figures as static images :tada:

cc @chriddyp @jackparmer @nicolaskruchten  @cldougl @Kully @etpinard @malmaud

Even if you don't have time to look at the code or test out the branch, I'd appreciate any feedback on the architecture and API notes.

Here goes...

## Background
See https://github.com/plotly/plotly.py/issues/1105 for background information and discussion of related work.

## Architecture
In this PR I went with method (3) from the issue above, ""Use orca in server mode"". 

The first time an image export operation is performed, an orca server process is launched in the background (as non-blocking subprocess).  Image export requests are posted to the server on a local port.

By default, the server process runs until the main process exits. But there is also a `timeout` configuration option (more on configuration options below) that allows a user to specify that the server should be automatically shut down after a certain period of inactivity.

Regardless of whether a `timeout` is set, the server may also be manually shutdown and manually started.

## Implementation Notes

### Starting the server
The server subprocess is launched using [`subprocess.Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen) to create a long-running background process.  The server is launched in [`--graph-only` mode](https://github.com/plotly/orca/pull/114) to be as lean as possible (this avoids running processes for exporting thumbnails, dashboards, etc.)

### Communicating with the Server
Communication with the server is done using [`requests.post`](http://docs.python-requests.org/en/master/user/quickstart/). The request function is wrapped in the [`@retrying.retry` decorator](https://github.com/rholder/retrying) to handle the automatic retrying of failed requests.  The retrying logic is very convenient, as it allows an image request to be made right after the server process is launched and the request will simply block until the server responds.

### Shutting down the server
It's possible to terminate the particular process created using `subprocess.Popen` with the [`Popen.terminate`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen.terminate) method.  Unfortunately, this isn't always enough to actually shut down the server. The trouble is that typical orca entry points (orca.sh, orca.js, orca.cmd) are simply wrapper scripts that call the main orca/electron executable.  In my testing on OS X, Linux, and Windows I found that `Popen.terminate` generally only terminates the shell/wrapper process, leaving the orca server running.  This is definitely not acceptable, as a user could end up with a new orca process each time they restart their kernel and export images.

I initially tried some workarounds involving process groups, and sending different signals, but the result ended up being platform dependent and still not fully reliable. I settled on introducing the [`psutil`](https://github.com/giampaolo/psutil) library as a new optional dependency.  `psutil` provides a platform agnostic API for iterating over the children of a process, and then terminating them.  In my testing, this `psutil` approach has been fully reliable in terminating the server processes across platforms.  Since our CI test suites is Linux only at this point, I'm especially glad to not need to introduce any OS X/Windows specific process management logic.

### Shutdown server after timeout
If a `timeout` is configured when the server process is launched, a [`threading.Timer`](https://docs.python.org/3/library/threading.html#timer-objects) object is created to call the shutdown function after `timeout` seconds.

Each time an image render request is made, any existing `Timer` object is [canceled](https://docs.python.org/3/library/threading.html#threading.Timer.cancel), and a new `Timer` is created.

Importantly, each timer thread has the [daemon](https://docs.python.org/3/library/threading.html#threading.Thread.daemon) property set to `True`. This prevents the main process from waiting for the timer to complete before exiting.

### Shutdown on exit
The shutdown function is annotated with the [`@atexit.register`](https://docs.python.org/3/library/atexit.html) decorator to ensure that the server is properly shutdown when the main Python process exits.

## API Design
This PR introduces the beginning of the [`plotly.io` module](https://github.com/plotly/plotly.py/issues/1098). 

### Image export
Two image export functions are introduced. These function follow the export conventions proposed in #1098.

```python
plotly.io.write_image(fig, file, format=None, scale=None, width=None, height=None)
```

This functions works very much like the matplotlib [`savefig`](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.savefig.html) function. `fig` is a `Figure` or compatible `dict`. `file` may be a string referring to a local filesystem path, or a file-like object to be written to. If `file` is a string, then the file extension is used to infer the image format if possible. The `format` may be used to explicitly specify the format, and it is required if `file` is not a string with a common extension.  Supported formats are png, jpeg (jpg extension supported as well), webp, svg, pdf, and eps (with poppler installed). `scale`, `width`, and `height` work as you would expect.

```python
plotly.io.to_image(fig, format=None, width=None, height=None, scale=None)
```
This function may be used to return the binary representation of the image directly (no temp files or messing with `io.BytesIO`!).  This can be used in conjunction with `IPython.display.Image` to display static images directly in the notebook or QtConsole.

### Orca management
If users install orca using conda or npm, they should be able to use the above methods immediately, without additional configuration. But for more technical users, and for general users if things go wrong, there is a new `plotly.io.orca` module.

#### Manual server management
The server may be manually started using `plotly.io.orca.ensure_orca_server()`, and it may be manually shut down using `plotly.io.orca.shutdown_orca_server()`

#### Orca config
`plotly.io.orca.config` is an orca configurations/settings object. Here are the properties that can be configured

```
orca configuration
------------------
    port: None
    executable: orca
    timeout: None
    default_width: None
    default_height: None
    default_scale: 1
    default_format: png
    mathjax: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js
    topojson: None
    mapbox_access_token: None

constants
---------
    plotlyjs: /path/to/plotly/package_data/plotly.min.js 
    config_file: /Users/username/.plotly/.orca
```
If automatic port selection is not desirable, an explicit `port` value may be set here. If an executable named `orca` cannot be found on the path, then the `executable` property may be set to the absolute path to an orca executable.  This is where the `timeout` property is set. The default width, height, scale, and format, control the default values used by `to_image` when not otherwise specified.

I took the liberty of supplying a default mathjax CDN, this way latex image export just works as long as the user is online. For offline use, the `mathjax` property can be set to the path to a local mathjax installation. When `topojson` is `None` the plot.ly CDN will be used, but a local path can be supplied if working offline.  Finally, the `mapbox_access_token` property can store a mapbox token that will automatically be applied when exporting mapbox traces.

Properties can be set using property assignment
```python
plotly.io.orca.config.mapbox_access_token = 'xyz...'
```
or using the `update` method
```python
plotly.io.orca.config.update(mapbox_access_token='xyz...')
```
The constants are not settable and are listed for informational purposes.

#### Saving configuration properties
The config values may optionally be saved to the `~/.plotly` settings directory as `~/.plotly/.orca` using the `plotly.io.config.save()` method. If present, these setting are automatically loaded on import. 

#### Orca status
The current status of the orca server process can be displayed using the `plotly.io.orca.status` object.

At initial startup the `state` will be `unvalidated`
```
orca status
-----------
    executable: None
    version: None
    port: None
    pid: None
    state: unvalidated
    command: None
```
After a valid orca executable has been found, and the server is not yet running, the `state` will be `validated'

```
orca status
-----------
    executable: /anaconda3/envs/plotly_dev/bin/orca
    version: 1.1.0
    port: None
    pid: None
    state: validated
    command: None
```
Here the user can see which orca executable was found on the path, and what version it is.

When the server process is currently running, the `state` will be `running`
```
orca status
-----------
    executable: /anaconda3/envs/plotly_dev/bin/orca
    version: 1.1.0
    port: 59997
    pid: 83079
    state: running
    command: ['orca', 'serve', '-p', '59997', '--graph-only', '--plotly', '/path/to/plotly/package_data/plotly.min.js', '--mathjax', 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js', '--mapbox-access-token', 'pk...']
```
Here the user can see the details of the running process (port, pid) and the exact command line arguments that were passed to the orca server at startup.

### Error messages
There are a lot of things that can potentially go wrong here, so I've tried to make the error messages as helpful as possible.  For example here's the error that is raised if the orca executable cannot be found on the path:

```
The orca executable is required in order to export figures as static images,
but it could not be found on the system path.

Searched for executable 'orca2' on the following path:
    /anaconda3/envs/plotly_dev/bin
    /usr/local/bin
    /usr/bin
    /bin
    /usr/sbin
    /sbin
    /Applications/VMware Fusion.app/Contents/Public
    /Library/TeX/texbin

If you haven't installed orca yet, you can do so using conda as follows:

    $ conda install -c plotly plotly-orca

After installation is complete, no further configuration should be needed. 
For other approaches to installing orca, see the orca project README at
https://github.com/plotly/orca.

If you have installed orca, then for some reason plotly.py was unable to
locate it. In this case, set the `plotly.io.orca.config.executable`
property to the full path to your orca executable. For example:

    >>> plotly.io.orca.config.executable = '/path/to/orca'

After updating this executable property, try the export operation again.
If it is successful then you may want to save this configuration so that it
will be applied automatically in future sessions. You can do this as follows:

    >>> plotly.io.orca.config.save() 

If you're still having trouble, feel free to ask for help on the forums at
https://community.plot.ly/c/api/python
```
## Testing
I've added two new test suites.

 - `plotly/tests/test_orca/test_orca_server.py`. These tests cover the logic for locating and validating the orca executable. And the logic for launching and shutting it down. This testing relies on `psutil` to check that the process with the right `pid` is running and then not running. And it relies on pinging the server to make sure it's running on the right port, and that it stops responding when it should be shut down.

 - `plotly/tests/test_orca/test_to_image.py`. These tests cover the image conversion logic. I've generated a set or reference images to compare against. These ensure that valid images are produces where they should be, and that the topojson and mathjax configuration is working properly. Unfortunately, the images are not exactly reproducible between my local mac and CircleCI, so for the time being there is a separate directory of reference images for OS X and Linux (though I'm not sure `Linux` is fine grained enough).

These tests are working on CircleCI. The new tests follow a new conda environment pathway so that orca can be installed using conda. The tests are run with Python 2.7, 3.5, and 3.7.

## Performance
The whole reason for using this more complex client/server architecture is to improve image export performance. So how well does it do?

This is not an extensive performance comparison, but I did an initial comparison of matplotlib, this branch, and bokeh ([setup instructions](https://bokeh.pydata.org/en/latest/docs/user_guide/export.html)).  The test was to create a 1000 point scatter plot with varying point size and color and then save it to a png.

![screen shot 2018-08-20 at 7 46 33 pm](https://user-images.githubusercontent.com/15064365/44402968-32d31c00-a521-11e8-9045-14700ae40b66.png)

So after the orca server is running, the export time here is right on par with matplotlib (~215ms), and much faster than bokeh (~1.7s).

Being on par with matplotlib here is really exciting, and opens up a lot of new use cases for plotly.py. I'm thinking, in particular, of the possibility of a static image backend for interactive use outside of the notebook/browser context.

**Side note:** bokeh isn't doing any wrong here. This is just how expensive it is to launch a web browser from scratch. This is also about how long it takes the orca server to start up the first time. The advantage with this orca approach is that the server only needs to start up once per session, instead of once per image.

### Produced images
And here are the images produced by matplotlib, this branch, and bokeh
![screen shot 2018-08-20 at 7 47 04 pm](https://user-images.githubusercontent.com/15064365/44403200-d15f7d00-a521-11e8-969f-d328463c0a78.png)
![screen shot 2018-08-20 at 7 47 13 pm](https://user-images.githubusercontent.com/15064365/44403206-d45a6d80-a521-11e8-9776-9f6a9fecd172.png)
![screen shot 2018-08-20 at 7 47 21 pm](https://user-images.githubusercontent.com/15064365/44403211-d6bcc780-a521-11e8-916c-42cd77edcb15.png)

## TODO
Various things still to do/look into:
 - [x] Add `validate` option to `to_image` and `write_image`
 - [x] Look into validating poppler installation, or providing better error message on eps failure.

",3,82,[]
738,209125767,1117,14579099,2018-08-17 11:54:24,2018-08-17 23:57:12,closed,Support for embedding plotlywidget instances that use numpy arrays,"See https://github.com/plotly/plotly.py/issues/1116 for background.

With these updates it is now possible to embed `FigureWidget` instances containing numpy arrays in static contexts (e.g. nbviewer, and soon Plotly Cloud).

I also took to opportunity to update the auto-resizing logic to:
  - Support the classic notebook
  - Still resize width even if the height is set explicitly (See https://github.com/plotly/plotly.py/issues/1041#issuecomment-411297737)

This change involves no changes to the Python library, so we should be able to release this as `plotlywidget@0.2.2` without making a release of plotly.py yet.

Also, to help with embedding, this version emits an event named `'plotlywidget-after-render'` when the widget rendering process is complete.

cc @tarzzz ",4,10,[]
739,208204645,1110,14579099,2018-08-14 08:27:17,2018-08-24 10:18:53,closed,Show colors at the top of the gantt's colorbar,"When creating gantt with custom colors and there are a lot of tasks, the color legends are located at the bottom of the colorbar and not visible until the user scroll down.
This fix creates the dummy data with the colors before the data itself. This way, we still have a scroll on the colorbar, but the colors are located at the top and the user can see them immediately.",7,2,[]
740,208128756,1109,14579099,2018-08-13 23:11:28,2018-08-17 22:50:34,closed,CircleCI 2.0 migration,"Port of test suite to 2.0, with improvements. Thanks to @scjody for the reminders 🙂 

General approach: There is now a workflow for each Python version / test suite combination.  This way all of the jobs can run in parallel. I also refactored the `core` tests to pull out the tests that rely on `plot.ly` interaction. These are currently the slowest tests, and pulling them out means that the core tests run really fast. It also means that if there is an intermittent failure due to plot.ly communication, we can restart only the plot.ly tests for the particular version of Python that had the failure.

Updates:
 - [x] Split plot.ly tests into separate directory
 - [x] Add core and core+optional workflows for 2.7, 3.4, 3.5, 3.6, and 3.7 (These run pretty fast now without the plot.ly tests)
 - [x] plot.ly tests for 2.7, 3.4, and 3.7?
 - [x] Add pytest validator tests to optional (these tests need the extra dependencies)
 - ~Add useful caching~ Caching tox sped builds up by a minute at most and would add a lot of extra complexity to the build file. So holding off for now.

Future testing wishlist: https://github.com/plotly/plotly.py/issues/1113

cc @cldougl @chriddyp @Kully @scjody ",2,30,[]
741,206972494,1101,14579099,2018-08-08 11:12:28,2018-08-09 10:42:52,closed,"Ref #1100 , tickmode set to invalid value in mpltools","* basevalidator throws an error on the boolean

Associated Issue: #1100 ",1,1,[]
742,206480024,1096,14579099,2018-08-06 18:28:02,2018-08-10 15:06:11,closed,Release 3.1.1,"Release branch for version version 3.1.1

See CHANGELOG.md for changes in this version. 

We will publish release candidates to PyPI and NPM. When a release candidate is deemed worthy to be an official release, the release candidate version suffixes will be removed and this branch will be merged into master and tagged as the official release.",0,11,[]
743,206235037,1095,14579099,2018-08-05 11:53:05,2018-08-06 15:24:27,closed,Update Plotly.js to 1.39.4,"Update plotly.js to 1.39.4.

Code generation was executed but it did not produce any changes compared to 1.39.2.",0,1,[]
744,206233418,1094,14579099,2018-08-05 11:05:12,2018-08-06 15:22:31,closed,Don't apply relayout operations to the view that originated the event (GH1086),See associated discussion and technical notes in #1086 ,0,2,[]
745,206199392,1092,14579099,2018-08-04 16:27:32,2018-08-05 09:45:48,closed,Fix update method on empty and uninitialized array property,Fix for #1072 . See issue for discussion,0,4,[]
746,206195483,1091,14579099,2018-08-04 14:45:31,2018-08-05 09:40:10,closed,Handle large collections of subplots without validation error," - Fix for #1031
 - Removed usage of deprecated classes in `make_subplots` and elsewhere.",0,2,[]
747,205598342,1089,14579099,2018-08-02 01:55:21,2018-08-06 15:21:09,closed,Fix ColorScale presentation when specified as string,"Fixes #1087.

I kinda guessed with where I put the test, let me know if there's a better place for it.",1,3,[]
748,204454057,1075,14579099,2018-07-27 14:48:25,2018-10-15 09:53:41,closed,Added parameter to choose color_threshold,The threshold value was automatically computed from scipy's linkage function. Sometimes the automatic value is not the optimal value (too few clusters in my case),10,2,[]
749,202980301,1065,14579099,2018-07-21 00:08:02,2018-07-21 09:36:24,closed,fixed a missing comma in updated configkeys,,2,2,[]
750,202835244,1064,14579099,2018-07-20 12:29:39,2018-07-20 23:20:36,closed,Release 3.1.0,Release branch for version 3.1.0 (See CHANGELOG for more information),0,10,[]
751,202410870,1063,14579099,2018-07-18 23:56:15,2018-07-19 09:05:47,closed,Plotlyjs 1.39.2,Update Plotly.js to 1.39.2,0,2,[]
752,202047508,1062,14579099,2018-07-17 19:39:20,2018-07-17 21:54:38,closed,Release 3.0.2,Fixed bad merge for 3.0.1,0,4,[]
753,201997041,1061,14579099,2018-07-17 16:20:43,2018-07-17 18:44:46,closed,Assorted performance improvements,"Assorted performance improvements for constructing `Figure` objects and updating their properties

See #1052 ",0,7,[]
754,201941921,1060,14579099,2018-07-17 13:29:41,2018-07-17 15:32:45,closed,Fix error for graph object properties named v,"(like in the `cone` trace)
There was a variable name conflict in the code generated in the constructor of each trace.

See #1051 ",0,1,[]
755,201496104,1057,14579099,2018-07-15 12:37:59,2018-07-17 15:26:47,closed,Fixes for numbered subplot bugs in GH1050,"Fixes for numbered subplot bugs reported in #1050 

 1. Numbered subplots must be explicitly initialized in `Figure.update`.
 2. The special handling for numbered subplots didn't include the 'plolar' or 'mapbox' types.",0,4,[]
756,201417116,1056,14579099,2018-07-13 22:53:55,2018-07-19 09:42:40,closed,Add configkeys to offline matching plotly js 1.39.2,"Looking at plotly js, there are a number of configkeys that are valid that aren't in this offline whitelist. This adds [all configkeys from current plotly js](https://github.com/plotly/plotly.js/blob/master/src/plot_api/plot_config.js#L19).

Note, this PR encompasses: #1042
",5,2,[]
757,199639149,1048,14579099,2018-07-06 03:56:16,2018-07-06 15:50:56,closed,a few migration guide updates,please review @jonmmease @Kully ,0,1,[]
758,197888075,1042,14579099,2018-06-28 00:31:34,2018-07-19 09:47:37,closed,expose new plotly.js config option,Expose new JS config option https://github.com/plotly/plotly.js/pull/2607,1,1,[]
759,195205877,1035,14579099,2018-06-15 15:14:54,2018-10-17 17:57:18,closed,add issue template,"as in the [plotly.js repo](https://github.com/plotly/plotly.js/issues/new): https://github.com/plotly/plotly.js/blob/master/.github/ISSUE_TEMPLATE.md

cc @chriddyp @jmmease @Kully ",1,2,[]
760,192716035,1029,14579099,2018-06-05 13:55:44,2018-06-06 00:55:22,closed,importerror more clean for anaconda users in choropleth ff,"inspired by this post in the community forums: https://community.plot.ly/t/usa-county-choropleth-maps-in-python/8578/3

cc @cldougl ready for a review whenever you can 😃 ",2,1,[]
761,191810497,1023,14579099,2018-05-31 16:36:02,2018-07-19 09:50:10,closed,Fix typo in contributing.md,"**Old:** ""If you decided to follow the suggestion *about about* the Virtualenv *and* you've run `source bin/activate` ...""

**New:** ""If you decided to follow the suggestion *about* the Virtualenv *and* you've run `source bin/activate` within your new virtualenv directory to activate...""",1,1,[]
762,191542699,1021,14579099,2018-05-30 18:33:39,2018-05-30 21:26:04,closed,"Updated offline.py function iplot, takes height and width as argument",,2,1,[]
763,190021571,1014,14579099,2018-05-23 15:43:28,2018-05-23 17:38:47,closed,bump plotlyjs 1.38.0,"- [x] quick manual qa

cc @jackparmer 

please review @Kully 

",1,1,[]
764,186914683,1007,14579099,2018-05-09 13:01:40,2018-05-09 21:07:53,closed,update plotlyjs for offline for plotlyjs 1.37.1 bug fix,cc @Kully ,1,1,[]
765,186810865,1005,14579099,2018-05-09 03:49:13,2019-05-02 10:40:35,closed,Fix for issue#1002. ,"subplot_titles position issue when shared_yaxes and/or shared_xaxes is True and start_cell is bottom-left.

**Tested with this code.**
```
from plotly import tools
import plotly.offline as py
import plotly.graph_objs as go

trace1 = go.Scatter( x=[1, 2], y=[10,10,10])
trace2 = go.Scatter( x=[1, 2], y=[20,20,20])
trace3 = go.Scatter( x=[1, 2, 3], y=[30,30,30])
trace4 = go.Scatter( x=[1, 2, 3], y=[40,40,40])
trace5 = go.Scatter( x=[1, 2, 3], y=[50,50,50])
trace6 = go.Scatter( x=[1, 2, 3], y=[60,60,60])
trace7 = go.Scatter( x=[1, 2, 3], y=[70,70,70])

fig = tools.make_subplots(rows=7, cols=1, 
                          shared_xaxes=True,
                          start_cell='bottom-left',
                          vertical_spacing=0.03,
                          subplot_titles=('trace1','trace2','trace3','trace4','trace5','trace6','trace7'))

fig.append_trace(trace1, 1, 1)
fig.append_trace(trace2, 2, 1)
fig.append_trace(trace3, 3, 1)
fig.append_trace(trace4, 4, 1)
fig.append_trace(trace5, 5, 1)
fig.append_trace(trace6, 6, 1)
fig.append_trace(trace7, 7, 1)

fig['layout'].update(showlegend=False, title='Test for issue 1002')
py.plot(fig, filename='Test4Issue1002.html')
```
**Result with current code.**
![before](https://user-images.githubusercontent.com/39027949/39794672-6e964c68-5386-11e8-88c3-11588903bbc6.png)

**Result with the fix. subplot_titles are positioned and ordered correctly.**
![after](https://user-images.githubusercontent.com/39027949/39794675-76ab84a4-5386-11e8-9132-09d4f9375c01.png)



",2,2,['make_subplots']
766,184126038,997,14579099,2018-04-25 18:35:19,2018-05-04 19:33:40,closed,"validate plotly_(api)_domain - HTTPS, not HTTP","Addresses https://github.com/plotly/plotly.py/issues/996

Notes:
1. This error message does not get triggered if the original url in the request starts with `zhttp://...`. A separate error message is thrown for that.
2. The original url sent by a user is getting coerced into all lowercase, so a lowercase to lowercase comparison is not necessary.",15,11,[]
767,183526212,994,14579099,2018-04-23 18:56:56,2018-05-07 15:16:11,closed,Test fixes 2,"Continuation of https://github.com/plotly/plotly.py/pull/975#issuecomment-380900722

Fixing Minor Tests for [Ipyplotly Integration PR](https://github.com/plotly/plotly.py/pull/942/commits/054379335aa0010a5fc895466e1226dcda55dc1a)

cc. @jmmease @chriddyp ",4,28,[]
768,182545414,992,14579099,2018-04-18 17:10:06,2018-05-02 17:51:37,closed,update pjs to version 1.36.0,"- [x] test manually 

cc @Kully @chriddyp ",1,2,[]
769,182502966,991,14579099,2018-04-18 14:42:42,2018-07-19 09:53:52,closed,Update README.md,,1,1,[]
770,181468723,989,14579099,2018-04-13 12:06:44,2018-04-13 15:20:03,closed,Fix typo (agruments),,2,1,[]
771,178366661,984,14579099,2018-03-29 15:40:09,2018-04-05 20:39:31,closed,Better pip install error msg for county choropleth,@cldougl ,2,3,['enhancement']
772,178230953,983,14579099,2018-03-29 05:33:25,2018-04-24 07:14:05,closed,Added color_threshold to dendrogram,"Plotly figure_factory create_dendrogram() clustering threshold is default and no option seems available to change this. This function is commonly used and very helpful to view large dendrogram clusters based on distance. Updated plotly/figure_factory/_dendrogram.py with ""color_threshold"" option",0,1,[]
773,177544393,980,14579099,2018-03-26 19:29:42,2018-03-26 20:14:30,closed,USA Choropleths OSError fixed in Windows,"the issue: https://community.plot.ly/t/us-county-choropleth-map/8629
cc. @cldougl @chriddyp  ready for review

I've updated the CHANGELOG and bumped version number in this PR as I think it's best to push this to pip asap",1,4,[]
774,175761349,976,14579099,2018-03-18 16:57:57,2018-08-10 18:35:26,closed,Remove trailing whitespace,,2,1,[]
775,175342865,975,14579099,2018-03-15 18:35:53,2018-04-18 10:30:10,closed,minor test fixes for ipyplotly_integration,"- fixes minor test failures in https://github.com/plotly/plotly.py/pull/942
cc. @chriddyp @jmmease 

# Minor Test Fixes - Status
NB Tests that are _not_ minor and require changing something in a fundamental way are still checked if all other minor tests in the module _are_ fixed. A description/error message is provided just underneath the bullet point to specify the error message for the unsolved problem
### Core
- [x] test_tools
  - [x] test_make_subplots <br> `1 F w/ test_two_row_bottom_left`
  - [x] test_get_subplots <br> `same issue as test_make_subplots`
  - [X] test_configuration
- [x] test_plotly
  - [x] test_plot <br> `__init__() got an unexpected keyword argument '_raise'`
  - [x] test_credentials
- [x] test_stream
- [x] test_offline
- [x] test_graph_objs
  - [x] test_annotations <br> `'Annotations' object has no attribute 'validate'`
  - [x] test_append_trace <br> `same issue as 'test_make_subplots'`
  - [x] test_data <br> `'Data' object has no attribute 'validate'`
  - [X] test_error_bars
  - [x] test_figure <br> `__init__() missing 1 required positional argument: 'class_strs_map'`
  - [x] test_frames <br> `AttributeError: 'Frames' object has no attribute 'to_string'`
  - [x] test_get_figure <br> `AttributeError: 'Figure' object has no attribute 'get_data'`
  - [X] test_graph_objs
  - [X] test_graph_objs_tools <br> `ImportError: cannot import name 'graph_objs_tools'`
  - [X] test_plotly_base_classes <br> `from plotly.graph_objs.graph_objs import PlotlyDict, PlotlyList`
  - [X] test_strip_style <br> `AttributeError: 'Figure' object has no attribute 'strip_style'`
  - [x] test_to_string <br> `AttributeError: 'Figure' object has no attribute 'to_string'`
  - [x] test_update <br> `AttributeError: 'Data' object has no attribute 'update'`
- [x] test_grid <br> `The 'xsrc' property is a string and must be specified as: - A string`
- [X] test_get_figure <br> `TypeError: __init__() got an unexpected keyword argument '_raise'`
- [x] test_api

### Optional
- [x] test_tools
  - [X] TestQuiver
  - [x] TestFinanceCharts
  - [x] TestAnnotatedHeatmap
  - [x] TestTable
  - [x] TestGantt
  - [x] Test2D_Density <br> `('ncontours', 'colorscale', 'reversescale', 'showscale') not valid in Scatter`
- [X] test_matplotlylib
  - [x] test_annotations <br> `AssertionError: ['line']['width'] = 1.5 should be 1.0` (I think the issue is just locally due to matplotlib ver ==2.2.2; our tests use matplotlib1.3.1)
  - [x] test_axis_scales <br> `from plotly.tests.test_optional.test_matplotlylib.data.axis_scales import *` causes the error <br>
```
ValueError: 
    Invalid value of type 'builtins.bool' received for the 'tickmode' property of layout.xaxis
        Received value: False

    The 'tickmode' property is an enumeration that may be specified as:
      - One of the following enumeration values:
            ['auto', 'linear', 'array']
```

- [x] test_figure_factory
  - [x] TestDistplot
  - [X] TestStreamline
  - [x] TestDendrogram <br>`X = np.array([[1, 2, 3, 4], [1, 1, 3, 4], [1, 2, 1, 4], [1, 2, 3, 1]]) dendro = ff.create_dendrogram(X)` fails
  - [X] TestTrisurf
  - [X] TestScatterPlotMatrix
  - [X] TestGantt
  - [X] TestViolin (deprecated messages pop up)
  - [x] TestFacetGrid
  - [X] TestBullet
  - [x] TestChoropleth (not installing geopandas, pyshp and shapely)


- - -
# Current Issues/Test failures from April 12, 2018:

```
/Users/adamkulidjian/Desktop/Adam/Plotly/plotly.py/plotly/tests/test_optional/test_figure_factory/test_figure_factory.py
AttributeError: 'Scatter' object has no attribute 'pop'
```
- no `.to_dataframe` (test_optional/test_graph_objs)

```
(venv3.6) adamkulidjian@Adams-Air:~/desktop/adam/plotly/plotly.py/plotly/tests/test_core/test_to$ clenosetests test_make_subplots.py
.......................................................F.
======================================================================
FAIL: test_two_row_bottom_left (plotly.tests.test_core.test_tools.test_make_subplots.TestMakeSubplots)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/Users/adamkulidjian/Desktop/Adam/Plotly/plotly.py/plotly/tests/test_core/test_tools/test_make_subplots.py"", line 166, in test_two_row_bottom_left
    self.assertEqual(fig.to_plotly_json(), expected.to_plotly_json())
AssertionError: {'dat[156 chars][0.0, 1.0]}, 'yaxis': {'anchor': 'x', 'domain': [0.0, 0.425]}}} != {'dat[156 chars][0.0, 1.0]}, 'yaxis': {'anchor': 'x', 'domain': [0.575, 1.0]}}}
  {'data': [],
   'layout': {'xaxis': {'anchor': 'y', 'domain': [0.0, 1.0]},
              'xaxis2': {'anchor': 'y2', 'domain': [0.0, 1.0]},
-             'yaxis': {'anchor': 'x', 'domain': [0.0, 0.425]},
?                                                    -------

+             'yaxis': {'anchor': 'x', 'domain': [0.575, 1.0]},
?                                                   +++++++

              'yaxis2': {'anchor': 'x2', 'domain': [0.575, 1.0]}}}
-------------------- >> begin captured stdout << ---------------------
This is the format of your plot grid:
[ (2,1) x2,y2 ]
[ (1,1) x1,y1 ]
```
-removing the to_dataframe to_string, strip_styles, get_data, and validate methods?",29,145,[]
776,175333989,974,14579099,2018-03-15 18:02:47,2018-03-15 18:36:06,closed,Ipyplotly test fixes,Attempting to fix minor test failures in  https://github.com/plotly/plotly.py/pull/942,3,7,[]
777,174435703,971,14579099,2018-03-12 17:10:49,2018-03-12 22:44:26,closed,update plotlyjs for offline,cc @Kully @chriddyp ,2,1,[]
778,174229174,970,14579099,2018-03-11 16:28:09,2018-10-22 17:53:37,closed,make iplot include resize listener,"'offline.plot' makes plotly resize a plot when the corresponding div is resized. 'offline.iplot' doesn't.
The script is not included if both width and height properties in the layout are set to anything other than ""100%""
This pull request makes 'offline.iplot' include the same resizing script under the same conditions that 'offline.plot' does.",1,1,[]
779,174097533,967,14579099,2018-03-09 20:11:10,2018-03-13 19:09:18,closed,deactivating all streaming tests,"@bpostlethwaite @cldougl 
I'm vote to deactivate stream testing because of intermittent test failures on circle that are preventing otherwise merge-able PRs (current example for me is https://github.com/plotly/plotly.py/pull/964).

WDYT?

I think there are some plans to remove streaming anyways, so I don't see this as a big loss or move away from proper code testing practice.",6,2,[]
780,173808191,964,14579099,2018-03-08 18:03:34,2018-07-05 14:44:08,closed,Retry requests for Python API,Addresses https://github.com/plotly/plotly.py/issues/949,7,10,[]
781,173228288,959,14579099,2018-03-06 17:29:02,2018-03-08 17:16:35,closed,Changelog/version bump for PR #958,"@cldougl 

NB. version is set to `2.5.0` because the dashboard PR https://github.com/plotly/plotly.py/pull/946 has the same version number",2,3,[]
782,173175557,958,14579099,2018-03-06 14:35:27,2018-03-06 17:18:52,closed,Don't crash if figure_factory is imported but pandas isn't installed,"This fixed #941 and makes it possible to `import plotly.figure_factory` without having `pandas` installed. The general framework for this seems to be used throughout the figure factory code, so presumably the lack of it in this case was a simple oversight.",3,1,[]
783,173026629,957,14579099,2018-03-06 00:31:55,2018-03-07 20:16:01,closed,Bump npm to 6.0.0 for circle.ci,"Lots of intermittent npm related failures I have noticed.

The Issue Message: https://discuss.circleci.com/t/econnreset-on-npm-install/4793/3",2,1,[]
784,173011957,956,14579099,2018-03-05 23:00:15,2018-06-28 03:30:02,closed,[wip] - ipyplotly fixes,working off of https://github.com/plotly/plotly.py/pull/942,5,15,[]
785,172641119,954,14579099,2018-03-03 01:20:24,2019-09-11 16:19:04,closed,Basic stream functionality,"Working towards basic functionality for offline streams. I tried to base the functionality off of the existing streams, so the API's are similar in Python.

```python
import numpy as np
import plotly.offline as py
from IPython.display import display, HTML, Javascript, display_javascript

py.init_notebook_mode(connected=True)

stream_token = 's0'
py.iplot(
    [
        {
            'x': [0, 1],
            'y': [1, 0],
            'type': 'scatter', 
            'mode': 'lines+markers',
            'marker': {
                'size': 12
            },
            'stream': {
                'token': stream_token, 
            }
        }
    ],
    filename='basic-stream'
)

s = py.Stream(stream_token)
s.open()
s.write({'x': [5.0, 9.0], 'y': [6.0, 7.0]})
s.write({'x': list(np.arange(10, 15)), 'y': list(np.random.randn(5))})
```

This code works as expected, but I was hoping for guidance on what one might like to see coming from an offline stream API. Like a set of unit test, or design guidance.

Are there a set of unit tests or something I should try to get the offline streams to pass?",3,2,[]
786,172587514,953,14579099,2018-03-02 19:42:03,2018-03-05 15:46:51,closed,update dash workshop announcement,cc @chriddyp,1,1,[]
787,171827196,947,14579099,2018-02-28 00:48:19,2018-03-07 21:11:27,closed,choropleth improvements,"addresses: https://github.com/plotly/plotly.py/issues/944

Also does:
- [x] enhancement from  https://github.com/plotly/plotly.py/issues/944
- [x] Turns off hover for the lines. It fights with hover for the centroids.
- [x] Turns on persistent selection api for the centroid points, so that the centroids are invisible until you select, then they show up in white with a thin border.
- [x] 0-pad the 4 digit FIPS numbers of the legend",6,7,[]
788,171119443,946,14579099,2018-02-23 21:22:48,2018-03-07 22:27:40,closed,"added fill_percent to params for insert, swap and remove","This PR accomplishes:
- [X] added fill_percent to params for insert, swap and remove
- [x] fix HTML preview to reflect `fill_percent`
- [x] update changelog
- [x] remove `#TODO`s from `dashboard_objs.py`  

re: https://github.com/plotly/plotly.py/issues/711",10,17,[]
789,170539360,943,14579099,2018-02-21 17:36:23,2018-02-21 18:48:49,closed,changelog for fixed 2.4.1,"to be merged after pip-package is updated to 2.4.1
ready for review
cc @cldougl ",1,2,[]
790,170074665,942,14579099,2018-02-19 23:58:30,2018-07-05 17:46:08,closed,"[WIP] Plotly 3.0.0 - Deep Jupyter Integration, Validation, Performance, and More","## Update: June 27, 2018
This branch will mark a *major* release of the plotly.py branch, Version 3.0.0
There are many new and great features in this branch including deeper Jupyter integration, deeper figure validation, improved performance, and more.
You can try this out with a prerelease version, see https://pypi.org/project/plotly/#history for the latest.
To install and enable with Jupyter, run: 

```
pip install plotly==3.0.0rc11
pip install ""notebook>=5.3"" ""ipywidgets>=7.2""  # only necessary for Jupyter Notebook environments
```
If you're using older versions of `notebook` or `ipywidgets` you may need to manually activate the widget extensions (this should not be needed for `notebook>=5.3` and `ipywidgets>=7.2`)
```
jupyter nbextension enable --py widgetsnbextension --sys-prefix
jupyter nbextension enable --py plotlywidget --sys-prefix
```

In addition, to add JupyterLab support run the following commands:
```
pip install jupyterlab
jupyter labextension install @jupyter-widgets/jupyterlab-manager # install the Jupyter widgets extension
jupyter labextension install plotlywidget@0.1.1
```

***

**_The original message from February 19, 2018 is below:_**

Alright, here we go! @chriddyp @jackparmer 

Overview
This is a first cut at integrating the work I started in the [ipyplotly](https://github.com/jmmease/ipyplotly) project into plotly.py.

Integration Approach
I moved the new object hierarchy to plotly/datatypes.  I modified the `graph_objs.py` code generation logic to remap `Figure`, `Layout`, and all of the trace objects (`Bar`, `Scatter`, etc.) to the corresponding objects in the new `datatypes` hierarchy.  All of the other classes in `graph_objs` were converted into `list` or `dict` subclasses. This is simply for backwards compatibility for the time being, I'm not sure what we want to do with these in the long run.

Widget notes
The backend ipywidget logic is implemented in the new `datatypes.Figure` and `datatypes.FigureWidget` classes. The front-end logic is implemented in the `js/` directory.


Examples
See the notebooks in `specs/ipyplotly_integration` for an overview of the new functionality.

TODO
- [x] Support `dict`-style `.update` method on all datatypes
- [x] Assess existing tests and catalog breakage
- [x] Python 2.7 support
- [x] JupyterLab support
- [x] Update README with some examples from Overview.ipynb
- [x] Reformat for 79 character width (plus PEP8 in general)

Failing test modes
Summary of reasons for current test failures
 - `unexpected keyword argument '_raise'` (`test_get_figure`). Looks like old graph objects had a `_raise` constructor parameter to control whether validation was performed. I'm not sure why this was needed, but validation isn't optional for the new objects.
 - Validation exceptions not raised on compatibility classes.  Some of the current `graph_objs.py` classes don't directly map to objects in the new hierarchy, and they are currently included as dict/list subclasses for source compatibility. e.g.
    - Sequence types like `Annotations` don't have an equivalent because sequences are now represented as tuples of compound types. For instance, the `annotations` property of `Layout` accepts tuples of `datatypes.layout.Annotation` objects and there is no `Annotations` type.
    - Types like `Marker`, `ColorBar`, `ErrorX`, `Font`, `Line`, `Frames`, etc. are replaced by more precise types. For example, there is now a `trace.scatter.Marker` class and a `trace.bar.Marker` class and they each contain only the properties that are valid for their trace type.
 - New datatype objects don't have a `validate()` method
 - `Subplot properties may only be suffixed by an integer > 1`.  See https://github.com/plotly/plotly.py/pull/956#issuecomment-371340640 for some comments. The documentation and schema of Plotly.js seem to disallow `subplotid` properties ending in 1. (`x`, `x2`, `x3`, but not `x1`).
 - There is no `get_data` method on datatype objects. This had a `flatten` option to return a dict with keys like `foo.bar.baz`. I think this could be implemented on the new objects if there's a need for.
 - Errors in `test_graph_objs.py` because the collection of classes in graph_objs.py has changed.
 - Datatypes are no longer `dict` subclasses so tests like `assert Scatter() == dict(type='scatter')` fail.
 - Exception types don't always match: The current datatype/validator logic mostly raises `ValueError` and `KeyError` exceptions. Many of the tests expect a `PlotlyError`.
 - There is no `strip_style` method on datatypes. The new logic doesn't maintain the `style` meta-data after code generation, but it would be possible to add this if this method needs to be preserved.
 - Datatypes have no `to_string` method, but again this could be added.
 - `Invalid value of type 'plotly.grid_objs.grid_objs.Column' received for the 'xsrc' property of trace.scatter`: grid_objs aren't accepted as `*src` properties
 - Scalar values aren't currently accepted as `data_array` types (e.g. `scatter.x`). This breaks some of the streaming tests which have things like `my_stream.write(Scatter(x=1, y=10), ...)`
 - It's not valid to pass a dictionary of object properties to the constructor of a data type without kwarg expansion. Scatter({'x': ..., 'y': ...}) is invalid, need to do Scatter(**{'x': ..., 'y': ...}). This breaks the tools.py/validate function.
 - The `layout.width/height` properties are numbers (according to the schema), but the dendrogram figure_factory sets height to the string `'100%'`.
 - All `data_array` typed properties are converted to read-only numpy arrays internally. So comparisons that expect lists fail (see `TestStreamline/test_simple_streamline`)
 - flaglist/enumeration types are case sensitive. Causes failure in `TestTrisurf/test_trisurf_all_args` because `hoverinfo` is set to `'None'` rather than `'none'`
 - `'Figure' object has no attribute 'to_dataframe'`: I'm not really clear on what this method is supposed to do in general.
 - `'dot'` is in invalid marker type (according to the schema). Used in `test_optional/test_matplotlylib/data/scatter.py/SIMPLE_SCATTER`
 - `AttributeError: module 'plotly.graph_objs.graph_objs' has no attribute 'Histogram2dcontour'`: It's Histogram2dContour. We could support both versions if we need to.
 - There are a buch of JSON encoding failure that seem to relate to date encoding.

Summary
Missing methods on datatypes
 - to_string [removing]
 - strip_style [removing]
 - get_data [removing]
 - validate [removing]
 - to_dataframe [removing]

Next steps
- [x] Support `strict` flag in string validator (see plotly/plotly.js#2523).
- [x] Remove hard numpy dependency. Support storing `data_array`s as lists internally, but convert to tuples on property access.
- [x] Investigate improving import performance and reenabling recursive submodule imports.
- [x] add optional row/col support to `add_traces`. Deprecate `append_traces` and remap to `add_traces` with row/col args.
- [x] Make ipywidgets an optional dependency, only loaded when `FigureWidget` constructor is called.
- [x] Remove all use of deprecated classes in `figure_factory`, `matplotlylib`, etc.
  - [x] tests
  - [x] the actual modules users call",153,279,"['enhancement', 'breaking change', 'jupyter']"
791,170021713,940,14579099,2018-02-19 17:48:36,2018-02-20 22:13:48,closed,Fixing choropleth,"Issues Remaining:
- [X] make path handling for data files robust and work for `site-packages/plotly`  
- [x] `packages/data dir` not showing up on local machine after plotly upgrade",3,5,[]
792,169988628,939,14579099,2018-02-19 15:23:01,2018-02-19 17:52:13,closed,rewrite changelog for broken choropleth,"ready for review when tests pass
@cldougl @chriddyp ",1,1,[]
793,169853719,938,14579099,2018-02-18 22:22:59,2018-03-01 23:28:03,closed,(matplotlylib) Make convert_dash more robust to changes in matplotlib.,"Now handles the case where the dashes are scaled, have floating-point values, or were customized with `dashes=(N,M)`.

Additional context: I was trying to use `mpl_to_plotly` in a jupyter notebook (python 3.6.3, matplotlib 2.1.2), and converting a plot with a non-solid line style (e.g linestyle='--') would still return a solid plot. It turns out that the `DASH_MAP` in `mpl_tools.py` has a set of hardcoded values, which I imagine changed with recent versions of `matplotlib`.

With linestyle='--', I was getting values like '7.4,3.2' which would not match the `6,6` of the match. Forcing `dash=(6,6)` would still not work because the `mpl_dash` string would become '6.0,6.0`, and still not match '6,6'.

I am new to plotly and matplotlib, so maybe I missed something, but this PR solves the issue for me, and all the line styles are now kept during the conversion, including custom `dashes`. It should also be somewhat robust to future changes.",1,1,[]
794,165798848,929,14579099,2018-01-29 19:43:11,2018-02-16 18:57:04,closed,Choropleth Counties,Re: https://github.com/plotly/plotly.py/issues/897,5,39,[]
795,165395944,928,14579099,2018-01-26 15:52:45,2018-01-26 16:31:15,closed,upgrade plotlyjs for python offline,,0,1,[]
796,165248929,926,14579099,2018-01-25 22:46:31,2018-01-25 23:37:54,closed,"Revert ""Remove whitespace. Remove unused variable j.""","Reverts plotly/plotly.py#909

some of these changes broke a few of the `figure_factory` functions and tests
for example: https://github.com/plotly/plotly.py/compare/master...revert-909-pylint-pep8-fixes?expand=1#diff-15c41c129536c7a3b0fd161641855ff3R206 and https://github.com/plotly/plotly.py/compare/master...revert-909-pylint-pep8-fixes?expand=1#diff-83b399f13d8b361d38016264ed1ce589R1055

it might be easier to revert this and reopen the pr running through our tests cc @chriddyp ",1,2,[]
797,164465501,924,14579099,2018-01-23 02:06:43,2018-09-06 16:54:36,closed,WIP: adding themes,"This is request for comments regarding adding styles to plotly.py (another feature from the [PlotlyJS.jl library](http://spencerlyon.com/PlotlyJS.jl/styles/) I'm missing on the python side).

The docstrings In this PR have more details (as does the doc section linked to above), but the main idea is that a style defines default arguments for figure attributes. This can happen either for layout attributes, attributes for traces of a specific type, and attributes for traces of any type.

For example, suppose we have this plot:

```python
import plotly.plotly as py
import plotly.graph_objs as go

def make_fig():
    # Create random data with numpy
    import numpy as np

    N = 100
    random_x = np.linspace(0, 1, N)
    random_y0 = np.random.randn(N)+5
    random_y1 = np.random.randn(N)
    random_y2 = np.random.randn(N)-5

    # Create traces
    trace0 = go.Scatter(x = random_x, y = random_y0,
        mode = 'markers', name = 'markers'
    )
    trace1 = go.Scatter(x = random_x, y = random_y1,
        mode = 'lines+markers', name = 'lines+markers'
    )
    trace2 = go.Scatter( x = random_x, y = random_y2,
        mode = 'lines', name = 'lines'
    )

    data = [trace0, trace1, trace2]
    layout = go.Layout(xaxis={""title"": ""My xs""}, yaxis={""title"": ""this is y""})
    return go.Figure(data=data, layout=layout)
```

The plot would look like this with no style applied:

![unknown-4](https://user-images.githubusercontent.com/1001948/35254177-2adf22ce-ffb7-11e7-8e20-605a129d625b.png)

If we do `make_fig().apply_style(go.STYLES[""ggplot""])` we get:

![unknown-5](https://user-images.githubusercontent.com/1001948/35254196-38b2ee9e-ffb7-11e7-8a36-9bc5edb69093.png)

Or `make_fig().apply_style(go.STYLES[""seaborn""])` gives:

![unknown-6](https://user-images.githubusercontent.com/1001948/35254207-430348d0-ffb7-11e7-8cf5-76232e2fb19b.png)

Or `make_fig().apply_style(go.STYLES[""fivethirtyeight""])`:

![unknown-7](https://user-images.githubusercontent.com/1001948/35254215-514184a2-ffb7-11e7-9728-8ebd73576e59.png)


## Before merging

I haven't totally finished this code as I wanted to present the concept and get some feedback (even an 👍  or 👎  would be great).

I think I will need some guidance from the team on the best way to incorporate this feature. Here are some questions for you:

- Does this make sense to be a method on `go.Figure`?
- Should we allow users to set a default style for a python session. Something like matplotlib does with their `plt.style.use` command? The default for this setting would, of course, be an empty style.
- If the answer to the above is yes, then I think it makes sense to allow styles to be context managers that apply to all figures created in within the context
- If there is a notion of default style, when should it be applied? On the Julia side I chose to apply the style when the figure is encoded as JSON. That was the ""last possible moment"" to apply the style (before viewing or sending to plot.ly cloud), giving users the longest time possible to tweak their plots before the style is applied.

Things I need to do before finishing this PR:

- [ ] Tests
- [ ] Examples to plotly docs? Not sure if that needs to happen before a merge. It would be awesome if some of the plot.ly team could pitch in with that
- [ ] Resolve any issues/suggestions that come up in response to the above questions.

--- 

# EDIT 2-6-18

I've changed the name `style` to `theme` in the code, so you would need to make the same change in order to run the examples above",12,3,[]
798,164102668,921,14579099,2018-01-20 01:24:15,2018-01-26 15:21:56,closed,bump plotly js version for python offline,cc @chriddyp @jackparmer ,2,7,[]
799,163893483,919,14579099,2018-01-19 06:15:27,2019-04-23 23:31:30,closed,"RFC: implement attr function and ""magic"" underscore behavior for PlotlyDict.update","This is a request for comments for brining some features of the [plotly Julia library](https://github.com/sglyon/PlotlyJS.jl) over to the python side.

The two main features are:

1. The ability to use ""magic underscore""  notation to set nested properties. For example, if I wanted to set `marker.line.color` to red I could do `marker_line_color=""red""` instead of `""marker"": {""line"": {""color"": ""red""}}`. This is enabled for keyword arguments to the `update` method of all subclasses of `PlotlyDict`
2. A new function `attr` that allows you to apply the magic underscore notation to groups of nested arguments. For example, if I wanted to set  ""marker.symbol"" to ""star"" and ""marker.line.width"" to 3 I could to `marker=attr(symbol=""star"", line_width=3)`. When I originally wrote this for Julia, the goal was to make it easier to create nested sets of attributes because doing so with Julia's dict notation is cumbersome. Because my goal was convenience in setting `attr`ibutes, I chose the name `attr`, but I am 100% open to alternative suggestions for that name.

The semantics of the magic underscore notation are such that if a parent property already exists, its children are not lost when adding another child. (meaning if ""marker.symbol"" already exists on the trace, then trying to set ""marker_line_color"" would just add ""line.color"" within the existing ""marker"" tree). 

Also the code is ""smart"" about dealing with attributes that have underscores in their name. If you tried to do `error_x_color` it would create a node `error_x` with a child node `color`.

The tests are fairly comprehensive and show how this works.

I'd love to hear what people think and if this is something you want in plotly.py.

If this is something that can be accepted here, I will take the time to update docstrings for `PlotlyDict.update` to make it clear what the magic underscore notation is as well as document the `attr` function.",22,4,[]
800,163837466,918,14579099,2018-01-18 22:20:16,2018-10-31 22:11:10,closed,Fix valiate_index and validate_dataframe for indices that don't start with `0`,"For the development of this FF: https://github.com/plotly/plotly.py/issues/897
ready for a review
(changelog updated)
cc @cldougl @chriddyp ",10,16,[]
801,161489683,909,14579099,2018-01-06 18:10:35,2018-01-22 18:27:32,closed,Remove whitespace. Remove unused variable j.,"https://docs.pylint.org/en/latest/technical_reference/features.html#id14  

https://www.python.org/dev/peps/pep-0008/#other-recommendations

https://www.python.org/dev/peps/pep-0008/#blank-lines

https://www.python.org/dev/peps/pep-0008/#imports
  
  
  ",2,14,[]
802,160166670,905,14579099,2017-12-26 20:52:12,2018-01-22 18:28:39,closed,minor fixes to contributing instructions,"Super minor changes from reading your `contributing.md` instructions as a new, would-be-contributor.

The instructed url to clone, `https://github.com/plotly/python-api` redirects here, so it seemed like one less thing to be confused about, especially since the instructions seemed geared toward being noob friendly.

Also, since you're instructing to fork, I changed your clone url: 
```
git clone https://github.com/your_github_username/plotly.py.git
```

I've done a reasonable amount of PRs and *still* get burned more than I'd like by cloning the upstream and then realizing I can't push my changes like I thought because I'm not in my fork!

---

Aside: maybe you meant for users to simply clone *this* repo, but then I'd suggest some different changes to clarify that since it's right after telling them to learn how to fork.",1,1,[]
803,157845191,900,14579099,2017-12-12 14:39:26,2018-09-28 14:16:53,closed,Clearing data list,"Hi all,

I was playing around with gantt charts and experience that the legend (colorbar) needs to be scrolled to see my defined 'Tasks' at the very bottom (which is actually visible at the examples as well, above the 'Tasks' are hidden traces, which are even clickable). After checking through _gantt.py I identified the following rows, where the variable 'data' has many entries. 

new lines @ 277 
new lines @ 359
new lines @ 517

Can someone please verify and if agreeing, pushing the change to the repo?

Many thanks
Cheers
J

---edit---
found some issue and had to fix this
",3,2,[]
804,157488516,894,14579099,2017-12-11 06:48:51,2018-09-28 14:15:20,closed,Update _dendrogram.py,"![demo](https://user-images.githubusercontent.com/16633223/33818708-64e39362-de81-11e7-8c73-24167786c56f.png)

At previous version of dendrogram script, it use easy way to detect a node whether a leaves. But in our daily work, we will meet situation like this graph show. It will make the branch become all 0. Including the parent branches. So it can't use this easy way.

Need to be cautious: It is not the leaves 'U-shape' is all zeros. It also have some parent branches 'U- shape' is all zeros. (zeros I mean is there yvalus)

But I don't have much time to fix it. So I just add a wrapper to fix this. I have checked scipy doc. It is a safe way to build a new tickvals. So I build it in this way.",1,1,[]
805,156256340,890,14579099,2017-12-04 17:19:17,2017-12-05 20:34:15,closed,update plotly.js for offline,"cc @chriddyp @jackparmer 
fixes https://github.com/plotly/plotly.py/issues/887",1,3,[]
806,155444579,888,14579099,2017-11-29 20:30:27,2019-09-11 13:55:27,closed,Sparklines Figure Factory,"@jackparmer progress so far

![screen shot 2017-11-29 at 3 28 32 pm](https://user-images.githubusercontent.com/10369095/33397573-fff80b2e-d519-11e7-9308-bec596294e02.png)

you can set column_widths (like in go.Table) with a list [1, 4, 2, ...]
you set the chart types with a list: i.e. the one above is produced with `chart_types=['name', 'bullet', 'line', 'avg', 'bar']`

```
# TODO:
# add  more color variety
# add tests
```
any suggestions?",42,23,[]
807,154610569,885,14579099,2017-11-24 21:50:30,2017-11-28 16:40:31,closed,Subplot proportions,"Want to add way to specify column proportions and row proportions in the domains of subplots, like `go.Table`.

(Note that this in service of a [Sparkline](https://plotly.slack.com/files/U07MQ8SJV/F7Z4B2M16/image.png) FigureFactory I'm working on)

So far I've added `column_width` as another accepted kwargs for `plotly.tools.make_subplots()`. The idea is that you specify a ratio of the columns (eg. [4, 7, 7, 2]) and the domains are changed proportionally.

cc @etpinard since you originally wrote most of this code
@chriddyp any comments would be helpful

note: I changed a couple of the tests as some of the domain values were off by the last floating point due to changing the number of +'s and x's in computing the main grid. Personally I don't think it's much to worry about.",2,6,[]
808,153757573,883,14579099,2017-11-20 23:07:24,2018-08-24 10:27:15,closed,"Added cividis, a new colormap mathematically optimized while consider…","…ing those with a color vision deficiency. Paper going through the review process: Nuñez J, Anderton C, and Renslow R. Optimizing colormaps with consideration for color vision deficiency to enable accurate interpretation of scientific data. 2018.",0,1,[]
809,152294149,878,14579099,2017-11-13 17:05:45,2018-11-20 21:52:15,closed,manage plotly/colors.py and plotly/figure_factory/utils.py,"Currently a couple figure factories are using incorrect plotly colorscales.

A PR to ensure that:
- the correct plotly colorscales are being used by all figure factories
- functions for color manipulating/handling are _only_ in the `colors.py` module
- rewritting some figure_factory code to comply with correct colorscales",3,2,[]
810,151999456,875,14579099,2017-11-10 20:49:27,2018-09-28 14:13:10,closed,Add dependency versions,,1,1,[]
811,151205030,872,14579099,2017-11-07 19:27:50,2017-11-23 23:25:14,closed,Bullet Chart FF,"NEEDED: Tests

update: tests added",9,22,[]
812,149058090,867,14579099,2017-10-26 22:10:39,2018-10-30 23:49:15,closed,Fix reversed color scale in annotated heatmap,"Currently, `reversescale` does not get included into the `trace` dictionary. Therefore, color scale doesn't change when setting `reversescale=True` (although the color of annotations gets inverted).

Here is how to reproduce the error:
```python
iplot(ff.create_annotated_heatmap(z=[[1, 30], [20, 60]], reversescale=False))
```
![plot1](https://user-images.githubusercontent.com/7109913/32079449-451654dc-ba70-11e7-849d-749b105bbccf.png)

```python
iplot(ff.create_annotated_heatmap(z=[[1, 30], [20, 60]], reversescale=True))
```
![plot2](https://user-images.githubusercontent.com/7109913/32079456-49bbf1fe-ba70-11e7-99b1-28fca4902bba.png)

This pull request fixes the problem.",1,1,['bug']
813,149036080,866,14579099,2017-10-26 20:22:40,2017-10-26 23:34:45,closed,Presentation setup.py fix,"is adding `presentation_objs` file to setup.

Do I need to update version number to 2.2.1?

cc @cldougl @chriddyp ",4,3,[]
814,148704909,864,14579099,2017-10-25 15:39:49,2018-09-28 14:11:36,closed,Fix issue with concurrent import of plotly module and checking permissions,"Issue raises when _permissions() is called concurrently (Ex.: in case of concurrent import plotly from two different processes or scripts):
- open TEST_FILE on a second call would raise an exception and _files_permissions would potentially wrongfully set to False.",1,1,[]
815,148522529,863,14579099,2017-10-24 21:52:26,2018-10-01 13:58:47,closed,adding names for categorical gantt charts,@cldougl Just a minor change keeping category names in the data object.,3,2,['question']
816,147722384,862,14579099,2017-10-20 05:37:32,2017-10-23 16:23:40,closed,Corrects typo in docstring in graph_objs.py,Corrects a typo in docstring in graph_objs.py.,1,1,[]
817,146085864,854,14579099,2017-10-11 23:30:37,2017-12-12 03:40:04,closed,Update graphwidget to be compatible with new versions of iPython,Current version of graphwidget is not compatible with iPython 6.1. Updated function calls and module names to be compatible with current version of iPython.,0,2,[]
818,145449908,852,14579099,2017-10-09 13:13:50,2017-10-11 12:10:03,closed,update graph_objs.py,"update for https://github.com/plotly/streambed/pull/10150
cc @jackparmer @chriddyp @Kully ",3,3,[]
819,145027743,850,14579099,2017-10-05 21:39:30,2017-10-06 18:49:57,closed,v1.31 plotly.js for offline,"- [x] test manually

cc @chriddyp @Kully ",1,2,[]
820,144736363,848,14579099,2017-10-04 18:01:35,2017-10-04 18:57:13,closed,update ff doc to include table of current ffs,"@cldougl @jackparmer look okay?
",1,3,[]
821,144505184,847,14579099,2017-10-03 19:17:29,2017-10-03 21:54:55,closed,add figure factory link in contribute markdown,@cldougl ,1,1,[]
822,144472810,846,14579099,2017-10-03 16:46:53,2017-10-03 17:33:19,closed,move ff readme,cc @Kully ,1,1,[]
823,144316629,844,14579099,2017-10-03 00:55:13,2017-10-03 15:40:13,closed,new ff README,,3,2,[]
824,142350710,837,14579099,2017-09-21 13:55:39,2017-09-26 21:12:35,closed,Remove offline tests,@cldougl attempting to resolve the intermittent fails on circle due to tests signing into stage,3,5,[]
825,141398768,833,14579099,2017-09-15 20:48:40,2017-10-03 15:40:48,closed,Readme for Figure Factory Creation,@chriddyp @cldougl Can one of you proof read my README? Shall I change the name of the file to README? Leave in the same directory?,7,6,[]
826,141335444,832,14579099,2017-09-15 15:14:04,2017-09-15 15:40:53,closed,Adds a 'lmargin' param to allow users to adjust left margin,addresses this issue: https://github.com/plotly/plotly.py/issues/820#issuecomment-329724739 i.e. job titles getting cut off,2,2,[]
827,137313975,824,14579099,2017-08-23 20:45:22,2017-08-23 21:26:45,closed,update default schema,,0,1,[]
828,136885529,822,14579099,2017-08-22 03:40:02,2017-08-23 20:28:31,closed,update plotlyjs,"update plotly.js to v1.30.0
cc @chriddyp @jackparmer @bcd 

- [x] test manually",1,1,[]
829,134760301,814,14579099,2017-08-08 21:14:07,2017-08-09 18:09:53,closed,temporary share key fix,"@chriddyp adding a sleep to temporarily resolve the sharekey issue. Fixes https://github.com/plotly/plotly.py/issues/719

",1,2,[]
830,134242586,811,14579099,2017-08-04 20:12:17,2017-08-04 23:48:31,closed,return gantt and dendrogram figure,"cc @chriddyp 
return plotly figure for gantt and dendrograms so they are consistent with other figure factories

fixes https://github.com/plotly/plotly.py/issues/805",1,3,[]
831,134046873,810,14579099,2017-08-03 21:34:55,2017-08-03 23:07:41,closed,edit stage test account and update plot schema,,2,2,[]
832,133682650,807,14579099,2017-08-02 11:16:45,2017-08-31 15:43:42,closed,Add annotation parameter for dendrogram,"Hi,

I've added an additional parameter which could enable users to define text annotations for complete hierarchy (on hover). See the example usage in this [notebook](http://nbviewer.jupyter.org/github/parulsethi/gensim/blob/c1e2b9be39cb242a190a1357e7a566bb198f98a3/docs/notebooks/Topic_dendrogram.ipynb).
`annotation` would be a list containing the list of text strings for every single trace which makes up the dendrogram.

Let me know if there should be any modifications to make it adaptable for more general use for plotly users.",2,2,[]
833,133625127,806,14579099,2017-08-02 05:22:08,2017-08-07 12:21:22,closed,Add missing rugplot property passing inside violin_no_colorscale,"When trying to plot my violin, I noticed rugplot=False was not being respected. This is a proposed fix.
As a point of discussion, should the rugplot=True|False property name be normalized between the figure factories? For example, in _distplot.py the corresponding property name is ""show_rug"" instead of ""rugplot"".",3,1,[]
834,131893683,798,14579099,2017-07-22 09:37:51,2017-08-01 15:40:15,closed,Python 2/3 compat,print as a function,5,1,[]
835,131550422,796,14579099,2017-07-20 13:12:57,2017-08-04 02:17:57,closed,update plotlyjs,"update plotly offline to include https://github.com/plotly/plotly.js/releases/tag/v1.29.0

- [x] test manually",2,4,[]
836,129541377,793,14579099,2017-07-08 20:35:39,2017-07-08 20:45:58,closed,Make using offline.init_notebook_mode() optional,"Running `init_notebook_mode()` isn't required in frontends with support for the `application/vnd.plotly.v1+json` mime type (like [nteract](https://github.com/nteract/nteract) and [Hydrogen](https://github.com/nteract/hydrogen)):
![plotly](https://user-images.githubusercontent.com/13285808/27988881-727f418e-642d-11e7-900e-0c328a72255d.png)

This PR makes `offline.init_notebook_mode()` optional when using `offline.iplot()`

/cc @rgbkrk ",7,1,[]
837,129053149,791,14579099,2017-07-05 20:55:48,2017-07-05 22:34:01,closed,Clarify support vs issues,,0,1,[]
838,128489482,788,14579099,2017-07-01 14:02:21,2017-07-01 16:32:16,closed,update default schema,cc @Kully @chriddyp ,1,1,[]
839,128208042,787,14579099,2017-06-29 17:40:14,2017-06-30 19:41:29,closed,update plotlyjs to 1.28.3,"cc @Kully @chriddyp 

- [x] test manually
- [x] update changelog ",1,2,[]
840,127996247,785,14579099,2017-06-28 19:03:00,2017-10-23 16:38:06,closed,fixed append_rows with string information,"Re: https://github.com/plotly/plotly.py/issues/774
",8,5,[]
841,127993453,784,14579099,2017-06-28 18:49:26,2017-06-28 20:44:06,closed,Changed [0] to .iloc[0] and **kwargs to **kwargs_trace,,0,1,[]
842,127792380,783,14579099,2017-06-27 21:05:56,2017-06-28 20:43:50,closed,Index based -> location based indexing,,0,7,[]
843,127251588,781,14579099,2017-06-23 17:16:36,2017-06-27 21:04:04,closed,Changed integer based indexing to location based index,Now selects first element in series rather than 0th index item - old way could cause problems when the dataframe doesn't start at index 0 but rather starts at a higher number. Happened to me :P,3,5,[]
844,126868391,778,14579099,2017-06-21 21:48:54,2017-06-26 13:18:06,closed,update pjs to 1.28.2,"headsup @chriddyp @Kully 

- [x] test manually ",1,1,[]
845,126649692,777,14579099,2017-06-20 23:15:42,2017-06-21 14:23:40,closed,update plotlyjs to 1.28.1 for plotly.offline,"cc @chriddyp @Kully 

@bcdunbar and @jackparmer this update includes sankeys for `plotly.offline`",2,2,[]
846,126578669,776,14579099,2017-06-20 16:40:13,2017-07-01 11:19:32,closed,added histogram to facet_grid,,14,18,[]
847,125163998,772,14579099,2017-06-12 15:27:43,2017-06-12 15:28:23,closed,v2.0.10,,0,1,[]
848,123098992,762,14579099,2017-05-30 17:07:56,2017-05-31 13:55:05,closed,"Require a minimum version of `decorator`, fixes #721","Fixes https://github.com/plotly/plotly.py/issues/721

@cldougl @Kully - please review.

Many thanks to @miken, @ryecao, and @Kkevsterrr for reporting!",2,3,[]
849,122034929,760,14579099,2017-05-23 15:56:58,2017-05-24 19:34:45,closed,dashboard box ids to letters,,4,5,[]
850,120879465,755,14579099,2017-05-16 17:10:31,2017-05-18 18:01:56,closed,added force_order param in violin FF,Re: https://github.com/plotly/plotly.py/issues/745,3,8,[]
851,120467463,753,14579099,2017-05-13 23:55:01,2017-05-15 12:10:45,closed,Spelling mistake on PlotlyDataTypeError message,I saw a minor spelling mistake on the PlotlyDatatypeError message,1,1,[]
852,119113542,749,14579099,2017-05-05 05:59:19,2017-05-05 06:50:48,closed,BUG FIX: init_notebook_mode(True) not work,"Due to the wrong plotly-latest.min.js source url, the init_notebook_mode(connected=True) didn't work correctly. Changing the js url from https://cdn.plot.ly/plotly-latest.min to https://cdn.plot.ly/plotly-latest.min.js solves this issue",1,1,[]
853,118145353,744,14579099,2017-04-28 12:49:58,2017-05-03 16:35:39,closed,Developer Experience Audit,"This does a few things:
  - Fixes a spelling error in README.rst
  - Adds a Code of Conduct, and references it in the Contributing and README      files;
  - Cleans up the README.md file to be a bit more standardized and useful for     people on GitHub;
  - Updates the year of the license;
  - adds an issue section to the contributing.md
 ",2,5,[]
854,117772695,743,14579099,2017-04-26 17:50:40,2017-04-26 20:31:51,closed,v2.0.9,cc @cldougl and @Kully ,1,4,[]
855,117584515,741,14579099,2017-04-25 21:24:17,2017-04-26 19:24:21,closed,update plotly min,"updated plotly.js to v 1.26.0 for offline

cc @Kully @chriddyp ",2,1,[]
856,117157750,739,14579099,2017-04-23 17:19:04,2017-10-26 17:18:49,closed,Presentations wrapper,,14,53,[]
857,116911087,738,14579099,2017-04-21 04:46:32,2017-04-25 11:42:46,closed,Add 'frames' to the ipython display_bundle,Fixes #737 ..,4,2,[]
858,115720579,734,14579099,2017-04-13 09:49:49,2017-04-21 21:44:52,closed,v2.0.8 only write config file if changed,"We are having an issue of plotly credentials occasionally deleted for some of the users. I was not able to produce the bug consistently. It seems that the credentials are overwritten once concurrency comes in place. 

The .credentials and .config files are open many times for writing (+w), every time the ensure_local_plotly_files (https://github.com/plotly/plotly.py/blob/master/plotly/tools.py#L77) is called, and it is called every time plotly is used. 

This fix will only overwrite (or open for writing) the configuration files, if the configuration keys change, but not every time when plotly is called. Once the correct config is present, those files won't be open for writing anymore, and hence won't be overwritten due to exceptions caused by  system file locks and such, which can happen in case of concurrency.",4,1,[]
859,115619855,732,14579099,2017-04-12 19:40:49,2017-04-26 17:49:55,closed,another api endpoint,,4,6,[]
860,115619167,731,14579099,2017-04-12 19:36:54,2017-06-12 15:20:50,closed,Facet grid FigureFactory,will be making a notebook for a proper showcase of these charts,17,41,[]
861,115407915,729,14579099,2017-04-11 20:29:33,2017-04-12 15:45:52,closed,update permissions warning to point users to support site,,2,1,[]
862,114706498,726,14579099,2017-04-06 22:12:46,2017-04-07 16:22:41,closed,check that share key is enabled,,1,2,[]
863,112486722,720,14579099,2017-03-24 15:52:09,2017-03-24 18:09:11,closed,update plotlyjs 1.25.0,cc @chriddyp & @Kully ,1,1,[]
864,111485634,717,14579099,2017-03-20 03:42:36,2017-04-10 18:57:45,closed,Make offline embedded <div> plots responsive.,"This PR enables responsiveness in offline plots, when `output_type == 'div'` by adding the `resize_script` to the return value of `plotly.offline.plot`, just as it is done if  `output_type == 'file'`, as seen here:

* https://github.com/Ismael-VC/plotly.py/blob/8cfa08ed1ca23ca67b1d3adf1674c29f9777d8f4/plotly/offline/offline.py#L489-L498

 I've been making use of [Django-JET](https://github.com/geex-arts/django-jet) dashboard widget plugins in order to embed a Plotly graph, before this change I would have to reload the page manually every time I resized the browser window in order to make the plot resize to the new size of the `django-jet` widget containing it (which is responsive).

## Before this change

* First load:

![image](https://cloud.githubusercontent.com/assets/4594825/24088556/5fe86ffc-0cf1-11e7-9fb5-440414d5f3dd.png)

* Resize:

![image](https://cloud.githubusercontent.com/assets/4594825/24088561/6b62b5c2-0cf1-11e7-90f9-56f4e3391836.png)

As you can see, plot is truncated.

*** 

## After this change

* First load:

![](https://files.gitter.im/geex-arts/django-jet/5ddL/blob)

* Resize:

![](https://files.gitter.im/geex-arts/django-jet/WfIM/blob)

Now it resizes properly.

This is the code I used to test.

In `dashboard_modules.py`:

```python
from plotly import graph_objs
from plotly.offline import plot

class Graph(DashboardModule):
    title = 'Graph'
    template = 'dashboard_modules/modules/graph.html'

    def init_with_context(self, context):
        x = [-2, 0, 4, 6, 7]
        y = [q ** 2 - q + 3 for q in x]
        trace1 = graph_objs.Scatter(
            x=x,
            y=y,
            marker={
                'color': 'red',
                'symbol': 104,
                'size': ""10""
            },
            mode=""lines"",
            name='1st Trace'
        )
        data = graph_objs.Data([trace1])
        layout = graph_objs.Layout(
            title=""Meine Daten"",
            xaxis={'title': 'x1'},
            yaxis={'title': 'x2'}
        )
        figure = graph_objs.Figure(data=data, layout=layout)
        div = plot(figure, auto_open=False, output_type='div')

        self.graph = div
```

In `graph.html`:

```jinja
{% load humanize %}

{{ module.graph|safe }}
```

Related issue: Responsive plots 

* https://github.com/plotly/plotly.py/issues/421",8,1,[]
865,111061465,714,14579099,2017-03-16 12:57:08,2017-04-20 17:29:22,closed,Make offline.plot/iplot accept a plot config dict,"Make `plotly.offline.plot()` (`iplot()`) accept a `config` dictionary so the various [configuration options](https://plot.ly/javascript/configuration-options/) can be passed. Includes unit tests.

Addresses https://community.plot.ly/t/removing-hover-toolbar-and-other-configuration-options-with-the-python-api/374.

Also took liberty to slightly improve surrounding `offline` tests.

If you find the proposed feature something acceptable, I'd be happy to also amend the docs.",3,3,[]
866,110850514,713,14579099,2017-03-15 14:02:25,2017-03-20 17:06:29,closed,Add Plotly custom mimetype to NB outputs.,"Azure notebooks sanitize HTML when the user requests to 'Download as HTML'. This leads to Plotly Charts being rendered in plain text. To tackle the same, we send the Plotly chart data as a custom mimetype: `text/vnd.plotly.v1+html`.

[PlotlyHTMLExporter](https://github.com/tarzzz/plotlyhtmlexporter) (Plotly friendly, Jupyter Notebook HTML Exporter) recognizes this 
mimetype, and renders the charts in their interactive version when notebook is converted to HTML. 

`PlotlyHTMLExporter` sanitizes all html content but leaves Plotly Charts intact.",7,3,[]
867,109554558,709,14579099,2017-03-07 19:37:50,2017-03-07 22:33:16,closed,test and fix master,,3,5,[]
868,109542993,708,14579099,2017-03-07 18:35:36,2017-03-07 18:55:29,closed,bump version,,1,1,[]
869,109533933,707,14579099,2017-03-07 17:47:12,2017-03-07 18:11:19,closed,add dashboard objs to init,"fix for https://github.com/plotly/plotly.py/issues/706

cc @Kully ",1,1,[]
870,109285401,705,14579099,2017-03-06 15:42:50,2017-03-07 06:46:04,closed,update-CHANGELOG and ver # for dashboards,,4,5,[]
871,109150920,704,14579099,2017-03-05 14:48:32,2018-09-20 12:34:21,closed,Add json output type to offline plot.,"I added a json output type to the offline plot function. It returns a (data, layout, config) tuple of json strings. ",1,1,[]
872,107070477,699,14579099,2017-02-20 20:17:21,2017-02-20 21:45:51,closed,include nbformat in `install_requires` as dependency to fix #692,"From https://github.com/plotly/plotly.py/issues/692#issuecomment-281170122

I have not tested this locally.

cc @theengineear @cldougl @rgbkrk ",3,2,[]
873,107062646,698,14579099,2017-02-20 19:10:14,2017-02-20 20:35:13,closed,offline plot event listener edit,fixes https://github.com/plotly/plotly.py/issues/684,5,2,[]
874,106608327,695,14579099,2017-02-16 20:33:25,2017-02-16 20:57:05,closed,fix doc string in annotated-heatmap,@cldougl ,2,1,[]
875,106418704,694,14579099,2017-02-15 22:58:05,2017-03-04 20:47:41,closed,Dashboard wrapper,,14,15,[]
876,105956888,693,14579099,2017-02-13 18:58:53,2017-02-14 20:42:52,closed,Fix distplot color looping,"Re: a user's issue. Looks like if you have more than 10 traces in a `distplot`, your colors won't loop around and start on the first color. Just did `mod len(colors)`.",4,3,[]
877,105600365,691,14579099,2017-02-10 10:18:12,2018-09-28 14:08:31,closed,Update utils.py,"Import error derived from this file, on line 23,  ' from . exceptions import PlotlyError'  should be  'from plotly.exceptions import PlotlyError' ? Thanks.",2,1,[]
878,105114619,689,14579099,2017-02-07 23:09:01,2017-02-07 23:36:04,closed,Update version.py,cc @jparmer,0,2,[]
879,104832880,688,14579099,2017-02-06 16:33:08,2018-10-23 15:37:39,closed,Reduce size V3,"Hi,

updated pull request. See #501 for more details.

Cheers

.c",1,4,['enhancement']
880,104830841,687,14579099,2017-02-06 16:23:24,2017-02-06 16:28:35,closed,Reduce plot size version 2,"Hi,

updated pull request. See #501 for more details.

Cheers

.c
",0,3,[]
881,104427513,685,14579099,2017-02-02 21:30:14,2017-02-02 21:50:14,closed,Update default schema.,Just a quick update. The `master` branch is failing.,0,1,[]
882,104381852,683,14579099,2017-02-02 17:09:09,2018-09-20 12:30:01,closed,first pass at adding mathjax,"Using the workaround as suggested here:
https://github.com/plotly/plotly.py/issues/515#issuecomment-263097892",6,1,[]
883,104223363,682,14579099,2017-02-01 21:15:38,2017-02-02 13:45:40,closed,remove support email from error messages,"since the [support app](https://support.plot.ly) has been released the support@plot.ly email is no longer in use. 
cc @theengineear @Kully ",1,1,[]
884,104055756,680,14579099,2017-02-01 00:51:08,2018-09-28 14:02:36,closed,Enable heartbeat in Stream.write,"The [plot.ly streaming documentation](https://plot.ly/streaming/) under the
`Disconnections` section states that:

> A connection can be maintained by writing a heartbeat within the 60 second
> window, a heartbeat is simply a newline

If an empty string (and maybe an empty dictionary too, untested) is passed to
Stream's `write` method however it results in an empty row being created in the plot's
data rather than only keeping the connection awake.  This commit aims to support
using the write method for sending a heartbeat.",4,1,[]
885,103886575,679,14579099,2017-01-31 07:55:44,2017-02-03 16:23:04,closed,refactor the files.py,,3,1,[]
886,103835108,678,14579099,2017-01-30 22:33:34,2017-02-02 21:03:49,closed,Speed up graph objs,"Introduces a utility decorator to memoize functions along with some other performance improvements surrounding `graph_reference.

This was something I tinkered on over the weekend. I spent a bit more time today formalizing it so that the work didn't go to waste.

Closes #497

^^ I'm closing that issue, but it's likely that there are other improvements to be had. My suggestion would be to separate `make_subplots` so that users can *choose* whether they'd like to use `graph_objs` or native Python objects to create a plot. That can/should be handled as a different issue though.",13,7,[]
887,103511852,676,14579099,2017-01-27 15:29:46,2017-01-27 17:33:32,closed,add changelog changes for Grid-accepting-dataframe,,3,2,[]
888,103359805,675,14579099,2017-01-26 18:14:31,2017-01-27 15:15:18,closed,Grid Accept Dataframe,"For issue: https://github.com/plotly/plotly.py/issues/665

Just a first pass. Haven't added tests yet - want to make sure my approach is good enough.",1,3,[]
889,103219755,674,14579099,2017-01-25 22:39:25,2017-01-25 23:34:07,closed,Update changelog.,"* Mark unreleased changes as part of 2.0.0.
* Set 2.0.0 release date
* Fix 1.13.0 release date (not sure what happened there…)",1,1,[]
890,102499705,670,14579099,2017-01-20 17:04:06,2017-01-23 17:15:06,closed,add rugplot + changelog,Fixes this issue: https://github.com/plotly/plotly.py/issues/603,11,1,[]
891,101988473,668,14579099,2017-01-18 02:30:32,2017-01-18 20:44:38,closed,Validate signin,"Simply raises a `PlotlyError` if we can't hit `/v2/users/current` successfully given the session credentials.

I decided to let the session creds/config get set and not revert on fail. It felt simpler to me and I didn't know why it would be beneficial to do anything otherwise.",4,3,[]
892,101978261,667,14579099,2017-01-18 00:48:18,2017-01-18 21:08:23,closed,FF requires numpy,"Note that we don’t necessarily *require* `numpy` for in all the FF
methods. We’re just looking to make the compatibility-breaking
change so that we can depend on it in `2.0.0`.

Also note that I’d forgotten to include `figure_factory` in setup.py
before ;__;.",3,2,[]
893,101972509,666,14579099,2017-01-17 23:54:38,2017-01-18 20:45:06,closed,Ensure `plot` sends layout along.,I can’t believe that this wasn’t tested anywhere before!,5,1,[]
894,101390523,661,14579099,2017-01-13 05:15:34,2018-09-26 19:56:12,closed,user-controllable plotly config directory,"Ran into a concurrency bug wherein some processes would fail when there were too many parallel plotly tasks hammering the same config files in ~/.plotly.
Adding user-controllable config directory resolved the issue when each parallel task used a unique PLOTLY_DIR environment variable.
Also fixes #533.

",7,2,[]
895,101174120,660,14579099,2017-01-12 00:17:04,2017-01-18 21:08:08,closed,Mark release date for 1.13.0.,,0,1,[]
896,101015222,658,14579099,2017-01-11 07:22:53,2017-01-19 09:01:00,closed,2.0.0,"Aight, we're set to merge this. I'm going to ask for a final round of review and then merge and setup a `pre-release` for this before I push anything new up to PyPI.

Closes #642
",10,26,[]
897,100761382,657,14579099,2017-01-09 21:11:07,2017-01-11 07:21:08,closed,Fix optional imports,"This is a stand-alone module to do the following:

* Don’t import optional things until we need them
* Keep all the optional imports centralized",6,2,[]
898,100760050,656,14579099,2017-01-09 21:02:31,2017-01-11 22:55:27,closed,Improve `frames` support in graph_objs.py.,"This does the following:

* Allow object-or-string in frames array
* Refuse `frames` in frame object if nested
* Map frame entry `data` and `layout` objects to `figure` attribute information.
* Tests this functionality

Fixes #604",11,4,[]
899,100512108,655,14579099,2017-01-06 19:36:05,2017-01-06 22:11:30,closed,webgl in scatterplotmatrix,,7,1,[]
900,100495455,653,14579099,2017-01-06 17:37:19,2017-01-06 21:59:34,closed,Add docs for Jupyter NB test suite,"follow-up on https://github.com/plotly/plotly.py/pull/549

The pipeline for Jupyter NB tests is anything but trivial, so might as well :books: it!

@theengineear @Kully @cldougl ",2,3,[]
901,100410330,652,14579099,2017-01-06 05:01:41,2017-01-09 20:52:21,closed,[2.0.0] Relocate figure factory,"This solves a lot of circular dependency stuff for us. It also puts an end to the ~8000 line file that is `tools.py`... that's ridiculous.

The new imports work like this:

`from plotly.figure_factory import create_scatterplotmatrix`

... etc, etc.

",3,4,[]
902,100383044,651,14579099,2017-01-05 23:19:00,2017-01-09 20:51:21,closed,[2.0.0] Unify API,I'm opening this up against a new `2.0.0` branch that we can work on and use as a merge base for all the things in https://github.com/plotly/plotly.py/issues/642,4,12,[]
903,100376281,650,14579099,2017-01-05 22:27:34,2017-01-05 23:19:57,closed,Unify api,"See #640 for the original impetus for this PR. It's gone so far from the original purpose that I decided to just open up my own PR for it.
",2,12,[]
904,100233351,648,14579099,2017-01-05 04:35:15,2017-01-05 20:14:01,closed,Local plot schema,"This PR stops auto-loading the plot-schema on import. We decided in #642 that this shouldn't need to force a major version bump, so I'll add a minor version bump here.

See #614 for the original PR. I noticed that we actually had a weird PY3 conflict due to a change in how importing works in PY3 (See commit notes).
",4,6,[]
905,99830157,647,14579099,2017-01-01 20:29:30,2018-09-28 13:57:57,closed,Python26 support,"@casperdcl Here you go :)

If you can get this to pass, I'll be happy to merge it in. The current error is `OrderedDict` support You'll need to add `ordereddict` as a dep for 2.6, I believe and manage the imports.

I don't care to add `optional` support for Python 2.6, just the same `core` support we have for `Python 3.3`. Good luck!",3,2,[]
906,99809660,645,14579099,2016-12-31 18:05:42,2017-01-01 20:06:43,closed,Try tox.,"I tried using tox *looonog* ago and it didn't seem to fit our needs for CI. However, I just tried it yesterday again and was able to get a solid setup for our core vs. optional testing needs.

We're considering adding back 2.6 support and having the ability to specify a possibly-different set of deps in tox would be the better option, imo.

See https://github.com/plotly/plotly.py/pull/635
",5,1,[]
907,99783188,644,14579099,2016-12-30 21:04:52,2017-02-02 17:36:06,closed,Update deps and tested python,"WIP, just seeing if this will pass on CI.",2,20,[]
908,99772555,643,14579099,2016-12-30 18:16:44,2017-01-05 22:24:28,closed,No auto load graph reference,"Sorta a WIP since I've done this on top of the `unify-api` branch.

This:

1. Uses @etpinard's commit to remove the graph_reference loading
2. Adds some meta programming so we don't need to construct these classes on import.**

**See the commit message for more details.

Fixes #389, #613, #611, #527, #419
",3,14,[]
909,99602925,641,14579099,2016-12-28 23:18:23,2018-09-22 13:32:17,closed,Improved compatibility with ipywidgtes and jupyter notebook,"Please review & test this. I fixed it out of necessity but I only tested this on my own system.

This should solve issue #490.",11,1,[]
910,99021574,640,14579099,2016-12-21 23:11:00,2017-01-05 23:05:51,closed,Try getting the error message in response_handler,"[WIP, not ready for review...]

The issue tackled here is this https://github.com/plotly/streambed/issues/8801

I decided to give a hand and tackle it because it's part of 2.1 release that we want to deliver before Christmas and Adam is out on vacation.

Now the returned error is 
```
PlotlyError: Sorry, a file already exists with this name.
```

@theengineear I'm failing `test_duplicate_folders` test but in an expected way I guess because I hit the above `existing file` error. I'd love suggestions about changing the test or modifying the PR for a sound result and a review is much appreciated since it's my first time in this repo.

@chriddyp fyi and 👀 ?",13,12,[]
911,98997751,639,14579099,2016-12-21 20:16:54,2016-12-21 22:45:23,closed,Typo contributing.md,,1,1,[]
912,98179996,635,14579099,2016-12-15 16:09:30,2018-09-28 13:57:31,closed,py2.6 support,basic support for an old server running python2.6,10,1,[]
913,97377580,634,14579099,2016-12-09 20:48:37,2016-12-12 20:15:05,closed,CHANGELOG + animations docs,Added a `animations are here` in 1.12.10 in CHANGELOG and beefed up the doc string for `plotly.plotly.create_animations`,2,1,[]
914,97197647,632,14579099,2016-12-08 20:47:10,2016-12-10 04:04:34,closed,fix-remove-scatterplot-labels,,2,1,[]
915,97027287,631,14579099,2016-12-07 23:10:36,2016-12-08 00:12:36,closed,changelog for new-errors-in-create-animations,@theengineear I keep forgetting...,1,1,[]
916,96993597,630,14579099,2016-12-07 19:45:48,2016-12-08 15:14:25,closed,return error if get_grid reques is not ok,,2,3,[]
917,96835965,629,14579099,2016-12-07 00:30:15,2016-12-07 17:24:58,closed,update python offline plotlyjs version,,2,1,[]
918,96825375,628,14579099,2016-12-06 23:03:30,2016-12-07 20:46:08,closed,Better error messages for (i)create_animations,"Regarding Chris' suggestion here: https://github.com/plotly/plotly.py/pull/584#discussion_r89549480

Haven't tested all of the ways in which a request can fail, mostly because most of the `not done` ones I don't know how to test (i.e. `Request was Throttled`, `Server was Down`) Yes, I said _most_ when we're talking about 2 of the 3 on the list. :slightly_smiling_face: 

- [x] A File already exists with this name
- [x] API key wasn't correct
- [x] API key wasn't supplied
- [x] User was offline
- [x] Permission denied (can't save the file as private)
- [ ]  Request was throttled
- [ ] ~Figure was malformed~
- [ ] Server was down",3,2,[]
919,96582090,626,14579099,2016-12-05 18:21:49,2016-12-29 07:58:04,closed,copied PlotlyJSONEncode class to play around,,3,1,[]
920,96317899,625,14579099,2016-12-02 17:13:54,2016-12-02 18:29:11,closed,forgot to update changelog - making commit for that,@theengineear Forgot to do this for https://github.com/plotly/plotly.py/pull/623.,1,1,[]
921,96175129,623,14579099,2016-12-01 21:35:00,2016-12-02 17:04:47,closed,hide tick labels on boxplots in scatterplotmatrix,,3,2,[]
922,95771427,622,14579099,2016-11-29 20:42:46,2016-12-01 16:23:30,closed,Fix Plotting Error in other domains besides plot.ly,Fixing https://github.com/plotly/plotly.py/issues/621,6,9,[]
923,95585728,620,14579099,2016-11-28 22:05:28,2016-11-29 21:10:07,closed,Update changelog,- remove image download alert note,1,2,[]
924,95551812,619,14579099,2016-11-28 18:26:34,2016-11-28 19:56:01,closed,rm pop up message when downloading image offline,,2,1,[]
925,95549285,618,14579099,2016-11-28 18:11:28,2016-11-28 20:45:37,closed,added animations to changelog,@chriddyp ,1,2,[]
926,94924213,615,14579099,2016-11-23 00:11:47,2016-11-23 19:47:27,closed,bump version to 1.12.11,@chriddyp or @theengineear ,2,4,[]
927,94701978,614,14579099,2016-11-21 21:40:13,2017-02-02 17:36:47,closed,Load graph reference from pkg copy of plot schema,fixes https://github.com/plotly/plotly.py/issues/613,5,1,[]
928,92164387,601,14579099,2016-11-03 14:29:20,2016-11-03 17:03:30,closed,fixing config bug in #589,"#589 changed the argument signature of `_plot_html`.  This PR fixes the two calls to that function.

See https://github.com/plotly/plotly.py/issues/399#issuecomment-258153104",3,1,[]
929,91796975,599,14579099,2016-11-01 14:50:47,2016-11-22 23:50:24,closed,Fix iplot offline,"Re iplot issue brought up in https://github.com/plotly/plotly.py/issues/593#issuecomment-257392993

Fixed by just removing the unnecessary `show_link` and `link_text` from the `_plot_html()` call in [this line](https://github.com/plotly/plotly.py/blob/master/plotly/offline/offline.py#L312).

`plot()` looks fine as it has `show_link` and `link_text` in the signature.",19,15,[]
930,90562732,589,14579099,2016-10-24 07:42:16,2016-10-24 17:21:33,closed,Add support for config options for offline plots,"fixes issue #399

You can now enter in a dictionary for all the options you want using
the parameter ‘config’.
(cherry picked from commit ecfe1fb)
",1,1,[]
931,90372772,588,14579099,2016-10-21 12:12:25,2016-10-21 20:31:37,closed,Gantt chart grouping,"Added an option to group Gantt Charts tasks.
Also added an option to add Texts to tasks in the chart via a 'Description' key.

The tests all ran successfully and I added another one for the new options: `test_gannt_groups_and_descriptions`
Test Location: **plotly/tests/test_core/test_tools/test_figure_factory.py**

``` python
df = [
    dict(Task='Task A', Description='Task A - 1', Start='2008-10-05',
         Finish='2009-04-15', IndexCol = 'TA'),
    dict(Task=""Task B"", Description='Task B - 1', Start='2008-12-06',
         Finish='2009-03-15', IndexCol = 'TB'),
    dict(Task=""Task C"", Description='Task C - 1', Start='2008-09-07',
         Finish='2009-03-15', IndexCol = 'TC'),
    dict(Task=""Task C"", Description='Task C - 2', Start='2009-05-08',
         Finish='2009-04-15', IndexCol = 'TC'),
    dict(Task=""Task A"", Description='Task A - 2', Start='2009-04-20',
         Finish='2009-05-30', IndexCol = 'TA')
]
fig = FigureFactory.create_gantt(df, colors=dict(TA = 'rgb(220, 0, 0)',TB = 'rgb(170, 14, 200)',TC = (1, 0.9, 0.16)), show_colorbar=True, index_col='IndexCol', group_tasks=True)
```

Generates:

![gantt-chart-grouping](https://cloud.githubusercontent.com/assets/1822673/19597826/4a740aac-9797-11e6-8f67-fd92b36fc2c6.png)

Did I forget anything?
",2,5,[]
932,90251267,586,14579099,2016-10-20 18:04:15,2016-10-25 18:23:19,closed,Patch `Figure` to allow `frames`.,"We need frames for animations, this is a hack since they don’t exist in
the graph reference.
",2,1,[]
933,89878628,584,14579099,2016-10-18 19:05:10,2016-11-26 22:23:12,closed,Animations/Frames in Python API,"Relevant Issue: https://github.com/plotly/streambed/issues/8129
",16,27,[]
934,89861407,583,14579099,2016-10-18 17:24:00,2016-12-28 21:19:40,closed,Update tested python versions,,0,2,[]
935,89577314,582,14579099,2016-10-17 08:06:30,2016-12-28 21:23:15,closed,Update exception format to reflect what is returned from the api.,"Fixes #210 

We get this error when user hits the limit for free subscription:

```
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
<ipython-input-7-9f121fc7aa6a> in <module>()
----> 1 py.image.save_as(fig, filename='a-simple-plot.svg')

//anaconda/lib/python2.7/site-packages/plotly/plotly/plotly.py in save_as(cls, figure_or_data, filename, format, width, height, scale)
    786             filename += '.' + format
    787 
--> 788         img = cls.get(figure_or_data, format, width, height, scale)
    789 
    790         f = open(filename, 'wb')

//anaconda/lib/python2.7/site-packages/plotly/plotly/plotly.py in get(figure_or_data, format, width, height, scale)
    709                                              ""from plotly could ""
    710                                              ""not be translated."")
--> 711             raise exceptions.PlotlyError(return_data['error'])
    712 
    713     @classmethod

KeyError: 'error'
```

This PR fixes the same.
",2,4,[]
936,88070444,577,14579099,2016-10-05 12:44:53,2016-10-21 20:27:59,closed,Allow the use of custom linkage/distance functions for creating dendrograms.,"[Scipy hierarchy](http://docs.scipy.org/doc/scipy-0.14.0/reference/cluster.hierarchy.html)
allows multiple linkage modes for creating dendrograms. So far it
has not been possible to create dendrograms using plotly with
a different linkage mode than 'complete'.

This commit allows the user to specify arbitrary linkage and distance
function which can come either from the scipy package or user-created
functions.
",1,2,[]
937,86947584,574,14579099,2016-09-27 14:59:35,2016-12-28 21:22:34,closed,Update default schema,"... get `master` to pass on CircleCI again.

@cldougl @Kully 
",1,1,[]
938,85264186,570,14579099,2016-09-14 16:45:38,2016-09-16 18:51:53,closed,Replace Trisurf color functions with `colors.py`,,10,6,[]
939,84346282,567,14579099,2016-09-07 18:01:01,2016-09-07 19:13:05,closed,implicitly made print_grid=False for scatterplot matrix in FF,,2,1,[]
940,83901756,563,14579099,2016-09-03 18:01:45,2016-10-24 17:17:10,closed,Modified gantt datasource validation error message,"The message was non-descriptive.
",0,1,[]
941,83865392,562,14579099,2016-09-02 21:13:40,2017-02-03 00:15:16,closed,first pass at nteract support,,34,13,[]
942,83818753,561,14579099,2016-09-02 15:16:23,2016-10-21 20:34:35,closed,implements plotly.Stream 'connected' property,"- Stream.connected was always false before.  Now it
  actually returns the state of the underlying connection
",0,1,[]
943,83151133,557,14579099,2016-08-29 19:13:32,2016-09-07 17:42:49,closed,add print_grid param to create_violin,,8,2,[]
944,82787177,556,14579099,2016-08-25 20:26:44,2016-08-26 15:50:08,closed,make sure colorbar points are lists of first point and update test,,8,3,[]
945,82784501,555,14579099,2016-08-25 20:08:17,2016-08-25 20:30:14,closed,"change x[0] to x[0:1] for x, y, z",,1,1,[]
946,82624972,554,14579099,2016-08-24 21:59:24,2016-08-25 19:00:16,closed,"force facecolor to be an array, NOT a list","Testing if Python 2 and Python 3 are in agreement between the `facecolor` numpy.arrays
",11,1,[]
947,82042783,551,14579099,2016-08-19 20:42:24,2016-08-22 18:06:46,closed,"added appropriate colorbar max and min values, edges_color to param for line coloring, and making code more clear","@theengineear 
",11,4,[]
948,82029747,550,14579099,2016-08-19 19:05:38,2017-09-17 00:46:52,closed,Debug the trisurf code,"see #487 
",20,1,[]
949,81849021,549,14579099,2016-08-18 16:42:54,2017-01-05 22:56:01,closed,Add JS tests for Jupyter NBs,"**Behold:** JS tests in Jupyter Notebooks are coming to plotly.py

My strategy was the following:
1. Have a few `ipynb` fixture files with plotly.py code cells but no outputs
2. Execute them using the jupyter [execute api](http://nbconvert.readthedocs.io/en/latest/execute_api.html)
3. Convert the resulting `ipynb` JSON to HTML using [nbconver api](http://nbconvert.readthedocs.io/en/latest/nbconvert_library.html)
4. Add JS test bundle to the resulting HTML file
5. Run the JS tests in a browser!

Step 5 was a little harder than I thought. There's a ton of test runners that take a JS bundle, shim it into an HTML page and run the tests. But, I couldn't find any test runner that takes an already made 
HTML page and runs the test there. A few runners allow you to add HTML to their default test page, but I couldn't get the results I wanted, so I decided to build my little test runner see `lib/server.js`

TODO:
- [x] add more test fixtures / cases
- [x] get this to work on CircleCI 
- [x] make sure this works in all python versions we support

@chriddyp @theengineear @cldougl @mdtusz 
",11,11,[]
950,81836634,547,14579099,2016-08-18 15:30:06,2016-08-18 21:57:56,closed,"force rgb colors to be a triplet of integers, not floats",,2,7,[]
951,81668718,546,14579099,2016-08-17 15:52:47,2016-08-17 16:05:34,closed,Update CHANGELOG.md,,0,1,[]
952,81576187,545,14579099,2016-08-17 02:41:39,2016-08-17 15:31:25,closed,Make temporary fix to plotly.min.js so that it loads in offline module,"As first discovered in this forum [post](http://community.plot.ly/t/offline-mode-in-jupyter-notebook-shows-blank-graphs/1860/), `offline` is broken ever since https://github.com/plotly/plotly.py/pull/538 where plotly.js got bumped to from the `1.14.x` series to the `1.16.2`.

More precisely, `init_notebook_mode()` (with the default `connected=False`) fails to load plotly.js as a require.js module. From my observations, the CDN link (with `connected=True`) appears to load fine.

Something is up with a `mapbox-gl` dependency called `webworkify` in a minified bundle. See https://github.com/substack/webworkify/issues/29 for more info. Ideally, this issue should be fixed upstream.

But for now, I propose a uber hacky fix where I manually fix the minified bundle. 

For those interested in non-nonsensical JS drama, I had to replace 

![image](https://cloud.githubusercontent.com/assets/6675409/17722742/8cafc208-6402-11e6-835f-7a47fbe04295.png)

by 

![image](https://cloud.githubusercontent.com/assets/6675409/17722738/8030c40a-6402-11e6-89ed-1c1c19130dad.png)

to get `offline` working again.
",3,3,[]
953,81520308,543,14579099,2016-08-16 18:25:33,2017-02-02 18:37:28,closed,Replicated tools.py to be identical to #499 and removed test_optional…,"… test in trisurf for data[2] since colorbar came after Chris' trisurf optimization commits
",3,2,[]
954,81372806,541,14579099,2016-08-15 20:48:36,2016-08-17 14:23:27,closed,Udpated colors in facecolor,,2,1,[]
955,80991823,539,14579099,2016-08-11 16:51:17,2016-08-15 19:04:21,closed,Colors tests,"@theengineear 

All tests are passing locally. The plan is to slowly replace the code in `tools` by the methods in `colors`. A renaming of some of the preexisting methods in `colors.py` will also be in order, but only after the code in `tools` is replaced first.
",1,8,[]
956,80703052,538,14579099,2016-08-09 22:03:22,2016-08-10 18:45:18,closed,update pjs (1.16.2) for offline,,2,1,[]
957,80672250,537,14579099,2016-08-09 18:39:18,2016-08-09 19:02:07,closed,"Revert ""Trisurf and color optimizations""","Reverts plotly/plotly.py#499
",2,2,[]
958,80667573,536,14579099,2016-08-09 18:10:09,2016-08-09 18:41:43,closed,update plot schema,,1,1,[]
959,80381053,534,14579099,2016-08-07 23:16:22,2016-08-07 23:18:19,closed,this commit fixes #533,,0,1,[]
960,79624637,531,14579099,2016-08-01 19:44:56,2016-08-03 16:23:39,closed,Trisurf colorbar,,2,9,[]
961,79171468,523,14579099,2016-07-28 10:24:37,2016-10-21 20:33:52,closed,Build for conda,"Added necessary files to run `conda build plotly`.
Includes a small readme (`build_for_conda.md`).

Current build (v 1.12.4) lives at https://anaconda.org/chohner/plotly
",2,1,[]
962,78319243,521,14579099,2016-07-21 13:51:27,2016-07-29 14:58:51,closed,changelog typo,,1,1,[]
963,76307588,518,14579099,2016-07-05 16:56:16,2016-07-14 19:11:45,closed,Added _make_colorscale method and 2D Density Plot,"@theengineear @jackparmer 

No new tests since `validate_colors` is already covered by another set of tests.
",6,7,[]
964,75874839,516,14579099,2016-06-30 19:15:26,2016-07-09 03:53:21,closed,Update dependencies,"Updated `plotly.min.js` 
Updated `plot_schema`
Added `update_offline` in makefile in order to automatically update `plotly.min.js`
Replaced deprecated packages with newer ones in `widgets.py`
",4,6,[]
965,75578198,513,14579099,2016-06-29 02:03:28,2017-02-02 17:56:18,closed,Offline image download Redo,"In order to use the `.then` method with the promises, I had to move the code into `_plot_html`. However even with this method, the issue with the delay persists (if we use the timestamp, which I believe to be the best method that we know of at the moment). Thus I've made a parameter `image_delay` available to the user, such that if their plot doesn't render in the amount of time provided (10secs), they can make the change themselves to guarantee that their image is saved.

Lastly, I tried to add a test that will see if the image gets downloaded.
It searches for the existence of the file, starting from some base/parent directory. I've gotten it to work locally on `OS X`, however I'm not sure what the file structure is like on the test machine, so the test seems to fail. I set the base dir to `/home/ubuntu/`. Let me know if you have any ideas on this, or an alternative test I could possibly write. 

Thanks! @theengineear 
",1,7,[]
966,74696320,510,14579099,2016-06-21 22:26:18,2017-02-02 17:55:07,closed,introduce new check to see if page is loaded,"@theengineear Unfortunately the check I was using before the prevent pop ups on page reloads doesn't work for Chrome. Previously I was only able to test it on the Firefox because there was a plotly.js bug that  caused an issue with Chrome. I've tried the current method in both browsers, and it seems to be working. 
",8,4,[]
967,74468047,509,14579099,2016-06-20 16:00:19,2016-06-20 16:57:41,closed,update plotlyjs offline t0 v 1.13.0,"@yankev review for updating offline version of plotly.js
",1,2,[]
968,74322884,508,14579099,2016-06-18 00:58:49,2016-06-20 19:32:26,closed,Addressing issues in _plot_html,"#504 #505
",3,2,[]
969,73212226,501,14579099,2016-06-09 13:19:50,2017-02-06 16:22:01,closed,Reduce plot size,"Hi,

I added a kwarg _outsource_plotly_, that allows the plotly.js to be separated from the actual plot. The code just adds a separate file containing the plotly.min.js into the plot folder. While it is not so convenient for a single plot (two files vs one file), it is very good if one creates many plots in one folder, since all plots share the same js.library and thus the overall plotting size is reduced significantly.

Cheers

.c
",7,3,[]
970,73083504,499,14579099,2016-06-08 17:00:22,2016-08-09 17:25:50,closed,Trisurf and color optimizations,"This is a quick extension of #493. There was a lot of talk about the best way to interpolate between multiple colors in a readable, quick way. This PR mostly does 2 things:
1. Replaces the custom interpolation code with a matplotlib `LinearSegmentedColormap`. This is a way of creating a custom cmap from a list of rgb colors. Then you can pass it any value between 0 and 1 and it'll return the RGB value. Should have the exact same functionality, is vectorized, and means that some extra code can be removed.
2. Re-introduces vectorization to the facecolor creation. New speed is down to ~1.8 seconds from ~3.6 seconds. Not a gigantic increase but is helpful if you're re-plotting trisurfs many many times.

Only drawback I can see is that it introduces another dependency on matplotlib, but it seems like this is already depended on elsewhere, and besides it's likely that the majority of python plotly users will have this installed. LMKWYT.
",36,1,[]
971,73075142,498,14579099,2016-06-08 16:07:24,2016-06-08 20:43:33,closed,Added _validate_colors method,"@theengineear 

Adding new _validate_colors that should take care of validating any color string, tuple, Plotly scale name, or a list of colors. Does not currently handle dictionaries; I may make a seperate method for that.
",0,1,[]
972,72576107,495,14579099,2016-06-03 21:59:46,2016-06-06 17:03:43,closed,add ssl_verification_enabled to streaming_specs + tests,"ping @chriddyp @theengineear please review. Addresses: https://github.com/plotly/plotly.py/issues/465
- [x] update version (minor?)
- [x] add note in changelog for python 2.7.9/3.4.3 requirement for streaming over SSL. 
",2,5,[]
973,72400239,494,14579099,2016-06-02 19:06:14,2016-06-15 16:01:31,closed,added option to download an image of the most recent plot,"- This change is for the offline notebook mode
- This is the first attempt at it, there may be better solutions that I plan to look at
- Need to add docstring
",16,40,[]
974,71928858,493,14579099,2016-05-30 18:30:47,2016-06-03 15:59:40,closed,Allow more than 2 colormaps again,"@choldgraf @theengineear 

Guys,

So Chris, I think when you made the efficiency improvements to trisurf, you got rid of the capability of mapping divergent or colormaps of more than 2 colors. I have put that feature back now while trying to maintain the efficiency as best I could.

I put the 'rgb(%s, %s, %s)' stuff in the FigureFactory function _label_rgb(), which I was using anyways to convert a tuple to an rgb tuple.

Also, facecolor is not done in one line anymore, but is an empty list that keeps appending.

Let me know if you have any improvements to add.

(Also rewrote some doc strings for clarity)
",8,5,[]
975,71923827,492,14579099,2016-05-30 17:06:19,2016-05-31 14:40:17,closed,Updating cdn-options PR,"- removed the use of global variable __PLOTLY_USE_CDN.
- added keyword description to docstring

Note: For `requirejs.config`, the js will added to the end of the path. 
There were issues of plot persistence when I did include the .js. 

@chriddyp 
",4,3,[]
976,71911575,491,14579099,2016-05-30 14:52:05,2016-05-30 15:08:26,closed,update plot schema,"update plot schema to fix tests (from previous pr that edited a docstring)
",1,1,[]
977,71827716,489,14579099,2016-05-29 13:48:15,2016-05-30 14:44:30,closed,fixed typo in docstring,,0,1,[]
978,71737016,486,14579099,2016-05-27 16:08:57,2016-05-27 17:14:02,closed,Choldgraf custom colors trisurf,"@choldgraf @theengineear 

Added the 'it' to that error message. Everything worked on my end and it looks good.

Plus, I made some modern art with `import random`:

![modern art](https://cloud.githubusercontent.com/assets/10369095/15613892/c6dff342-2403-11e6-851e-7c7f3421a46e.png)
",5,4,[]
979,71736122,485,14579099,2016-05-27 16:02:28,2016-05-27 20:33:40,closed,updated plotly js for offline mode + changelog,"@cldougl 
",1,1,[]
980,71589495,484,14579099,2016-05-26 16:57:17,2016-05-27 17:14:03,closed,Custom colors trisurf,"This is a quick add-on to #481 and #482. It basically does 3 things:
1. Add support for passing a list or array to `color_func`. In this case, it assumes the list/array has pre-computed color values and it won't try to calculate it from the z-coordinates etc.
2. Ensure that everything piped into the `Mesh3d` class is an array. This makes plotting _much_ faster.
3. Rename the `_map_z2color` function because we're using this with more than just the z-values (shouldn't affect the functionality at all).

I also added a few tests, which are passing for me. @Kully @theengineear @jackparmer 
",22,2,[]
981,71435222,482,14579099,2016-05-25 17:54:24,2016-05-25 18:43:35,closed,Fixed show_edges and renamed dist_func to color_func,"@choldgraf
",7,1,[]
982,71407653,481,14579099,2016-05-25 15:01:49,2016-05-25 16:36:31,closed,Choldgraf optimize trisurf,"@theengineear @jackparmer @choldgraf @yankev

I made a new branch off of my duplicate of choldgraf:optimize_trisurf

Modified the main test for trisurf and hopefully will pass on circle. They passed locally for my on both Python 2 and 3.
",18,6,[]
983,71353817,479,14579099,2016-05-25 09:01:07,2017-05-23 11:59:44,closed,python version check in order to import urlparse,"This small patch should fix issue #478 
Just check the python version and run the related code so that urlparse is installed on both python2 and python3
Tested on Windows XP, Windows 10, Linux Debian Stable. All with python 2 installed.
Maybe some test on machines with python3
",2,1,[]
984,71280584,477,14579099,2016-05-24 19:43:15,2016-05-27 15:03:11,closed,Plus 2 colorscale,"@theengineear  @jackparmer 

This pull request is for updating all my figurefactories (trisurf, scatterplotmatrix, violin, gantt eventually) so that they support more than 2 color lists as inputs.

I've only dealt with trisurf here, changing the framework for how colormap is validated.

Should I make separate branches for each of the figurefactories, or just work in this PR? 
",6,6,[]
985,70967422,475,14579099,2016-05-22 04:14:31,2016-05-27 20:34:40,closed,Allow for the option of a CDN in offline mode,"@chriddyp First attempt at it. Couldn't get it to work out. 
Notes: 
- When I view the html for the ipynb, I can see the `<script src ..>` for loading plotlyjs. 
- the connected parameter is to see if a user wants to use the cdn (could name it differently, but for now connected=True --> use the cdn)

What happens: 

![screen shot 2016-05-22 at 12 13 50 am](https://cloud.githubusercontent.com/assets/12302455/15452142/2412fef2-1fb2-11e6-8896-a1409356e6e4.png)
",7,5,[]
986,70947851,474,14579099,2016-05-21 12:03:57,2016-05-25 17:24:42,closed,Removing duplicate show_link kwarg,"There is a duplicate keyword argument in the `iplot_mpl()` docstring.
",0,1,[]
987,70900044,473,14579099,2016-05-20 18:45:58,2016-05-27 15:47:26,closed,Distplot fix,"Fixes issue #459 
![screen shot 2016-05-20 at 2 45 18 pm](https://cloud.githubusercontent.com/assets/12302455/15438296/81b0600a-1e99-11e6-8bac-afdb3659f845.png)
",7,9,[]
988,70888843,472,14579099,2016-05-20 17:20:56,2016-05-25 15:23:27,closed,vectorizing some trisurf functions for performance improvement,"First pass at optimizing some of the trisurf machinery. This basically just vectorizes things where it used to use list comprehensions / loops. I also tried to make functions accept a vector of inputs rather than a single number as an input to reduce redundant computation etc. Might have missed some things, but for me this brought the `_trisurf` function from ~16 seconds to ~2 seconds (!).

We should make sure that the outputs are the same, but I ran nosetests on `test_figure_factory.py` and it passed for me. If you all like the changes, then I can clean up the comments and change docstrings as necessary.

WDYT? @jackparmer @Kully (couldn't find Emilia's handle w/ a quick search, sorry if I'm missing other folks)
",12,1,[]
989,70852897,471,14579099,2016-05-20 13:15:56,2016-06-14 17:08:35,closed,Violin,"@jackparmer @theengineear @cldougl 

First Pull Request for Violin Plots.

Lot of the work is done. Some notes:
-tests need to be added
-organize some of the color testing a little better
-I changed some of the preexisting color-converting functions to allow use for singleton color-strings

Right now, colorscaling just colors multiple violin plots from left to right with equal weight across. Good ideas could be colorscaling by some of the stat_params including median, lowest value, quartiles, etc.
",19,28,[]
990,70735453,469,14579099,2016-05-19 17:42:12,2016-05-20 03:33:00,closed,V1.10.0 - Inject plotly.js into the output cell on every `init_notebook_mode` call,,8,3,[]
991,70733448,468,14579099,2016-05-19 17:27:16,2016-05-20 04:07:50,closed,make init_notebook_mode idempotent,"Fixes https://github.com/plotly/plotly.py/issues/458

Running `init_notebook_mode` injects plotly.js into the output cell.
Before, if you ran it twice, it would clear the output cell on the
second call and remove plotly.js from DOM.
This was deceiving, because any existing plots on the page wouldn’t
disappear even though their underlying plotly.js was no longer present.
But, if you refresh the page, the plots would not render (as plotly.js
was no longer in the output cell)
",1,2,[]
992,70710504,467,14579099,2016-05-19 15:03:48,2016-05-19 16:39:53,closed,updated changelog to reflect version update for offline fix,"@BRONSOLO 
Going to update Pip with the new version that includes the offline bug fix
",1,2,[]
993,70593230,466,14579099,2016-05-18 20:25:22,2016-05-19 14:40:56,closed,Ensure plotlyjs loaded,"Fixes issues with offline mode not working after refreshes.
### In Brief:
- Check the DOM for plotly.js rather than the global flag in python
- Load it on all offline notebook plot methods
- Clean up some unused code and deprecate `init_notebook_mode`
",4,6,['bug']
994,70562170,464,14579099,2016-05-18 16:46:34,2016-05-18 21:38:14,closed,Reverted the check to see if offline mode was ever initialized. ,"@chriddyp: Reverts #379 
Just commented out the check, could just delete it though. Also when I created a branch of master, it came with a change in `chunked requests`.
",1,1,[]
995,70276114,462,14579099,2016-05-16 23:04:48,2016-05-17 03:22:21,closed,Use `TestCase` in `test_stream.py` tests.,"Just a quick clean up so we don't need to use `_eq`.
",1,1,[]
996,70270413,461,14579099,2016-05-16 22:11:29,2016-05-17 15:54:57,closed,Https stream,"@theengineear @chriddyp please review. Required for plotly/plotly.py#457 fix.
related: https://github.com/chriddyp/chunked_requests/pull/7
- [x] tested locally
",7,26,[]
997,70264468,460,14579099,2016-05-16 21:27:17,2016-06-18 23:38:02,closed,First PR for Gantt Charts - Adding Tests Very Soon,"Adding Tests Very Soon
",19,28,[]
998,69449223,456,14579099,2016-05-10 05:01:35,2016-05-10 13:19:38,closed,"In python 3 `map` is a generator, `list()` it!","In python 2, you typically get `list` objects. For efficiency (AFAIK) in
python 3 you’ll get a generator. Note that you can’t iterate through
a generator more than once though!
",2,1,[]
999,69362061,455,14579099,2016-05-09 15:17:21,2016-05-13 16:10:12,closed,added the option for multiple binsizes,"@cldougl 
Probably need to write a test.
",7,7,[]
1000,68745728,453,14579099,2016-05-03 17:44:28,2016-05-12 22:49:42,closed,First Push for Trisurf Plots,"@jackparmer @theengineear @cldougl 

This is the PR for create_trisurf() in FigureFactory.

The functionality so far is this: it takes arrays x, y and z (the vertices of the points) which are to be created outside the function. This requires a _import numpy _and _from scipy.spatial import Delaunay_ in the notebook.

It looks pretty cool right now. Like the scatterplotmatrix, you can enter a Plotly colorscale name in colorscale= to get your heatmap as a function of the z-coordinate. Or you can opt to enter a list of 2 rgb tuples (or normalized rgb tuples, where each coordinate is between 0 and 1).

I also included a doc string which outputs some cool looking plots.

Things I need to do:
-add tests (which I can do now!)
-potential **kwargs

Bring forth your comments!
",18,29,[]
1001,68438863,451,14579099,2016-04-29 21:48:48,2017-02-02 17:59:03,closed,Version Checks (Fixed Conflicts),"@cldougl 
",3,12,[]
1002,68066898,446,14579099,2016-04-27 14:51:55,2016-04-27 21:30:55,closed,Updating offline js library from 1.9.0 to 1.10.0,"@cldougl 
",1,4,[]
1003,66617109,441,14579099,2016-04-15 09:52:26,2019-09-11 13:57:32,closed,Customize the titlefont of a subplot within make_subplots.,"When using plots in e.g. presentations, the default font for subplot titles is usually too small to cut it. This allows the subplot_titlefont to be set within the make_subplots kwargs.
- The default is still Font(size=16)
- I've added a single test.

This is my first PR here, apologies if I've missed something.
",2,1,"['question', 'make_subplots']"
1004,66582878,440,14579099,2016-04-15 02:39:31,2016-04-16 04:17:30,closed,Fix for 1.9.8 offline plotting issue,"https://github.com/plotly/plotly.py/issues/439
@cldougl, @chriddyp 
",1,5,[]
1005,66426278,438,14579099,2016-04-14 04:03:15,2016-04-14 15:11:04,closed,update offline to plotlyjs 1.9.0,,5,1,[]
1006,66216764,436,14579099,2016-04-12 19:49:39,2016-04-29 21:49:48,closed,Check Version on `import plotly`,"Related to Issue https://github.com/plotly/plotly.py/issues/340.  
I'm reading the version from version.py from the plotly.py repo and comparing to the local version.py. 
@chriddyp , @cldougl 
",2,9,[]
1007,65239564,433,14579099,2016-04-05 01:42:58,2016-04-11 20:00:00,closed,"correct the wrong spelling of ""kernal"" to ""kernel""",,2,1,[]
1008,65199218,432,14579099,2016-04-04 19:28:17,2016-04-04 22:59:29,closed,update plotly js version 1.5.2 -> 1.8.0 for offline,,3,2,[]
1009,63182974,424,14579099,2016-03-17 07:29:45,2016-03-17 07:30:15,closed,Require plotly before attempting to show a plot,"When refreshing a notebook, some plot may not be shown because the plotly
initialization script did not finish before the plot was shown. It results in a
console error like 'Plotly is not defined'. This patch fixes this error by
making every plot require plotly.
",1,1,[]
1010,62265384,420,14579099,2016-03-09 17:30:09,2016-04-11 20:31:06,closed,Jupyter Notebook: Fix window.Plotly not defined error when running all cells,"In Dynamic Dashboards (https://github.com/jupyter-incubator/dashboards_server/issues/108) we need to be able to execute all code cells of a Jupyter Notebook file. Currently Plotly does not work, with the error that `window.Plotly` is not defined. This problem can also be observed in a notebook when performing a ""Run All"" of all cells.

@jdfreder's fix in #412 preserves requirejs when plotting in offline mode in the notebook, but causes an error if doing a ""Run All"" cells. The reason for this is the initialization of `window.Plotly` [occurs in a requirejs function](https://github.com/plotly/plotly.py/blob/127ebc5f0be979c52847a6427a2ada3b11fc4352/plotly/offline/offline.py#L69) and is immediately followed by an attempt to access it [outside of a requirejs function](https://github.com/plotly/plotly.py/blob/127ebc5f0be979c52847a6427a2ada3b11fc4352/plotly/offline/offline.py#L132). At this point `window.Plotly` won't yet be defined since the definition will execute asynchronously after the attempt to access it.

To fix, the call to `Plotly.newPlot()` could happen inside its own requrejs function, making use of the 'plotly' requirejs module. I have made the minimal change in this PR to demonstrate. (I kept the requirejs function that defines `window.Plotly`, but it could potentially be removed in favor of using the requirejs module only.) It works for me when doing a ""Run All"" in the notebook and also works when deploying a dashboard read from the notebook file.

This may also be related to #394 if the conversion of notebook to slides is doing a ""Run All"".
",4,1,[]
1011,61770436,417,14579099,2016-03-04 20:59:26,2016-05-12 08:15:44,closed,Adding Scatterplot Matrix to FigureFactory,"@cldougl 

This is the first PR for the Scatterplot Matrix in the FigureFactory class in tools.py. The function currently takes in only pandas dataframes, does sanity checks on the dataframe (more than one column, either strings or numbers within a column, etc.) and then builds a scatterplot matrix based on this input. There is an option for indexing by one of the columns which must be inputted by the user (parameter: index) and for either a scatterplot or histogram along the main diagonal (parameter: diagonal). 

Things I am working on implementing:
- I want to integrate a jitter parameter that adds random noise to the scatterplot so that densities can be easily seen in a plot. I already have a jitter parameter, but it only works in certain places.
- I also am working to add to more options for diagonal plots, such as a 2d density and box plot. 
- Adding more parameters and options to the scatterplot (eg. showgrid) is also another thing I am working on expanding.
  ![dkjb stats](https://cloud.githubusercontent.com/assets/10369095/13549171/37eaa18a-e2ce-11e5-8ff0-56ba028b7d71.png)
  ![heart rate against time](https://cloud.githubusercontent.com/assets/10369095/13549172/37eadd8a-e2ce-11e5-9d63-3f2ff6781419.png)
",44,30,[]
1012,61379364,416,14579099,2016-03-02 10:27:14,2016-12-30 17:06:58,closed,Fixes #414,Fixes #414 and #384,8,4,[]
1013,60272094,412,14579099,2016-02-23 01:24:11,2016-02-24 14:53:59,closed,Don't clobber the Notebook's require/requirejs/define instances,"It doesn't make sense to to clobber the require.js globals that live in the notebook for Plotly's offline mode.  Nor does it make sense to load the Plotly JS from the CDN when running in offline mode.  This PR uses requirejs named definitions and requirejs commonjs support to embed the plotly JS on the page.

This PR does not solve the workflow of getting the plotly.js build into the plotly.py repo.  In a separate PR that should be automated.

related to #408
closes #373
",5,2,[]
1014,59877853,411,14579099,2016-02-18 22:58:28,2016-02-19 17:00:17,closed,Update offline plotlyjs,"sanity :heavy_check_mark:ed  
cc @chriddyp ( @yankev )
",1,4,[]
1015,59859618,410,14579099,2016-02-18 20:40:27,2017-02-02 17:44:35,closed,Issue399 (updated),"Fix for Issue 399, with updates recommended in pull request #406.
",2,3,[]
1016,59673020,407,14579099,2016-02-17 16:49:26,2017-02-02 17:43:07,closed,Issue404,"Just extended the error message to include a reference to the help function: `help(sign_in)`.

@chriddyp @cldougl 
",3,4,[]
1017,59534978,406,14579099,2016-02-16 18:45:03,2016-02-18 20:42:29,closed,Issue399,"Changed the parameters for all the functions from taking on `linkText` and `showLink` to take on `config` (which is a dictionary of possible configurations).
",3,8,[]
1018,59381618,403,14579099,2016-02-15 15:56:25,2016-02-15 16:09:54,closed,test commit,"testing
",0,1,[]
1019,59064180,400,14579099,2016-02-11 17:21:30,2016-02-23 00:53:28,closed,Remove useless line in offline plot function,"Hello all,

The last line on the snippet shown below (that should be clear in the commit diff) is useless as the `figure` variable is not used in `plot` function.

``` python
plot_html, plotdivid, width, height = _plot_html(
  figure_or_data, show_link, link_text, validate, '100%', '100%'
)

figure = tools.return_figure_from_figure_or_data(figure_or_data, validate)
```

Moreover, the same call to `tools.return_figure_from_figure_or_data` is done within `_plot_html`.
It seems this is left-out garbage in the code.

A simple pep8/flake8 integration on the tests could solve similar issues.
",2,1,[]
1020,56613609,392,14579099,2016-01-20 14:22:59,2016-02-18 16:30:49,closed,Added a space between attributes so that picky HTML parsers don't freak out,"The lack of space between the style attribute value and the seamless attribute in the following embed_code causes some parsers to consider the html code malformed:

`<iframe id=""igraph"" scrolling=""no"" style=""border:none;""seamless=""seamless"" src=""https://plotly.skd.midasplayer.com/~christophe.carvenius/28.embed"" height=""525px"" width=""100%""></iframe>`
",1,1,[]
1021,56514535,390,14579099,2016-01-19 19:39:24,2016-01-20 02:15:28,closed,Mpl offline,"@chriddyp @theengineear I forgot to update the changelog :disappointed: 
",1,2,[]
1022,56239991,387,14579099,2016-01-16 00:55:51,2017-01-02 16:59:20,closed,raise an exception on unhandled kwargs,,4,1,[]
1023,56177545,386,14579099,2016-01-15 14:50:35,2016-01-17 23:19:48,closed,mpl_to_plotly offline,"[PR from arsenovic](https://github.com/plotly/plotly.py/pull/366) : 
`iplot_mpl()` allows offline matplotlib figure conversion
for ipython notebook inline mode.

`plotly_takeover()`  is a compound command that allows an entire
notebook session that was written using matplotlib to use offline
plotly without any modification.

plus 
- `plot_mpl()` allows offline matplotlib figure conversion independent of Ipython notebooks.
- docstrings / examples
- tests
",6,7,[]
1024,55377221,380,14579099,2016-01-07 19:12:50,2016-07-28 17:29:08,closed,Conda build,"Somewhat of a follow on to #136.

All of our (Jupyter/IPython) Docker environments rely on `conda`, which means we need this setup in order for it to be packaged with our conda environments.
",6,3,[]
1025,54900796,379,14579099,2016-01-02 04:07:31,2016-02-23 00:52:33,closed,Change to offline.init_notebook_mode(),"Make `init_notebook_mode()` only import the JS library once. Otherwise if someone puts it at the top of a Jupyter cell and it gets executed every time (typical pattern of usage?), it adds ~1 s to the cell's execution time.
",1,1,[]
1026,54777301,378,14579099,2015-12-30 04:46:48,2016-01-11 17:24:37,closed,offline `plot` command - fixes https://github.com/plotly/plotly.py/pull/378,"Description: Write Plotly graphs to an HTML file from Python.

Fixes - fixes #378 
",9,10,[]
1027,54198487,377,14579099,2015-12-20 12:27:30,2016-12-28 21:45:06,closed,Fix height to px conversion in iplot function,,1,1,[]
1028,53029360,372,14579099,2015-12-08 19:52:07,2015-12-08 19:52:17,closed,Sync subs,"version bump -- cc/ @theengineear 
",2,2,[]
1029,53018812,371,14579099,2015-12-08 18:26:24,2015-12-08 19:29:45,closed,sync chunked requests proxy updates,"ping @theengineear or @chriddyp 
",4,2,[]
1030,52584506,366,14579099,2015-12-03 20:02:12,2016-01-15 14:50:55,closed,added iplot_mpl() and plotly_takeover(),"`iplot_mpl()` allows offline matplotlib figure conversion
for ipython notebook inline mode.

`plotly_takeover()`  is a compound command that allows an entire
notebook session that was written using matplotlib to use offline
plotly without any modification.

the later idea was taken from
https://github.com/jakevdp/mpld3/blob/202792bcddbfe957ade08a5085691ab176a4563d/mpld3/_display.py#L363
",3,1,[]
1031,52211095,363,14579099,2015-12-01 03:13:15,2015-12-01 14:46:53,closed,":bug: get the correct plotly_domain, not the ""session""'s",,2,3,[]
1032,51842492,361,14579099,2015-11-25 20:28:03,2015-11-26 18:16:35,closed,go back to using git protocol,"looking to revert the protocol change. context: https://github.com/plotly/plotly.py/pull/325#issuecomment-147120176

ping @theengineear 
",4,1,[]
1033,51740087,359,14579099,2015-11-25 01:04:20,2015-11-26 21:47:35,closed,Annotated heatmap,"- add annotated heatmaps and tables to FigureFactory
",21,12,[]
1034,51641033,358,14579099,2015-11-24 10:27:45,2015-12-30 04:53:03,closed,Add offline plotting that doesn't depend on Jupyter,"For discussion. Fixes #353
",4,2,[]
1035,50756804,348,14579099,2015-11-15 21:26:16,2015-11-17 15:15:13,closed,Updated offline mode,,11,12,[]
1036,49328370,343,14579099,2015-10-30 22:11:54,2015-11-02 15:17:00,closed,Adapt big data warning for 'scattergl' graph objects,"@theengineear @chriddyp 
",2,5,[]
1037,48972301,342,14579099,2015-10-28 07:26:59,2015-10-28 07:27:14,closed,Accidentally didn’t call method on child.,"Ack. Forgot to actually call `get_ordered()`. Not going to version bump, just going to overwrite the build.
",0,1,[]
1038,48970077,341,14579099,2015-10-28 06:46:02,2015-10-28 06:57:39,closed,Add back ordering,"Closes #290

I won't say fixes, but it does add back some predictability, which is needed for testing in https://github.com/plotly/streambed/pull/4063.
",2,2,[]
1039,48349935,337,14579099,2015-10-21 15:47:28,2015-10-21 15:47:52,closed,Accidentally changed submodule code.,"Changed a matplotlib import inadvertently in a submodule earlier.
",1,1,[]
1040,48260298,334,14579099,2015-10-20 21:26:38,2015-10-22 16:31:49,closed,-update dendrogram examples in docstring,,3,2,[]
1041,47618146,333,14579099,2015-10-14 05:01:59,2015-10-21 14:52:58,closed,Don’t hard-code repo name in circle-stuff.,"Just uses the `$CIRCLE_PROJECT_REPONAME` environment variable that circle provides.
",14,12,[]
1042,47536153,332,14579099,2015-10-13 13:57:46,2016-12-28 21:43:14,closed,Add a `get_plot_url_by_path` beta function.,"User request that’s pretty easy to shoot a tracer bullet out for.

We’ll probably want to make a full-on wrapper for the api, but this is
useful now and it’s being asked for.

Todo:
- [ ] :tiger2:s
",2,2,[]
1043,47373392,330,14579099,2015-10-11 19:14:45,2015-10-23 12:36:15,closed,1.8.9 - proxy support for streaming,"fyi @theengineear @kiwiroy - bumping the version and pushing up to pip
",3,2,[]
1044,47357095,327,14579099,2015-10-11 00:24:22,2017-02-02 17:42:37,closed,typo and grammar,,2,3,[]
1045,47342249,325,14579099,2015-10-10 09:51:51,2015-10-11 12:47:40,closed,sync chunked_requests after chriddyp/chunked_requests#5 merge 62581cf3a1 and address #324,"looks correct, though I modified URLs in `.gitmodules` as I can not connect GitHub otherwise :blush: 
",5,2,[]
1046,46656740,318,14579099,2015-10-02 16:49:49,2015-10-06 17:58:11,closed,check that secret graphs are accessible before returning them.," if they aren't accessible, attempt to add the share key again

related to https://github.com/plotly/streambed/issues/4089
",7,8,[]
1047,46625419,317,14579099,2015-10-02 11:20:14,2017-02-02 17:40:11,closed,Cleaner import checking,"PR 2: Use a single, central place to check whether optional deps are imported and _get_ them from a central source.

(WIP still based off another cleanup branch #316)

This attempts to de-uglify how we do protected imports. One module to rule them all :ring: 

Todo:
- [ ] definitely need some :tiger2:s on the new module
",3,21,[]
1048,46613856,316,14579099,2015-10-02 08:46:22,2016-12-28 21:39:30,closed,Move figure factory,"PR 1: Move FigureFactory out of tools.py!

We can be nice and raise a deprecation warning. Here's what that looks like:

![image](https://cloud.githubusercontent.com/assets/6611546/10242665/aa63b5ca-691c-11e5-80fb-60526dfd2ecc.png)
",1,16,[]
1049,46482979,314,14579099,2015-10-01 04:05:11,2015-10-01 04:05:23,closed,Add graph reference changelog,"Just adding to the changelog.
",0,2,[]
1050,46443372,312,14579099,2015-09-30 19:11:25,2015-10-02 07:52:06,closed,Dendrogram andrew tweaks,"This is based off of @OxanaSachenkova 's branch, which added `Dendrogram` plots \o/\o/\o/

Todo:
- [x] version bump
- [x] changelog
",11,38,[]
1051,46389718,311,14579099,2015-09-30 11:24:59,2016-12-28 21:37:32,closed,First crack at `resources`.,"Something I've been thinking about for a little while now.

We basically allow users to interact with `Figure` and `Grid` objects, but these are really just _part_ of general `File` objects.

This is sorta what I've got in mind right now (and this is weakly implemented already in this PR):

```
from plotly import resources

my_file = resources.FileResource(fid='theengineear:3409')
my_file.resource.filename = 'nah, it should be named this'
my_file.put()  # if we don't have an error, things are good!
my_file.permanent_delete()  # ERROR trash first!
my_file.trash()
my_file.permanent_delete()
```

This isn't really ready to be merged in, but I wanted to open up the discussion with some actual code.
",8,1,[]
1052,46375777,310,14579099,2015-09-30 08:53:40,2015-09-30 14:43:20,closed,Clean up old graph reference stuff,"Removing all the old graph_reference files and submodule-stuff.
",3,4,[]
1053,46365440,309,14579099,2015-09-30 06:26:16,2015-10-02 07:52:40,closed,Speed up circle artifacts,"Response to:

> yo, ever seen this 19 min artifact build? circle's killing me today!
",3,6,[]
1054,46364492,308,14579099,2015-09-30 06:07:14,2015-10-01 11:48:34,closed,"Return `Figure`, not `dict`.","Thought I already opened this one up for review.

Like the description says :)
",3,1,[]
1055,46311577,307,14579099,2015-09-29 18:09:59,2015-09-29 18:54:46,closed,Add a test to force us to update default schema!,"Gah, we'll never ever do this if it doesn't error on circle. The failure prints out instructions to fix it... so maybe it won't even be confusing when our future selves encounter it? :)
",2,3,[]
1056,46304937,306,14579099,2015-09-29 17:08:59,2015-09-29 17:09:39,closed,version bump --> 1.8.5 (auto-sycn graph reference),"Just for consistency, it's a new branch :)
",1,1,[]
1057,46236398,305,14579099,2015-09-29 04:52:34,2015-09-29 14:19:23,closed,Dataframes have a `to_string` method!,"We try to use duck-typing here, but it doesn’t quite make sense.
",2,2,[]
1058,46077927,304,14579099,2015-09-26 08:10:54,2015-09-27 06:48:10,closed,Clean up error handling,"Fixes #295

todo:
- [x] stop using class names in errors
- [x] auto-add help to errors
- [x] simplify error creation
",4,21,[]
1059,45962100,303,14579099,2015-09-24 23:24:19,2015-09-30 21:26:09,closed,fix config settings and add the rest of plot options to config,"hey @theengineear @cldougl can you take a look at this? I found the previous plot_option code super confusing to navigate, so I rewrote a bunch of it. Also, I added a ton of tests.

this fixes #302 
",5,45,[]
1060,45572612,299,14579099,2015-09-21 16:53:54,2016-12-28 21:35:22,closed,Raise for bad plot options in `_send_to_plotly`,"Fixes #298

This is backwards incompatible as obsolete `plot_options` have previously been silently ignored. It _is_ a little misleading and has caused confusion for users (#298).

Another option is to allow `layout` again, but _only_ if (1) data is given as the first argument or (2) layout is not defined in the figure. We could just throw a deprecation warning and then stop supporting it in `2.x`?
",2,1,[]
1061,45048772,292,14579099,2015-09-15 13:28:26,2015-09-26 02:20:24,closed,Update graph reference,"Alright, the real deal!

TODO:
- [x] add back deprecation warnings with `_deprecated`
- [x] ~~use `hrName`~~
- [x] wait, don't use hrname :) (it adds unnecessary maintenance overhead)
- [x] use `_isSubplotObj`
- [x] stop hard coding meta keys
- [x] skipped tests need attached GH issues
- [x] :tiger2: for `graph_objs_tools.py`
- [x] discuss #291 (copy stuff), #290 (key ordering), #289 (pretty `help`), #293 (schema as singleton)
- [x] :dolls: need a final revisit
- [x] fix up some test code that uses deprecated keys
- [x] incorporate new deprecated `role` definitions
- [x] ~~use descriptions from deprecated fields in warnings~~ i'm now pointing users to call help appropriately. i think this is good enough.
- [ ] gotta make sure this doesn't break anything in cufflinks
- [x] don't add _new_ class definitions (only for traces)
",44,113,[]
1062,44265024,286,14579099,2015-09-04 21:52:08,2015-09-15 13:29:48,closed,Test plot schema,"JUST A TEST! DON'T REVIEW!
",2,4,[]
1063,44075874,284,14579099,2015-09-03 07:19:27,2015-09-19 06:04:35,closed,Download and cache plot schema (or always download if no file permissions).,"This PR handles getting the _new_ plot schema downloaded/cached/backed-up within the old framework. There's no change to code usage here, just JSON handling.

Note that if enterprise doesn't have the new endpoint defined, the default one can be used. This _doesn't_ guarantee that the plotlyjs running on the enterprise machine is in sync with the plotlyjs used to create the default though! In particular, the `autotick` to `tickmode` change on axes inside the mpl renderer may be problematic. Hopefully this will get knocked to a _warning_ though (`_deprecated`) and will eventually stabilize once enterprise instances get updated versions.

Todo:
- [x] :tiger2: ~~for no file permissions and loaded graph reference~~ this will get checked on circle
- [x] :tiger2: for proper caching
- [x] :tiger2: for working offline if it's been downloaded
- [x] ship a default copy of plot-schema per version, actually this is vital to keeping enterprise customers working! super important! otherwise they won't have this new url when they upgrade!
- [x] manually update our default schema before we close this pr.
",10,16,[]
1064,44013151,281,14579099,2015-09-02 16:29:33,2015-09-15 09:08:25,closed,Remove streaming validation.,"Related to #228
",1,2,[]
1065,42089514,278,14579099,2015-08-11 03:29:37,2015-08-11 21:39:38,closed,decode bytes for python 3.3,"hey @aneda - saw your comment in slack, thought I'd take a look. here's a fix to your tests, and here's how I figured it out:

1 - Installed python3.3 (http://www.python.org/ftp/python/3.3.5/python-3.3.5-macosx10.6.dmg)
2 - Made a 3.3 virtual environment:

```
cd ~/Repos
mkdir venvpy33
cd venvpy33/
virtualenv -p /usr/local/bin/python3.3 . # /usr/local/bin/python3.3 found by calling $ which python3.3
```

added an alias to my `.bash_profile`:
`alias v.33='source ~/Repos/venvpy33/bin/activate'`

3 - Ran the tests with `--pdb`

```
v.33
pip install nose
nosetests plotly/tests/test_core/test_plotly/test_plot.py --pdb
```

4 - the traceback happens at the `json.loads` line:

```
new_response_data = json.loads(new_response.content)
```

```
Traceback (most recent call last):
  File ""/Users/chriddyp/Repos/python-api/plotly/tests/test_core/test_plotly/test_plot.py"", line 223, in test_plot_url_response_given_sharing_key
    py._send_to_plotly(fig, **kwargs)['url'])
  File ""/Users/chriddyp/Repos/python-api/plotly/plotly/plotly.py"", line 1440, in _send_to_plotly
    r['url'] = add_share_key_to_url(r['url'])
  File ""/Users/chriddyp/Repos/python-api/plotly/plotly/plotly.py"", line 1394, in add_share_key_to_url
    new_response_data = json.loads(new_response.content)
  File ""/Library/Frameworks/Python.framework/Versions/3.3/lib/python3.3/json/__init__.py"", line 316, in loads
    return _default_decoder.decode(s)
  File ""/Library/Frameworks/Python.framework/Versions/3.3/lib/python3.3/json/decoder.py"", line 351, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
nose.proxy.TypeError: can't use a string pattern on a bytes-like object
```

5 - googling ""python3.3 json.loads can't use a string pattern on a bytes-like object"" led me here: http://stackoverflow.com/questions/21436163/typeerror-cant-use-a-string-pattern-on-a-bytes-like-object, and here: https://bugs.python.org/issue10976, which gave the fix.

and finally here is a really good, must-read reference on unicode: http://www.joelonsoftware.com/articles/Unicode.html
",0,1,[]
1066,42027747,277,14579099,2015-08-10 14:46:12,2015-08-10 14:54:12,closed,bump version for adding candles with boxplots,,1,1,[]
1067,41889610,276,14579099,2015-08-07 13:06:35,2015-08-07 17:11:10,closed,candlestick with boxplots,"- re
  https://github.com/plotly/streambed/pull/3291#issuecomment-128185914 if
  we want to use the box plot solution for candles this seems simpler
  @jackparmer @chriddyp
",4,1,[]
1068,41688122,275,14579099,2015-08-05 14:56:15,2015-09-17 17:52:55,closed,Distplot,"- add distplot to FigureFactory
- add `validate_displot()` method to tools.py
- add core tests for distplot parameters
",9,19,[]
1069,41557912,274,14579099,2015-08-04 11:05:04,2015-10-01 04:15:25,closed,Dendrogram class,"Hi all, please have a look at the dendrogram wrapper and let me know if you want to add anything else at this point. 
All feedback is welcome! 
",10,17,[]
1070,41305556,272,14579099,2015-07-31 04:00:47,2015-08-03 22:57:07,closed,Add defaults check,"Convenience method to help us check differences between config defaults and user config.
",2,2,[]
1071,41294482,271,14579099,2015-07-30 23:45:44,2015-07-31 16:16:20,closed,change TraceFactory to FigureFactory,"- Remove `TraceFactory()`
- Add `create_quiver`, `create_streamline` and all validation methods
  to `FigureFactory`
- add layout dict (with `hovermode` set to closest) to `create_quiver`
  and `create_streamline` and return fig
- update docstrings to reflect these changes
- update TraceFactory tests -> FigureFactory tests
",2,3,[]
1072,41074807,270,14579099,2015-07-29 00:02:53,2015-07-29 02:26:43,closed,Finance fixes,"@cldougl 
",0,9,[]
1073,40974450,268,14579099,2015-07-28 04:31:16,2015-07-28 15:17:10,closed,Decrease chance of collisions… by a lot. (more),"Now we need > 10,000,000 attempts before having a .01% collision chance.
I.e., should be good.

Referencing: https://github.com/plotly/python-api/commit/e59f6ad3736b5d19b92fc85c8713c6092b51693f
",2,1,[]
1074,40820016,266,14579099,2015-07-24 22:00:52,2015-07-27 15:33:37,closed,Add scale param to images,"check it @cldougl @aneda @theengineear @BRONSOLO 
",5,7,[]
1075,40504250,264,14579099,2015-07-21 21:02:12,2015-08-12 22:26:31,closed,Secret key,"@theengineear @chriddyp @cldougl 
Hey, this is a rough draft for secret_key.  This only works for plot (py.plot(...)).  I haven't done any tests and I am working on iplot (being stuck there).  So I wanted to check if I am on the right track and this is what you had in mind.  Thnaks!
",35,66,[]
1076,39989676,261,14579099,2015-07-15 05:40:18,2015-07-16 16:37:12,closed,Config file safe tests,"Add some protective isolation of session and file config/credentials between unit tests. This only works when you inherit from the new `TestCase` (`PlotlyTestCase`)
",3,5,[]
1077,39984165,260,14579099,2015-07-15 03:00:54,2015-07-20 20:43:42,closed,Config plot option,"@theengineear @chriddyp @cldougl 
This is a draft for config_plot_option (world_readable).  I haven't tested for python 3 yet but I wanted check if I am on the right track 
",16,21,[]
1078,39972447,259,14579099,2015-07-14 22:59:30,2015-07-29 05:28:04,closed,add ohlc chart to TraceFactory,"- add ohlc chart as 2 TraceFactory methods so
  `TraceFactory.create_ohlc_increasing()` returns a trace of the
  increasing data and `TraceFactory.create_ohlc_decreasing()` returns a
  trace of the decreasing data. In these charts increasing and decreasing
  periods are typically represented by different colours (default green &
  red).
- pull flatten method out of `_Quiver` so other charts can call it
",24,28,[]
1079,39441736,254,14579099,2015-07-08 05:00:03,2015-07-08 05:17:12,closed,dont overwrite PLOTLYENV if it already exists,"fyi @etpinard @BRONSOLO  @theengineear , just changing: 

```
window.PLOTLYENV = {""BASE_URL"": ""asdf""};
```

to 

```
window.PLOTLYENV = window.PLOTLYENV || {};
window.PLOTLYENV.BASE_URL = ""asdf"";
```
",1,1,[]
1080,39394501,253,14579099,2015-07-07 17:18:34,2016-12-28 21:34:26,closed,Revamp streaming,"Todo:
- [ ] setup a mock streaming server to test?
- [x] make a fully async producer/consumer cycle for streaming
- [x] buffer streamed data so that user knows what data wasn't sent
- [x] implement our suggested linear/exponential back off rates (with eventual exceptions)
- [x] allow reconnect-on for both http error codes _and_ socket exceptions

This borrows from chunked requests, but moves the functionality so we don't need that extra submodule. It also attempts to clean up some of the code and make the reconnecting functionality more flexible.

The `asyncio` module comes standard in 3.4 and can be back ported to 3.3. `trollius` is a stand-in for `asyncio` that can be back ported into 2.7.

Though there's still a fair amount of low-level interaction, this attempts to make the interface a bit higher-level.
",6,17,[]
1081,39379353,252,14579099,2015-07-07 14:57:44,2015-07-09 16:02:52,closed,Remove python 2.6 support,"Since we're no longer officially supporting 2.6, instead of allowing half-broken experiences, just be clear about the change by removing our 2.6 code.

Also, a lot of our imports were pretty haggard, so I fixed them up a bit :)

Also, also, some of the test files were suffering badly with a case of the pep:8ball:s. I couldn't help myself.
",3,12,[]
1082,39306155,250,14579099,2015-07-06 20:16:28,2015-07-06 20:28:15,closed,version bump,"@chriddyp 
",0,1,[]
1083,39285570,249,14579099,2015-07-06 16:27:09,2015-07-06 19:36:04,closed,Add subplot titles,"updates
",2,7,[]
1084,39195886,248,14579099,2015-07-03 20:50:47,2015-07-03 21:05:32,closed,Remove optional requests [security] package.,"requests[security] installs pyOpenSSL which installs the latest cryptography.
The latest cryptography fails to install on many mac environments with a traceback like:
`dlopen(/Users/Chelsea/my_project_folder/venv/lib/python2.7/site-packages/cryptography/_Cryptography_cffi_a269d620xd5c405b7.so, 2): Library not loaded: libssl.1.0.0.dylib`

When [security] is included, anyone upgrading plotly with the common:
`$ pip install plotly --upgrade`
or installing plotly fresh from a virtual environment will install the latest cryptography library
which has a high liklihood of breaking for mac users. Once cryptography is broken, everything
that depends on it, like pip, is also broken, which is difficult to get out of!

Hopefully the installation for cryptography on mac is remediable, and we can safely let users
upgrade their security when installing plotly.

cc @cldougl @theengineear @etpinard @aneda 
",2,1,[]
1085,39191502,247,14579099,2015-07-03 18:26:51,2015-07-03 18:26:56,closed,add offline module,,0,1,[]
1086,39187304,246,14579099,2015-07-03 16:32:54,2015-07-10 07:15:05,closed,TraceFactory,,9,57,[]
1087,39187198,245,14579099,2015-07-03 16:30:36,2015-07-03 16:31:02,closed,Moving to python api,,0,34,[]
1088,39187127,244,14579099,2015-07-03 16:29:10,2015-07-05 21:09:19,closed,Add subplot titles,"PR titles for each subplot
",5,5,[]
1089,39122682,243,14579099,2015-07-02 20:29:29,2016-12-28 21:32:50,closed,first pass at rmving load_plotly,"@theengineear check it!
",1,12,[]
1090,39020893,242,14579099,2015-07-01 20:17:43,2015-07-02 14:13:15,closed,version bump,"@chriddyp - (pip upload weirdness = double bump)
",1,1,[]
1091,39015212,241,14579099,2015-07-01 19:12:55,2015-07-01 19:31:54,closed,version bump,"@chriddyp 
",1,1,[]
1092,38885236,239,14579099,2015-06-30 14:41:02,2015-07-01 15:30:55,closed,Plotly proxy auth,"@chriddyp @theengineear. This allows enterprise users working behind a proxy to specify `Plotly-Authorization` header as a `basic auth` header for our `API v2`. This frees up the `Authorization` header for the initial proxy layer. For now, it is up to the server admin to handle converting the `Plotly-Authorization` header to the expected `Authorization` header for basic auth once authorized over the proxy.  In the future, we could simply accept both `Plotly-Authorization` and `Authorization` headers in our back end so the server admin won't need to do anything. I added a flag in the config file for `plotly_proxy_authorization`. 

todo: 
- [x] extend the tests
",4,11,[]
1093,38726376,238,14579099,2015-06-28 14:33:39,2015-06-30 17:30:25,closed,Fix failing test and refact to TestCase.,"Attempting to fix the failing test due to a 409 --> 400 in plotly's /folders endpoint.
",13,2,[]
1094,38514342,236,14579099,2015-06-25 05:57:53,2015-07-03 17:31:58,closed,Plotly Offline,,21,28,[]
1095,37864891,233,14579099,2015-06-17 04:30:32,2015-09-30 06:12:16,closed,Opt out of special functionality,"If validation is off, we now don’t change things to graph objects. If
the user attempts to do certain things, a validation error will likely
pop up. But the normal creation of plots and things shouldn’t cause
issues.
",5,1,[]
1096,36322063,223,14579099,2015-05-27 16:23:40,2015-09-28 13:43:12,closed,Remove validation errors,"hey @etpinard @theengineear @aneda @cldougl - we're adding a ton of new features to the documentation. here's a stop-gap solution until graph_reference gets updated. i'm too embarrassed to tell folks to change their `Scatter` to `dict` and add `validate=False` to their scripts.

Also, I couldn't run tests locally, so i'm just running them on circle for now

```
♡ nosetests plotly/tests/test_core/test_graph_objs/
E
======================================================================
ERROR: Failure: IOError ([Errno 2] No such file or directory: '//anaconda/plotly-data/graph_reference/graph_objs_meta.json')
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""//anaconda/lib/python2.7/site-packages/nose/loader.py"", line 414, in loadTestsFromName
    addr.filename, addr.module)
  File ""//anaconda/lib/python2.7/site-packages/nose/importer.py"", line 47, in importFromPath
    return self.importFromDir(dir_path, fqname)
  File ""//anaconda/lib/python2.7/site-packages/nose/importer.py"", line 94, in importFromDir
    mod = load_module(part_fqname, fh, filename, desc)
  File ""/Users/chris/plotlygithub/python-api/plotly/__init__.py"", line 31, in <module>
    from plotly import plotly, graph_objs, grid_objs, tools, utils, session
  File ""/Users/chris/plotlygithub/python-api/plotly/plotly/__init__.py"", line 10, in <module>
    from . plotly import (
  File ""/Users/chris/plotlygithub/python-api/plotly/plotly/plotly.py"", line 40, in <module>
    from plotly import tools
  File ""/Users/chris/plotlygithub/python-api/plotly/tools.py"", line 22, in <module>
    from plotly.graph_objs import graph_objs
  File ""/Users/chris/plotlygithub/python-api/plotly/graph_objs/__init__.py"", line 12, in <module>
    from . graph_objs import (
  File ""/Users/chris/plotlygithub/python-api/plotly/graph_objs/graph_objs.py"", line 29, in <module>
    from plotly.graph_objs import graph_objs_tools
  File ""/Users/chris/plotlygithub/python-api/plotly/graph_objs/graph_objs_tools.py"", line 54, in <module>
    INFO, OBJ_MAP, NAME_TO_KEY, KEY_TO_NAME = _load_graph_ref()
  File ""/Users/chris/plotlygithub/python-api/plotly/graph_objs/graph_objs_tools.py"", line 47, in _load_graph_ref
    with open(path, 'r') as f:
IOError: [Errno 2] No such file or directory: '//anaconda/plotly-data/graph_reference/graph_objs_meta.json'

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (errors=1)
```
",2,2,[]
1097,36155580,222,14579099,2015-05-25 19:56:31,2015-07-03 16:32:11,closed,Add Quiver and Streamline Functions,"Quiver function plots velocity vectors and Streamline function plots
streamlines with directional arrows
",11,34,[]
1098,36115114,220,14579099,2015-05-25 03:38:24,2015-05-26 00:36:32,closed,Manifest file,"Fixes #22

This uses a MANIFEST.in file to ensure data gets into the sdist tar ball. It also removes the need to use the `pkg_resources` import, which seemed to be a problem for some folks.
",2,10,[]
1099,36114989,219,14579099,2015-05-25 03:34:02,2015-05-25 03:34:42,closed,Fix tests on master,"- Removes those `InsecurePlatformWarning` warnings discussed in #214.
- Runs the permissions tests again (removed during test overhaul)
",1,5,[]
1100,35136099,215,14579099,2015-05-11 15:04:47,2015-05-11 15:49:37,closed,Sync gref,"@theengineear @chriddyp 
",2,2,[]
1101,33686708,213,14579099,2015-04-20 17:19:44,2015-04-20 17:40:30,closed,version bump,"1.6.16

forget to bump version in https://github.com/plotly/python-api/pull/212
",0,1,[]
1102,33680881,212,14579099,2015-04-20 16:13:29,2015-04-20 17:17:11,closed,sync graph ref,"syncing graph ref

@theengineear @chriddyp 
",0,1,[]
1103,32926810,208,14579099,2015-04-09 05:47:15,2015-04-09 06:36:16,closed,Dataframeable figures,"`py.get_figure( .. ).to_dataframe()` === hooray.
",1,9,[]
1104,31696918,207,14579099,2015-03-22 22:54:11,2015-03-27 01:35:02,closed,Extend traces,,5,11,[]
1105,31280941,205,14579099,2015-03-16 20:25:17,2015-03-18 16:17:51,closed,Ipython 3 widgets,"This doesn't cover _everything_ listed in the [widget compatibility doc](http://ipython.org/ipython-doc/3/whatsnew/version3_widget_migration.html), but it gets our base functionality up and running again.

I don't fully understand why we're not supposed to use `display` anymore, but things seem to work as-is, and unless we run into an issue, I'm not sure it's worth taking the time now to change it.
",3,4,[]
1106,31129721,204,14579099,2015-03-13 14:26:09,2015-03-13 20:05:33,closed,Circle pyenv,"Just some fun with circle:
- circle didn't have the pyenv shims ahead of the system python binary's path therefore, even though we were setting up pyenv right, it was still using python 2.7 to run the majority of our test suite
- we _thought_ it was working because the variables were set right and we even got python 2.6- and python 3.x-specific errors because we _we're_ still catching the general module import test.
",2,32,[]
1107,30827602,203,14579099,2015-03-10 07:20:53,2015-03-11 18:12:09,closed,Override `JSONEncoder.iterencode`,"We do this to handle NaN, Inf, and -Inf

Fixes: #202

Todo:
- [x] convert these types to 'null'
- [x] update broken tests (that have NaN, Inf, etc)
- [x] write new _core_ test to specify this functionality
",3,4,[]
1108,30714375,201,14579099,2015-03-08 04:06:27,2015-03-13 20:06:25,closed,Move from genimage —> v2/images/,"Simple change to update to the new images endpoint.
",3,1,[]
1109,30133486,199,14579099,2015-02-27 01:10:16,2015-03-05 17:57:02,closed,Fix anaconda simplejson issue,"Fixes #197 

We now have an `extras_require` mapping to optional dependencies for python 2.6
",7,3,[]
1110,30128912,198,14579099,2015-02-26 23:44:05,2015-02-26 23:54:07,closed,Fix session module,"This is a tiny fix i noticed when using the new session-module sign_in. This hasn't been up on pypi yet, so no one _should_ have been affected by it.
",3,2,[]
1111,29759106,196,14579099,2015-02-21 20:08:08,2015-02-21 20:56:14,closed,dont return fullData on widget events,"fyi @theengineear 
",1,2,[]
1112,29508955,194,14579099,2015-02-18 08:45:01,2015-04-08 19:40:50,closed,Widget box,"This is an _extremely_ rough crack at adding a little Plotly container for instantiating, changing, saving, and linking to Plotly plots.
",1,8,[]
1113,29415981,192,14579099,2015-02-17 03:34:51,2015-02-20 20:58:00,closed,`plot` method in `GraphWidget`,"Usage: http://nbviewer.ipython.org/gist/chriddyp/e8c21827120220791684

@theengineear 
",3,7,[]
1114,28445022,186,14579099,2015-02-02 04:40:59,2015-02-26 18:44:32,closed,Session module,"This factors out the common _config/_credentials/_plot_options from plotly.py into a new session.py module which is meant to _not_ rely on other plotly modules such that all modules can safely import it to know what the current session-status is.
",5,7,[]
1115,28041441,184,14579099,2015-01-26 16:54:14,2015-01-26 18:33:53,closed,skip image tests (we’re removing these methods for now),"@chriddyp , just removed the tests for this.
",1,1,[]
1116,27979645,183,14579099,2015-01-24 17:51:56,2015-10-01 14:07:37,closed,Cached image iplot,"On calling `iplot`, render an image first then replace it with the interactive version once it loads. If offline, the image of the graph will still be viewable. Re-opening notebooks will be fast with the cached images.

Example: http://nbviewer.ipython.org/gist/chriddyp/e567a9d1dd659a6b397b
",3,1,[]
1117,27971231,182,14579099,2015-01-24 03:58:40,2015-01-27 00:27:05,closed,4x iplot load-time performance,"cc @theengineear 
",1,4,[]
1118,27966615,181,14579099,2015-01-24 00:22:51,2015-04-08 19:39:43,closed,Widgets save graph,"Some annoyingly-implemented save functionality.

You can just call `graph.save(filename='whatevs')`. We might want the save call signature to match py.plot, not sure.
",7,14,[]
1119,27931044,180,14579099,2015-01-23 15:25:35,2015-01-24 00:36:42,closed,Test import widgets,,2,6,[]
1120,27224770,178,14579099,2015-01-12 20:48:22,2015-01-12 20:52:06,closed,message-uids,"fyi @theengineear 
",1,2,[]
1121,27154966,177,14579099,2015-01-10 21:41:19,2015-01-14 17:56:09,closed,Widgets update syntax,"@chriddyp , this is the new (perhaps still-in-flux) syntax for postMessage.

I also include a fix for doubly sent messages to the iframe. Not sure where that was coming from, but this is a cheap fix that got me to where i needed to be with testing functionality.
",2,15,[]
1122,27154941,176,14579099,2015-01-10 21:39:35,2015-01-10 21:40:25,closed,Widgets update syntax,"@chriddyp , this is the new (perhaps still-in-flux) syntax for postMessage.

I also include a fix for doubly sent messages to the iframe. Not sure where that was coming from, but this is a cheap fix that got me to where i needed to be with testing functionality.
",0,5,[]
1123,27070945,175,14579099,2015-01-09 00:05:53,2015-01-09 06:17:05,closed,Add strict requirements for python 2.6. (more),"Though these requirements are unecessary for Python versions after 2.6,
they’re small, harmless libs to import. They ended up being included
in stdlib anyways.
",2,1,[]
1124,26976132,173,14579099,2015-01-07 18:19:13,2015-01-07 21:14:47,closed,make docstream copy pasteable; fix parentheses,"@etpinard 
",1,1,[]
1125,26925328,172,14579099,2015-01-06 23:03:13,2015-01-12 17:33:54,closed,load up widget.js code on import,"Referenced here: https://github.com/ipython/ipython/issues/7392
",1,2,[]
1126,26730452,171,14579099,2014-12-31 17:45:19,2015-01-22 22:34:34,closed,first pass at plotly-ipython graph widget,"usage: http://nbviewer.ipython.org/gist/chriddyp/98a3d27a33ecc044a393

![](http://i.imgur.com/69wyqjV.gif)

animation example - taylor series of sine (values update as you pan around) http://nbviewer.ipython.org/gist/chriddyp/9600fa8314e70ce89f06
![](http://i.imgur.com/r5X9hrK.gif)

cc @theengineear , @etpinard , @msund , @jackparmer 

pretty clean, pretty fun!
- [x] document syntax
- [x] basic message validation
- [x] decide on save state of zoom?
- [x]  `getFigure` postMessage spec, maybe implementation? 
- [x] protected imports? / determine strict dependencies
- [x] snapshot spec, maybe implementation?
- [x] default empty frame spec, maybe implementation?
",22,37,[]
1127,26482828,170,14579099,2014-12-22 21:43:40,2015-01-13 00:28:23,closed,Revamp tls.get_subplots,"@theengineear @chriddyp 

`tls.get_subplots` is in need of some revamping.

More info in this Asana [task](https://app.asana.com/0/11724913287040/12301257260418).

This [NB](http://nbviewer.ipython.org/github/etpinard/plotly-misc-nbs/blob/master/get-subplots/get-subplots.ipynb) shows off the new features.

Features wishlist:
- [x] Generate more complicated subplot arrangements e.g https://plot.ly/~etpinard/245
- [x] Assign shared axes
- [x] Set irregular horizontal and vertical spacing in-between subplots
- [x] Generate subscenes - subaxes subplot grid.
- [x] Generate insets with ease

API issue to resolve:
- [x] `rowspan` > 1 and `is_empty` https://github.com/plotly/python-api/pull/170#discussion_r22334996

**Solution**: Enforce specs to have dimensions (rows, columns). Use `None` to fill in cells over row / column spans.
- [x] Ordering of the `specs` keyword argument https://github.com/plotly/python-api/pull/170#issuecomment-68561185
",66,104,[]
1128,26480053,169,14579099,2014-12-22 20:49:52,2014-12-23 19:34:07,closed,Python3 bytes decoding fix,"An issue with escaping json saved in python 2 including patterns like:

`'[""\\""first param\\"", second param""]'`
",2,4,[]
1129,26473231,168,14579099,2014-12-22 18:45:31,2014-12-22 19:23:26,closed,Sync graph ref,"@theengineear @chriddyp 

Syncing up graph reference.
",1,2,[]
1130,26193503,166,14579099,2014-12-17 00:55:56,2014-12-17 01:49:25,closed,updated chunked-requests,"cc @theengineear 
",2,1,[]
1131,26098427,165,14579099,2014-12-15 20:25:09,2014-12-23 19:18:01,closed,Json encoder tweaks,"Some tweaks to the json encoder to make it easier to test.

The good news: timezone stuff is handled much better
The bad news: we are going to have to require the `pytz` module

`timezone` objects aren't standard until python 3 it seems?
",7,13,[]
1132,26008496,164,14579099,2014-12-12 22:42:30,2014-12-12 22:54:28,closed,"Masked numbers, datetime.date json encoding","@theengineear 

@tschaume - I added your example (https://gist.github.com/tschaume/d123d56bf586276adb98) to our tests - big thanks!
",1,6,[]
1133,25984115,163,14579099,2014-12-12 16:17:17,2014-12-23 19:21:44,closed,Chuck force clean dev,"@etpinard @theengineear @chriddyp - These changes are to address the errors we are getting when someone attempts to view the code associated with a given plot (e.g: https://plot.ly/~wormie_dk/1.json) and the type associated with any of the traces is either invalid (e.g. type = lines) or deprecated (ex. type = histogramx). The errors are occurring on our backend because we're using the python wrapper to force clean the json before making the translation. The biggest change I’m making here is forcing invalid types to be “scatter” (that’s what we’re doing on the front end anyway) and throwing a warning to the user. Thoughts?
",17,8,[]
1134,25876354,162,14579099,2014-12-11 04:38:51,2014-12-11 20:28:20,closed,Fix grid url for when `plotly_domain` is different than `plotly_api_domain`,"cc @BRONSOLO @theengineear 
",1,2,[]
1135,25227349,161,14579099,2014-11-29 21:17:34,2017-02-02 17:41:15,closed,Fix duplicate file name extension,"If a filename extension and a format are specified with the same string,
we create a file with a double file extension. Ie:

``` javascript
py.image.save_as(figure, 'filename2.png', 'png')
```

This will produce a file named filename2.png.png. When ext and format
are both present, the fix will only append format to the filename if the
format is different from ext. Ie:

``` javascript
py.image.save_as(figure, 'filename2.png', 'pdf')
```

This will create filename2.png.pdf.
",1,1,[]
1136,24889727,160,14579099,2014-11-22 15:49:44,2015-10-01 14:06:22,closed,Report spec,"@jackparmer creating a PR to make adding commentary a bit easier!
",14,2,[]
1137,24825205,159,14579099,2014-11-21 08:26:47,2014-12-12 21:41:17,closed,Add encoder to handle masked numbers.,"@chriddyp , it'd be cool to get your input on this one, I think you wrote the encoders in here originally. I need to write a test before we pass this off still too.
",4,13,[]
1138,24705425,156,14579099,2014-11-19 17:27:49,2014-11-19 18:27:12,closed,Remove iplot warnings in python3,"@theengineear @chriddyp 

Fixes https://github.com/plotly/python-api/issues/155
",1,5,[]
1139,24650883,154,14579099,2014-11-18 22:39:02,2014-11-18 23:18:54,closed,Circle redux,"@chriddyp , @scjody , @etpinard 

After trying (and failing) to get TravisCI to run these properly, I just wrote some scripts and stuck them in a `circle` directory --> `setup.sh` and `test.sh` which use environment variables set in the `circle.yml` (which i reinstated).

I cleared all the information from the settings in Circle for the project, I'd much prefer changes to how we test get committed with the repo anyhow...

I _still_ can't get the permissions test to work... I'd love to screen share with someone while i ssh into a build so i can show you the source of confusion... i'm sure it's simple, but i'm totally stuck on it.

Other than this, this branch is good to go. It tests 2.6, 2.7, 3.3, and 3.4. Run time is ~7 minutes, which is a little annoying, but honestly now that everything is cached between builds, it's not really any slower than the previous builds. We could run these concurrently in circle... but i'm sure we'll hit intermittent errors since we reach out to plotly's servers in the tests (i say i'm sure because this happened when trying to use Travis).
",4,63,[]
1140,24484642,149,14579099,2014-11-15 04:10:57,2014-11-15 23:14:10,closed,Fix pandas serialization,"cc @theengineear @etpinard @msund 
",2,7,[]
1141,24483989,148,14579099,2014-11-15 03:02:26,2014-11-15 03:13:37,closed,just forcing a travis run,"come on travis!
",0,1,[]
1142,24483840,147,14579099,2014-11-15 02:49:50,2014-11-18 23:20:32,closed,Add a simple travis file to test multiple python versions.,"checking out travis to see if we can just use this for the python repo
",1,3,[]
1143,24479264,146,14579099,2014-11-14 23:49:04,2014-11-17 18:19:55,closed,Fix IPython NB embed with custom width & height,"@theengineear @chriddyp 

Custom iframe width & height are back !

![image](https://cloud.githubusercontent.com/assets/6675409/5055265/e355d624-6c2e-11e4-971a-5ef11193f898.png)

Related Asana tasks [here](https://app.asana.com/0/11724913287040/19683595083832) and [here](https://app.asana.com/0/14918644452133/19591876078728)
",10,6,[]
1144,24478090,145,14579099,2014-11-14 23:21:21,2014-11-15 00:57:02,closed,Python version fixes,"huzzah, python 2.6, 2.7, 3.3, and 3.4 tests are run and are passing again!
",5,6,[]
1145,24463532,144,14579099,2014-11-14 19:16:39,2014-12-02 01:08:25,closed,grid and meta docstrings,"cc @theengineear @etpinard 
",6,5,[]
1146,24401240,142,14579099,2014-11-13 21:20:31,2014-11-13 22:46:48,closed,Set certificate,"There have been issues with the ssl certificate settings. Though this should be a last resort, these changes allow users to (a) set verify = False or (b) specifically define the certificate they are expecting.

Open issues:
- [ ] do we need to do this for streaming?? the plotly.plotly.Stream object has no place for a 'verify', is that a different topic? i can't reproduce this error to check because my streaming cluster is down.
",5,5,[]
1147,24275936,140,14579099,2014-11-12 08:05:27,2014-12-23 19:28:16,closed,Tarball link,"We recently had a user who could not install because the machine wasn't allowed to contact PyPI. This aims at making that simpler.

Basically, it's just a zip that allows you to nab six, requests, and plotly all at once and a guideline for how to do it all.
",9,11,[]
1148,24202607,139,14579099,2014-11-11 07:24:48,2014-11-11 08:20:39,closed,Yet another date formatter,"This is to fix the issue mentioned in SO: http://stackoverflow.com/questions/26833893/convert-time-series-plot-using-matplot-to-plotly
",1,6,[]
1149,24112408,138,14579099,2014-11-09 09:55:58,2014-11-09 10:12:55,closed,python 3 renames the urlparse module.,"plotly is broken on python 3 right now, this is a quickfix.
",4,2,[]
1150,24090030,137,14579099,2014-11-07 23:21:20,2014-11-19 01:10:21,closed,Add a heartbeat method to the py.Stream class (more below),"There are a number of ways to implement this, but this is the most
similar to how the rest of the library works. The best approach would
be to return messages from the server along with messages generated
in the library to give the user as much information as possible.
",7,1,[]
1151,24023944,136,14579099,2014-11-07 00:06:24,2014-12-23 19:28:33,closed,Binstar,"this is for our anaconda users
",5,6,[]
1152,23430191,134,14579099,2014-10-28 02:06:08,2014-11-04 22:12:14,closed,Andrew flexible sign in,"Instead of being stuck with this:

``` python
py.sign_in('me', 'my_key')
```

you can now do:

``` python
py.sign_in('me', 'my_key', plotly_domain='my plotly', plotly_streaming_domain='my streaming')
```

This came up for development and testing. We should be able to change these per-session. We _could_ hide all of this from the user, but i don't see the harm in exposing it.
",2,7,[]
1153,23255451,133,14579099,2014-10-23 20:08:40,2014-10-23 20:25:43,closed,updated graph ref?,,3,2,[]
1154,23209650,131,14579099,2014-10-23 06:54:12,2014-10-27 20:22:48,closed,Andrew better empty data error,"If a user accidentally sent an empty data set, they'd get back a myserious: `Uh oh, an error occured on the server.` error. Not helpful.

This is a more helpful, local error to help users debug faster.

(also, i think we spelled ""occured"" wrong in the backend :-1: )
",6,2,[]
1155,23193005,130,14579099,2014-10-22 21:57:22,2014-10-22 23:23:38,closed,Andrew fix pandas date formatter,"Fix for _all_ date formatters. I'm using a weak test for the formatter, just checking that 'DateFormatter' is in the name, among them are:

`DateFormatter`
`AutoDateFormatter`
`PandasAutoDateFormatter` (just importing pandas will implicitly change this...)
",2,3,[]
1156,23034863,128,14579099,2014-10-20 18:33:48,2014-11-07 17:55:37,closed,grid api,,7,52,[]
1157,22822913,127,14579099,2014-10-15 23:20:07,2014-10-22 21:58:24,closed,Missing keyword in string formatter (just not assigned),"Fixes an issue when lists have a specific number of chars for their repr.
",4,2,[]
1158,22813175,126,14579099,2014-10-15 20:39:18,2014-10-15 21:21:42,closed,Refactor dict comprehension which doesn't exist in python 2.6.,"passes test suite for all out supported python versions
",2,1,[]
1159,21909722,124,14579099,2014-09-29 01:23:15,2014-12-23 19:25:54,closed,Need to be more explicit about dependencies.,"@etpinard @chriddyp , some users with old versions of six were getting errors because the `add_metaclass` attribute wasn't created yet. This makes our dependency range explicit.
",2,1,[]
1160,21693458,123,14579099,2014-09-24 05:50:07,2014-09-24 05:52:05,closed,"Currently, username matches are case SENSITIVE (not sure why).","Might as well make our tested usernames exact matches.
",3,1,[]
1161,21560345,122,14579099,2014-09-22 06:01:37,2014-09-24 17:56:07,closed,"This is an incomplete fix, but a reasonable one for now.","Basically, mpl has its own datetime system, where it uses floating
point versions of the Gregorian calendar days. My attempt to use
ISO formatted date-time strings failed. Therefore, I'm actually
manually formatting the time-string based on epoch time after
converting from mpl_date -> epoch time. Whew!
",4,4,[]
1162,21511132,121,14579099,2014-09-19 17:17:24,2014-09-19 19:50:41,closed,Add a lock for folks using threading. Mucho helpful.,"I can't see any _downside_ to including a lock here. Basically, it
just says that two threads running in parallel can't touch the code
between the lock.acquire() <--> lock.release() statements
concurrently. We use it in low-level util functions to prevent
concurrent file reads/writes.

This was a bug that showed up while running our auto-documentation
examples.
",3,2,[]
1163,21421370,120,14579099,2014-09-18 09:28:51,2014-09-18 18:01:33,closed,Only copy over specific files into on sync.,"This should do it. verbose... but i'm ok with it.
",2,1,[]
1164,21417711,119,14579099,2014-09-18 08:10:58,2014-09-18 18:00:44,closed,Andrew remove import all,"A recent Plotly error unearthed an `import *` statement that made interpreting the root cause difficult. In an attempt to have that never be an issue again, this PR removes all the `import *` statements.

As a side note, the import \* statements were acting on modules with a well-defined `__all__` objects. However, that's not possible to tell from a Traceback, you still just see `import *`.

`__all__`: https://docs.python.org/2/tutorial/modules.html#importing-from-a-package
",2,6,[]
1165,21383172,118,14579099,2014-09-17 17:45:01,2014-10-15 19:13:39,closed,Make graph_objs.py compatible with new graph reference!,"- created from @theengineear 's factories branch
- adapt graph reference INFO to new graph reference structure
- add doc content (e.g. links to plot.ly examples and parent keys for a given obj)
",26,32,[]
1166,21364963,117,14579099,2014-09-17 13:13:43,2014-09-18 18:06:25,closed,"Fix ""'module' object has no attribute 'display'"" for old ipython.","IPython doesn't necessarily have this package organization. We're just more explicit about it now.
",4,1,[]
1167,20872034,116,14579099,2014-09-08 06:19:02,2014-09-17 12:19:00,closed,Both username and key were being set improperly during test suite.,"We should really refactor the test suite to prevent future
unexpected events like this.
",3,1,[]
1168,20440216,115,14579099,2014-08-28 14:04:07,2014-09-18 08:44:10,closed,update link to user guide (now on plot.ly),,3,1,[]
1169,20205603,113,14579099,2014-08-23 02:34:57,2014-08-23 02:43:26,closed,IPython only supported in 2.7 and > 3.2.,"Also, since unittest doesn't include skipIf in 2.6,
we can't use that...
",1,1,[]
1170,19871034,107,14579099,2014-08-15 22:27:01,2014-08-22 23:00:09,closed,subclass IPython.core.display HTML object for more flexibility.,"By defining `_repr_*_` functions, IPython will just call these
functions when a non-HTML representation is required.
",6,5,[]
1171,19119984,103,14579099,2014-07-30 21:49:24,2014-10-15 19:13:39,closed,Use type() to create new classes and a factory to instantiate.,"Some organizational changes. Previously, if you wanted to add a new trace say, TreeChart, you'd need to add it to graph_references, add a class definition in graph_objs.py, add multiple mappings in graph_objs.py and add it to a couple **all** lists... which is a lot.

The reason we need to dynamically create classes is because we never know when graph_reference has changed! Therefore, we just do it at import time... Therefore, we were using metaclasses, but this is a little overkill, we can just pass a compiled `__doc__` to `type()` to make a class for us. The doc won't be changing after this, so it's not a problem afterwards.
",2,2,[]
1172,19070542,101,14579099,2014-07-30 05:51:55,2014-07-31 01:03:47,closed,To string quote,"Some reformatting for the `to_string` method for graph objects.
",5,3,[]
1173,19004921,100,14579099,2014-07-29 02:06:16,2014-07-29 02:15:22,closed,Ditch circle yml,"circle ci testing stipulations are done on the circleci site now, not from the circle.yml file. a blank circle.yml file is included so that circle doesn't find a circle.yml file inside a subdirectory.
",1,4,[]
1174,18998246,99,14579099,2014-07-28 22:34:42,2014-12-23 19:27:32,closed,Add a version check for optional matplotlib dependency.,"Fixes Issue #98. 
",8,4,[]
1175,18970067,97,14579099,2014-07-28 14:28:24,2014-07-28 21:38:38,closed,Depreciated is a bit different than deprecated.,"Depreciated is a term from accountancy, and can mean a decrease in value of assets.
I believe it's not what we need here :)
",1,1,[]
1176,18865784,95,14579099,2014-07-24 21:36:38,2014-07-24 22:57:02,closed,Iss87,"In response to #87.
",7,5,[]
1177,18862390,94,14579099,2014-07-24 20:38:25,2014-07-24 22:09:56,closed,warn msg: plotly.sign_in -> plotly.plotly.sign_in,"cc @mkcor @theengineear @etpinard 
",2,2,[]
1178,18751057,93,14579099,2014-07-23 00:37:20,2014-07-24 23:02:08,closed,Circle update,"test core after uninstalling matplotlib. update tests accordingly -> better separation.
",1,4,[]
1179,18738829,91,14579099,2014-07-22 20:17:43,2014-07-22 20:23:45,closed,wrapped up matplotlylib import that got moved.,,0,1,[]
1180,18687071,89,14579099,2014-07-21 23:33:44,2014-07-21 23:35:11,closed,sync graph ref commits of july 21,"This should have been done before version bump. My mistake
",0,1,[]
1181,18685797,88,14579099,2014-07-21 22:59:26,2014-07-21 23:15:11,closed,Fix typo in reversescale translation,"- allows 'reversescl' (old key) to get map to 'reversescale' (new key)
",3,2,[]
1182,18617712,86,14579099,2014-07-19 04:55:23,2014-07-20 10:13:22,closed,Tests,"Inspired by our lack of coverage, here are a bunch more tests. They already wrangled up a couple bugs, so that was an added bonus.
",6,19,[]
1183,18617541,85,14579099,2014-07-19 04:26:25,2014-07-19 04:49:55,closed,Added additional check for 'style' keys that are arrays (Python3).,"In trying to increase test coverage, I came across this little Python3 bug! See #84.
",1,1,[]
1184,18615712,83,14579099,2014-07-19 00:50:15,2014-07-19 00:51:57,closed,Import `__version__` into `plotly` namespace as it had been before.,"Redo on this branch. Rebasing didn't seem to clean the history. Just a one line change.
",1,1,[]
1185,18604411,82,14579099,2014-07-18 19:32:53,2014-07-19 05:12:32,closed,Fix #79 issue with streaming in Python3,"@etpinard, @chriddyp, yeah?
",3,2,[]
1186,18602995,81,14579099,2014-07-18 19:03:46,2014-07-19 00:47:10,closed,Version fix,"This should get merged after we sort out #80.
",0,2,[]
1187,18602797,80,14579099,2014-07-18 18:59:42,2014-07-19 00:38:48,closed,added `from __future__ import absolute_import`. Clearer imports.,"In Python 3, you cannot have an ambiguous `import X` if X is
both a module and a subpackage/submodule. By importing this here,
we get rid of ridiculous relative imports like `from ... import X`.
",2,1,[]
1188,18565821,78,14579099,2014-07-18 02:49:54,2014-07-18 02:54:37,closed,Iss71 etienne rebased,"A rebased version of #73. Better git history.
",3,4,[]
1189,18565262,77,14579099,2014-07-18 02:22:19,2014-07-18 02:42:04,closed,Key changes,"@etpinard, we never resolved the issue of depreciated keys. this is the PR to do that.
",4,3,[]
1190,18564463,76,14579099,2014-07-18 01:44:26,2014-07-18 01:47:39,closed,Update graph refs,"Merging in changes from @etpinard. notably, we previously had a test for error bars that included 'traceref'. this key is gone now with these updates, so this test needed to remove that key to pass. Shouldn't cause any user problems.
",1,2,[]
1191,18563442,75,14579099,2014-07-18 00:58:56,2014-07-18 01:48:39,closed,Coverage,"Initial tracking of test coverage.
",1,4,[]
1192,18512073,74,14579099,2014-07-17 06:55:54,2014-07-18 00:30:00,closed,Six,"no more 2to3 business! this means more transparency when we're testing, developing, etc.
",6,30,[]
1193,18503351,73,14579099,2014-07-17 00:11:22,2014-07-18 02:50:49,closed,Solution to #71,"- add a keyword argument to PlotlyList.update() called immutable (with default =False)
- leave PlotlyDict.update() as is in master branch

`fig['data'].update(some_dict, immutable=True)` creates list of copies
of `some_dict` before calling PlotlyDict.update().

Thus, further updates in `fig['data']` can be applied trace-wise e.g.

`fig['data'][0].update(some_other_dict) only updates the first trace.
",7,4,[]
1194,18496257,72,14579099,2014-07-16 21:26:01,2014-07-17 19:02:24,closed,updated PlotlyDict.update() to deepcopy references.,"In response to #71.

Previously updates shared references. They now use deepcopy. This may not be the perfect solution here.
",6,1,[]
1195,18078605,65,14579099,2014-07-08 01:18:12,2014-12-23 19:26:49,closed,Setup script,"@chriddyp, @etpinard, what do you think about throwing warnings here like this?

basically, if you (1) don't have a core package installed (2) if the core package is older than ours and (3) if you have an outdated optional package (think matplotlib)
",8,5,[]
1196,18078563,64,14579099,2014-07-08 01:16:38,2014-07-08 02:56:13,closed,"Added docs to `plotly.__init__.py`, revamped others.","just a couple lines here and there. most importantly, we didn't have any documentation for help(plotly)!
",1,2,[]
1197,18049224,63,14579099,2014-07-07 15:04:38,2014-07-07 17:39:39,closed,`wb` option for writing images on windows machines,"Reference: [https://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files](https://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files)
",1,3,[]
1198,18007385,62,14579099,2014-07-05 03:31:00,2014-07-07 17:43:37,closed,"arrays in matplotlib scatters work now for color, marker, etc.","some `path_collection` wrangling! We now have a fair amount of support for bubble charts!
",4,3,[]
1199,18005292,61,14579099,2014-07-04 21:47:18,2014-07-04 23:23:14,closed,A few modifications on PR #60,"--> PR  https://github.com/plotly/python-api/pull/60

This branch was created off `issue-58`

Improved warning messages
- for newline character convertions
- out-of-bounds annotations
- warnings now have a custom format (ref [here](http://pymotw.com/2/warnings/#formatting))
- warnings now have a consistent layout and vocabulary
",1,3,[]
1200,18004432,60,14579099,2014-07-04 20:30:51,2014-07-04 23:23:14,closed,Added user warning when annotations lie outside plotly's 'paper' bounds.,"Closes #58
",0,1,[]
1201,18002815,59,14579099,2014-07-04 18:37:06,2014-07-04 20:59:32,closed,updated graph_references which now calls layout axes 'objects',,2,2,[]
1202,17980511,57,14579099,2014-07-04 06:06:01,2014-07-04 18:14:16,closed,Plotly list instantiation,"Before this raised a confusing _validation_ error:

``` python
Data(Scatter(x=[1,2,3], y=[2,1,2]))
```

The reason being that if you unpack a dictionary into args (`*args`),
you get a list of _keys_, which is never going to make a valid Plotly
graph object. Therefore, we just catch it and raise a more helpful
_instantiation_ error instead.
",2,2,[]
1203,17975233,56,14579099,2014-07-04 00:35:04,2014-07-04 18:13:44,closed,Added more sophisticated spine tracking for mpl-to-plotly.,"What you _can't_ do yet (restrictions coming from plotly):
- no bottom spine but keep top spine
- no ticks in mirrored axis line
- ticks but no mirrored axis line

This is in response to #50
",4,1,[]
1204,17972297,55,14579099,2014-07-03 22:41:08,2014-07-03 23:27:37,closed,given `x` and `y` coords in mpl are checked and converted to 'paper',"(if they're outside the x or y axis range)
",6,1,[]
1205,17968519,54,14579099,2014-07-03 21:06:57,2014-07-03 21:39:28,closed,don't expose `replace_newline` to users. too much unnecessary info.,"@chriddyp, bettah?
",3,2,[]
1206,17960056,53,14579099,2014-07-03 18:17:43,2014-07-03 20:13:44,closed,'multialign' is a text property in mpl when *newlines* are present.,"multiple-line annotations will now be tracekd properly in Plotly

Fixes https://github.com/plotly/python-api/issues/49
",6,4,[]
1207,17932417,48,14579099,2014-07-03 08:53:32,2014-07-03 20:14:32,closed,changed annotations referenced to data to mimic mpl alignment.,"In response to (4) in https://github.com/plotly/python-api/issues/46
",3,1,[]
1208,17929071,47,14579099,2014-07-03 07:16:52,2014-07-03 20:29:26,closed,`_send_to_plotly` now replaces a figure's '\n' with '<br>'.,"In response to (5) in https://github.com/plotly/python-api/issues/46
",6,2,[]
1209,17869021,45,14579099,2014-07-02 05:58:59,2014-07-02 19:55:03,closed,Mpl exp format,"Check whether axis tick formatter's are instances of 'LogFormatterMathtext'. If they _are_, we can go ahead and set the Plotly `'exponentformat'` to `'e'`.
",4,2,[]
1210,17744919,44,14579099,2014-06-29 07:20:42,2014-06-30 06:40:50,closed,Adds some files to make contributing a little more straightforward.,"It's probably been a bit difficult for developers to make changes. Hopefully this makes it easier.
",2,1,[]
1211,17735908,43,14579099,2014-06-28 08:01:35,2014-06-30 22:39:07,closed,static image support for other formats,"- update response object handling within the static image interface
- exposed support for svg, pdf, and jpeg
",3,2,[]
1212,17680475,42,14579099,2014-06-27 00:08:13,2014-06-27 18:51:13,closed,Refactor submodules,"alright, this should make things more straightforward for future PRs
",3,10,[]
1213,17670321,41,14579099,2014-06-26 20:19:06,2014-06-26 20:28:36,closed,V1.0.34 merges,"Version bump to v 1.0.34 consolidating:
- plain-message-fix
- document-stream
- tls.embed_with_URLs
",0,4,[]
1214,17664108,40,14579099,2014-06-26 18:25:04,2014-06-26 19:00:35,closed,"Updated documentation for Stream.write, data->trace.","'trace' is clearer than 'data', since it must be a dict obj.
",6,2,[]
1215,17657135,39,14579099,2014-06-26 16:06:16,2014-06-26 19:03:00,closed,URL support fot get_embed(),"I added URL support for plotly.tools.get_embed() and plotly.tools.embed()
so that

plotly.tools.get_embed('https://plot.ly/~etpinard/270/')

and

plotly.tools.get_embed('etpinard','270')

are both accepted just like in plotly.plotly.get_figure().

I also corrected a few typos in docstring for plotly.plotly.get_figure()
",3,2,[]
1216,17491306,37,14579099,2014-06-23 18:41:12,2014-06-23 18:48:56,closed,v.1.0.33: graph_reference streamable keys added back,,0,2,[]
1217,17443085,36,14579099,2014-06-21 21:22:30,2014-06-21 21:25:45,closed,updated graph reference,,0,1,[]
1218,17275885,35,14579099,2014-06-18 05:21:45,2014-06-18 05:49:35,closed,Mpl bar gap,"Mpl uses `left` and `width` OR `bottom` and `height` to determine bar width...

Plotly uses `bargap`. unfortunately, we NEVER see a complete set of bars at once, just one-by-one.
Therefore, we need to (1) gather the bars (2) sort the bars (3) center the bars and (4) determine the gap.
",0,3,[]
1219,17273025,34,14579099,2014-06-18 02:46:10,2014-06-18 18:15:47,closed,Get fig with url,"Be it small, it's sort-of a barrier to manually extract the 'username' and 'file-id' parameters from plotly urls.

These changes makes copy-n-paste a bit easier.
",5,3,[]
1220,17270420,33,14579099,2014-06-18 00:50:24,2014-06-26 18:33:48,closed,Changed 'plain-messages' for better use on plotly's backend.,,2,3,[]
1221,17268903,32,14579099,2014-06-17 23:59:10,2014-06-18 00:45:22,closed,"The `val_types` key had been implicitly required, fixed.","We don't want to require that folks fill in 'val_types' from the
graph_references repo.
",2,1,[]
1222,17211432,31,14579099,2014-06-17 00:52:39,2014-06-17 00:52:59,closed,Mpl updated,,0,3,[]
1223,16784156,27,14579099,2014-06-05 18:53:16,2014-06-05 18:53:22,closed,Added 'Area' to __all__ so it's actually accessible!,,0,1,[]
1224,16736633,26,14579099,2014-06-04 21:46:12,2014-06-04 21:46:23,closed,Updated graph_references to 3ef20b0ae3267f552d50e404caeed2a80d86522e.,,0,1,[]
1225,16507560,24,14579099,2014-05-29 22:15:10,2014-06-05 07:22:07,closed,Variable server endpoint,,3,10,[]
1226,16089890,21,14579099,2014-05-20 05:34:46,2014-05-29 21:29:39,closed,rm check_version,"running

```
import plotly
```

at the root of python-api was failing cuz of this
",0,1,[]
1227,15999837,20,14579099,2014-05-16 17:52:24,2014-06-04 21:51:33,closed,Example of a CircleCI test failing - do not merge!,,0,1,[]
1228,14904116,15,14579099,2014-04-18 00:28:01,2014-04-18 00:28:13,closed,image class that wraps plotly's image export api,,0,1,[]
1229,14407861,13,14579099,2014-04-04 22:52:05,2014-04-04 22:56:36,closed,Graph objs,"See if this works. Looks like it's able to merge.
",0,5,[]
1230,14266991,12,14579099,2014-04-02 08:15:29,2014-04-04 22:50:03,closed,"Changed inheritance schemes, Data->Trace, no more mako, added metaclass.","## Inheritance schemes:
- All dictionaries containing data now subclass from Trace. Data means
  something completely different now. For example:

```
class Scatter(Trace):
...
```
- Data now refers to a PlotlyList, which makes more sense.
## No more mako:
- using templating from mako was starting to be more trouble than it was
  worth. We were forced to develop in a _hidden_ file, installing required
  extra steps, and the documentation was scattered.
## Added metaclass:
- meta classes are classes that create classes. Python's usual meta
  class is `type`, this creates all classes. By subclassing type, you can
  make python < 3.3 docstrings mutable, hooray!
- so far, only DictMeta, a class to create PlotlyDict subclasses has
  been created.
- IMPORTANT. A lot of headache was saved by _cheating_ a bit and using
  class names as keys in the INFO dictionary. Therefore, ALL CLASSES
  SHOULD HAVE A MATCHING (lower case) ENTRY IN `INFO`!!!
",7,5,[]
1231,14218770,11,14579099,2014-04-01 09:58:34,2014-04-01 19:40:37,closed,Added graph_objs.py module and supporting files.,"The classes in `graph_obj.py` are intended to be both user-friendly and
functional.

These are the main goals of this revision:
- Make the docstrings helpful when a user runs `help(obj)`. The docstrings
  will immediately list what the valid `key` names are and what the valid
  data types for the `values` associated with each `key` are.
- Allow users and plotly to do validation on keys and data in JSON. By
  running `obj.check()`, the object itself will raise an exception (could
  be changed to a warning later...) if it finds invalid keys. Later, this
  should be updated to include some type-checking where necessary and give
  warnings when pieces of the JSON structure are unusable for plotly.
- Give users a simple interface to JSON structure. These objects are
  basically just the standard `list` and `dict` objects that any Python
  user will be quite familiar with. Therefore, it will not create a new
  barrier by requiring new syntax for users. In fact, we should attempt to
  make it allowable to interact with these objects as if they _were_
  simply `dict` and `list` objects, including instantiation where
  possible.
- Remain as simple as possible!!!
- Enforce good code documentation. When keys change in plotly, an
  exception will be raised because of the new key in the check method, an
  exception will be raised if there is not an associated `type`, and an
  exception will be raised if there is not an associated `description`.
",2,1,[]
1232,11036612,2,14579099,2013-12-21 20:02:28,2013-12-23 02:01:19,closed,Enhancements for SageMath Cloud,"I've added a fix to the existing `iplot()` function to make it work like in the IPython notebook. (I've also fixed the quite ugly line for the `<iframe ... >`

The other fix is for encoding ""native"" Sage number types to JSON (They are implicitly created when numbers like `42` or `4.2` are entered in the Sage Notebook.)

To test it, install it in a project at https://cloud.sagemath.com 
",7,2,[]
