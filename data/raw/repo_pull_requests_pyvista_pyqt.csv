index,id,number,repo_id,created_at,closed_at,state,title,body,total_comments,total_commits,labels
0,705965493,1959,12777496,2021-08-08 01:01:00,,open,Extend docs template to add a banner for the user survey,"Submitting this before the survey goes out to collaborate on the details.

Currently it's just a paragraph on top of the body of ~every page. I think we could do a dismissible message/banner type thing, but that might be more annoying? Starting simple in any case. Suggestions welcome on anything about it really.

https://pyqtgraph--1959.org.readthedocs.build/en/1959/

@NilsNemitz @j9ac9k ",2,1,[]
1,705915538,1957,12777496,2021-08-07 16:38:51,2021-08-07 17:13:49,closed,Bump minimum numpy up per NEP-29 schedule,"We have passed the last date to support NumPy 1.17.x per NEP-29 policy, this PR updates the CI to test against 1.18+.

Also it modifies the newer versions of the pipelines to test against the current numpy version (1.21).",0,1,[]
2,705820252,1956,12777496,2021-08-07 02:13:47,2021-08-07 05:22:09,closed,arrayToQPath: use QByteArray as backing store,"this avoids:
1) allocation and zero-ing of bytearray
2) copy of bytearray to QByteArray

Using the benchmarking script in #1817,

test | time (s) / master | time (s) / this PR
-- | -- | --
pairs | 0.394 | 0.360
array | 0.394 | 0.365
",4,1,[]
3,704971587,1954,12777496,2021-08-05 19:37:25,,open,Deprecate `values` opt for list parameter,"List parameter accepts a `values` argument during initialization, but doesn't listen for this anywhere else (i.e. during an opt change, limit update, etc.). The clearest path forward I believe is to deprecate `values` and encourage `limits` moving forward, rather than to allow option aliasing.",6,3,[]
4,704264110,1953,12777496,2021-08-05 01:18:12,,open,Better parameter tree testing,"This will fail until #1952 is merged. Normally I would wait to submit, but if folks have time to review this while 1952 is evaluated I can make changes to both at the same time.

The current parameter tree example suffers from two main issues. Since more parameter types have been added, 1) Organization is somewhat confusing, and 2) not all options are being tested in the example suite. This PR does the following:

* Organizes parameter types -- all available parameter types are together and collapsed to make the tree more digestible.
* All options for all types are exposed for playing -- The user can edit any option and it will propagate to the widget under test.
* An assertion checks that all types are instantiated -- if more parameter types are added without an example for them, the assertion will fail.

Some considerations: Since the `examples` text box doesn't show the code for `makeAllParamTypes`, it is unclear how these base types are instantiated. However,

* The rest of the parameter tree clearly shows how to make parameters with options
* Each option in `makeAllParamTypes` directly corresponds to an option with the same name for that parameter, so the intuition for applying the example should still be applicable.",0,5,[]
5,704257032,1952,12777496,2021-08-05 01:08:18,,open,Adds checklist parameter,"The current suite of parameter types does not allow setting a list-like parameter with options. This is enabled with a `checklist` parameter.

Options:
  * `exclusive`: If true, only one option can be selected at a time. This makes the functionality similar to a `list` parameter type

Todo:
 - [x] Allow `checklist` to work with dict-like `limits`, similar to `list` behavior
 - [x] Apparently, `exclusive` decided to stop working. #FIXME",8,9,[]
6,703992504,1951,12777496,2021-08-04 20:47:15,2021-08-05 05:01:50,closed,docs: Fix a few typos,"There are small typos in:
- doc/source/how_to_use.rst
- doc/source/region_of_interest.rst
- examples/ViewBox.py
- pyqtgraph/flowchart/Node.py
- pyqtgraph/graphicsItems/AxisItem.py
- pyqtgraph/graphicsItems/PColorMeshItem.py
- pyqtgraph/graphicsItems/PlotDataItem.py
- pyqtgraph/graphicsItems/TargetItem.py
- pyqtgraph/graphicsItems/ViewBox/ViewBox.py
- pyqtgraph/widgets/RawImageWidget.py

Fixes:
- Should read `mapped` rather than `maped`.
- Should read `vector` rather than `vetctor`.
- Should read `value` rather than `vaule`.
- Should read `preferable` rather than `preferrable`.
- Should read `output` rather than `ouptut`.
- Should read `information` rather than `inforation`.
- Should read `information` rather than `infomation`.
- Should read `exempt` rather than `excempt`.
- Should read `emphasizing` rather than `emphacizing`.
- Should read `construction` rather than `constrution`.



Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md",3,1,[]
7,701837914,1944,12777496,2021-08-02 23:09:20,2021-08-04 05:53:53,closed,use more of QColor functions / methods,"This PR makes more use of QColor functions / methods
- static QColor.fromXXX()
- QColor.getRgbF()
- QColor.name()

Several helper functions in pg.functions are effectively trivial reimplementations of the above functions / methods
- class Color
- colorTuple
- colorStr
- glColor

The following line was left unconverted because it seems that the format string does not match the data types. (%f to integer, %d to float [0, 1])
https://github.com/pyqtgraph/pyqtgraph/blob/master/pyqtgraph/exporters/SVGExporter.py#L122",14,4,[]
8,701596705,1943,12777496,2021-08-02 16:11:42,2021-08-02 17:19:29,closed,Remove python 2 code paths,A search for `sys.version_info` showed several locations still checking for Python 2. This PR removes those branches and assumes Python 3 throughout.,3,1,[]
9,701583025,1942,12777496,2021-08-02 15:53:20,2021-08-02 16:09:27,closed,Adds EOF newline to files missing it,Note: intentionally avoids files moved / already adjusted from #1919,0,1,[]
10,701563315,1941,12777496,2021-08-02 15:24:19,2021-08-02 16:01:23,closed,Remove unnecessary casting of `toPlainText` to str,"Slight fixup to #1939 which also removes unnecessary `str` casting of `QTextEdit.toPlainText`. Both libraries return `str` objects.
  * https://www.riverbankcomputing.com/static/Docs/PyQt5/api/qtwidgets/qtextedit.html#QTextEdit
  * https://doc.qt.io/qtforpython-5/PySide2/QtWidgets/QTextEdit.html#PySide2.QtWidgets.PySide2.QtWidgets.QTextEdit.toPlainText

Note: intentionally leaves out one instance instance in parametertypes.py to avoid merge conflict with #1919. This is fixed on that PR anyway.",0,1,[]
11,700814167,1940,12777496,2021-08-01 03:25:33,2021-08-01 03:50:36,closed,fix log mode by reverting to previous formulation,"this formulation is in the documentation for setLogMode() https://pyqtgraph.readthedocs.io/en/latest/graphicsItems/plotdataitem.html?highlight=setlogmode#pyqtgraph.PlotDataItem.setLogMode

fixes #1933 

Powers of 10 should plot a straight line
```python
import pyqtgraph as pg
pg.mkQApp()
pw = pg.PlotWidget()
pw.show()
pi = pw.getPlotItem()
pi.setLogMode(x=False, y=True)
x = range(-10, 11)
y = [(10.**p) for p in x]
pi.plot(x, y, symbol='o')
pg.exec()
```",1,1,[]
12,700780398,1939,12777496,2021-07-31 23:15:52,2021-08-02 04:43:33,closed,Remove all usage of python2_3.py,"Technically these functions were exported at the top level of the library, this removes them without warning... If we want to we can bring them back for there and add deprecation warnigns, but I honestly don't think its needed, as we are py3 only now and have been for multiple releases.

This may introduce a number of 'useless cast' or similar but those were always happening anyway

This PR brought to you by `sed`",5,8,[]
13,700688917,1936,12777496,2021-07-31 10:20:20,2021-07-31 14:30:20,closed,Handle empty QPolygonF,"#1920 exposed that ```ndarray_from_qpolygonf()``` did not handle empty QPolygonF on Qt6. Specifically, it did not handle the return of a null pointer. i.e the Qt library had not allocated any underlying memory yet.

Some included cleanups:
- import shiboken{2,6} as shiboken. This allows to merge some PySide{2,6} codepaths
- ```import sip``` if ```import PyQt5.sip``` fails. This addresses #1882

Additional changes:
- make qimage_to_ndarray() support non-tightly packed QImage
- add QImage zero-copy and write-through test from https://github.com/pyqtgraph/pyqtgraph/pull/1795#issuecomment-853084414",1,5,[]
14,700656447,1935,12777496,2021-07-31 05:21:24,2021-07-31 14:35:23,closed,Many unused import cleanups,"Ignored some star imports, some vendored code in colorama, only looked within pyqtgraph the library, not e.g. examples

Should clean up a good portion of Code QL complaints",1,2,[]
15,699460779,1932,12777496,2021-07-29 11:50:17,2021-07-30 19:19:02,closed,make antialiasing optional for paintGL in PlotCurveItem,"## Summary
This PR makes antialiasing optional when OpenGL is used with PlotCurveItem as described in #1926.

I checked for `antialias` in `self._exportOpts` as it is done in `paint`. Is this necessary for this to be inside paint/paintGL or could it also be in e.g. `updateData` to improve performance a little bit?",1,3,[]
16,698230948,1928,12777496,2021-07-27 22:36:48,2021-07-28 01:04:25,closed,Restore previous signature on TargetItem.setPos(),"The previous signature was before 5a08650853a339c383281fd531fe059b74e1bbcd and accepted two args, the same as ever other `UIGraphicsItem.setPos`. This further simplifies to just use the `Point.__init__` to do the type checking.",2,3,[]
17,697994062,1927,12777496,2021-07-27 16:06:58,2021-07-30 03:50:11,closed,Reduce ColorMap inefficiencies,"This implements some of @pijyoi 's suggestions from the discussion on #1853:

- Gradient generation should ask for data in QColor format to avoid repeated conversion.
- Where conversion is needed, it can be accelerated by explicit `.tolist()` conversion of the numpy data structures.

I have also added a short comment to the generation of gradients and gradient-derived pens and brushes: These are not free operations, and for best performance should only be done as much as needed.

While we could possibly speed this up by caching the result internally, I think the gradient generation is basically a cool toy which realistically sees relatively little use. My impression is that the code for this should remain as simple as possible to save future maintainers some headaches. Or is there an obvious performance optimization that would clearly benefit from integration into the main ColorMap code?

@pijyoi, if you fall over any more improvements, we can throw those in here, too :)",1,2,[]
18,696811777,1925,12777496,2021-07-26 08:33:17,2021-07-29 11:35:25,closed,[DOC] Fix docstring setCompositionMode,"## What is fixed
I found this small mistake in the docstring `setCompositionMode` of `PlotCurveItem` and `ImageItem`.

## Additional
Since those changes are very small, do you maybe want me to additionally change all docstrings in those classes to numpy-style (as you suggest in `CONTRIBUTING.md`) while I am at it?",0,0,[]
19,696535866,1921,12777496,2021-07-25 17:18:18,,open,"Factor out palette-related code from ""named colors"" PR","This is work-in-progress code that extracts (and hopes to clean up) the main palette management code from my earlier PR #1625.
Palette colors and UI monochromes are now sampled from color maps, which means that generation of an arbitrary number of plot colors by `functions.intColor()` and the monochrome generation for float values passed to `mkColor()` can be maintained while matching the alternative color schemes.

Once the code is in better shape, it should allow color presets (to be selected before plots are initialized) with less complexity and bugs than the original proposal... and will hopefully be less painful to review :)",0,1,[]
20,696357320,1920,12777496,2021-07-24 14:15:36,2021-08-02 17:18:25,closed,arrayToQPath can handle empty paths,"- [X] Closes #1888
- [X] Increases test coverage across all supported dtypes",8,4,[]
21,696282592,1919,12777496,2021-07-24 02:52:41,2021-08-02 17:47:55,closed,Organize paramtypes,"To prevent the extraordinary merge hassle of last parameter type PR, this organization:
* Makes a new file for each parameter type
* Allows parameter items to be registered without belonging to a parameter
* Splits `WidgetParameterItem` implementations into actually separate items like `BoolParameterItem`, `ColorParameterItem`, etc.
* A script to auto-generate parameter types documentation

For reviewers: The content of each Parameter/Item is unchanged -- the only modifications are to the imports",13,15,[]
22,695463589,1917,12777496,2021-07-22 20:05:35,2021-07-23 17:47:23,closed,Debug feature3 ci failure -- Do not merge,,1,48,[]
23,692163074,1915,12777496,2021-07-18 23:07:48,,open,Deprecate QtWidgets accessed through QtGui,"This adds the deprecation warning ( thanks @ntjess ) to the first attempted access, then migrates all our code to no longer use QtGui. The migration was semi-automated, using the following process:

1) Get a list of all the widgets `python -c 'from PyQt6 import QtWidgets; print(""\n"".join([m for m in dir(QtWidgets) if m[0] == ""Q""]))' > widget-names`
2) Replace the access to use the appropriate module: `for m in $(cat widget-names); do find tests/ pyqtgraph/ -name '*.py' | sed -i ""s/QtGui\.$m/QtWidgets.$m/g""; done`
3) Add an import everywhere:
  * `find tests/ -name '*.py' | sed -i 's/from pyqtgraph.Qt import .*QtGui/\0, QtWidgets/'`
  * `find pyqtgraph/ -name '*.py' | sed -i 's/from \.+Qt import .*QtGui/\0, QtWidgets/'`

This can hang out as a draft until the backlog is cleaned up a bit, and we can re-run the migration from scratch to avoid conflicts. We should also run `isort` on all our files someday, as this adds a bunch of unused imports, but it's not too important.",2,2,[]
24,692158088,1914,12777496,2021-07-18 22:23:24,2021-07-23 03:57:50,closed,Remove the use of pyqtgraph.ptime,"With us supporting python3.7+, we have no more need for the ptime module
and can instead safely use perf_counter for everything.",1,4,[]
25,692139055,1913,12777496,2021-07-18 19:39:14,2021-07-18 19:46:10,closed,Bump sphinx and theme versions,Testing if this resolves the issue with bulleted lists not rendering correctly (e.g. https://pyqtgraph.readthedocs.io/en/pyqtgraph-0.12.2/introduction.html#what-can-it-do),2,1,[]
26,692137223,1912,12777496,2021-07-18 19:24:30,2021-07-21 14:12:35,closed,push bullet lists over 2 spaces to get them to show up as such in the…,… docs,0,3,[]
27,692122777,1911,12777496,2021-07-18 17:29:41,2021-07-23 21:38:18,closed,Extend ColorMap with HSL cycles and subset generation,"This PR provides two color map tools that will be helpful in getting #1625 to work:
1) A generator function `makeHslCycle()` that can trace various circles and spirals through HSL color space. This basically generalizes the output of `functions.intColor()`. The idea is that the `intColor` code can at some point be replaced by sampling from such a color map, which will allow the generated colors to match different plotting palettes.
2) A ColorMap method `getSubset()` which returns a new ColorMap object that contains only the subset of ""stops"" in the specified range. This also allows the creation of reversed and rotated variants of the existing maps. The application is that the included color maps are very good sources for sampling plot colors, but often the cyclical maps don't start at the right point, or only some part of the full map matches the desired style. 

Other changes:
- The monochrome generator now defaults to a neutral grayscale, which is probably a better generic default than the ""green monitor"" gradient.
- The file extension for color maps in HTML hex color format was changed from .txt to .hex. This avoids the problem that the code tries to load the license files in the same folder, which isn't ideal. We previously did not ship any color maps in that format, so that change is unlikely to cause any problems. The code also fails with a little more helpful error message when it does try to load an invalid file. 

I still need to write some tests for the color map manipulation but I wanted to post this already:
I have failed to come up with an elegant method for extracting the ColorMap subsets, so let me know if you have a good idea for improving this. The sampling needs to work in both forward and backwards direction, and it needs to be able to wrap (1.0 to 0.0) and (0.0 to 1.0). I am sure there is a nice, simple way to do so...",2,3,[]
28,692065296,1910,12777496,2021-07-18 10:21:09,2021-07-31 05:51:36,closed,PlotSpeedTest: add param tree control panel,"inspired by ScatterPlotSpeedTest.

Allows easier testing of the speed benefits of useOpenGL and/or enableExperimental.

On a particular Linux system, useOpenGL=True and enableExperimental=False slowed to a crawl.",28,2,[]
29,692051589,1909,12777496,2021-07-18 08:32:39,2021-07-18 17:44:48,closed,None-check AxisItem.label before access,"I was clicking things while the tests were running, and I managed to cause the error messages included below. These were printed by the test suite after all tests had been declared ""pass"".

They both seem to originate from `AxisItem`'s `resizeEvent()` getting called after `self.label` has already been set to `None` by the `close()` method. I am not aware of another reason that would change `self.label` to be None.

This mini PR adds a None check, so that tear down can still proceed cleanly even if resize events are generated. 

```
========================== 265 passed, 7 skipped in 280.11s (0:04:40) ===========================      
Traceback (most recent call last):
  File ""C:\e\prog\pg_dev\pyqtgraph\pyqtgraph\graphicsItems\AxisItem.py"", line 236, in resizeEvent      
    br = self.label.boundingRect()
AttributeError: 'NoneType' object has no attribute 'boundingRect'
Traceback (most recent call last):
  File ""C:\e\prog\pg_dev\pyqtgraph\pyqtgraph\graphicsItems\AxisItem.py"", line 236, in resizeEvent      
    br = self.label.boundingRect()
AttributeError: 'NoneType' object has no attribute 'boundingRect'
```",6,1,[]
30,692049209,1908,12777496,2021-07-18 08:13:16,2021-07-23 21:45:58,closed,more readable names for color map references in ColorBarItem API,"I recently realized that `ColorBarItem` uses the internal shorthand `cmap` in two of its user-facing methods. I would propose renaming this to `colorMap` to be more consistent and obvious.

Since ColorBarItem is still a rather fresh addition to the library, hopefully that won't cause too much trouble.
We can keep the current methods working, in which case this is most importantly a change to the documentation.

This would affect the method `setCmap()` and the parameter `cmap` in the init code.",3,4,[]
31,692010525,1907,12777496,2021-07-18 00:54:23,2021-07-18 01:16:52,closed,fix GLVolumeItem example for arm64,implement changes suggested in #1906,1,1,[]
32,691996575,1904,12777496,2021-07-17 22:28:10,2021-07-17 23:35:31,closed,tests/exporters/test_hdf5.py: skip if no h5py,Closes #1898,1,1,[]
33,691825733,1903,12777496,2021-07-17 03:07:42,2021-07-18 04:59:40,closed,Cleanup GLViewWidget,"tries to cleanup various parts of GLViewWidget

UPDATE:
non-cosmetic changes:
* remove redefinitions of width(), height(), devicePixelRatio()
* trivially implement readQImage() with grabFrameBuffer()
* fail upfront if not at least OpenGL (non-ES) 2.0
* fix setCameraPosition euler mode
* fix renderToArray() on hidpi systems
* change renderToArray() to output non-transposed images (this could be considered an API change)",8,25,[]
34,691798862,1902,12777496,2021-07-17 00:09:46,2021-07-18 05:03:33,closed,simplify modelview projection computation,"simplify and shorten expressions used in #1897
1) no need to get rect(), which is actually defined as
	QRect(0, 0, width(), height())
2) use col-maj data() instead of row-maj copyDataTo()
   - glLoadMatrixf() takes col-maj",2,1,[]
35,691782130,1901,12777496,2021-07-16 23:00:25,2021-07-17 16:50:16,closed,put new MetaArray location in deprecation warning,,0,1,[]
36,690842521,1897,12777496,2021-07-15 15:45:46,2021-07-16 02:48:21,closed,PlotCurveItem: setup modelview and projection,"This fixes an ""experimental"" feature that stopped working on Windows platform since the addition of support for Qt6 (and drop of support for Qt4).
i.e. change from QGLWidget to QOpenGLWidget

Minimal testable example at https://github.com/pyqtgraph/pyqtgraph/pull/1525#issuecomment-770304898

Would fix #1760

",7,1,[]
37,690383401,1895,12777496,2021-07-15 04:26:30,2021-07-16 04:01:07,closed,Update contributing guide ahead of scipy sprints,"Our contributing guide is horrifically out of date, this updates it along with giving some code for how to create a virtual environment and install dependencies.",5,1,[]
38,688197681,1893,12777496,2021-07-12 21:39:08,,open,Code completion in pyqtgraph's console,"Uses either Jedi or poor man's Jedi (if you don't have it in your environment) to provide code completion on Ctrl+Space

Non-jedi version just suggests words from past history, jedi just spawns an interpreter and calls `.complete()`

- [ ] I have no idea how to make a robust non-jedi completion model, some review of my implementation would be good
    - [ ] `CLAUSE` definitions should probably be checked to ensure they're exhaustive (https://github.com/pyqtgraph/pyqtgraph/pull/1893/files#diff-3d7000126a6585e9ef1feafd8b50057555f610a325295b295fb5a0452e1ffbbbR15)
    - [x] Double+ dot-accessors (`pg.plot(x, y).getViewBox()`)
    - [x] Assignment operators (`x = np.ones`)
- [ ] all `import` statements with a jedi completer aren't prefixed properly
- [ ] Implementation of `PopupLineEditor` was pulled from one of my other projects so it still needs converting to pyqtgraph format:
    - [x] Lambdas connected to slots -> local or new functions
    - [ ] Function documentation
    - [x] Type hint removal
    - [ ] Auditing next/prev focusing logic
- [ ] 'dumb' (non-jedi) completer should ignore history that results in an exception

 - If someone has a more intuitive (least ""astonishing"") alternative for refreshing the completion model compared to waiting for Ctrl+Space, I'm all ears.
 - If someone has a 'dumb' replacement for missing `jedi` that's better than just looking for words in the history, I'm all ears.
     - I could probably try `dir` or `vars` on the current object etc., but that sounded like a lot of work and at a certain point I don't want to re-implement `jedi` just for this console

https://user-images.githubusercontent.com/23620506/125359019-b25bd000-e337-11eb-8d27-0ac809ea3325.mp4

",3,3,[]
39,687905917,1892,12777496,2021-07-12 14:40:10,2021-07-31 01:23:51,closed,implement GLPainterItem,"While playing around with GLTextItem, I found that it would not scale well when drawing many text items. In the following script, for example, it is very sluggish to rotate the scene.
```python
import pyqtgraph as pg
from pyqtgraph.Qt import QtCore, QtGui
import pyqtgraph.opengl as gl

pg.mkQApp(""GLTextItem Example"")

gvw = gl.GLViewWidget()
gvw.opts['elevation'] = 90
gvw.opts['azimuth'] = 0
gvw.opts['distance'] = 50
gvw.show()

size = 50
griditem = gl.GLGridItem()
griditem.setSize(size, size)
griditem.setSpacing(1, 1)
gvw.addItem(griditem)

axisitem = gl.GLAxisItem()
gvw.addItem(axisitem)

for xi in range(size+1):
    for yi in range(size+1):
        pos = (xi - size/2, yi - size/2, 0)
        gvw.addItem(gl.GLTextItem(pos=pos, text='.'))
pg.exec()
```

I also came across #662, which seems to be asking for a generalization of what GLTextItem provides.

As a demonstration / proof-of-concept, this PR implements GLPainterItem, allowing the user to issue multiple arbitrary painter method calls. The (rough) equivalent example to the above script is provided and it rotates smoothly. I think the main overhead in the GLTextItem example above must have been in constructing and destructing the QPainter object.",12,5,[]
40,687366044,1891,12777496,2021-07-11 17:01:10,2021-07-11 20:15:00,closed,Clean up redundancy in README,"There's some redundant info that could've been removed as part of #1870

Check https://github.com/ixjlyons/pyqtgraph/blob/readme-redundant-optional-deps/README.md",2,1,[]
41,687108531,1889,12777496,2021-07-10 01:57:56,2021-07-12 16:57:01,closed,Fix GLTextItem with Python 3.10,"drawText() expects int arguments and Python 3.10 does not allow for
implicit rounding.

Fixes this test failure:
```
____________________ testExamples[ GLTextItem.py - PyQt5 ] _____________________

Error while drawing item <pyqtgraph.opengl.items.GLTextItem.GLTextItem object at 0x7f66c1d031c0>.
Error while drawing item <pyqtgraph.opengl.items.GLTextItem.GLTextItem object at 0x7f66c1d032e0>.

/builddir/build/BUILD/pyqtgraph-0.12.2/pyqtgraph/opengl/GLViewWidget.py:275: RuntimeWarning: 
Traceback (most recent call last):
  File ""<stdin>"", line 11, in <module>
  File ""/builddir/build/BUILD/pyqtgraph-0.12.2/pyqtgraph/Qt/__init__.py"", line 407, in exec_
    return app.exec() if hasattr(app, 'exec') else app.exec_()
  File ""/builddir/build/BUILD/pyqtgraph-0.12.2/pyqtgraph/opengl/GLViewWidget.py"", line 254, in paintGL
    self.drawItemTree(useItemNames=useItemNames)
  File ""/builddir/build/BUILD/pyqtgraph-0.12.2/pyqtgraph/opengl/GLViewWidget.py"", line 294, in drawItemTree
    self.drawItemTree(i, useItemNames=useItemNames)
  File ""/builddir/build/BUILD/pyqtgraph-0.12.2/pyqtgraph/opengl/GLViewWidget.py"", line 275, in drawItemTree
    debug.printExc()
  --- exception caught here ---
  File ""/builddir/build/BUILD/pyqtgraph-0.12.2/pyqtgraph/opengl/GLViewWidget.py"", line 272, in drawItemTree
    i.paint()
  File ""/builddir/build/BUILD/pyqtgraph-0.12.2/pyqtgraph/opengl/items/GLTextItem.py"", line 79, in paint
    painter.drawText(text_pos[0], text_pos[1], self.text)
TypeError: arguments did not match any overloaded call:
  drawText(self, Union[QPointF, QPoint], str): argument 1 has unexpected type 'numpy.float64'
  drawText(self, QRectF, int, str): argument 1 has unexpected type 'numpy.float64'
  drawText(self, QRect, int, str): argument 1 has unexpected type 'numpy.float64'
  drawText(self, QRectF, str, option: QTextOption = QTextOption()): argument 1 has unexpected type 'numpy.float64'
  drawText(self, QPoint, str): argument 1 has unexpected type 'numpy.float64'
  drawText(self, int, int, int, int, int, str): argument 1 has unexpected type 'numpy.float64'
  drawText(self, int, int, str): argument 1 has unexpected type 'numpy.float64'
  debug.printExc()

Failed Text Example Test Located in GLTextItem.py
----------------------------- Captured stdout call -----------------------------
Text
Error while drawing item <pyqtgraph.opengl.items.GLTextItem.GLTextItem object at 0x7f66c1d031c0>.
Error while drawing item <pyqtgraph.opengl.items.GLTextItem.GLTextItem object at 0x7f66c1d032e0>.

/builddir/build/BUILD/pyqtgraph-0.12.2/pyqtgraph/opengl/GLViewWidget.py:275: RuntimeWarning: 
Traceback (most recent call last):
  File ""<stdin>"", line 11, in <module>
  File ""/builddir/build/BUILD/pyqtgraph-0.12.2/pyqtgraph/Qt/__init__.py"", line 407, in exec_
    return app.exec() if hasattr(app, 'exec') else app.exec_()
  File ""/builddir/build/BUILD/pyqtgraph-0.12.2/pyqtgraph/opengl/GLViewWidget.py"", line 254, in paintGL
    self.drawItemTree(useItemNames=useItemNames)
  File ""/builddir/build/BUILD/pyqtgraph-0.12.2/pyqtgraph/opengl/GLViewWidget.py"", line 294, in drawItemTree
    self.drawItemTree(i, useItemNames=useItemNames)
  File ""/builddir/build/BUILD/pyqtgraph-0.12.2/pyqtgraph/opengl/GLViewWidget.py"", line 275, in drawItemTree
    debug.printExc()
  --- exception caught here ---
  File ""/builddir/build/BUILD/pyqtgraph-0.12.2/pyqtgraph/opengl/GLViewWidget.py"", line 272, in drawItemTree
    i.paint()
  File ""/builddir/build/BUILD/pyqtgraph-0.12.2/pyqtgraph/opengl/items/GLTextItem.py"", line 79, in paint
    painter.drawText(text_pos[0], text_pos[1], self.text)
TypeError: arguments did not match any overloaded call:
  drawText(self, Union[QPointF, QPoint], str): argument 1 has unexpected type 'numpy.float64'
  drawText(self, QRectF, int, str): argument 1 has unexpected type 'numpy.float64'
  drawText(self, QRect, int, str): argument 1 has unexpected type 'numpy.float64'
  drawText(self, QRectF, str, option: QTextOption = QTextOption()): argument 1 has unexpected type 'numpy.float64'
  drawText(self, QPoint, str): argument 1 has unexpected type 'numpy.float64'
  drawText(self, int, int, int, int, int, str): argument 1 has unexpected type 'numpy.float64'
  drawText(self, int, int, str): argument 1 has unexpected type 'numpy.float64'
  debug.printExc()
```",17,1,[]
42,686245246,1885,12777496,2021-07-08 18:44:34,2021-07-08 21:50:48,closed,Raise TypeError instead of Exception,"#### What does this PR do?
This is to raise a TypeError instead of general Exception in the eq function, which is in charge of checking a is b equality,  to make it easier to catch in outer scopes. 

#### What testing has been done on this PR?
`pytest tests`

#### What are the relevant issues?
 Raise TypeError instead of Exception in pg.eq [#1815](hhttps://github.com/pyqtgraph/pyqtgraph/issues/1815). 
Design aspects discussed in issue. 

#### Do the docs need to be updated?
No 
",7,1,[]
43,685719987,1884,12777496,2021-07-08 06:18:08,2021-07-08 07:33:07,closed,Update version number,,0,1,[]
44,683036805,1876,12777496,2021-07-03 15:06:11,2021-07-03 15:23:13,closed,Fix LineROI handle positions,"Fixes issue noted in #1813 with a simpler change

----

Script to see the change:

```python
import pyqtgraph as pg

app = pg.mkQApp()

pw = pg.plot()
pw.showGrid(x=True, y=True)
pw.setAspectLocked(True)

lineroi = pg.LineROI(pos1=(1, 1), pos2=(2, 5), width=0.5, pen=""r"")
rectroi = pg.RectROI(pos=(1, 1), size=(1, 4))

pw.addItem(lineroi)
pw.addItem(rectroi)

for name, scenepos in lineroi.getSceneHandlePositions():
    print(lineroi.mapSceneToParent(scenepos))

app.exec()
```

On master:

![lineroi_pos_master](https://user-images.githubusercontent.com/943602/124358392-e7984d80-dbd4-11eb-83d5-e2fad96cc80d.png)

```
PyQt5.QtCore.QPointF(1.4850712500726662, 1.0)
PyQt5.QtCore.QPointF(2.4850712500726657, -3.0)
PyQt5.QtCore.QPointF(2.2276068751089992, -0.9393660937409172)
```

On this branch:

![lineroi_pos_branch](https://user-images.githubusercontent.com/943602/124358394-e9faa780-dbd4-11eb-9efb-ed92eb98896a.png)

```
PyQt5.QtCore.QPointF(0.999999999999999, 0.9999999999999993)
PyQt5.QtCore.QPointF(1.9999999999999993, 5.0)
PyQt5.QtCore.QPointF(1.257464374963667, 3.060633906259083)
```

----

I initially suspected this behavior might have something to do with ROIs being used typically with images and images commonly having an inverted y axis, but comparing to `RectROI` seems to confirm this was just not caught. Behavior on master isn't really right for an inverted y axis either.",2,1,[]
45,682282708,1875,12777496,2021-07-02 02:16:33,2021-07-02 20:26:19,closed,bug: PyQt6 does not have localPos(),this bug must have existed since the removal of the mouse shims from Qt.py in #1818.,5,1,[]
46,682108071,1873,12777496,2021-07-01 19:19:31,2021-07-03 14:58:52,closed,Set focus to the example filter + Ctrl+F listener for focus,,1,2,[]
47,679601331,1871,12777496,2021-06-29 05:23:03,2021-07-03 15:10:35,closed,Allow adding items to GLViewWidget before show,"Since the move from QGLWidget to QOpenGLWidget, it has become necessary for GLViewWidget to be shown before it gets a valid OpenGL Context. This results in some scripts previously working with pyqtgraph <= 0.11.1 to fail with pyqtgraph >= 0.12.0, with little clue as to the reason, e.g. #1787

~~This PR prints a more helpful warning when it detects such a situation, and hopefully the user will be able to remedy it themselves.~~

Technically, only GLImageItem and GLScatterPlotItem were affected because they made OpenGL calls in their pseudo-InitializeGL() method. ~~This PR also modifies GLImageItem to defer its initialization to a later stage as its initialization is trivial.~~

Annotated script documenting the required change. This example also demonstrates how to put a GLViewWidget inside a QMainWindow.
```python
import pyqtgraph as pg
from pyqtgraph.Qt import QtWidgets
import pyqtgraph.opengl as gl
import numpy as np
import scipy.misc

app = pg.mkQApp()
win = QtWidgets.QMainWindow()
win.resize(640, 480)
# with QGLWidget, QMainWindow::show() can be called here
# win.show()

glv = gl.GLViewWidget()
glv.opts['elevation'] = 90
glv.opts['azimuth'] = 0    

win.setCentralWidget(glv)
# with QOpenGLWidget, QMainWindow::show() must be called _only_ after
#   QMainWindow::setCentralWidget()
#   GLImageItem and GLScatterPlotItem can only be added after GLViewWidget
#       has been shown
win.show()

image = scipy.misc.face()
tex, _ = pg.makeRGBA(image)
glii = gl.GLImageItem(tex)
s = 1/128
glii.scale(s, s, 1)
w, h = tex.shape[:2]    # GLImageItem uses a transposed image
w *= s
h *= s
glii.translate(-w/2, -h/2, 0)
glv.addItem(glii)

spots = np.array([[-w/2, -h/2, 0, 1, 0, 0, 0.5],
                  [-w/2,  h/2, 0, 0, 1, 0, 0.5],
                  [ w/2,  h/2, 0, 0, 0, 1, 0.5],
                  [ w/2, -h/2, 0, 0, 1, 1, 0.5]])
glspi = gl.GLScatterPlotItem(pos=spots[:,:3], size=50, color=spots[:,3:])
glv.addItem(glspi)

app.exec_()
```
",4,6,[]
48,678781561,1870,12777496,2021-06-28 07:25:40,2021-07-08 05:35:56,closed,Update README,"Add matplotlib as optional library.
Replace hdf5 by h5py.
Add links towards the github page or website of the different linraries.",10,4,[]
49,678324455,1869,12777496,2021-06-26 11:46:12,2021-06-26 15:06:38,closed,Disable unused ColorBarItem ticks,"This addresses the issue described in #1866 by applying the solution conveniently included in the report.
Thank you @paulmueller !

Since ColorBarItem uses an unlinked AxisItem to display the scale information, only the ticks on the main axis move with adjustment. The unsynchronized ticks on the opposite axis (used to close the frame) were hidden by setting their size to zero.
 However, these length-zero ticks become visible at large screen or export resolutions, possibly as a result of Qt's handling of line end caps?

The proper solution is to clear out the list of ticks, so that no drawing occurs in the first place. This is also much more elegant, and I am sure it is technically faster. 

The only other change here is to move the ColorBarItem AxisItems from z=1 to z=0.5 which is the new default for AxisItems generated by PlotItem.

Closes #1866",1,1,[]
50,678162692,1868,12777496,2021-06-25 20:27:56,2021-06-27 00:51:34,closed,Filter examples,"Users who know what they want, but don't know how to find it in the ever-growing list of examples can take solace in a lovely filter edit.

- [x] Fixes #133

Also optionally searches content

Updated video with all current capabilities:


https://user-images.githubusercontent.com/23620506/123526529-84735c00-d6a6-11eb-83de-bc515c8fab6f.mp4


",18,12,[]
51,678015231,1867,12777496,2021-06-25 15:47:03,2021-06-25 16:15:45,closed,Use built-in int as dtype,"Fixes #1857 

Thanks for @JitseB and @ixjlyons for identifying/pointing out this issue.

No more deprecation warnings!!",1,1,[]
52,677261029,1865,12777496,2021-06-24 16:20:55,2021-06-26 15:41:57,closed,"Fix Matplotlib color map import, add CC0 maps locally","The latest version of Matplotlib updated some color maps, e.g. ""Blues"". These now report their data as numpy arrays, which is not handled in the current importer code. This PR changes the import to also accept data in this format.

Thanks to @edumur for pointing this out!

To reduce the dependency on the Matplotlib importer, I have added the new matplotlib color maps viridis, plasma, magma, and inferno to the locally stored data, so that they can be imported with e.g. `pg.colormap.get('viridis')`. The creators have been awesome and made these maps available under a public domain CC0 license. Thank you very much to Nathaniel J. Smith, Stefan van der Walt and Eric Firing!

The included data has been reformatted from the source at https://bids.github.io/colormap/",5,2,[]
53,677203865,1864,12777496,2021-06-24 15:17:38,2021-07-04 04:43:39,closed,Draw GradientLegend in ViewBox coordinates,"This is the second attempt to fix GradientLegend to draw in the correct orientation independent of axis settings.

The current implementation only looks at the pixel size to determine the drawing size. As a result, it loses information on the orientation of the coordinate system. Inverting the y-axis then causes the vertical orientation to flip. See #1591 and #1847.

Inverting the x axis likewise results in a horizontal flip, but nobody has tried that yet.

This PR tries to address the issue by skipping the scaling to scene coordinates, and instead drawing directly in viewport coordinates. This seems to fix the issue on my system, and appears to even work with windows screen scaling set to 125%.
It also mostly seems to export correctly. (With the exception of all SVG fonts appearing as MSShellDiag on my system...)

The getViewBox() code of UIGraphicsItem implies that no view box might be available under some circumstances.
In that case, the code falls back to a dummy calculation. If someone has a test case for this, please let me know.

I have also taken the liberty to move the GradientLegend default z position to 100, so that it draws over a default plot, rather than under it.

Here is some test code that draws a GradientLegend on a plot with different axis orientations:
```python
import numpy as np
from pyqtgraph.Qt import QtCore, QtGui, QtWidgets, mkQApp
import pyqtgraph as pg

class MainWindow(pg.GraphicsLayoutWidget):
    """""" example application main window """"""
    def __init__(self):
        super().__init__()
        self.resize(900,600)
        layout = self # we are using a GraphicsLayoutWidget as main window for convenience

        xdata = np.array( [0.0, 0.2, 1.0] )
        ydata = np.array( [0.0, 0.8, 1.0] )
        for r_idx in range(2):
            for c_idx in range(2):
                p = layout.addPlot(row=r_idx, col=c_idx)
                if c_idx > 0: p.invertX()
                if r_idx > 0: p.invertY()
                leg = pg.GradientLegend([25, 150], [15, 10])

                leg.setColorMap( pg.colormap.get('viridis') )
                leg.setLabels({'val0': 0., 'val1/2': 0.5, 'val1': 1.})
                leg.brush = pg.mkBrush(color='#33001180')
                leg.pen = pg.mkPen(color='#CCCCFFAA', width=1, cosmetic=True)
                leg.textPen = pg.mkPen(color='#CCCCFF', width=1, cosmetic=True)

                p.addItem( leg )
                p.addItem( pg.PlotCurveItem( x=xdata, y=ydata, pen='y' ) )
        self.show()

mkQApp(""gradientlegend test"")
main_window = MainWindow()

## Start Qt event loop
if __name__ == '__main__':
    mkQApp().exec()
```

Old output on the left <------> New output on the right :

![GradientLegend orientation](https://user-images.githubusercontent.com/19742018/123285226-d2be1900-d547-11eb-969d-1d12863e1fe0.png)

Closes #1847",8,6,[]
54,676781348,1862,12777496,2021-06-24 04:32:48,2021-06-24 17:46:15,closed,Deprecate MetaArray Entirely (for 0.14 release),"We've had some internal discussions about this, but basically MetaArray is not used elsewhere within the library, it's not tested, and I suspect [xarray](https://xarray.pydata.org/en/stable/) could likely fulfill the roll better.

Doing a github advanced search for MetaArray, I'm showing some other repositories that have import statements for it, but didn't see much actual usage.

If you are dependent on MetaArray, and this deprecation will affect you, please open a discussion and get a conversation started, we want to hear from you.",2,1,[]
55,676555911,1861,12777496,2021-06-23 19:24:47,2021-06-24 02:34:55,closed,progress dialog fix,Looks like this broke in d455da9aeca73d25ae75c4fc1db4fa691db9b30d so I added a test this time.,1,2,[]
56,675464151,1860,12777496,2021-06-22 14:15:10,2021-06-22 18:28:19,closed,remote: exchange pids if running in Windows venv,"This PR works around the issue where the remote rendering examples (RemoteGraphicsView.py and RemoteSpeedTest.py) do not work under Windows platform when run under a venv.

Would fix #1052

Technically, the workaround could be applied for all platforms, venv or not. However, it is probably safer to only apply it where it is needed.
",1,1,[]
57,674719217,1853,12777496,2021-06-21 16:50:20,2021-06-22 18:50:34,closed,make getColors and getStops behavior more consistent; add tests,"This PR seeks to address the not very well-defined behavior of the `getColors` and `getStops` methods of ColorMap, which lead to problems such as exhibited in #1850.

The issue there seems to be that an undefined mode parameter to the `getStops()` method used to return the internal color values ""as stored"", which in this case used to be in byte format.

Returning the data in an undefined internal format seems like a bad idea:
E.g. restoring the originally intended hsv interpolations or other color space conversions benefits from a change to a higher precision internal float representation. The performance cost of converting to the user-desired format is also small, since `getStops()` already implements a caching method.

This PR tries to update the `getColors()` and `getStops()` methods as follows:
- default return format is byte, which would have been the previous default in most cases I can see, and works best with QColor initialization (see the example code in #1849).
- `getColors()` now internally calls `getStops()` to reduce code duplication and to make use of the existing cache.
- both methods can now also return colors as a list of QColors, which was already implemented, but not documented. I believe it may have worked only when the internal representation was byte.
- both methods now support string specifiers 'byte', 'float' and 'qcolor' in addition to the integer enumeration values. Unknown method strings will raise an error. 

The PR also adds some basic tests for these format conversions; more tests for the code in colormap.py seems needed, though.",11,2,[]
58,673981647,1846,12777496,2021-06-20 06:18:36,2021-06-26 06:26:26,closed,reduce pollution of pg namespace,"This PR adds ```__all__``` to the various files imported into pg namespace by ```__init__.py```.

```functions.py``` stands out in particular as it defines many functions, some of which are really only meant for use within the library. For backwards compatibility, the functions are still exported except for those functions which have only been added recently. The preferred way of accessing those functions is via ```pg.functions```.

Most functions in ```colormap.py``` also look like they shouldn't reside within pg namespace. @NilsNemitz, could you provide some input here?

Potentially this PR could break user code that used accidental imports from pg namespace. E.g.
```
python -c ""import pyqtgraph as pg; print(pg.warnings)""
```",24,5,[]
59,673866995,1845,12777496,2021-06-19 11:35:55,2021-06-22 23:17:40,closed,Separate out mouse events stolen by AxisItem,"While it graphically makes sense to draw the AxisItem on top of what is plotted, particularly for images, this has unintended side-effects:
If AxisItem is placed above the ViewBox, which places itself at z order -100, then it will grab mouse events inside its bounding box. And this bounding box overlaps the plot. It overlaps *all* of the plot when the ticks are extended to draw a grid.

This PR adds a check to the handling of mouse events in AxisItem:
If the (wheel event) or (button down) occurred within the bounds of the linked ViewBox, then the ViewBox gets to handle the event as if it had been assigned to it directly. 

A good test for this is to run the ""GraphicsItems / Scatter Plot"" example and add a grid by including
```w3.showGrid(x=True, y=True)``` at the end of example (3):
Mouse wheel zoom and drag events should still behave differently when performed on the axes vs. plot, even with the grid drawn on top. Mouse clicks also still get properly directed to the individual points of the ScatterPlotItem.

While looking at this, I came across the line:
```python 
p.translate(0.5,0)  ## resolves some damn pixel ambiguity 
```
in the `drawPicture()` method (L.1154) of AxisItem.

Does anybody have some context for that? Are we drawing all of our axis ticks offset half a pixel to the right?
Is this compensated for in generating the tick specs? I did not see it.
And why does it affect only the x direction?

I am tempted to remove the translation...

Closes #1843.",6,3,[]
60,673770607,1844,12777496,2021-06-18 23:01:33,2021-07-23 21:40:49,closed,feature More parameter item types,"It's highly likely that I failed or missed something in this effort. The pull request is an attempted direct copy from @feketeimre's older one (#665), but that passes all current `master` tests. If they can confirm whether anything is missing, this should be much easier to merge into the current branch and we can close the very outdated `feature3` pull request

__TODO:__
- [x] Input sanitation on line-edit file parameter (or set to readonly)
- [x] Convert calendar to string on saveState (maybe add a `format` option); QDate has convenient `toString` method
- [x] Convert font to string on saveState
- [x] Better value saving on pen (no obvious way to include the entire pen state in the `value` field, so I'm currently playing with always saving a black pen and setting options like `color`, `width`, etc. to compensate. Has the downside of functioning differently from every other parameter whose value is self-contained...
- [x] A few Parameter bugfixes along the way (Slider optsChanged, WidgetParameterItem's signal hookup on value change 
__________
Pen: Pops up a dialouge that allows the user to customize a pen. Setting pen value is not working yet.
Progress bar: For indication things.
Slider: Easier way to set values that dont require precision.
Fonts: Picking font types. Next thing could be a Font dialog.
Calendar: For picking dates or intervals
Open/save file/files/directory: Pops up an open/save file/directory dialog to select a file/directory. Filter string and caption can be defined too.

A PenSelectorDialog widget was created for the pen parameter item too.

Also added these parameter items to the example.",27,40,['scipy-sprint']
61,672090517,1840,12777496,2021-06-17 01:53:43,2021-06-17 03:17:35,closed,Allow border=False in GraphicsLayout,"In response to Issue [#1593 ](https://github.com/pyqtgraph/pyqtgraph/issues/1593)

This fixes errors of setting the property of border=False in the GraphicsLayoutWidget and shows graph without borders. 

That might be enough to fix this issue and it doesn't break any other tests.",1,1,[]
62,671015916,1838,12777496,2021-06-16 05:07:16,2021-07-08 06:16:26,closed,Prep for 0.12.2 release,"PR here includes a changelog of the changes made to pyqtgraph since 0.12.2.  I left out some PRs that were merged off the list (things like static code checker cleanups, documentation expansion, moving the test data into the repository, things of that nature).  I'm not opposed to adding them if someone thinks they should be added; but I was trying to keep things a bit more general; git-blame is good for finite details 😆 

Thank you to all the contributors and maintainers that went into this release, while a patch version, there are _substantial_ improvements to the library here that wouldn't have been possible without the work of @pijyoi @outofculture @NilsNemitz and others that have volunteered your time/effort/skills to make this library better for everyone. 

Also a special thank you/apology to @chrismullins for making some changes to a PR they created 4 years earlier (we'll do our best to not let that happen again!).

EDIT:   A few issues popped up that we should address before doing the release

* [x] #1847 
* [x] #1843
* [x] #1857
* [x] #1862
* [x] #1846",8,4,[]
63,670972538,1837,12777496,2021-06-16 03:28:13,2021-06-16 03:45:49,closed,"Revert ""skip pytest monkeypatch""",Reverts pyqtgraph/pyqtgraph#1835,1,1,[]
64,669558858,1835,12777496,2021-06-14 13:17:24,2021-06-15 02:58:30,closed,skip pytest monkeypatch,Disabling the tests using pytest monkeypatch seems to stop the segfaults.,6,1,[]
65,668909622,1834,12777496,2021-06-12 16:49:03,2021-07-18 04:02:06,closed,Add option to limit LinearRegionitem bounds to a secondary item,"Picks up from #740. The actual clipping wasn't really implemented there, so I took a shot at it.

I ended up using the item's `ViewBox` to compute its bounds via `childrenBounds` because that should be fairly robust for a variety of different item types. Notably, using some form of mapping the item's `boundingRect` doesn't work for `PlotDataItem` because it doesn't implement `boundingRect`. It also fails silently, so it'd be tricky for a user to figure out you need to use `PlotDataItem.curve` or similar instead.

Another benefit is `childrenBounds` gives bounds that are more appropriate for data - if you use the region for computation, hitting the limit would give values you expect.

The downside is `childrenBounds` may be a little expensive to put in `LinearRegionItem.boundingRect`. I haven't figured out if there's a better way to be notified of an item's range changing or if there's a cheaper-to-compute object to cache for invalidating the bounds.

WIP for now to:

- [x] Further evaluate if there's a better mechanism for updating the bounds (or if there's a better place to do the update than `boundingRect`)
- [x] Handle the case that a user calls `setBounds` directly - I think this should disable the `clipItem`
- [x] Tests for more edge cases",5,14,['scipy-sprint']
66,668787886,1833,12777496,2021-06-12 06:26:53,2021-06-12 15:36:01,closed,fix ScatterPlot render issues on PyQt6 6.1,"This PR fixes #1832.

The problem may have to do with the signature of ``QImage.fill()``` being changed slightly.

PyQt5 5.15, PyQt6 6.0
```python
In [4]: QtGui.QImage.fill?
Docstring:
fill(self, Qt.GlobalColor)
fill(self, Union[QColor, Qt.GlobalColor, QGradient])
fill(self, int)
Type:      builtin_function_or_method
```

PyQt6 6.1
```python
In [2]: QtGui.QImage.fill?
Docstring:
fill(self, Qt.GlobalColor)
fill(self, Union[QColor, Qt.GlobalColor, int, QGradient])
fill(self, int)
Type:      builtin_function_or_method
```

Doing a search for other potential problems in the library yields:
```
$ git grep ""fill(0""
pyqtgraph/graphicsItems/ROI.py:        im.fill(0x0)
pyqtgraph/widgets/RemoteGraphicsView.py:            self.img.fill(0xffffffff)
```
I don't understand ROI enough to say whether it needs the fix.

ScatterPlot needs the fix because it needs the undrawn background to be transparent.
RemoteGraphicsView doesn't seem to be affected, likely because it draws on the whole QImage.
",8,2,[]
67,667615180,1830,12777496,2021-06-11 02:57:04,2021-06-11 15:46:21,closed,Add missing enums,Identified some more enums that got missed as part of #1818 ,0,1,[]
68,667612768,1829,12777496,2021-06-11 02:51:14,2021-06-15 17:06:51,closed,try using QPainter.drawPixmapFragments,"This PR implements the method shown in https://github.com/pyqtgraph/pyqtgraph/issues/1781#issuecomment-858306326 to collapse multiple calls to drawPixmap() to a single call to drawPixmapFragments().

It's only meant to be an optimization for PySide bindings. On PySide bindings, it shows only a very small speedup on ScatterPlotSpeedTest.py. This is only meant to be a proof of concept to see if it's worthwhile to take things further (by someone else with more knowledge of how scatter plots are used).

As an aside, during testing with ScatterPlotSpeedTest.py, it appeared to me that using _USE_QRECT was slower on _all_ current bindings. i.e. the premise that it was faster on PyQt bindings didn't seem to be true. Perhaps someone more familiar with scatter plots could check this out.",26,8,[]
69,666788452,1828,12777496,2021-06-10 11:16:10,,open,Add a few ImageView improvements,"Taking up #396 (thanks, @radjkarl!), this PR does a little more cleanup. Some of the features were incomplete or had bugs. I fixed some of these, omitted others. Here's what happened to everything:

`setHistogramLabel` looks good and is connected to the example now.

`discreteTimeLine`, now an init argument, controls snap-to-frame in the timeline. This can now handle non-integer xvals. The example now uses this option. A test now checks this.

`nframes` handles zero frames now. A test now checks this.

`play`, `keyPressEvent` and `timeIndex` methods are working smoothly. Spacebar now toggles play-through, instead of only starting it. Example now plays.

`opts` needed additional documentation and scaffolding, and I didn't want to put in the work for what didn't feel particularly impactful.

`setHistogramPrintView` needed some improvement, but I didn't understand the expected behavior well enough to take it over, so I just removed it. If this is still valuable to someone, a version with a more thoroughly described spec would be an acceptable addition.",2,19,[]
70,666105734,1827,12777496,2021-06-09 17:24:19,2021-06-09 20:32:25,closed,Fix BusyCursor to use internal stack provided by setOverrideCursor/restoreOverrideCursor,"`restoreOverrideCursor` previously cleared all cursors, so the old code had a bug where nested busy cursors would never clear themselves.

I don't actually know for sure that all our supported versions of Qt have the new behavior, so I'm going to keep this as draft until the CI tells me it's safe to use this new code.",1,11,[]
71,665472954,1824,12777496,2021-06-09 01:25:56,2021-06-09 22:02:48,closed,remove little-endian assumption for image export,"Remove little-endian assumption for image saving in:
1) ImageExporter.py
2) GLViewWidget.py

Note that for ImageExporter.py, we leave the image format as ARGB32 instead of switching to RGBA8888 in order to not have any unknown/unintended changes in rendering. (It is known, for instance, from #1738, that using RGB32 enables subpixel text font rendering)",2,3,[]
72,664390176,1821,12777496,2021-06-08 07:30:21,2021-06-08 12:39:35,closed,"error on presence of ""Exception:"" and ""Error:""","This PR seeks to address the CI failure of (macOS, PySide6 6.1.1, colorMaps.py).
On the above configuration, Matplotlib prints out some logging information that contains the string ""error"", which test_examples.py treats as a failure condition.

This PR changes the failure condition to only trigger upon the presence of the (case-sensitive) strings ""Error:"" and ""Exception:"". ",0,1,[]
73,662918692,1819,12777496,2021-06-06 11:03:31,2021-06-07 04:19:24,closed,add function to disable autoscaling,HistogramLUTItem has a function to enable autorange but no simple function to disable. Adding the simple function to disable.,1,1,[]
74,662697908,1818,12777496,2021-06-06 01:40:04,2021-06-09 04:57:45,closed,Convert Qt Enums to Qt6 Namespace,"While doing benchmarking for #1796 I noticed on PyQt6 bindings, a _lot_ of time was being spent shuffling the Enum namespace during the initialization while loading Qt.py.  The benchmark I used was to update the line plot 500 times.  43% of the runtime was spent in `Qt.py`, of which promote_enums consumed 38% of the overall runtime.  Attached is the output of of the call-graph.

It was brought to my attention by @The-Compiler that the Qt6 Enum namespace has been present in Qt5 from at least Qt 5.12; and after doing some testing, sure enough it was; so decided a migration was in order.

The fantastic [PyQtEnumConverter](https://gitlab.com/JakobDev/PyQtEnumConverter) library handled the bulk of the work.  It missed a lot of cases of `self.EnumValue`, but luckily the test suite was more than happy to error out along the way.   As I patched known issues in the test suite, I used my editors ""find all"" functionality to find other usages of those particular enums to try and convert cases that the test suite had no coverage of.  I think I got them all at this point.

Lastly, I took the opportunity to remove Qt 6.0 support from the README and some of the specific shims we had in place for it.  I have a hard time imagining what a use-case for someone needing Qt 6.0 support when 6.1 is released.

![pyqt6-plotlinespeedtest](https://user-images.githubusercontent.com/646398/120909682-544b1700-c62c-11eb-96d6-7ddc1582db44.png)

Sorry for the huge diff, I don't mean to give everyone head-aches with merge-conflicts.  

tagging @pijyoi due to their work in making the enum namespace equivalent; figure you may have some input

Looking through the diff before I hit submit, I see one of my changes in MultiPlotSpeedTest.py got caught up.  I don't mind restoring it if it would make people feel better.",16,8,[]
75,662341096,1817,12777496,2021-06-05 08:24:09,2021-06-07 04:55:51,closed,"implement QPolygonF codepath for connect=""finite""","This PR continues #1796 in optimizing ```arrayToQPath()```, but for connect=finite.


Timings:
| test  | time (s) | remarks | 
| --- | --- | --- |
| all_nonan | 0.043 |  | 
| all_withnan  | 0.175 | 1% nans |
| pairs | 0.414 | operator<< | 
| finite_nonan | 0.040 |  |  
| finite_withnan | 0.126 | 1% nans  |
| array | 0.415 | operator<<  |

Unlike the old ```operator<<``` codepaths, the time taken for this implementation is proportional to the number of nans present in the data. Hence, a heuristic is used to determine when to use the new implementation vs falling back to the old implementation. It is expected that nans are uncommon within the data to be plotted. If that is not the case, then timings should be no worse than before. 

For testing purposes, we do want to be able to force the usage of the new implementation. This is provided for by specifying ```finiteCheck = False```.

Benchmarking script:
```python
import timeit
import numpy as np 
import pyqtgraph.functions as fn

x = np.arange(32768, dtype=np.float64)
y = np.arange(32768, dtype=np.float64)
c = np.random.randint(100, size=32768, dtype=np.uint8) < 99
yn = y.copy()
yn[~c] = np.nan

def test_all_nonan():
    fn.arrayToQPath(x, y, connect='all')

def test_all_withnan():
    fn.arrayToQPath(x, yn, connect='all')

def test_pairs():
    fn.arrayToQPath(x, y, connect='pairs')

def test_finite_nonan():
    fn.arrayToQPath(x, y, connect='finite')

def test_finite_withnan():
    fn.arrayToQPath(x, yn, connect='finite')

def test_array():
    fn.arrayToQPath(x, y, connect=c)

print('all_nonan', timeit.timeit(test_all_nonan, number=100, globals=globals()))
print('all_withnan', timeit.timeit(test_all_withnan, number=100, globals=globals()))
print('pairs', timeit.timeit(test_pairs, number=100, globals=globals()))
print('finite_nonan', timeit.timeit(test_finite_nonan, number=100, globals=globals()))
print('finite_withnan', timeit.timeit(test_finite_withnan, number=100, globals=globals()))
print('array', timeit.timeit(test_array, number=100, globals=globals()))
```",1,3,[]
76,660158127,1816,12777496,2021-06-02 15:11:28,2021-06-02 16:19:28,closed,Fix #1814,"I think the two fixes are the only places where array values could be present. Most of the other compares are on values known to be strings, etc.

Fixes #1814 ",1,1,[]
77,658742547,1813,12777496,2021-06-01 07:15:59,2021-07-03 15:24:06,closed,propose fix LineROI coordinate initialization,In my case (pyqtgraph 0.11.0 from a few months ago) LineROI does some irrelevant coordinate conversion upon initialization. Please ignore if this was fixed already.,2,1,[]
78,657851799,1812,12777496,2021-05-31 00:40:58,,open,Feature: Facilitates Parameter-Function Interaction,"I've been excited for quite a while now about a PR for Parameters which infer their children from function definitions, since ~95% of my usage of parameters is to interact with a specific function. This allows for said interaction with multiple customization points:

* The way the function is run can be modified (i.e. by button, changed parameter, and/or changing parameter)
* Title formatting
* Ignorable / overridable modifications to default values
* 'Deferred' evaluation for inputs from another scope (i.e. an outer variable)

Please refer to the test `parametertree/tests/test_Parameter::test_interact` and example `examples/InteractiveParameter` for some usage.

See an 'in-the-wild` use in the modified `ScatterPlotSpeedTest` example.

I'm not happy about some of the API (i.e. clobbering the `Parameter` namespace), but hopefully this starts the conversation.",10,32,['scipy-sprint']
79,657625942,1809,12777496,2021-05-30 07:42:27,2021-06-02 05:43:58,closed,Sanitize input for plotItem.showGrid (was documentation fix for plotItem.showGrid alpha setting),"Looking through some issues, I came across #1484:

setting `plotItem.showGrid(True, True, alpha=0.5)` raises `TypeError: setValue(self, int): argument 1 has unexpected type 'numpy.float64'`

This is a documentation error:
The expected alpha value does not range from 0.0 to 1.0 (as in the current docstring), but instead ranges from 0-255.

This PR updates the docstring to show that and adds a cast to int to avoid raising an error.
The `alpha=0.5` value in the original report will no longer result in an error and draw an invisible, fully transparent grid. 
Setting `alpha=127` creates the desired half-transparent grid.

So this should close #1484.",3,2,[]
80,655913716,1807,12777496,2021-05-28 06:27:59,2021-06-05 04:06:12,closed,Merge test data + make tests directory which contain tests,"This PR aims to get pyqtgraph in-line with standard python package directory structures, by creating a `tests` directory on the root level, and putting all tests in there, including the images from [test-data](https://github.com/pyqtgraph/test-data) repository.  The best example of this is in the ""Good Integration Practices"" on the [pytest documentation page](https://docs.pytest.org/en/6.2.x/goodpractices.html#tests-outside-application-code).

Instead of just copying the images, I generated new images with Qt6, which the test suite passed with out of the box for the most part, even after resetting the pxCount to 0 for Qt5 and Qt6.  On windows, some of the ROI tests had a few pixels off, but setting pxCount to 2 there seemed to address the issue (which is much smaller than the 10 it was before for Qt5).

With `setup.py` we can ensure that test data is _not_ bundled with the pip package, and we can get more reliable use of `conftest.py` files (which we make minimal use of presently).

While doing the huge shuffle of the test suite, a number of issues presented themselves (including a call to `QApplication.instance().deleteLater()`).  As I addressed them; I realized that the test suite no longer emits warnings; so I addressed #1025.  Turns out pytest runs into an unraisable exception with how we call our examples, which this was addressed.

I took the opportunity to fix some of the issues the static code checker had flagged (non-secure temporary files), and I modified `debug.printExc` so it doesn't just print an exception (while suppressing it), but it actually raises a Runtime Warning.  This is to prevent the case of #1804 where the exception was swallowed by this mechanism, despite there being a test to catch that very thing.

~Unfortunately, on my local machine, I'm triggering segfaults with `test_ImageItem.py`, `test_NonUniformImage.py` and `test_InfiniteLine.py`.  Until these segfaults are resolved, I'm leaving this PR in draft form.~


Fixes #1025 
Fixes #1064",30,15,[]
81,655087647,1806,12777496,2021-05-27 14:50:42,2021-05-27 15:51:06,closed,Revert Point.angle behavior change,Commit a534132c6 introduced a behavior change in `Point.angle()`. This causes problems downstream that are difficult to debug since the change occurs silently.,1,2,[]
82,654758607,1805,12777496,2021-05-27 10:14:16,,open,CSVExporter now can export x- and y-axis errors,"CSVExporter now can export x- and y-axis errors, if such are introduced by the ErrorBarItem. This is my fix, and it works well for the Exo-Striker tool. Yet, a more elegant code solution could exist.",2,3,[]
83,653158320,1804,12777496,2021-05-26 04:04:34,2021-05-27 00:14:08,closed,fix click bug on removable ROIs; test,"Looks like `in` stopped working at some point, but this `int` version should be safer and work everywhere.",9,2,[]
84,651618358,1802,12777496,2021-05-24 20:53:55,2021-05-24 21:13:07,closed,update cx_freeze example and add a workaround for templates,"Updated the example to a working state with cx_Freeze 6.2

Added a workaround to copy the unreferenced template files to the packaged app.",1,1,[]
85,651373504,1801,12777496,2021-05-24 14:21:53,,open,More import fixes for cx_freeze,Related to #1303 for windows. @berr was working on this and forgot to open a PR for the latest commit on his fork from last year. cx_Freeze is going strong.,10,1,[]
86,650904732,1800,12777496,2021-05-24 01:37:24,2021-05-24 04:22:32,closed,Fixing GLMeshItem memory leak in face drawing on 64-bit Linux (#1783),"PyOpenGl requires 32-bit uint as corresponding argument to GL_UNSIGNED_INT. On 64-bit Linux, np.uint translates to a 64-bit uint, so changing the astype to explicitly be np.uint32 as required.
Fixes #1783 ",1,1,[]
87,650870544,1799,12777496,2021-05-23 22:54:51,2021-06-02 05:21:50,closed,Force cameraPosition() to return Vector class. ,"In quaternion mode, GLViewWidget has problem with QVector3D conversion in ```def pixelSize```, #1792 

I think Vector class minus(-) operator has to return Vector class not Qvector3D, but as it has no minus operator, it returns QVector3D. That's the origin of the problem. 

But as a quick way to fix it, force to convert it to Vector in ```cameraPosition() ``` suggested by [pijyoi](https://github.com/pijyoi).
",1,3,[]
88,650809099,1797,12777496,2021-05-23 15:33:27,2021-06-09 03:41:46,closed,Color map linearization,"While working on #1625 , I repeatedly ran into the problem of defining colors that are perceptually well separated.

This became more manageable by sampling colors from the included perceptually uniform color maps. However, the included maps are not suitable for the purpose of e.g. defining warm and cool gray scales.

This PR adds 
- a color ramp generator that can create such ramps with approximately equal perceptual distance between equally spaced points. This generator takes a hue and saturation to generate not only slightly tinted gray scales, but also monochrome color scales that imitate old computer screens.
- a `linearize()` method for `ColorMap` that adjusts the positions of the provided color stops according to the perceptual distance of the assigned colors, approximately linearizing the overall map in terms of perceived rate of change
- a `colorDistance()` function that calculates the perceived distances between a set of QColors according to CIE76. This seems adequate for the current application, but we might later add the more accurate metrics based on the CIELab color space.
- a `CIELabColor()` function that generates a QColor from a set of CIE L* a* b* values
- a `colorCIELab()` function that calculates CIE L* a* b* values for a QColor.

It also:
- fixes a bug that prevented `ColorMap.__init__()` from accepting a list of QColors.
- moves the color-related examples into a `Colors` folder in the Example app.
- cleans up the code of the previous color map example a little
- adds a new example for the linearization and color ramp generation
- adds some tests for conversion to and reconversion from CIELab; unfortunately I currently have no reference to confirm exact L* a* b* values. 

This is basically part of #1625, but it seemed reasonable to factor this out as a separate PR. It shouldn't break any existing applications.

![linearized color maps](https://user-images.githubusercontent.com/19742018/119266318-4e653700-bc25-11eb-86c7-abb2496dcfc3.png)
",10,13,[]
89,650715279,1796,12777496,2021-05-23 02:31:55,2021-06-05 04:33:46,closed,"If arrayToQPath uses connect=all, use a different construction for QPainterPath","It's been discussed that the [QDataStream >> QPainterPath operation ](https://github.com/pyqtgraph/pyqtgraph/blob/master/pyqtgraph/functions.py#L1796 )is a _real_ bottle-neck in arrayToQPath.  [Here is a stack overflow post](https://stackoverflow.com/q/63855707/5298841) that points out that `QDataStream >> QPainterPath` operation is _really_ slow.

Taking a peak at what [PythonQwt does](https://github.com/PierreRaybaut/PythonQwt), that project constructs an open QPolygonF and draw that.  QPainterPath does have an `addPolygon` method, so we can generate a QPainterPath that is made up of a QPolygonF.

Doing some testing on `examples/MultiPlotSpeedTest.py` shows a _significant_ performance boost when doing this.  This PR shows 35 fps while master branch is at 25 fps.

This PR also incorporates a second optimization, it checks for `NaN` values on `PlotCurveItem.updateData()` instead of at arrayToQPath check, and allows for an optimization parameter to be passed to skip the NaN check which does cause a performance hit.

So first thing, the function is largely lifted from PythonQwt, so huge thanks to that project for figuring out this optimization.  

~Some caveats, this does not work w/ Qt6; so definitely not ready for merging.~ Works with Qt6 now.

EDIT: on second thought, this `NaN` check might not be buying us anything... doesn't look like `arrayToQPath` is called any more often than `PlotCurveItem.updateData`... so we're just moving the calculation from one part of the library to another...",61,16,[]
90,650539859,1795,12777496,2021-05-22 01:41:04,2021-06-02 06:05:01,closed,don't rely on QImage-wrapped buffer being writable,"This works around #1784 for ImageItem.py.
It converts a potential PySide6 6.1.1 breakage to a performance loss (that would be limited to PySide6).
",10,2,[]
91,650532803,1794,12777496,2021-05-22 00:53:28,2021-06-15 23:42:54,closed,implement numba colormap lookup,"https://github.com/pyqtgraph/pyqtgraph/pull/1693#issuecomment-836241886 shows codepaths involving large luts (""uint16lut"") are relatively slower. However, they are the codepaths that are taken by VideoSpeedTest.py and ImageView when using ""float"" and ""uint16"" dtypes.

Implementing the colormap lookup using Numba gives a decent speedup on Windows. YMMV on other platforms.

|      4096x4096 numba          |    master     |  this PR   |
|              -------------           | ------------- | ---------- |
| float_levels_uint16lut         |    69.9±0ms   |  28.4±0ms  |
| uint16_levels_uint16lut        |    50.7±0ms   |  19.0±0ms  |
| uint16_nolevels_uint16lut      |    50.6±0ms   |  19.0±0ms  |

It is surprising that a numba-ified version of ```np.take()``` should yield a 2.5x speedup.",0,3,[]
92,649589078,1792,12777496,2021-05-21 01:35:15,2021-05-23 13:16:08,closed,Fix the wrong conversion of QVector3D to numpy array in GLViewWidget.py,Fix the wrong conversion of QVector3D to numpy array.,12,1,[]
93,648616114,1791,12777496,2021-05-20 09:09:29,2021-05-20 14:22:53,closed,callable luts still need to be put onto a substrate,"Thanks for finding this bug, @pijyoi. Performance isn't going to be great for this case, but it's no worse than it was.",0,1,[]
94,648518976,1790,12777496,2021-05-20 07:27:35,2021-05-21 00:22:56,closed,QVector3D conversion problem in GLViewWidget.py,"I fixed an error in GLViewWidget.py
This error happened when I changed the rotation mode from Euler to Quartenion. 
I found that the cause of the error is the wrong conversion of QVector3D to numpy. ",7,7,[]
95,647648219,1786,12777496,2021-05-19 13:07:23,2021-05-20 00:21:12,closed,Bypass makeARGB,"This continues #1693 but with corrected cupy behavior.

@pijyoi yeah, the lookup table substrate was the problem.

With that, this branch now provides across-the-board improvements to cupy-enabled benchmarks!",4,48,[]
96,645386615,1779,12777496,2021-05-16 21:54:05,2021-05-20 01:15:11,closed,Use fallback minStep in dec mode SpinBox (Issue 1756),"Hello, I made some changes addressing issue #1756

If a SpinBox is in 'dec' mode but there is no 'minStep' value it will set 'minStep' to the same value as 'step'. This fixes the crash mentioned in the issue.

I also made a change to examples/parametertree.py that sets 'minStep' to 1.0e-12 in the DEC stepping spinbox. I did this because while the change mentioned above prevented a crash, it set the minimum step to 1.0, which meant the spinbox could not step from 1 Hz to 0.9 mHz, it would go to 0 Hz instead. Setting 'minStep' to a very small value keeps the behavior similar to how it was before the fix.",2,2,[]
97,645270131,1778,12777496,2021-05-16 06:14:56,2021-05-16 17:38:07,closed,"Do not attempt to avoid np.log(0), instead ignore the warning in GLVolumeItem Example","Fixes #1775

Also took the opportunity to clean the file a bit.",1,1,[]
98,645082303,1776,12777496,2021-05-15 05:02:45,2021-06-05 15:19:55,closed,"Add ""GLTextItem""","I created an item that can display text in a GLViewWidget using GLUT.

```python
gvw = GLViewWidget()

item = GLTextItem(pos=(x, y, z), color=(r, g, b, a), text='string to display', font=GLUT_BITMAP_HELVETICA_18)
gvw.addItem(item)

item.setData(pos=(x, y, z), color=(r, g, b, a), text='string to display', font=GLUT_BITMAP_HELVETICA_18)
```",25,28,[]
99,644309341,1774,12777496,2021-05-13 22:36:28,2021-05-16 05:43:00,closed,implement pg.exec(),"Related to #1770. PySide6 6.1 deprecates exec_() thus running the examples on PySide6 6.1 have a deprecation warning.
This PR implements pg.exec() and changes all examples to make use of it.

The exec() and exec_() shims added in #1771 are reverted. The intent then was to change the examples from ```pg.mkQApp().exec_()``` to ```pg.mkQApp().exec()```. They had not actually been used yet.",1,5,[]
100,644176240,1773,12777496,2021-05-13 18:50:01,2021-05-13 22:37:07,closed,Add a Code of Conduct,"This should help our community!

@j9ac9k and @ntjess you two should especially look at this, seeing as you're both included as Responsible Community Leaders 😁 ",9,2,[]
101,643718829,1772,12777496,2021-05-13 06:09:17,2021-05-13 19:22:00,closed,don't print out expected Exception,"this fixes the RemoteGraphicsView portion of #1770.

I _think_ this arises from https://bugreports.qt.io/projects/PYSIDE/issues/PYSIDE-1523?filter=allissues.
In a PySide6 6.1.0 installation, within the file Lib/site-packages/PySide6/glue/qtcore.cpp, there is code that probes for some attribute ""im_func"". In such a case, failure is considered normal. However, remoteproxy.py reports all exceptions, which causes CI to fail.

The quick and dirty workaround done here is to avoid printing out this particular exception.

The real issue is that not all exceptions are errors.",1,2,[]
102,643606243,1771,12777496,2021-05-13 01:14:18,2021-05-13 04:51:01,closed,some fixes PySide6 6.1.0,"fix the easy parts of #1770 for PySide6 6.1.0.
i.e. RemoteGraphicsView.py still fails",1,5,[]
103,632560221,1768,12777496,2021-05-07 10:58:41,2021-06-02 05:25:08,closed,Format_RGB32 will always have alpha equal 255,"this also removes the assumption that we are on little-endian.

```python
In [18]: qimg = QtGui.QImage(1, 1, QtGui.QImage.Format.Format_RGB32)

In [19]: qimg.fill(QtCore.Qt.GlobalColor.transparent)

In [20]: np.frombuffer(qimg.bits(), dtype=np.uint8)
Out[20]: array([  0,   0,   0, 255], dtype=uint8)
```",2,1,[]
104,632378826,1766,12777496,2021-05-07 07:49:09,2021-05-07 15:40:03,closed,VideoSpeedTest.py : Add numba checkbox,Allows user to interactively enable/disable numba to see its effect on the frame rate,1,1,[]
105,631015990,1765,12777496,2021-05-06 00:38:01,2021-05-06 01:07:34,closed,more complete `maxTraces` behavior,"maybe really actually this time.

closes #1763 ",0,1,[]
106,630927783,1764,12777496,2021-05-05 21:30:42,2021-05-06 00:08:05,closed,show and hide properly for maxTraces,closes #1763 ,1,1,[]
107,629454969,1759,12777496,2021-05-04 01:04:19,2021-05-04 03:31:51,closed,#1758 Fixed typo in InfiniteLine (sigclicked vs. sigClicked),,2,1,[]
108,628781045,1757,12777496,2021-05-03 01:17:17,2021-05-05 04:25:43,closed,"Support horizontal HistogramLUT{Item,Widget}","A few things going on here (sorry):

- Support for horizontal orientation (fixes #99)
- Documentation improvements (and conversion to numpy-style docstrings)
- A few minor bug fixes and cosmetic-ish code changes

This felt very ugly to implement, so suggestions for cleaning it up would be appreciated.

I also thought perhaps we could just assume the orientation should be vertical if gradient position is left or right and horizontal otherwise. However, from a user perspective, I'd probably rather specify orientation and let the default gradient position take effect rather than use the gradient position to control orientation.",7,10,[]
109,628497173,1754,12777496,2021-05-01 21:27:34,2021-05-02 04:28:49,closed,Remove pytest extensions from ci,"This PR hopes to address some of the intermittent failures that we have been seeing in CI.  As the CI machines seem to not have significant resources, we should likely not run pytest-xdist.  Also, as we are not keeping track of coverage, there is no reason to collect that information at it stands.",2,3,[]
110,628494466,1753,12777496,2021-05-01 21:05:16,,open,First Attempt at Restructuring Documentation,"This PR is just a start, and I would welcome any input; other maintainers are encouraged to push changes to this branch should they feel a change is worthwhile.

This PR starts with 

* updating the script for `doc/listmissing.py`, which attempts to identify portions of pyqtgraph that are undocumented.
* update `.gitignore` to ignore the build directory.
* Fix `ColorMapWidget` documentation links
* Using the pydata-sphinx-theme ( https://github.com/pydata/pydata-sphinx-theme )

After that, this PR attempts to restructure existing documentation into 4 distinct sections.

* Getting Started
* User Guide
* API Reference
* Contributing

The main `index.html` page is now using panels (heavily borrowed the idea from pandas: https://pandas.pydata.org/docs/ ).  The rest of the changes in this diff has to do with shifting around the relevant",1,6,[]
111,626316158,1749,12777496,2021-04-29 17:32:08,2021-04-30 17:41:12,closed,useCupy option should be settable after ImageItem init,This adds a test and fixes a bug in how we check for the useCupy option.,7,5,[]
112,625624348,1748,12777496,2021-04-28 21:54:52,2021-04-29 04:35:27,closed,fix bug when plotting boolean arrays,Just converts them in `DataPlotItem.getData`. Adds a test.,2,4,[]
113,625516515,1747,12777496,2021-04-28 19:46:52,2021-04-30 02:34:19,closed,Update symbols documentation and inverted up and down arrows of scatterplotitem,,10,3,[]
114,625034052,1746,12777496,2021-04-28 09:04:25,2021-04-29 03:46:25,closed,fix: cprint of remote output needs decode(),"To trigger the bug that this PR fixes, under Windows OS, run examples/RemoteGraphicsView.py after editing ```debug=False``` to ```debug=True```.
Debug output from the remote end will raise an exception and hang the remote end.

Local end debug output is colorized in white.
Remote end debug output is colorized in green.

This bug affects Windows OS only as the FileForwarder class is only used on Windows.",3,1,[]
115,622927139,1743,12777496,2021-04-26 03:38:01,2021-04-26 05:01:06,closed,Cleanup some static code checks,"This PR aims to address some things like unreachable code, and other issues the CoreQL static code analyzer identified.  By no means does it address everything, but these are just a batch of issues that I thought were gimmies.",0,5,[]
116,622615830,1742,12777496,2021-04-24 17:00:48,2021-05-07 06:20:21,closed,Make plotting with gradients more fun,"Inspired by #1712, I looked at what options we have for plotting with colors according to values.

It turns out that QPen lets us do that without problem, but currently it is necessary to manually define a gradient. As a user, it is also not obvious that the coordinates used in the definition of the gradient directly correspond to the plotted values.

This PR adds convenience methods to get a `QBrush` or `QPen` from a ColorMap object.
It extends the functionality of the already existing `getGradient()` method to handle repeating and mirrored mapping modes.

It also adds a `reverse()` method to ColorMap, which reverses an existing map, which is often convenient for imported maps.

An example is included based on the discussion of #1737, demonstrating that smoothly updating plots are possible even with fancy coloring options.",4,15,[]
117,622611815,1741,12777496,2021-04-24 16:33:51,2021-04-29 04:29:47,closed,Various performance improvements to pg.Point,"Trying again, this PR fixes the breakage I made in 

This change makes use of QPointF methods which perform faster than the python
equivalent methods.  Furthermore, some tests are added, and I fix the breakage I made with `Point.angle()`

https://github.com/pyqtgraph/pyqtgraph/blob/master/pyqtgraph/Point.py#L103



",5,5,[]
118,622534824,1740,12777496,2021-04-24 06:42:07,2021-04-24 14:54:22,closed,Improve Performance of pg.Point methods,"While working on #1724 I noticed the `pg.Point` methods weren't making good use of the QPointF superclass methods at its disposal.  I decided I would modify that within Point itself, and modify calls to point object to use the modified methods.  I also deprecated some methods in favor of equivalent methods implemented with QPointF.

",4,0,[]
119,622134497,1739,12777496,2021-04-23 14:58:58,2021-04-24 16:41:40,closed,Export dialog: ParameterTree needs 2 columns,"To address #1728, where pyside{2,6}-uic.exe generate code that cause Parameter values to not show up.
The hand-edited version drops some redundant statements and reduces the verbosity of the original generated code.",5,1,[]
120,621983145,1738,12777496,2021-04-23 11:05:27,2021-04-24 16:43:42,closed,use Format_RGB32 when using QImage as paint device,"This allows sub-pixel font antialiasing to take place.
This addresses the font issue mentioned in #1731.

Qt docs https://doc.qt.io/qt-5/qimage.html#Format-enum say:
""Rendering is best optimized to the Format_RGB32 and Format_ARGB32_Premultiplied formats""

Before (top is the remote render, bottom is the local render):
![before](https://user-images.githubusercontent.com/2657027/115860094-9c8aed00-a463-11eb-823c-64e96c1623c7.png)
After (top is the remote render, bottom is the local render): 
![after](https://user-images.githubusercontent.com/2657027/115860103-9e54b080-a463-11eb-9376-2ec7436d7b3f.png)

One thing that I noticed is that the remote render is brighter than the local render. This includes the plot, not just the text. And this is the case even before this PR.",5,1,[]
121,620935897,1736,12777496,2021-04-22 09:49:41,2021-04-22 16:51:20,closed,be hidpi-aware for remote rendering,"Get and set device pixel ratio for remote rendering.
Should address the low resolution issue (but not the font issue) mentioned in #1731.

Using examples\RemoteGraphicsView.py:
before:
![before](https://user-images.githubusercontent.com/2657027/115693291-5f0a5f00-a392-11eb-8c38-933bb01b0ed1.png)
after:
![after](https://user-images.githubusercontent.com/2657027/115693333-66316d00-a392-11eb-8d90-fa86549d4fb4.png)
",1,1,[]
122,620736787,1735,12777496,2021-04-22 03:55:30,2021-04-22 16:52:10,closed,unify _dpiRatio() and devicePixelRatio(),trying to fix #1732,2,1,[]
123,620498981,1734,12777496,2021-04-21 19:57:23,2021-04-22 02:26:24,closed,Fixes #1733 to adapt ColorBarItem to row-major settings,``pyqtgraph.graphicsItems.ColorBarItem.ColorBarItem`` now works for row-major and col-major settings. See #1733 ,1,1,[]
124,620135056,1730,12777496,2021-04-21 12:02:29,2021-04-21 14:02:29,closed,fix ExampleApp crash on PowerShell,"When the ExampleApp is launched from Windows PowerShell, selecting a binding other than the default and then launching an example may cause a crash of the ExampleApp itself. This may have to do with spawnle being documented as not thread-safe on Windows. https://docs.python.org/3/library/os.html#os.spawnle

This PR fixes it by replacing use of os.spawn* with subprocess.Popen, as suggested by the Python docs.
It also simplifies the code.",1,1,[]
125,619756236,1729,12777496,2021-04-20 23:44:45,2021-04-21 02:57:16,closed,allow gradient position to be configured on a histogram,"Taken from #394, this adds the `gradientPosition` init arg to `HistogramLUTItem`. Also:

 * short-circuits `paint` when the histogram is not visible.
 * renames a few variables to be more meaningful",0,2,[]
126,617489510,1726,12777496,2021-04-18 13:59:08,2021-06-07 14:44:19,closed,Add axis convenience methods and matrix display example,"In #1705, we show that PyQtGraph can plot a decent looking matrix representation.

However, it is quite obvious that the axis configuration includes a lot of boilerplate code.
This PR introduces some convenience functions:
`PlotItem.showAxes( (bool, bool, bool, bool), showValues=(bool, bool, bool, bool), size=(width,height) )`
takes simple tuples of Booleans to configure which axes are shown, and for which of them tick labels are displayed.
The order follow the Qt convention of left, top, right, bottom.
A size can also be given to assign extra space only for the labeled axes, and without the inconvenience of handling that horizontal axes now need `setHeight()` while vertical axes need `setWidth()`

`ViewBox.setDefaultPadding( padding )`
takes a user-defined value for the default padding fraction (which is so far fixed at 0.02).
In this way setting `ViewBox.setDefaultPadding(0.)` is sufficient to autorange the viewbox to the exact image bounds.
Non-zero values effectively rescale the padding algorithm to match the new factor.

PlotItem wraps this ViewBox method for convenience.

The default Z position of AxisItem has been changed to be 0.1, in order to always draw the axes on top of the image... With the current default of -1000, the ImageItem obscures them completely. I am not aware of the reason for the previous default setting, though.

These convenience methods greatly simplify the code to plot the correlation matrix, and the following has been added as an example:
``` python
# -*- coding: utf-8 -*-
""""""
This example demonstrates ViewBox and AxisItem configuration to plot a correlation matrix.
""""""
## Add path to library (just for examples; you do not need this)
import initExample

import numpy as np
import pyqtgraph as pg
import numpy as np

corrMatrix = np.array([
    [ 1.        ,  0.5184571 , -0.70188642],
    [ 0.5184571 ,  1.        , -0.86094096],
    [-0.70188642, -0.86094096,  1.        ]
])
columns = [""A"", ""B"", ""C""]

app = pg.mkQApp()
win = pg.PlotWidget()

# create correlation matrix image with correct orientation:
correlogram = pg.ImageItem(image=corrMatrix, axisOrder='row-major')

plotItem = win.getPlotItem()        # get PlotItem of the main PlotWidget
plotItem.getViewBox().invertY(True) # orient y axis to run top-to-bottom
plotItem.setDefaultPadding(0.0)     # plot without padding data range
plotItem.addItem(correlogram)       # display correlogram
# show full frame, label tick marks at top and left sides, with some extra space for labels
plotItem.showAxes( True, showValues=(True, True, False, False), size=20 )

# define major tick marks and labels:
ticks = [ (idx+0.5, label) for idx, label in enumerate( columns ) ]
for side in ('left','top','right','bottom'):
    plotItem.getAxis(side).setTicks( (ticks, []) ) # add list of major ticks and no minor ticks
plotItem.getAxis('bottom').setHeight(10) # include some additional space at bottom of figure

colorMap = pg.colormap.get(""cet-d1"")     # choose a perceptually uniform, diverging color map
bar = pg.ColorBarItem( values=(-1,1), cmap=colorMap) # generate an adjustabled color bar, initially spanning -1 to 1
bar.setImageItem(correlogram, insert_in=plotItem)    # link color bar and color map to correlogram, and show it in plotItem

win.show()
app.exec_()
```

",28,22,[]
127,617447200,1725,12777496,2021-04-18 08:56:22,2021-04-29 05:07:24,closed,clean-up of PlotDataItem downsample methods,"I had a look at #1704, where PlotDataItem errors out when clipToView is enabled with a dataset of zero width.

The error occurs in an optimization shortcut that tries to guess the clipping points for equally spaced data.
However, I don't think that shortcut is a worthwhile optimization:

It tends to mis-estimate the clipping point dramatically for non-uniform data such as used in the text.
There is a check to detect this mis-estimation and fall back to a full binary search, but 
- this only triggers if clipping was too aggressive, there is no detection (at all) for excess unclipped points.
- this check does not account for the additional points that need to be preserved when downsampling is active.

Finally, the optimization seems simply unnecessary:
On my system, the np.searchsorted call used in the precise detection only takes approximately 5 microseconds to search through 10 million datapoints. I would consider that negligible, especially since, unless spacing is perfectly uniform, the shortcut method will leave a significant number of unclipped points, which will slow down drawing (250 ns per line segment?).

I have removed the shortcut method, which also removes the code-path where the division by zero occurred.

So this should fix #1704 .",6,6,[]
128,617418376,1724,12777496,2021-04-18 04:14:10,2021-04-24 06:10:17,closed,Use math module methods for scalars,"Using numpy methods that are intended for vectorized operations is substantially slower than using the math module, so when feasible the math module methods should be used.

When benchmarking the results, I saw ~10% performance improvement in various methods in the optics demo.  In terms of the regular library, the benefit I saw in the paint speed of `InfiniteLine.py` was quite minimal unfortunately.  

Given that I had already done this work, figured I would submit it for others to take comment on and eventually merge if deemed worthwhile.",10,14,[]
129,617277856,1723,12777496,2021-04-17 09:23:34,2021-04-17 15:00:56,closed,Set fixed data ordering for ColorBarItem,"#1720 points out that ColorBarItem assumes 'col-major' data ordering for drawing its gradient bar.

If the user sets `pg.setConfigOption('imageAxisOrder', 'row-major')`, the gradient plots orthogonal to the intended direction, and only color 0 is visible. As suggested by @pijyoi , initializing ColorBarItem's internal ImageItem as `axisOrder='col-major'` fixes this problem.

Closes #1720 .",1,1,[]
130,617271179,1722,12777496,2021-04-17 08:25:52,2021-04-20 06:03:44,closed,"ColorMap: keep RGBA values as uint8, clean up docstrings","As @pijyoi points out in #1718, ColorMap does not actually provide byte values when in byte mode.

This originates in the very first conversion of color data, which passes it through `mkColor()` and then gets the RGBA values as long form integers by `QColor.getRgb()`.

This PR casts the data to np.unit8 at this stage, and this change seems to correctly propagate all the way to `getLookupTable()`
An alternative approach would be to store the data as floats from `QColor.getRgbF()` and convert to uint8 only when requested.
That would -in principle- allow working with higher bit-depth color data without changing the current behavior. Is that preferable?

I have tried to clean up the docstrings a little. They were promising HSV interpolations that do not actually exist.
The `mode` parameter now raises a deprecation warning.
I have also removed the explicit `mode='rgb'` setting from the nonuniform image example. ",2,3,[]
131,617258571,1721,12777496,2021-04-17 06:29:05,,open,Implement a GLGraphItem according to #807,"PR #807 aims to add a GLGraphItem widget.  I think this is a good idea, and the implementation looks good at a glance.  What the PR was missing is an example, and updates to the documentation to reference it. 

It appears the fork that the PR was created from has since been deleted, so I'm having to create a new PR w/ the changes.

Right now, the example is super-basic.  I was mostly looking to get something working, I'll think up something more interesting before merging; also would like to open this up for input from others.

While the PR is functional; work should be done here to support taking in data structures from the output of networkx library; and to provide a way to conditionally style the nodes/edges.

Some things I think the API should be able to handle

- [x] Plot data structures that are the output of `networkx.drawing.layout.<whatever>(G, ndim={2, 3})` for position data (this involves a dictionary keyed with nodeID, and the values are numpy arrays representing the position for each dimension
- [ ] Take edge information from `G.edges` which gives back a [MultiEdgeView](https://networkx.org/documentation/stable/reference/classes/generated/networkx.MultiGraph.edges.html?highlight=multiedgedataview) object

7/25 update: So getting style information from the MultiEdgeView object, is straight forward, but drawing those details is another story.  Specifically the edge color, and line width is going to be a bit tricky to implement.  I'm considering skipping handling any edge-specific features, and just make the color consistent everywhere.  Note, I think it will be straight forward to handle node-specific styling features.

7/30 update:  Drawing edge specific features such as line width and color is definitely outside of my skillset with opengl.  I could probably figure out something, but it would be a mountain of code and probably subject to pretty awful breakage, so I think I'm going to leave that functionality out for the time being.
",8,3,[]
132,616557565,1716,12777496,2021-04-16 05:57:08,2021-04-17 05:52:27,closed,"Update pytest and tox configs, fix misc warnings","`pytest.ini` was updated to show standard library warnings involving Deprecations,  and some warnings were removed that were emitted from older bindings we no longer support.

The pyopenGL tests that had to be skipped on macOS Big Sur, I had to rework the conditional statement (I had assumed the bug that was causing the issue would be fixed with later versions of Python 3.8, but that did not happen).

`tox.ini` got fairly far out of date; updated it so `conda` is no longer necessary (config is a lot simpler now without Qt4).

On some configs, using `ev.button() & QtCore.Qt.LeftButton` would throw a warning about implicit integer conversion is being deprecated, so those methods were removed.

Only thing here that surprised me is due to [PYSIDE-1140](https://bugreports.qt.io/projects/PYSIDE/issues/PYSIDE-1140?filter=allissues) PyQtGraph won't work with Python 3.8 and PySide2 < 5.14.

Also fixed a warning in ROI.py for invalid escape sequence, and a typo in the docstring.",0,10,[]
133,615405902,1715,12777496,2021-04-14 17:09:32,2021-04-14 17:44:03,closed,small TargetItem fixes,"Playing around with TargetItem more, I found a couple of errors:

```
    |  Traceback (most recent call last):
    |    File ""/home/martin/src/acq4/acq4/acq4/devices/Pipette/pipette.py"", line 500, in __init__
    |      self.target.setLabelAngle(dev.yawAngle())
    |    File ""/home/martin/src/acq4/pyqtgraph/pyqtgraph/graphicsItems/TargetItem.py"", line 357, in setLabelAngle
    |      if self.label() is not None and angle != self.label().angle():
    |  TypeError: 'int' object is not callable
    |==============================<<
```

Which is deprecated, so no biggie, but we may as well fix it.

This next one I couldn't make an isolated test of, but the fix was just reorganizing the `__init__` method:

```
Traceback (most recent call last):
  File ""/home/martin/src/acq4/pyqtgraph/pyqtgraph/graphicsItems/GraphicsObject.py"", line 23, in itemChange
    self.parentChanged()
  File ""/home/martin/src/acq4/pyqtgraph/pyqtgraph/graphicsItems/GraphicsItem.py"", line 472, in parentChanged
    self._updateView()
  File ""/home/martin/src/acq4/pyqtgraph/pyqtgraph/graphicsItems/GraphicsItem.py"", line 529, in _updateView
    self.viewTransformChanged()
  File ""/home/martin/src/acq4/pyqtgraph/pyqtgraph/graphicsItems/TargetItem.py"", line 452, in viewTransformChanged
    self.offset.x() * viewPixelSize[0], self.offset.y() * viewPixelSize[1]
AttributeError: 'TargetLabel' object has no attribute 'offset'
```

I tweaked the example, too, just to exercise the class a little.

**Edited** to not have quite so much irrelevant stack.",3,4,[]
134,614938221,1714,12777496,2021-04-14 05:31:56,2021-04-14 06:20:11,closed,Expose the `clickable` property of `PlotDataItem`. (#519),"* Fix the `clickable` property of `PlotDataItem`.

Currently if you attempt to set the `clickable` property of a PlotDataItem,
this property is silently ignored. The expected behavior is to set the
`clickable` property of the underlying PlotCurveItem.

* Use setCurvesClickable and curvesClickable instead

* curve is singular",2,1,[]
135,613280853,1711,12777496,2021-04-12 05:42:12,2021-07-31 03:37:29,closed,Add GLGradientLegendItem (Reimplement #663),"This PR takes #663; where I merged master, and then fixed a handful of issues.  Unfortunately, the example is still not running as intended, maybe someone with more knowledge of the 3D/OpenGL functionality of pyqtgraph can give some input.",6,1,[]
136,613083478,1710,12777496,2021-04-11 14:22:18,2021-04-11 15:10:53,closed,run pyqtgraph tests before examples,"Recently, the CI has been failing frequently, crashing on Linux / Python 3.8 / PySide2 at ```test_ref_cycles.py::test_ImageView()```. This appears to be a case of being at the wrong place at the wrong time, i.e. automatic garbage collection got triggered around that point.

By arranging to have the pyqtgraph tests run before the examples, this particular crash seems to have gone away.
",3,1,[]
137,613042607,1709,12777496,2021-04-11 09:42:42,,open,GridItem: Add custom line width based on pen option.,"Hello, 

Thank you for this awesome library.

We wish to contribute to it via this small PR.

The point is to customize the width of the GridItem lines.

Happy review!
",7,1,[]
138,613017427,1708,12777496,2021-04-11 06:12:17,2021-04-11 15:08:26,closed,Remove infiniteline from others in examples,"Since merging #1318 `InfiniteLine.py` is listed both in the Example App under ""Graphics Items"" section, and under the `others` dictionary.  This PR removes the entry from the `others` dictionary.

Thanks @pijyoi for noticing that this.",0,1,[]
139,612994766,1707,12777496,2021-04-11 02:15:23,2021-04-11 03:27:04,closed,add PyQt6 6.1 forwards compatibility,"This addresses #1692 to provide forwards compatibility to PyQt6 6.1.

It adds a temporary shim for the renamed enums such that when PyQt6 6.1 is released, it will run on the ui files generated using PyQt6 6.0. Only forwards-compatibility is provided. Backwards-compatibility is deliberately not provided.

The decision by pyqtgraph library to drop PyQt6 6.0 support would coincide with the regeneration of the ui files using PyQt6 6.1 (and also removal of the temporary shim.)",1,3,[]
140,612969595,1706,12777496,2021-04-10 21:54:55,2021-04-11 03:21:53,closed,promote use of '#' in mkPen,,1,1,[]
141,612093149,1701,12777496,2021-04-09 02:19:33,2021-04-09 04:54:23,closed,avoid numpy scalar overflow,"the ""offset"" argument passed into rescaleData() is typically an element
of an ndarray, i.e. it comes from the lower bound value of the ""levels""
ndarray. as such, arithmetic operations on it can overflow.

this triggers a runtime warning in the test suite.

the workaround is to convert it to a Python (integer) scalar.",1,1,[]
142,611811562,1700,12777496,2021-04-08 19:09:42,2021-04-08 20:43:30,closed,Fix roi get array region,Taking over for #618 and using the fixed array region method in a few of the subclasses.,1,6,[]
143,610185248,1697,12777496,2021-04-06 21:38:02,2021-04-15 22:51:21,closed,Protect makeARGB with tests and benchmarks,"In order to make optimizing makeARGB safer, this adds more thorough tests and some better ASV config. ASV probably won't work out of the gate on most systems and lacks instructions, so that's mostly for maintainer use for now.

Included is an automated test of CuPy, though of course our CI doesn't have CUDA-enabled GPUs to run them yet, so it just skips most places.

@pijyoi your numba branch could merge this branch to bring in test_makeARGB.py, to which you could add the `setConfigOption(""useNumba"", True)` code necessary to test your new code. The test fails for me when I run pytest on that. Feel free to ping me if you can't reproduce.",11,24,[]
144,610102743,1696,12777496,2021-04-06 19:03:43,2021-04-07 01:52:46,closed,Add changelog for 0.12.1,@ksunden ,0,2,[]
145,609538226,1695,12777496,2021-04-06 06:40:50,2021-04-29 05:29:09,closed,add usage of numba (for rescale),"This PR adds optional usage of numba to pyqtgraph as permitted by #1253.
As a working example, a numba implementation for rescaleData() is included.
A fairly new version >= 0.53 of numba is required for the dynamic guvectorize functionality. As it happens, version 0.53 is the first version with a Python 3.9 wheel.

Benchmarking code with timings obtained on the same machine
```python
import time
import argparse
import numpy as np
import pyqtgraph as pg
from pyqtgraph.functions import rescaleData

parser = argparse.ArgumentParser()
parser.add_argument('--numba', action='store_true')
args = parser.parse_args()

if args.numba:
    try:
        pg.setConfigOptions(useNumba=True)
        import pyqtgraph.functions_numba
    except KeyError:
        pass

shape = 3072, 3072
data_uint8 = np.random.randint(256, size=shape, dtype=np.uint8)
data_float32 = np.random.random(shape).astype(np.float32)
niters = 20

if args.numba:
    # force the JIT
    rescaleData(data_uint8, 1.0, 0.0, dtype=np.uint8)
    rescaleData(data_float32, 1.0, 0.0, dtype=np.uint8)

for data in [data_uint8, data_float32]:
    for alpha in [0.1, 0.25]:
        if data.dtype.kind == 'u':
            minval, maxval = alpha * 255, (1 - alpha) * 255
        else:
            minval, maxval = alpha, 1 - alpha
        scale = 255 / (maxval - minval)
        offset = minval
        params = data, scale, offset, np.uint8

        t0 = time.perf_counter()
        for _ in range(niters):
            output = rescaleData(*params)
        t1 = time.perf_counter()
        print(data.dtype, alpha, '{:.6f}'.format((t1 - t0) / niters))

if args.numba:
    print(pyqtgraph.functions_numba.rescale_clip.types)
    print(pyqtgraph.functions_numba.rescale_noclip.types)
```


|    | Windows numpy 1.20.2 | Windows numba | WSL2 numpy 1.20.2 | WSL2 numba |
|--| -- | -- | -- |--|
|uint8 0.1   | 0.029979 | 0.007479 | 0.010434 | 0.006391 |
|uint8 0.25  | 0.030011 | 0.007832 | 0.010233 | 0.006176 |
|float32 0.1 | 0.044040 | 0.008983 | 0.011722 | 0.006383 |
|float32 0.25| 0.073928 | 0.008264 | 0.011681 | 0.006399 |

Windows platform benefits the most from the use of numba here.
Linux platform already has fairly good performance with numpy 1.20",13,11,[]
146,609109704,1694,12777496,2021-04-05 18:13:52,2021-04-05 22:45:09,closed,DateAxisItem: Account for daylight saving time,"This should fix the initial setting of the _utcOffset_ to respect the daylight saving time. According to the official docs it is recommended to use `tm_zone results from localtime() to obtain timezone information.`





",4,3,[]
147,609004764,1693,12777496,2021-04-05 15:02:25,2021-05-20 00:23:47,closed,"Bypass makeARGB() for uint8, uint16 and float images","This PR supercedes #1668.
8-bit grayscale images and 256-entry lut colormap images can skip makeARGB() entirely by using ```Format_Grayscale8``` and ```Format_Indexed8``` respectively instead of ```Format_ARGB32```.
For such a use-case, levels + lut combination to lut-only becomes an optimization and would be the fastest codepath available.

Sample program to compare performance against master.
Try changing the colormap and changing the levels.
```python
import pyqtgraph as pg
import numpy as np
pg.setConfigOptions(imageAxisOrder='row-major')
app = pg.mkQApp()
imv = pg.ImageView()
imv.show()
size = (8192, 8192)
data = np.random.randint(256, size=size, dtype=np.uint8)
imv.setImage(data)
app.exec_()
```",25,42,[]
148,608575219,1691,12777496,2021-04-04 16:44:33,2021-04-05 22:46:28,closed,Make sure dynamic range limiter runs even when there isn't previous data,"#1676 located a bug with the PlotDataItem dynamic range limiter. 

This is caused by the limiter not running on freshly set data, which may then end up being not visible due to the Qt bug the limiter is intended to work around.

The reason for the limiter not running was the addition of code to check the re-usability of the previous clipped data in #1556: The test conditions were set up so that no code path (at all) would get executed when the cache of previous data was not initialized.

This PR changes the code so that the code to create a new clipped data set runs in this case.
In my testing, this makes the example included with report #1676 function as expected.
",1,1,[]
149,608444752,1690,12777496,2021-04-03 21:12:40,2021-04-06 20:07:11,closed,revert to old behavior: default created from value if not present,Addresses #1689 ,5,3,[]
150,606691339,1680,12777496,2021-04-01 01:41:56,2021-04-02 03:37:07,closed,Fix CI tests for big-endian architectures,"This PR rebases #1675 which fixes #1667.

This PR in fact changes the definition of makeARGB() from that of returning a B,G,R,A array to that of returning an ARGB32 array, suitable for directly overlaying a QImage with Format_ARGB32. Note that this was already true if ```try_fastpath_argb()``` was used. This has no effect for little-endian machines.
",3,3,[]
151,603284297,1675,12777496,2021-03-30 01:26:42,2021-04-01 23:52:18,closed,Backport fix endian to 0.12.0,This fix is based off of 0.12.0 rather than master so that the fastpath doesn't bypass it. ,0,7,[]
152,602380828,1672,12777496,2021-03-29 03:04:15,2021-03-30 03:40:25,closed,take ARGB32 endianness into account,try to fix issue #1667,0,2,[]
153,602012596,1668,12777496,2021-03-27 06:37:22,2021-04-06 04:39:05,closed,make ImageItem combine levels + lut not be a pessimization,"This PR continues #1630 in trying to fix the pessimization identified in #1590

Cases tested with PYQTGRAPHPROFILE=functions.makeARGB:
1) VideoSpeedTest.py --size=3072x3072 --levels=0,255
   * both levels and lut bypassed (fastest path)
2) VideoSpeedTest.py --size=3072x3072 --levels=50,200
   * levels applied, lut bypassed
3) VideoSpeedTest.py --size=3072x3072 --lut
   * levels bypassed, lut applied (was previously both applied)
4) VideoSpeedTest.py --size=3072x3072 --levels=50,200 --lut
   * levels bypassed, lut applied (was previously both applied)
5) VideoSpeedTest.py --dtype=uint16 --size=3072x3072 --levels=0,65535
   * levels applied, lut bypassed
6) VideoSpeedTest.py --dtype=uint16 --size=3072x3072 --levels=100,10000
   * levels applied, lut bypassed
7) VideoSpeedTest.py --dtype=uint16 --size=3072x3072 --lut
   * levels bypassed, lut applied (was previously both applied)
8) VideoSpeedTest.py --dtype=uint16 --size=3072x3072 --levels=100,10000 --lut
   * levels bypassed, lut applied (was previously both applied)
 
#1630 fixed cases 1,2,5,6
This PR fixes cases 3,4,7,8

It would good to take a look at #792 and #793 to get context on what this PR is working around.
What this PR does is to explicitly supply a ```scale``` argument with a specific value to ```makeARGB()``` such that ```makeARGB()``` does not use its own default. This causes rescaling to be bypassed, which was the intention of combining levels + lut in the first place.",6,4,[]
154,601844901,1666,12777496,2021-03-26 19:02:29,2021-03-26 19:12:41,closed,revert style change reduction in PlotDataItem,"I had a look at #1652, the failure of list-wise style definitions through PlotDataItem.

The problem is that
- PlotDataItem does multiple calls to set the data of the underlying ScatterPlotItem, of which only the first one applies the style information.
- It seems that ScatterPlotItem does not retain the per-point styling information on a call to `setData()`, even if the data is not changed.

The only immediate solution I have is to revert to always transmitting the full style information.
This PR does that, and in the example given in  #1652, I do see the colors as intended then.

A proper fix will need closer inspection into why there are redundant `setData()` calls to ScatterPlotItem, which seems less than ideal. This will take a little time.",1,1,[]
155,601833659,1665,12777496,2021-03-26 18:40:24,2021-03-26 18:54:29,closed,Don't pass brush to fn.mkPen,Related: #1616,1,1,[]
156,601466129,1662,12777496,2021-03-26 10:00:10,2021-03-26 19:39:38,closed,added cast to int so that QSplitter.setSizes works on Python 3.10,"While I am not set up to test on 3.10, the error message in #1657 seems quite specific:
`TypeError: index 0 has type 'float' but 'int' is expected`

This adds a cast to int to the parameters in the `QSplitter.setSizes()` call in question.
That might be enough to fix this issue and it doesn't break any other tests.",3,2,[]
157,601417382,1660,12777496,2021-03-26 08:39:45,2021-03-27 07:15:19,closed,Include colormaps in installer,"This adds a new line to setup.py which -at least on my system- includes the missing colors/maps/ folder in the wheel.
Installed from that wheel, the example executes and I can see the .csv files and the license (.txt) in the envs folder.

So this should fix  #1659 .",3,3,[]
158,601002962,1656,12777496,2021-03-25 19:27:14,2021-03-25 19:39:49,closed,Post release 0.12.0,Just a small PR updating the version string to indicate development version,0,1,[]
159,600989692,1655,12777496,2021-03-25 19:04:42,2021-03-25 19:07:03,closed,Update version to 0.12.0,,1,1,[]
160,599038259,1653,12777496,2021-03-23 17:13:35,2021-03-23 18:54:15,closed,Fix to accidentally disabled style updates in PlotDataItem,"#1652 points out that PR #1619 broke most of the style update methods in PlotDataItem, such as `setPen()`.

The error was that `def updateItems(self, update_style=False):` disabled the propagation of pen, brush etc. settings from PlotDataItem to PlotCurveItem and ScatterPlotItem *unless explicitly requested*. This request only occurred when the style properties were set through the `setData()` method. I have now gone through the individual methods and added an explicit setting of update_style=True / False to each update, so that changes to e.g. log mode do not update the pens/brushes, but calls to setPen, setShadowPen etc. do.

Since most of out example code sets the colors on initialization or through `setData()`, this problem was not obvious in the tests. I added a set of tests that check that the properties correctly arrive with the ScatterPlotItem and PlotCurveItem associated with the PlotDataItem.

Closes #1652, I hope.",2,3,[]
161,598551500,1651,12777496,2021-03-23 05:18:28,2021-03-23 18:56:02,closed,collections.abc not just collections,"Just saw a portion of the library we were not using collections.abc in but using collections, so fixing that to not emit scary warnings and maintain python 3.9+ compatibility. ",0,3,[]
162,598174329,1650,12777496,2021-03-22 16:42:54,2021-03-22 18:16:50,closed,Do not use clip_array on scalars (use clip_scalar instead),"As discussed in #1641, the replacement for `np.clip()` in PlotDataitem now accidentally uses @pijyoi 's `functions.clip_array()` method to limit the range of scalar variables. Although the tests for clipToView pass, indicating that this actually seems to work, this is not intended... and not fast either.

This PR adds a `functions.clip_scalar(val, vmin, vmax)` function and uses that in the clipToView part of PlotDataItem.
The appeal is to have less ambiguity than using np.clip for everything, as well as generally better performance:

Direct python comparisons are about 100x faster than the current `np.clip()` on Windows:
```python
>>> timeit('clip_scalar( random.random(), -0.1, 0.1)', number=10000000, globals=globals())
2.789680599999997
>>> timeit('np.clip( random.random(), -0.1, 0.1)', number=10000000, globals=globals())
217.01810209999996 
```

If None or an array is passed to this function, it fails right away with a pretty clear error message, so I think handling that explicitly is not needed here? ",1,1,[]
163,597568954,1649,12777496,2021-03-21 21:44:12,2021-03-22 01:44:27,closed,Fix functions.clip_array(),"#1641 introduced functions.clip_array().
This PR fixes some defects:
1) if both vmin and vmax were None, an uninitialized array would be returned
2) using combination of umath.minimum + umath.maximum benefits only win32 and penalizes other platforms

Development for this PR was done in #1648 where timings before and after this change are recorded.",1,2,[]
164,597446183,1648,12777496,2021-03-21 09:04:38,2021-04-06 06:02:53,closed,implement rescaleData_blocked,"This PR continues the rescaleData_blocked() function implementation spun off from #1617.
A standalone test file depending only on numpy has been put temporarily in benchmarks/time_rescale.py.

Some improvements have been made to the benchmarking script:
1) tests both uint8 and float32
2) ensures that there are values outside _both_ clipping bounds
   * this exercises any branch prediction that may be taking place

A slowdown in the fits_int32 codepath was found
1) for int32 data types, the clip limits provided to the clip function should be integer-valued. otherwise, it will be slower, particularly so on Windows. Probably different versions of the ufunc get selected based on its input arguments.

From https://github.com/pyqtgraph/pyqtgraph/pull/1641#issuecomment-803448357, it was found that:
1) on Linux, numpy 1.20 runs faster than 1.17, probably due to SIMD implemented on 1.20.
2) on macOS, numpy 1.20 and 1.17 are equally fast
3) using umath.minimum(umath.maximum()) instead of umath.clip() is only an improvement on Windows. It is in fact a pessimization to use it on Linux and macOS. (For Linux, rescaleData_blocked() already takes umath.clip() codepath) 
These findings have not been incorporated yet, pending more verification.
",17,4,[]
165,597434917,1647,12777496,2021-03-21 07:34:12,2021-03-22 04:14:19,closed,GraphItem: handle empty adjaceny array,"Looking over the issue tracker, I came across #228.

GraphItem lets you set connections between points by a list of ""adjacencies"".
When this list is empty, the logical behavior would be not to draw any connections.
Instead, an exception is raised, requesting data to be supplied in a specific format... Which seems to be hard or impossible to satisfy for an empty list.

The PR adds a simple check for an empty list and converts it into `None`, which is the accepted way to specify no connections.
That should save the user the need to sanitize any programmatically generated list of adjacencies.

Testing code:
```python
from PyQt5 import QtCore, QtGui
from PyQt5.QtWidgets import QWidget, QApplication, QMainWindow
import numpy as np
import pyqtgraph as pg
import sys

class TestApp(QMainWindow):
    def __init__(self):
        super().__init__()

        self.resize(500,500)
        glw = pg.GraphicsLayoutWidget(self)
        v = glw.addViewBox()
        v.setAspectLocked()
        g = pg.GraphItem()
        v.addItem(g)
                
        ## Define the list of points
        pos = np.array([ [0,0], [10,0], [0,10], [10,10], [5,5], [15,5] ])
            
        ## Define the set of connections in the graph
        # adj = np.array([ [0,1], [1,3], [3,2], [2,0], [1,5], [3,5] ])
        adj = []
            
        ## Define the symbol to use for each node (this is optional)
        symbols = ['o','o','o','o','t','+']

        ## Define the line style for each connection (this is optional)
        lines = np.array([
            (255,  0,  0,255, 1), (255,  0,255,255, 2),
            (255,  0,255,255, 3), (255,255,  0,255, 2),
            (255,  0,  0,255, 1), (255,255,255,255, 4)
            ], dtype=[('red',np.ubyte),('green',np.ubyte),('blue',np.ubyte),('alpha',np.ubyte),('width',float)])
        
        g.setData(pos=pos, adj=adj, pen=lines, size=1, symbol=symbols, pxMode=False)

if __name__ == ""__main__"":
    app = QApplication(sys.argv)
    ui = TestApp()
    ui.show()
    app.exec_()
```
Closes #228.",1,1,[]
166,597425250,1646,12777496,2021-03-21 06:01:44,2021-03-22 18:12:02,closed,Remove unhelpful warnings,"One of the comments from #1620 was regarding the wording in the docs relating to `useOpenGL`; while the wording did give a warning, it was not particularly helpful.  We either support that option, or we don't, so that was removed.

References to `weave` have been removed since that hasn't been in the library forever.

Fixes #1623 by removing another unhelpful warning as well.",1,4,[]
167,597419852,1645,12777496,2021-03-21 05:11:20,2021-03-22 18:17:13,closed,Replace main stanza with PyQt6 compatable variant,"Fixes #1609 

Thanks @pijyoi for identifying this issue.",5,3,[]
168,597416830,1644,12777496,2021-03-21 04:49:03,2021-03-23 18:35:06,closed,"Add Deprecation Warning to Hex Strings That Do Not Start With ""#"" in mkColor","@NilsNemitz `https://i.imgur.com/uyKgrYk.gif`

`mkColor` supports a wide variety of inputs to generate `QColor` objects.  One of the currently supported features is providing a hexadecimal value for RGB/RGBA via hex-string, from the docs 

```
     ""RGB""           hexadecimal strings; may begin with '#'
     ""RGBA""          
     ""RRGGBB""       
     ""RRGGBBAA""     
```

As we try and support more color-names, it will be more difficult to distinguish between color names and hexadecimal color codes; so we are going to stop supporting that.

Given this is a public API change, we're going to go through a deprecation phase, and won't actually remove this functionality until the next minor or major release is rolled over.

",1,4,[]
169,597360001,1643,12777496,2021-03-20 21:09:41,2021-03-25 18:56:52,closed,Initial draft of changelog for 0.12.0,"Changelog for 0.12.0 release, leaving in draft form in case we want to leave some last minute changes...",2,3,[]
170,597024957,1641,12777496,2021-03-20 00:20:46,2021-03-20 04:58:06,closed,refactor code to replace np.clip,"This PR refactors the np.clip regression workaround in #1632 into pg.clip_array.
It documents why np.core.umath.clip is not used (info from #1617)",22,1,[]
171,596807111,1639,12777496,2021-03-19 18:58:34,2021-03-20 05:06:18,closed,Fix transformations in GradientLegend,"I am not entirely sure what is going wrong in the coordinate transformations of the GradientLegend item, causing it to plot upside down in #1591. I suspect that this has always plotted upside down.

This PR tries to tidy up the calculations a little, sticks to screen coordinates for everything, and flips the painter scale upside down. Then everything seems to plot in the expected position and direction on my system. If there is an *additional* reason for things to appear upside down, this should at least make it a little easier to fix.

closes #1591",1,2,[]
172,596598105,1638,12777496,2021-03-19 14:01:45,2021-06-08 17:25:48,closed,Expose number of subsamples in ImageItem auto-level determination,"#1608 reports that `ImageItem.setImage()` only looks at a subset of pixels to determine the automatic level range.

While that is certainly an efficient approach for normal images, it is not uncommon in scientific data acquisition to look for the presence or absence of events in a very small number of pixels. In that case, it is necessary to increase the number of inspected pixels, or even check for minimum / maximum across the entire image. Right now, the maximum number of samples is hardcoded to 65536, not a large number when megapixel sensors are easily available.

This PR exposes the target number of samples in the `setImage()` call as a new 'levelSamples' keyword argument.
By setting this to the full number of pixels, levels will consider the entire image. Otherwise the image is subsampled by a factor of two in each direction until the remaining pixels are no longer more than the requested levelSamples. This is the same behavior as before, just with a variable endpoint.


closes #1608",18,12,[]
173,596549480,1637,12777496,2021-03-19 13:06:33,2021-03-21 05:16:15,closed,PlotDataItem: Fix view range <-> dynamic range limit pathology and switch to np.umath.clip,"Issue #1634 brought to light an issue with the current code that does dynamic range limiting in `PlotDataItem` (see #1140):

If all data is far above (or below) the screen, then it will all be clipped to the same value.
If auto-range is active, it will then center the view on the constant-valued clipped data, and set the view height to the minimum allowed.

Data will then be re-clipped according to the updated view, but since the view height is very small, the data will be clipped aggressively again. For far-away data, all clipped values will again be identical.

This process then repeats, with the center of the view range shifting towards the true data by approximately 1E6 every loop.
If the input data is all >1E10, this process takes an amusingly long time.

The solution is simple:
Never clip data when it is all off to the top or bottom, which we can judge from pre-existing information.
Then auto-range will jump to the proper range in one step, as intended. 
This also happens to be an optimization, since it saves calculation when nothing is visible.


The PR also switches `np.clip()` for `np.umath.clip()` throughout PlotDataItem.
This works around a problem with code overhead in numpy's main clip function, as discussed in  #1632 .
",6,3,[]
174,596335190,1636,12777496,2021-03-19 08:57:04,2021-03-19 15:46:31,closed,remove pyqtgraph-core from documentation,"The version of *pyqtgraph-core*, intended as a local stand-alone installation, is wildly out of date.

There is no immediate intention to update the core branch in the near future. This PR aims to fix the documentation and save users from struggling with the outdated code.

The good news is that the current main branch seems to work perfectly fine as a stand-alone installation, requiring exactly the same changes to the application code as were needed for using *pyqtgraph-core*: Prefixing the import statement. This is true at least for my development system on Windows. I hope it is also working as designed on other platforms.

I changed the instructions to explain such an installation instead. I added a reference to `git clone --depth 1` functionality for those who want to save a byte or two. 

The `git read-tree` section goes well beyond my comfort-zone. I tested the sequence of commands in the previous documentation with names changed to pull `pyqtgraph/master` rather than `pyqtgraph/core`. After adding the `--allow-unrelated-histories` flag, this results in an initial folder structure that looks as intended.

This closes #1624 and #617.",1,2,[]
175,592552629,1633,12777496,2021-03-14 14:23:31,2021-03-14 15:49:52,closed,"Add missing project URL for neurotic to README, add ephyviewer",Thanks @j9ac9k for starting this list!,3,2,[]
176,592497892,1632,12777496,2021-03-14 08:09:01,2021-03-14 15:52:31,closed,rescaleData : workaround np.clip regression since numpy 1.17,"NumPy has an open issue where ```np.clip()``` has a large performance regression since 1.17 : https://github.com/numpy/numpy/issues/14281
This affects pyqtgraph's ```rescaleData()``` and accounts for a large chunk of the time taken for ```makeARGB()```.

This PR uses the workaround described in numpy issue above.

Using the ""Code to reproduce"" example given in https://github.com/pyqtgraph/pyqtgraph/issues/1590, performance improvements of this PR can be observed.",1,1,[]
177,592400704,1631,12777496,2021-03-13 17:54:56,,open,Added UML class diagram to give overview of the most important classes,"As discussed in issue #848, a UML diagram that gives an overview of the most important classes can really help with understanding the PyQtGraph library. 

I created a diagram in [PlantUML](https://plantuml.com/), as suggested. I therefore made this PR so that people have can access to the source file. I think it would be a useful addition to the documentation but I don't know where (and how) to add it. For now I just added it to the `doc` folder as `uml_overview.txt`. Feel free move it of course.

The result is as follows. I'm curious to hear your feedback.

![uml_overview 06-commit-865991f](https://user-images.githubusercontent.com/3320415/111039229-3e62f700-842d-11eb-8858-3a7afea93a71.png)





",32,17,"['docs', 'scipy-sprint']"
178,592323332,1630,12777496,2021-03-13 08:50:34,2021-03-14 15:58:19,closed,combine levels and lut only if both are present,"This PR does a partial fix for #1590.

Previously, if ```levels``` was present but ```lut``` was not, ```levels``` would be converted into ```lut```.
i.e. levels and ~lut --> ~levels and lut 
However, since makeARGB _always_ applies levels, this becomes a pessimization.
i.e. both levels and lut are now applied.

This PR changes it to become: levels and lut --> ~levels and lut

With this fix, in the (perhaps common) use case where the user does not provide a lut, the pessimization will no longer get triggered.",1,1,[]
179,589013159,1629,12777496,2021-03-10 04:12:32,2021-03-10 18:07:48,closed,CZI proposal,"Put together a joint grant proposal for the CZI EOSS grant, round 4.",3,4,[]
180,586955932,1627,12777496,2021-03-08 17:21:46,2021-03-08 17:36:40,closed,Fix environment variable typo for highdpi scaling,Thanks @pijyoi for pointing out this typo; this PR fixes it; it's not `QT_ENABLE_HIDPI_SCALING` but `QT_ENABLE_HIGHDPI_SCALING`,0,1,[]
181,586940823,1626,12777496,2021-03-08 17:04:08,2021-03-08 17:22:14,closed,Add used by in readme,"Since opening #1620 we've seen some fantastic usecases of pyqtgraph, the least we can do is reference them in our readme.",0,2,[]
182,586297323,1625,12777496,2021-03-07 17:55:52,,open,Named colors for dynamically applied palettes,"pyqtgraph currently does not handle changes to the overall palette of colors really well (#1407 ).
#1588 points out that there is a useful paletteChange() signal that would allow an application to react to a switch between light and dark mode. However, any color changes beyond the simple background/foreground options would need to be applied manually.

This PR attempts to simplify this.
The example user-side code (in `examples/PaletteApplicationExample.py`) demonstrates a full palette replacement by a single line command like `pg.palette.get('monogreen').apply()`

This can be applied at any time, and automatically updates the displayed plots, even if no new data is sent.

![20210308 color variations](https://user-images.githubusercontent.com/19742018/110248433-7349f680-7fb4-11eb-97bd-bc8be2176590.png)

The implementation exploits that basically all color requests go through functions `mkColor()` / `mkPen()` / `mkBrush()`. These can now return `NamedPen` or `NamedBrush` objects, subclassed from `QPen` and `QBrush`. These are assigned functional names such as 'gr_fg' for the graphical foreground color, or 'p0' to 'pB' for a set of twelve predefined plot colors. Such color names can be used directly in the `pen=` or `brush=` keyword arguments of the plotting functions.

When a new palette is assigned, `NamedPen` / `NamedBrush` objects automatically update the super-class `QPen` / `QBrush` object according to the new palette. As the named objects otherwise function in the same way, no large changes to the codebase are required. However, the subclasses of `GraphicsObject`, `GraphicsWidget` and `GraphicsView` now have a function `styleHasChanged()`, which is called on palette updates and can be used to perform additional tasks only when required. For example, `ScatterPlotItem`'s SymbolAtlas needs to be cleared to rebuild in the new color set.

This PR demonstrates changes for most functionality in PlotCurveItem and ScatterPlotItem. If this method is adopted to improve color handling, there should be no major problems with including the remaining items. Some more cleanup is required.

I do not see any noticable impact on performance, since only minimal overhead is incurred from working with subclasses of QPen / QBrush. No additional code is executed except during the actual palette change.

The included palettes need some improvement, and would ultimately be user-definable and probably loaded from disk on request.

Comments and ideas are very welcome!",10,32,['scipy-sprint']
183,584543645,1619,12777496,2021-03-04 06:51:13,2021-03-20 05:54:53,closed,Stop PlotDataItem from always sending full style information to PlotCurveItem / ScatterPlotItem,"I noticed that PlotDataItem seems to *always* send full styling information to PlotCurveItem and ScatterPlotItem.

That seems unnecessary, and this PR disables these updates when only the data is updated, i.e. the `PlotDataItem.setData()` does not contain any pen, brush etc. information. 

A more sophisticated solution would distinguish between style updates directed at the PlotCurveItem and the ScatterPlotItem. But this simple version should reduce overhead for the common use case of setting the styles once and then repeatedly sending numerical data only.",1,3,[]
184,583524893,1618,12777496,2021-03-03 03:09:11,2021-03-03 06:22:18,closed,PyQt6 install sys.excepthook,"https://github.com/pyqtgraph/pyqtgraph/pull/1605#issuecomment-788784635
https://github.com/pijyoi/pyqtgraph/runs/1853387168?check_suite_focus=true

The PyQt6 run failures in the link above are all:
```
AttributeError: 'NoneType' object has no attribute 'color'
Fatal Python error: Aborted
```

Disregarding why the slot is being executed in the first place, the errors show that PyQt6, like PyQt5, aborts the process upon an uncaught Exception inside a slot. This PR installs the PyQt5 sys.excepthook also for PyQt6.

The other commits take the opportunity to remove more Qt4 from Qt.py.",6,3,[]
185,583003726,1617,12777496,2021-03-02 12:45:29,2021-03-26 21:22:56,closed,Optimize makeARGB for ubyte images,"This PR optimizes the channel reordering portion of makeARGB by using the conversion routines of QImage.

It only optimizes for row major ubyte images and defers to the original code for the rest. Improvement in fps is measurable with VideoSpeedTest 

Would such a PR that optimizes for specific data types be acceptable?
Tagging @outofculture ",56,4,[]
186,581442805,1613,12777496,2021-02-28 03:10:05,2021-03-02 19:05:47,closed,Add keys() method to Parameter class,"This returns the names attribute, allowing **unpacking of Parameter subclasses. Addresses #1526 

Hi all, I saw the request for contributors and thought I'd take a crack at this one. What would be some other tests to include? ",2,1,[]
187,580465877,1611,12777496,2021-02-25 23:01:28,2021-02-26 00:14:34,closed,include more color in the ImageView example,"* work taken from #312 (thanks, @ptweir !)
* turn on an ROI by default",0,1,[]
188,579793284,1610,12777496,2021-02-25 04:22:52,2021-07-18 20:44:01,closed,Boost plotline performance,"Attempts to fix #1602 

Builds on top of #1570 

There were some performance regressions between 0.11.0 and 0.11.1.

The two PRs that have been identified are #1435 and #1140 

#1140 is an attempt to work around an upstream Qt issue, and it is unlikely to go away (although can be disabled by setting `dynamicRangeLimit = None` when initializing `PlotDataItem` 

#1435 was a bit more complicated as it made changes to `ViewBox.py`, and mark my words when I say ""here by dragons"".

Due to no longer supporting older versions of Qt, I was able to re-introduce `def itemChanged` and that effectively got rid of our need to explicitly call `self.prepareForPaint()` 🎊 ",6,2,[]
189,578176928,1605,12777496,2021-02-23 06:03:17,2021-03-07 04:18:50,closed,let examples have a chance to exit normally,PR to demonstrate segfaults occurring for many examples if they are allowed to end normally.,45,5,[]
190,577651311,1599,12777496,2021-02-22 13:45:01,2021-02-22 21:31:50,closed,fix Example App launch of VideoSpeedTest,"Fixes the following:
1) ExampleApp could not choose binding to launch VideoSpeedTest
2) setGraphicsSystem is obsolete in Qt5
3) VideoSpeedTest RawGLImageWidget frame rate capped by vsync (this should have been a side effect of converting from QGLWidget to QOpenGLWidget)
   * on Windows 10, instantiating RawImageGLWidget also caps the frame rates of the other two (ImageItem, RawImageWidget)
   * on Linux, doesn't affect the other two",6,5,[]
191,577128109,1598,12777496,2021-02-21 15:17:44,2021-02-23 17:40:57,closed,Remove references to self from lambdas,"Lambdas used as signal responders which reference `self` prevent GC of said object. Instance methods do not suffer the same problem. I wasn't sure if the `QTimer` one needed to be fixed, but it doesn't hurt to be safe.

I couldn't solve `pyqtgraph.WidgetGroup.WidgetGroup.mkChangeCallback`, though. That case can't be rewritten as an instance method, and it needs to remain associated with `self`, so it can't be a static function. Maybe it would be sufficient to add the appropriate `disconnect` somehow? But what would that look like? If anyone has ideas, I'm willing to take another stab at this one.",14,3,[]
192,576919545,1597,12777496,2021-02-20 11:32:37,2021-02-20 17:24:18,closed,RawImageWidget: transpose did not handle luminance only images,"This also fixes a performance issue due to calling ```makeQImage()``` with default arguments copy=True, transpose=True.
",2,2,[]
193,576917208,1596,12777496,2021-02-20 11:15:04,2021-04-06 03:50:52,closed,Add ColorBarItem for simplified image level adjustment,"It seems that there currently isn't a convenient way to just display a simple color bar to accompany a false color image.
HistogramLUTItem is very powerful, but it has a few downsides:
- Colors are only indirectly matched to numerical values
- The LUT adjustments are not needed/appropriate when using percepetually uniform maps
- The histogram (besides requiring additional calculation) strongly associates the adjuster with one specific image

This is an alternative implementation that is more compact, and hopefully simple to use:
`cmap = pg.colormap.get('fire', source='colorcet')`
`bar = pg.ColorBarItem(values = (0, 30_000), cmap=cmap)`
`bar.setImageItem( img, insert_in=plt )`

It works smoothly with the new functions to get colormaps and has a convenience function to insert itself into the internal layout of a PlotItem.
It uses a LinearRegionItem superimposed on the color bar for interaction and can be assigned any number of ImageItems to control. Signals are emitted during and after range adjustments. 

This PR comes with an example and a first attempt at usable docstrings.
I hope it is useful to somebody, comments and suggestions are welcome!


![color bar tests](https://user-images.githubusercontent.com/19742018/108593392-b9993600-73b6-11eb-88a3-87d5d46be4bf.png)
",20,11,[]
194,576870975,1595,12777496,2021-02-20 05:24:09,2021-02-20 05:58:14,closed,Workaround for cupy indexing bug,"The [bug](https://github.com/cupy/cupy/issues/4693) was caught by running our tests against a cupy backend, so yay, us!",1,1,[]
195,576673796,1594,12777496,2021-02-19 19:36:51,2021-02-19 20:21:16,closed,Fix Plotitem regression,"b7b431de8d31c1d894ffc368ff5cd562fcc13678 introduced a bug by changing the for-loop structure.

While I'm in here, I can also fix all the obvious problems.",1,2,[]
196,575969344,1589,12777496,2021-02-18 20:43:00,2021-02-19 17:19:12,closed,Use OS palette to set background and foreground colors in Example App,Fixes #1588 ,2,1,[]
197,575914799,1587,12777496,2021-02-18 19:03:38,2021-02-19 03:33:17,closed,app.dark_mode => app.property('darkMode'),"A refactor, just to make it less magical.",1,2,[]
198,574676271,1586,12777496,2021-02-17 06:21:53,2021-02-17 06:48:22,closed,Investigate raw image imageaxisorder,"Fixes #1580 

Also noticed that the `self.uploaded` boolean was never set to true, after `uploadTexture` finished, so I added that too.",0,2,[]
199,573872718,1583,12777496,2021-02-16 01:37:41,2021-02-16 05:02:34,closed,RawImageWidget.py : fix port to QOpenGLWidget,"There are some minor differences between QGLWidget and QOpenGLWidget that were not addressed during the port to QOpenGLWidget.

Qt5 docs specify differences between QGLWidget and QOpenGLWidget:
https://doc.qt.io/qt-5/qopenglwidget.html#relation-to-qglwidget
```...when invoking paintGL().  QOpenGLWidget sets up the viewport via glViewport(). It does not perform any clearing.```
```...it is important to call glClear() as early as possible in paintGL()...```

need someone to test that hi-dpi continues to work without any need to call glViewport()

```python
import scipy.misc
import pyqtgraph as pg
from pyqtgraph.widgets.RawImageWidget import RawImageWidget, RawImageGLWidget

pg.setConfigOptions(imageAxisOrder='row-major')

data = scipy.misc.face()

app = pg.mkQApp()
win = pg.Qt.QtWidgets.QMainWindow()
wgt = RawImageGLWidget()
wgt.setImage(data)
win.setCentralWidget(wgt)
win.resize(800, 600)
win.show()
app.exec_()
```
",3,1,[]
200,573850985,1582,12777496,2021-02-16 00:19:21,2021-02-16 02:40:40,closed,Pin sphinx version to avoid buggy sphinx.ext.viewcode,I'm watching sphinx releases so I'll see when 3.5.1 comes out and update accordingly,3,1,[]
201,573561262,1581,12777496,2021-02-15 13:23:25,2021-02-15 14:06:55,closed,Equilateral Triangle ROI,I went ahead and implemented all the changes I requested on #664 ,3,4,[]
202,573159853,1578,12777496,2021-02-14 21:42:04,2021-02-16 07:35:14,closed,Example: Add AutoRange SpeedTest Example,"@j9ac9k 

Another example one could add to the package.",4,15,[]
203,573146450,1577,12777496,2021-02-14 20:06:23,2021-02-15 03:36:31,closed,Remove duplicate import and remove whitespace,"I merged #1573 a little quick, @ksunden pointed out some issues after the merge, this PR implements those changes.",2,2,[]
204,573043264,1576,12777496,2021-02-14 05:44:57,2021-02-15 17:52:07,closed,Deprecate unused/unnecessary modules,"- ordereddict
- pgcollections
- lru_cache
- pil_fix",4,7,[]
205,573015339,1575,12777496,2021-02-14 00:26:23,2021-02-19 17:40:07,closed,Reduce number of shims for PyQt6,,9,4,[]
206,572890933,1574,12777496,2021-02-13 06:02:15,,open,Make hdf5 example more efficient,"I'm mostly using this example for staging how to revisit downsampling in PlotDataItem. The general strategy we use here should apply there. This updates the example to
- cache downsampled data at scales of powers of two to minimize cache size and computation
- load data for the width of the view range plus padding to avoid excessive reloads
- eagerly downsample and caches data before it's needed

I'm submitting this in draft form to first solicit feedback on the approach taken.",5,4,[]
207,572803240,1573,12777496,2021-02-12 22:08:04,2021-02-13 22:59:18,closed,"Add deprecation warnings, Use non-deprecated upstream methods","In many portions of the codebase, there are commented out sections about methods or classes, or key-word arguments being deprecated, but they do not emit actual deprecation warnings.

This PR makes it so the use of deprecated methods emit deprecation warnings.  Furthermore, the code-base, examples and test-suite have been altered so that the deprecated methods are not used (exception in the test suite, where some tests test those explicitly).

This PR also restore the public API bits whose removal caused #1535  (restored, but added a deprecation warning).

Furthermore, thanks to @swt2c we got a heads up on issues involving Python 3.10, this PR addresses those as well.

Fixes #1535 
Fixes #1571 ",3,13,[]
208,572285562,1572,12777496,2021-02-12 05:28:50,2021-02-14 16:49:03,closed,Arbitrary scale center ROI,"This starts from #67, handles the merge conflicts, and adds an example.",2,2,[]
209,572147209,1570,12777496,2021-02-11 22:15:45,2021-07-18 20:45:57,closed,Different Plot speed measure,@j9ac9k i change a bit the measure and then it becomes obvious for me between 0.11.0 and masterrr,1,17,[]
210,571553024,1569,12777496,2021-02-11 04:07:33,2021-02-11 16:36:52,closed,Fix ScatterPlotItem performance regression,,1,4,[]
211,571539081,1568,12777496,2021-02-11 03:09:47,2021-02-11 03:57:22,closed,Change image tests to not rely on non-const QImage,"During an attempt at refactoring in #1223, it was found that PyQt bindings would fail the CI image comparison tests.
The CI image comparison tests also failed when PyQt6 was updated to 6.0.1, as reported in #1550.

Note that the failures were not due to the images being different but due to ```image_testing.py::assertImageApproved``` relying on QImage being non-const. This PR removes this unnecessary assumption.

The changes to ```functions.py``` is an unrelated change to allow images larger than 2GB for PyQt5 5.15.

",6,2,[]
212,571363989,1567,12777496,2021-02-10 20:03:15,2021-02-10 20:29:28,closed,Handle case of 0-d array in infinite line setPos,"Fixes a small regression found in my app introduced by #1310.

Basically a 0-d array should be treated as a scalar, it works downstream of this check, but since the check added ndarray it got caught trying to make a list, which is not allowed for 0-d.

np.ndim works for any array like, which will be what is passed, since the isinstance check runs first. (and indeed even if it was run on a QPointF instance, it just returns 0).

this will also make it work with subclasses, which the direct type check will not",1,1,[]
213,570749842,1566,12777496,2021-02-10 02:04:06,2021-02-10 17:25:31,closed,Add more options to ScatterPlotSpeedTest,,2,4,[]
214,570585822,1565,12777496,2021-02-09 20:23:51,2021-02-10 04:49:35,closed,Redo pyside2 templates,Many of the pyside2 templates were generated using pyside2 2.0.0.alpha releases.  This PR modifies the templates so that they are all built with PySide2 5.12.6.,4,3,[]
215,570561568,1564,12777496,2021-02-09 19:41:11,2021-02-09 21:58:15,closed,Correct id-based keying of scatter plot pixmap cache,"Note: naively using the id function results in non-unique keys.

Alternatively, we could serialize the Qt objects and use these in the key. This would provide protection from the user mutating these later, but at a cost to performance.",10,3,[]
216,570337849,1563,12777496,2021-02-09 14:22:46,2021-02-09 16:21:23,closed,Flowchart documentation fix,the widget() method should be used to display the flowchart in a window rather than the ctrlWidget().,1,1,[]
217,570128819,1561,12777496,2021-02-09 08:52:17,2021-02-09 16:27:01,closed,remove app.deleteLater() from tests,"Multiple tests are executed by pytest with the same Python process. Deleting QApplication is likely to cause a crash.

Refer to comments in #1396",1,1,[]
218,569108420,1560,12777496,2021-02-08 02:23:02,2021-02-08 18:59:52,closed,Cache scatter-plot items by hashable properties,"This fixes an issue that the great folks at ephyviewer encountered:  https://github.com/NeuralEnsemble/ephyviewer/issues/132

In an effort to speed up the `ScatterPlotItem`, we attempted to cache things like the Pen, Brush, and the Symbol.  Turns out, caching by `id(object)` wasn't the greatest, as those id numbers can be reused; and you get an interesting effect that was documented in the linked issue.

I want to thank @jpgill86 for helping me reproduce the issue and for @lidstrom83 for pointing me in the right direction for where to look.",4,2,[]
219,569089453,1559,12777496,2021-02-08 00:52:24,2021-02-09 06:44:51,closed,restrict PyQt6 QEvent.type() monkey patching to 6.0.0,"The bug that this workaround was for has been fixed in PyQt6 6.0.1.

However our feature test for the bug was faulty and triggers positive
for PyQt6 6.0.1. In other words, we would be needlessly monkey patching
where it wasn't needed.

Moving forward, do we maintain workarounds for older patch level versions of PyQt6? We already have the current workarounds, so it's a matter of restricting it to particular versions. However, if new issues surface with 6.0.0, wouldn't we just tell users to use the newer version rather than implement another workaround?",11,2,[]
220,569022344,1558,12777496,2021-02-07 18:25:14,2021-02-10 04:42:39,closed,Fix Small Heights in ErrorBarItem,"Fixes #1149

I'm implementing a fix that @ixjlyons observed seemed to work when displaying values smaller than 1e-12; he noticed that when using `functions.arrayToQPath` instead of `QPainterPath.moveTo` and `QPainterPath.lineTo` the problem seemed to go away.  

So somehow this gets us around https://bugreports.qt.io/browse/QTBUG-75630

Leaving in draft pull request form for right now as there are still some `QPainterPath.moveTo` / `QPainterPath.lineTo` calls in the paint method that I want to do away with.",5,4,[]
221,568920804,1557,12777496,2021-02-07 06:51:04,2021-07-17 21:36:32,closed,Avoid More Users of QTransform.inverted(),"This PR aims to implement `GraphicsItem` mapping methods that avoid the use of `QTransform.inverted()` and use `pyqtgraph.functions.invertQTransform`.

I have implemented `mapRectFromParent` as was requested in #1537 _but_ I make no claim to how well it actually works or it solving any issues.  Using the test data provided in #1556 (thanks @NilsNemitz ) the plot still disappears on me.

I put the relevant Qt methods commented out for someone to verify that I'm reading the C code correctly (this is likely _not_ the case).

I'm going to go about implementing some of the other mapping methods.  Those of you that have an interest in this feature, I encourage you to test out this PR.

Tagging @markotoplak and @NilsNemitz ",4,2,[]
222,568909825,1556,12777496,2021-02-07 05:23:58,2021-02-10 04:36:31,closed,Reduce reallocation in dynamic range limiter,"This is a follow-up to PR #1140, which added a work-around to plots disappearing at very large zoom level, where the view is <1E-6 of the vertical span of data. The code introduced there is bypassed at any _normal_ zoom level and thus has no impact on performance for typical uses.

However, when the code _is_ triggered, it currently creates a full copy of the dataset every time the view is changed in any way.
This PR reduces the number of re-allocations by allowing a hysteresis in the clipping limits:
Data sets are now considered suitable to plot when they are clipped at planes that are located between 300 000 and 3 000 000 units above and below the current view, where one unit is the current view height. This means that the view can now be zoomed in or out by a factor of 3 before the previous clipping operation is no longer considered sufficient. Only a very large amount of vertical scroll requires a re-clipping operation, and horizontal scroll never does.

As an additional minor improvement, re-clipping operations that reduce the displayed range of data (zooming in) are now done in-place on the previously cached `yDisp` dataset, and full re-allocation only occurs when data needs to be restored from the original `yData` set (while zooming out).

I hope the efforts to eliminate inaccurate transforms and fuzzy zero checks will eventually fix the root cause of the disappearing plots, but so far, the bug still seems to be present. I have attached a test that generates data to trigger it: Unzip and run the attached [plot_test_5.zip](https://github.com/pyqtgraph/pyqtgraph/files/5938303/plot_test_5.zip)
Three curves should be visible. Zoom in vertically, and the red and magenta curves disappear. It would be great to hear back from someone who can test this for Qt6, since I still do not understand which part of the rendering pipeline seems to ""optimize away"" the plots.

Changing `disable`  to `False` in line 27 enables the dynamic range limiting code in the test, and the plots should no longer disappear.

Unfortunately, such data with small normal variations and occasional large glitches is my actual use case.",3,7,[]
223,568874329,1555,12777496,2021-02-07 00:24:15,2021-02-07 05:43:07,closed,PyQt6 6.0.1 QEvent.Type needs to be explicitly deserialized,"in PyQt6 6.0.0, QEvent.Type was automatically pickled / unpickled.

in PyQt6 6.0.1, QEvent.Type is now pickled to be an int, so needs to be
recreated back explicitly (like the other bindings)

this change is backwards compatible with PyQt6 6.0.0",7,1,[]
224,568869267,1554,12777496,2021-02-06 23:33:38,2021-02-07 00:30:25,closed,Disable paint in GLScatterPlotItem if it has no data,Fixes #1347. The opengl stuff is definitely neglected but might as well fix up trivial stuff.,4,1,[]
225,568867578,1553,12777496,2021-02-06 23:16:04,2021-02-06 23:36:04,closed,PyQt6 6.0.1 changes QImage constructor api,,1,1,[]
226,568810687,1549,12777496,2021-02-06 16:07:00,2021-02-06 16:07:54,closed,Remove leftover print calls from PR 1437,,0,1,[]
227,568777069,1548,12777496,2021-02-06 11:58:36,2021-02-06 17:21:24,closed,Use relative imports in newly added CuPy code,"I have renamed the topmost pyqtgraph folder in my local development environment. That way, it is more obvious to myself where I am importing the development code (`import dev_pyqtgraph.pyqtgraph as pg`) and where I am using the production library (`import pyqtgraph`).

Independent of whether this is a good idea or not, this used to work with no problems. It was broken recently by the addition of cupy code, which refers to the top folder / module name explicitly in two places.

I propose changing the code to use the same ""relative"" import used everywhere else.

",2,4,[]
228,568752111,1547,12777496,2021-02-06 09:11:11,2021-02-06 20:05:03,closed,remove ProgressDialog from CI test,"It is not suitable as it creates a modal dialog. On MacOS, this triggers the CI 30 sec timeout.",5,3,[]
229,568718121,1546,12777496,2021-02-06 04:31:08,2021-02-06 04:57:45,closed,Guard against key events when there's no time axis in ImageView,"Fixes #1545. `ImageView` should be robust to GUI interaction when there's no data and/or no time axis.

This is kind of the minimal change to fix the issue. If `ImageView` is ever extended to take other keyboard shortcuts (either internally or in a user's subclass), there are still potentially codepaths that would throw an exception, such as `setCurrentIndex`. It may be worth peppering in a few more of these checks.",1,1,[]
230,567391649,1542,12777496,2021-02-04 07:07:26,2021-02-04 07:15:58,closed,Fix typo,Ping @j9ac9k ;-),4,1,[]
231,567336120,1541,12777496,2021-02-04 05:02:51,2021-02-05 00:15:40,closed,use qWaitForWindowExposed instead of qWaitForWindowShown,"qWaitForWindowShown has been obsolete since Qt 5.6

In view of the comments in #1533  and #1535, the shim is left behind for Qt5 but removed for Qt6.
However, can this particular shim really be considered part of pyqtgraph's public API given that it is only used in pyqtgraph's unit tests?
",4,2,[]
232,567011019,1540,12777496,2021-02-03 17:31:07,2021-02-04 06:16:27,closed,Support siPrefix with no suffix in SpinBox,"Fixes #1429 

Having different behavior for `suffix=None` and `suffix=""""` in `siParse` seems maybe a little awkward, but I think the overall behavior is pretty reasonable looking at the parametrized test cases. Input ""1.2 m"" with no other information is ambiguous, so there has to be some mechanism to force it to be interpreted as prefix milli rather than an arbitrary suffix.

@bilderbuchi if you could try this out and confirm all the spin boxes work as you'd expect, that'd be appreciated. If you have suggestions for additional test I/O, that would be nice too.

edit: I thought about modifying the tests for `SpinBox`, but I'd rather do that if/after #1528 is merged given the refactor there",6,4,[]
233,566747034,1539,12777496,2021-02-03 11:12:43,2021-02-05 04:18:53,closed,get test_ref_cycles to pass,The workaround applied in 08c0de768bc205a720eeebf171cbe4919b346015 seems to be no longer needed for the current support matrix and was the cause for PySide2 and PySide6 failing one of the ref_cycles test.,15,2,[]
234,565375081,1534,12777496,2021-02-01 18:01:58,2021-02-06 05:09:59,closed,GraphIcons: Extend and deprecate previous pixmaps,"I saw that deprecation warnings come with print here. Hence, I went this way as well. Sorry for all the commits, have to clean my rebase.
",2,10,[]
235,564792806,1533,12777496,2021-02-01 02:22:21,2021-02-01 06:12:11,closed,Remove scale rotate translate Qt4 shims,"The scale, rotate, translate methods were already marked as obsolete as far back as Qt 4.8.
",3,5,[]
236,564500166,1528,12777496,2021-01-30 19:45:39,2021-02-03 20:30:06,closed,Support suffix for int parameters,"Follow-up from #1524. Changes here up for discussion.

Technically this could be seen as a breaking change for `SpinBox`. `siPrefix` now has no effect for `SpinBox` in ""int mode"". Previously, `SpinBox` in int mode forces the underlying value to be an int, but it shows you a scaled representation in accordance with the `siPrefix`.

The alternative here would be to just let the scaled formatting happen and the parameter value is still an integer. I could see that being somewhat confusing when you ask for an int parameter though. Maybe that's an argument for specifying the format string on the parameter side instead.",8,3,[]
237,564487645,1527,12777496,2021-01-30 18:31:36,2021-01-30 19:01:09,closed,Improve parametertree documentation coverage,"Part 1/n of some improvements to the parametertree docs I've been thinking about for a while. Hopefully moving in the direction of preempting questions like #1524. This is primarily to make sure the built-in parameters are covered.

In the future I'd like to cover how to construct a parameter tree and maybe get into the internals a bit.",1,1,[]
238,564339219,1525,12777496,2021-01-30 01:56:21,2021-01-30 16:59:30,closed,switch to use of QOpenGLWidget in GraphicsView.py,"For Qt5, this switches from use of legacy QGLWidget to QOpenGLWidget.
For Qt6, this enables the option of using OpenGL, also using QOpenGLWidget.

Experimental plotting in PlotCurveItem gets broken by this switch and I do not know how to fix it, so we allow Qt5 users to opt back to using QGLWidget with the enableExperimental option.

There is some discussion here about issues with switching from QGLWidget to QOpenGLWidget when using them as a viewport.
https://stackoverflow.com/questions/31658176/using-qopenglwidget-with-qgraphicsview-viewport-not-updating",11,3,[]
239,563824724,1523,12777496,2021-01-29 08:30:17,2021-01-29 13:11:42,closed,remove six module,not actually used anymore,1,1,[]
240,563755683,1522,12777496,2021-01-29 05:56:18,2021-01-29 06:02:52,closed,Infiniteline emits clicked signal event,"Supersedes #334 ... after looking over that PR, decided that instead of emitting a number of different signals, we should emit the event.  The other signals that were created as part of that PR should really be handled via inheritance, which is sort of the Qt way.",0,1,[]
241,563353391,1520,12777496,2021-01-28 15:42:59,2021-01-28 16:42:18,closed,Bugfix/wrong translate implementation,,2,3,[]
242,563018374,1518,12777496,2021-01-28 06:33:52,2021-01-30 22:38:35,closed,some optimizations for rescaleData,"1) use float32 instead of float64 for low precision inputs
2) use in-place operations to avoid unnecessary copies

Setting as draft for discussion",17,1,[]
243,562867331,1517,12777496,2021-01-27 23:28:19,2021-01-27 23:49:05,closed,fix RemoteSpeedTest shutdown errors,"This PR fixes shutdown errors encountered in RemoteSpeedTest.py when executed locally.
It also fixes Darwin errors when running RemoteGraphicsView.py on the CI.

The fixes made are however not sufficient to allow enabling of RemoteSpeedTest.py on the CI due to forced termination done by test_examples.py",1,1,[]
244,562714203,1516,12777496,2021-01-27 18:44:34,2021-01-27 18:59:07,closed,Fix windows hidpi,Second attempt at fixing hidpi issues ...re-doing #1509 ,2,8,[]
245,562704233,1515,12777496,2021-01-27 18:25:10,2021-01-27 18:42:38,closed,"Revert ""have mkQApp configure QApplication such that it handles HIDPI displays on Windows""","Reverts pyqtgraph/pyqtgraph#1509

Since I managed to break stuff... undoing this merge.",0,1,[]
246,561559055,1513,12777496,2021-01-26 06:06:00,2021-01-27 19:34:33,closed,Attempt i18n localization,"Fixes #649 

This PR is a _very_ early attempt to try and implement i18n localization to various strings that pyqtgraph shows to the user.  At the initial draft of this PR, this includes context menus in ImageView, ImageItem, ViewBox and PlotItem, as well as the Image Exporter and SVG Exporter.  Given that I do not have a system with a different localization, or know what the process here is, I could use some assistance to test the functionality here.

The process as shown in the PyQt5 docs here seems to indicate the following:

https://www.riverbankcomputing.com/static/Docs/PyQt5/i18n.html

* run `pylupdate5` to create a `.ts` file on a per-language basis
* a translator updates the `.ts` file with the relevant translations
* run `lrelease` on the `.ts` files.  In my case `lrelease` was not bundled with the PyQt5 distribution, but was part of the homebrew Qt package, can I could run it via `/usr/local/opt/qt/bin/lrelease`

More information on running `lrelease` can be found here: https://doc.qt.io/qt-5/linguist-manager.html#using-lrelease

",2,4,[]
247,560613093,1511,12777496,2021-01-24 14:46:47,2021-01-26 21:45:54,closed,Add almost all examples to ExampleApp,"Quite a number of examples in the examples folder are not accessible through the ExampleApp, whether intentionally or not. Adding them all has the benefit of having more CI coverage..

Not added are the examples multiprocess.py and parallelize.py as they seem to be out of the scope of a plotting library.

examples/utils.py seems to be unused, should it be deleted?",17,8,[]
248,560410349,1510,12777496,2021-01-23 12:22:36,2021-01-23 16:43:26,closed,fix RemoteGraphicsView mouse interactions broken on Qt 5.12,"#1502 broke RemoteGraphicsView mouse interactions on Qt 5.12.
In addition, context menu pop-up was at the wrong position.

This PR has been tested manually on Windows Python 3.7 across {PySide, PyQt} x {5.12, 5.15, 6.0} that the following actions work:
- left drag pans
- right drag zooms
- mouse wheel zooms
- right click pops up context menu

updating exampleLoaderTemplate.ui makes it easier to launch this test using different bindings.",0,3,[]
249,560339001,1509,12777496,2021-01-23 07:19:21,2021-01-27 18:05:57,closed,have mkQApp configure QApplication such that it handles HIDPI displays on Windows,"- [x] Fixes #1278 
- [x] Fixes #1250
- [x] Fixes #1200 
- [x] Fixes #756
- [x] Fixes #197
- [x] Fixes #1417
- [x] Fixes #422 
- [x] Fixes #119 (I think this was actually fixed long ago by upstream changes, but given the context I'll say this PR fixes it)

Still need to do some more testing, looks like Qt6 has great support for hidpi on windows from the get-go.  On Qt5, you need to set some environment variables, which this PR is meant to address.

Leaving this PR in draft form as it needs more testing.

Also need to verify fractional scaling; for reference here is how fractional scaling was addressed in matplotlib: https://github.com/matplotlib/matplotlib/pull/15656",16,7,[]
250,559575805,1507,12777496,2021-01-21 22:15:27,2021-01-21 22:23:36,closed,Run apt update first,"the CI on linux is having errors finding/installing packages, googling seems to suggest that we need to run `apt-get update` first... which this PR implements.",0,1,[]
251,559403890,1506,12777496,2021-01-21 16:49:48,2021-01-21 17:06:58,closed,Fixed typo in GLViewWidget,Thanks for @pijyoi for pointing this out!,2,1,[]
252,558019309,1504,12777496,2021-01-20 07:24:24,2021-01-20 07:35:59,closed,"Use os.getenv, not os.environ","Thanks to @pijyoi for pointing out this issue, I regret the error.",0,1,[]
253,557947015,1503,12777496,2021-01-20 04:52:41,2021-01-20 05:05:15,closed,Fix git head reference in ci,"On CI platforms, there would periodically be errors attempting to grab data from the `test-data` repository.  I suspect this was due to a race condition with running tests in parallel due to pytest-xdist.  The way we get around this is to use the github checkout action to grab the test data before the test starts.

Also during testing, I would trigger a timeout, so decided to up the faulthandler_timeout value to 30.",0,2,[]
254,557918823,1502,12777496,2021-01-20 03:31:16,2021-01-23 01:42:37,closed,Pyqt6 compat,"Building on #1495, this PR attempts to add some support for PyQt6. As the changes are more intrusive, it is preferred to keep this PR separate.

The main changes are due to:
- enum values are one level deeper
  * shimmed away in Qt.py
- enums and flags no longer decay to int
- classes overriding a virtual Qt method and wanting to call the parent method need to use super()
  * otherwise a recursion error will occur
- mouse events no longer have methods returning integer coords
  * convert to use float coord methods
  * shim to use older float coord method names

The CI has been modified to test Python 3.9 + PyQt6 and the changes here are sufficient to pass it.",11,17,[]
255,557745777,1501,12777496,2021-01-19 21:42:38,2021-01-20 07:19:04,closed,Small ImageItem-related improvements,"- Fix #667 in makeARGB
- Improve makeQImage docstring
- Improve makeQImage profiling
- Improve makeQImage code clarity
- Add makeARGB airspeed velocity benchmarking profile and script",2,67,[]
256,557122482,1500,12777496,2021-01-19 02:16:50,2021-01-19 04:44:10,closed,bug: AlignCenter should have been AlignHCenter,"from the Qt documentation,
- ""AlignCenter = AlignVCenter | AlignHCenter""
- ""You can use at most one horizontal and one vertical flag at a time.
  Qt::AlignCenter counts as both horizontal and vertical""
- ""Conflicting combinations of flags have undefined meanings""
",1,1,[]
257,554040977,1498,12777496,2021-01-13 09:21:14,2021-01-13 21:16:31,closed,PlotDataItem now signals on setPos (fix #1494),"Extended `setPos()` of `PlotDataItem` with a couple of signals. This fixes two things:
1. `viewRect` cache wasn't invalidated, which caused #1494 
2. if `clipToView` was on, the clipping frame wasn't updated. For example, modify `examples/scrollingPlots.py` lines 62-63 as below - this first moves the plot in one direction, then reverses, and the line will appear truncated:
```
    if ptr3<=170:
        curve3.setData(data3[:ptr3])
        curve3.setPos(-ptr3, 0)
    if ptr3>180:
        curve3.setPos(-350+ptr3,0)
```",1,1,[]
258,552924899,1497,12777496,2021-01-11 18:13:41,2021-01-29 05:14:42,closed,ItemSample: Allow toggle of visibility via mouse click in LegendItem,"This is a very simple implementation of a strong feature. We allow to **toggle the visibility** of the data items via a mouse click on the **ItemSample** in the **LegendItem**.

In the beginning I tried to run for a nice svg icon, but had to realize that icons are not really welcome in this package (package data).

Hence, I went for a fairly neutral but clear implementation with visibility.

",4,8,[]
259,552787831,1496,12777496,2021-01-11 14:42:10,2021-01-13 04:34:15,closed,PlotItem: Fix enableMenu setting when passing a viewbox,"When passing a viewBox with **enableMenu=False** in the **PlotItem**, the setting is later overwritten and configured by the **PlotItem**.

This is a backward compatible fix that only the **enableMenu** is set when the viewbox is not passed. Otherwise, the setting of the viewBox is taken.",2,6,[]
260,552234976,1495,12777496,2021-01-10 06:11:53,2021-01-20 05:05:50,closed,some fixes for PySide6 future compatibility,fixup some code so that it will be future-compatible with PySide6,34,34,[]
261,552044509,1493,12777496,2021-01-09 03:05:56,2021-01-13 05:05:47,closed,invert QTransform using adjoint() and determinant(),"This PR is a result of discussions made in #1418.

It speeds up QTransform inversion using Qt routines adjoint() and determinant() rather than inverted().
The issue with inverted() is that it uses fuzzy floating point to classify matrix types in order to take faster inversion codepaths.

In addition, this PR would make #1216 redundant..
With the speedup in inversion, cache lookup runs slower than always computing the inversion.",9,2,[]
262,550708856,1491,12777496,2021-01-06 22:37:43,2021-01-06 22:54:34,closed,setSpan broke LinearRegionItem (#1488),"setSpan was calling `setLeft()` etc on a rectangle retrieved from cache, thus modifying the cached one as well. A copy should be made instead.",4,1,[]
263,547942233,1487,12777496,2021-01-03 22:09:04,2021-01-03 22:28:41,closed,Fix #798 ('InfLineLabel' object has no attribute 'updateText'),Implements the fix described in issue #798 ,1,1,[]
264,545525500,1479,12777496,2020-12-25 06:03:32,2021-01-03 20:31:54,closed,minor adjustment on when test runs,"the publish unit test results action we want doesn't work with `on: pull_request` for reasons described here: https://github.com/EnricoMi/publish-unit-test-result-action#support-fork-repositories

Instead we want to run on `pull_request_target`.",2,4,[]
265,544982292,1477,12777496,2020-12-23 18:53:35,2020-12-24 07:04:31,closed,"Remove linting check, add pytest test publishing","Doing this not from my fork as debugging CI config stuff from a fork can be tricky...

This Pull Request removes the lint-check step (we know it fails, and it will keep failing until we can resolve these issues w/ some automatic formatting tool such as `black`). 

Furthermore, I now publish the unit test results jobs so it's a bit easier to see the results

Made some slight changes to `README.md` as well, fixing broken badge paths/links.",9,1,[]
266,544450099,1476,12777496,2020-12-23 01:17:59,2021-01-05 03:27:04,closed,Use log modulus transform for y axis log scaling,"Changes the log transform of y variable from: 
    `y = np.log10(y)`
to:
    `y = np.sign(y) * np.log10(np.abs(y)+1)`

This allows log scaling of negative as well as positive values. '0' values in the original array remain 0, at the expense that the transformed values are now approximately log10(y) instead of exactly log10(y).
This is helpful for my use cases, thought it might be for others too.",14,4,[]
267,543017401,1474,12777496,2020-12-20 05:00:00,2020-12-23 06:32:56,closed,Migrate To Github Actions,"Migrate our CI from Azure Pipelines to Github Actions due to 20 parallel jobs and potentially better web UI.

This PR addresses some other issues.

1. Resolves all warnings in the CI suite, now no-warnings should be emitted.
2. Introduce codeQL analysis checks
3. Updates the README with more badges 💯
4. No longer does it run `python setup.py style`, it just runs flake8 on the entire repo (which currently fails). 
5. No longer does it do the diff size check (this was problematic in re-implementing, and serves of minimal value IMO)
6. Add skips for pyopengl tests on macOS big sur for python < 3.9.1; due to those not working.

With not having to deal with miniconda, the CI runs _substantially_ faster than our previous azure pipelines config.  On a push, the CI runs in ~5 minutes (or less).  On a pull-request, due to the codeQL analyzer, it may take 15 minutes or so for it to finish.

One thing github actions does not support is passing artifacts from one stage to the next.  What I would do in azure pipelines is build a universal wheel, pass the wheel as an artifact, and install it in for all the test configurations.  Unfortunately that's not really feasible with the current capability of github actions, but for 20 free parallel jobs, I'm not about to complain.",11,18,[]
268,543009514,1473,12777496,2020-12-20 03:13:15,2020-12-22 18:25:07,closed,"MAINT: Post 0.11.1 release, drop py2, qt4","This focuses on distribution, tests, and docs. This may not be comprehensive, but covers the cases I found by looking and a few greps

Noteably, this does not change any actual internal code yet, to avoid merge conflicts with pending PRs.",5,2,[]
269,542869680,1472,12777496,2020-12-19 03:37:01,2020-12-20 02:39:53,closed,Update Changelog for release 0.11.1,"https://github.com/pyqtgraph/pyqtgraph/pulls?page=6&q=is%3Apr+is%3Amerged+sort%3Aupdated-desc

- [x] page 6
- [x] page 5
- [x] page 4
- [x] page 3
- [x] page 2
- [x] page 1",0,7,[]
270,542860296,1471,12777496,2020-12-19 02:10:12,2021-01-03 22:28:57,closed,add unicode units,"* just ""µ"" and ""Ω""
* keep ""u"" and ""Ohm"" for compatibility
* add c, d, da and h prefixes
* lint",3,2,[]
271,542238365,1469,12777496,2020-12-18 01:55:52,2021-02-01 06:11:34,closed,Various improvements to parametertree,"Edited by @j9ac9k to add subtask list

The following is a list of existing PRs/issues that relate to Parameter Tree's that this pull request aims to resolve.

- [x] Fixes #1393 
- [x] Fixes #1385 
- [x] Fixes #1006 
- [x] Fixes #760 
- [x] Fixes #339 ",9,27,[]
272,540861322,1468,12777496,2020-12-16 03:26:27,2020-12-18 06:48:56,closed,Zero step in np.arange,"The following code will fail if step is 0 (np.arange raises ValueError: arange: cannot compute length):
bins = np.arange(mn, mx+1.01*step, step, dtype=np.int)

The value of step is set to 0 for all images of uniform intensity (all pixels in the image have equal intensities, e.g. a fully saturated or underexposed image).

This solution does not call np.arrange if step is 0, but instead assigns an empty list that will be later replaced by [mn, mx].",1,2,[]
273,537893805,1466,12777496,2020-12-12 08:03:48,2021-01-20 05:26:25,closed,Performance enhancement: use CUDA in ImageItem,"[cupy](https://cupy.dev/) is a mostly-compatible drop-in replacement for numpy that performs its work on a CUDA-enabled GPU. This PR lets `ImageItem.setImage` accept an image on either substrate, and otherwise behaves identically.

Also, windows memory allocation requests are slow, so pre-allocating buffers for processing improves performance ( for both cpu and gpu ). Since writing this, I've identified other places that could benefit from this treatment, but every bit helps.

The `examples/VideoSpeedTest.py` script was improved to accept command line arguments and to test the cuda-enabled processing.

Only one cupy function was found to be anything other than identical ( `cupy.take` does not support `mode=""clip""` and needed to be clipped explicitly ), but behavior will of course need to be verified everywhere. Thankfully, this PR shouldn't significantly alter the way numpy-based images are processed, so we can safely leave cuda as an optional/experimental feature while we feel out how it behaves on more diverse systems than I was able to use for my tests.

In testing, we found one issue. On windows systems with CUDA Toolkit < 11.1, an int16-dtype image with a lookup table will be incorrectly processed ( the result gets entirely mapped to 255; it whites out ). I didn't know where to document or enforce this requirement.

This also begs the question of _what else_ would benefit from becoming cupy/numpy-agnostic, but we should leave that until we've proven this small slice of functionality.",26,42,[]
274,535645583,1464,12777496,2020-12-10 05:06:40,2020-12-10 06:43:22,closed,Use conda-forge on pyside2+linux,Attempt to patch up the CI to use the correct version of pyside2,1,1,[]
275,533999730,1462,12777496,2020-12-07 22:56:04,2021-02-01 07:03:44,closed,"Added option to use ""None"" for adj in setData","This allows you to easily create code to toggle lines on or off by setting to the appropriate array if on, or None if off. Currently you have to have 2 seperate setData calls, one with adj and one without",2,3,[]
276,528595450,1461,12777496,2020-11-27 12:49:21,2020-11-27 15:57:26,closed,arrayToPath: revert to old meaning of connect=ndarray parameter,"The i-th position of that array used to define if points (i) and (i+1) were connected, but in master it defines whether points (i-1) and (i) are connected. This PR reverts to (i) and (i+1) interpretation.

Fixes #1460 (more therein).

A test drawing from test_PlotCurveItem

0.11.0 (as in 0.10.0, as in tests)
![m_connectarray](https://user-images.githubusercontent.com/552182/100451182-446bdc80-30b7-11eb-9aa3-b5fea72124d3.png)

master (different)
![m_connectarray](https://user-images.githubusercontent.com/552182/100451097-18e8f200-30b7-11eb-92fa-87eb7ba432e9.png)

this PR (back to what 0.11.0 draws)
![m_connectarray](https://user-images.githubusercontent.com/552182/100451114-21d9c380-30b7-11eb-9961-b029af74b96f.png)
",1,1,[]
277,528341834,1459,12777496,2020-11-27 00:47:29,2020-11-27 06:28:04,closed,Fix TickSliderItem: Avoid ghost ticks | Improved customPlot.py code,"If `TickSliderItem.setTickValue` was called when a full repaint of the `TickSliderItem` was not already scheduled, the tick was visible at the old and the new position. This could e.g. be seen when using the autoscale button in the `customPlot.py`, as seen here, zooming out and using autoscale before the fix using PyQ5 - only three of the markers are real:
![image](https://user-images.githubusercontent.com/31772910/100399250-45b6ee00-3052-11eb-8ad6-905d484d1d12.png)

Further, code from `customPlot.py` is improved to make use of `Tick.setVisible` instead of adding and removing ticks based on their visibility.",2,2,[]
278,528279256,1458,12777496,2020-11-26 22:00:31,2020-12-10 06:45:21,closed,Remove ViewBox.childGroup's ItemClipsChildrenToShape flag,"The flag was set on ItemClipsChildrenToShape to solve the issue of #316 ""A GraphicsItem object overlaps the ViewBox border line"" at Luke Campagnola's suggestion to solve further issues that @espdev had. @campagnola  wisely commented that this approach needs extensive testing.

We tested it. It broke PDF export in Orange (biolab/orange-widget-base#111). :)

A solution to #316 was merged in PR #321, which was refined from the discussion in #316. I am not sure that, given rest of #321, the ItemClipsChildrenToShape was really needed. Even without modifications to ChildGroup I did not see any border problems (but I could replicate them in pre-#321 pyqtgraph).

Removing this flag fixes (and unneeded supporting code) fixes PDF export regression in Orange while borders still seem a-OK.

I tried other solutions, such as calling `childGroup.prepareGeometryChange()` from various places, but nothing worked. Interestingly, as the example below shows, pixmaps render fine in PDF even on master. For example, if I modify PDF export code not to call `setExportMode` (pdf export will then use scatterplot's pixmap atlas), the output is correct but pixelated.

The code below that showcases the problem draws a scatterplot, a curveplot and an image, and exports this to a .png with an `ImageExporter` and to .pdf with a custom `PDFExporter`.

The png looks like this:
<img src=""https://user-images.githubusercontent.com/552182/100393033-bb15c500-3038-11eb-9fde-ddad1ca63a2f.png"" width=""150"">

PDFs: Master on left (only shows the background and the image, which is in the correct location). Right, this branch.
<img src=""https://user-images.githubusercontent.com/552182/100393325-8e15e200-3039-11eb-9a3a-6bce6d9780f6.png"" width=""150""> <img src=""https://user-images.githubusercontent.com/552182/100393405-cddcc980-3039-11eb-9d35-e7f04f30045b.png"" width=""150"">

```
from pyqtgraph.Qt import QtGui, QtCore
import pyqtgraph as pg
from pyqtgraph.exporters import ImageExporter
from skimage.data import camera

app = QtGui.QApplication([])
view = pg.GraphicsView()
view.resize(500, 500)

glayout = pg.GraphicsLayout()
view.setCentralItem(glayout)
vb1 = pg.ViewBox()
vb1.setBackgroundColor((200, 200, 200, 200))
glayout.addItem(vb1, 0, 0)

vb1.addItem(pg.ScatterPlotItem(x=list(range(100)), y=list(range(100)), pen=(255, 0, 0, 255)))
vb1.addItem(pg.PlotCurveItem(x=[50, 50], y=[0, 100], pen=(0, 255, 0, 255)))
im = pg.ImageItem()
im.setImage(camera().T)
im.setRect(QtCore.QRectF(50, 50, 10, 10))
vb1.addItem(im)

scene = view.scene()
scenerect = scene.sceneRect()  # preserve scene bounding rectangle
viewrect = scene.views()[0].sceneRect()
scene.setSceneRect(viewrect)

exporter = ImageExporter(scene)
exporter.export(""scatterplot.png"")


from pyqtgraph.exporters.Exporter import Exporter
from pyqtgraph.Qt import QtWidgets


class PDFExporter(Exporter):
    """"""A pdf exporter for pyqtgraph graphs. Based on pyqtgraph's
     ImageExporter.

     There is a bug in Qt<5.12 that makes Qt wrongly use a cosmetic pen
     (QTBUG-68537). Workaround: do not use completely opaque colors.

     There is also a bug in Qt<5.12 with bold fonts that then remain bold.
     To see it, save the OWNomogram output.""""""

    def __init__(self, item):
        Exporter.__init__(self, item)
        if isinstance(item, QtWidgets.QGraphicsItem):
            scene = item.scene()
        else:
            scene = item
        bgbrush = scene.views()[0].backgroundBrush()
        bg = bgbrush.color()
        if bgbrush.style() == QtCore.Qt.NoBrush:
            bg.setAlpha(0)
        self.background = bg

    def export(self, filename=None):
        pw = QtGui.QPdfWriter(filename)
        dpi = QtGui.QApplication.desktop().logicalDpiX()
        pw.setResolution(dpi)
        pw.setPageMargins(QtCore.QMarginsF(0, 0, 0, 0))
        pw.setPageSizeMM(QtCore.QSizeF(self.getTargetRect().size()) / dpi * 25.4)
        painter = QtGui.QPainter(pw)
        try:
            self.setExportMode(True, {'antialias': True,
                                      'background': self.background,
                                      'painter': painter})
            painter.setRenderHint(QtGui.QPainter.Antialiasing, True)
            self.getScene().render(painter,
                                   QtCore.QRectF(self.getTargetRect()),
                                   QtCore.QRectF(self.getSourceRect()))
        finally:
            self.setExportMode(False)
        painter.end()

exporter = PDFExporter(scene)
exporter.export(""scatterplot.pdf"")

view.show()
app.exec()
```
",4,1,[]
279,525943134,1456,12777496,2020-11-23 19:20:51,2020-11-23 20:12:14,closed,resolve ordering of issues presented in #1322,"In merging older PRs, I accidentally blew away contributions made by @SamSchott in PR #922 and @2xB in #999 

Thank you to @campagnola for sorting this out in #1322",0,1,[]
280,525124981,1453,12777496,2020-11-21 12:39:51,,open,Append data to PlotDataItem,"Since I have PlotDataItem on my metaphorical workbench right now:

This PR implements the option to append new data requested in #1430 by calling PlotDataItem.setData() with ""append=True"". 
Including the functionality in setData() avoids the code duplication of #850 . If we do not expect this to be heavily used, then adding a separate appendData() call might not be necessary. The syntax
`pdi.setData( x1, y1 )`
`pdi.setData( x2, y2, append=True )`
seems simple enough for occasional use. 

The code should handle append both *to* and *with* an empty dataset. If no x data is given, the last x value is incremented by 1 for each y element. That should give the expected result in the obvious use cases, and behaves in a predictable (although probably not very useful) manner when appending to a dataset with defined x values.

I unravelled the logic a little to keep it readable after including the append functionality. This should typically introduce only a single additional check (`if x is None` in L531). I also removed some already commented out code:
\# self.clear() --> would now conflict directly with ""append"" functionality
\# self.informViewBoundsChanged() --> This code seems to have successfully moved to GraphicsItem.informViewBoundsChanged(). 
In both cases it seems unlikely that the functions would need to be restored.

I added a docstring for ""append=True"" (not sure if that works) and some tests.
Please let me know what is missing!

closes #1430 ",10,9,[]
281,525001742,1452,12777496,2020-11-20 23:10:55,2020-11-21 05:27:55,closed,InfiniteLine caching calls merged (fixes #1450),"This should fix the `InfiniteLine` problems. Since `viewTransform` caching was added at the `graphicsItem` level, `InfiniteLine` ended up having two different caches and cache cleanup functions, and one of them wasn't called when needed. (Turns out that these lines actually get dragged in the ""infinite"" direction as well, they just update the view box to draw a different part of the line...) 

This merges both cleanup functions. Seems like `examples/InfiniteLine.py` works as expected now.

",1,1,[]
282,524042395,1448,12777496,2020-11-19 15:38:34,2020-11-19 18:19:32,closed,Fixes for examples\customPlot.py,"Fixing three errors:

1. Copy-paste error: I referenced a specific object instead of self, circumventing object orientation.
2. Executing custom function `CustomTickSliderItem.setTicks` more than once resulted in a KeyError.
3. Did not consider padding of `TickSliderItem` for link between `ViewBox` axis limits and tick positions, resulted in ticks positioned slightly off when moved to left or right edge of plot

Errors 1. and 2. were caused because I did only test the custom class `CustomTickSliderItem` in the example, where both was not problematic.

This happened probably because of being happy too early about the implementation of markers being so straight-forward.",1,3,[]
283,522717147,1447,12777496,2020-11-17 21:27:11,2020-11-21 08:46:31,closed,Clipped AxisItem tick value labels to prevent drawing artifacts #732,See https://github.com/pyqtgraph/pyqtgraph/issues/732#issuecomment-729223974 for details.,1,1,[]
284,522539584,1446,12777496,2020-11-17 16:28:16,2020-11-18 17:31:28,closed,Fix set empty,"Proposed fix for issue #1445 

The direct reason of the crash when setting plot data to [],[] was that dataRect assumes empty data will appear as None.
--> Added sanity check to avoid crash.

I checked why the user would set data to [], [] and found that this seems necessary to actually delete the plot on-screen.
I think this is unintended behavior:
Setting yData to None triggers a shortcut that fails to invalidata _dataRect and xClean / yClean. In my tests that seemed to prevent the graph actually getting deleted from screen.
--> removed shortcut

Calling setData() seems to try and set xData and yData to None. But then None gets sanitized to np.array(None), which is unfortunately not actually None.
--> special-cased the code to allow xData and yData to be set to None

Data can now be cleared by calling setData(). But existing code probably calls setData( [], [] ). 
--> zero-length datasets now convert to xData = None and yData = None.

While looking at the code, I found that any data passed as named parameters 'x' and 'y' never gets sanitized
--> added forced conversion of MetaArray to ndarray as used elsewhere.

I hope one of the developers can comment  :)
On my system the modified code seems to give the intended behavior without crashing any of the examples I tested.",8,5,[]
285,521986245,1443,12777496,2020-11-16 22:00:37,2020-11-16 22:27:40,closed,Fix ViewBox axis zoom in RectMode and examples/customPlot.py,"For `ViewBox`, this PR fixes left-click-drag on an axis when the `ViewBox` is in `RectMode`. To try it out, here is a modified version of `customPlot.py`, just left-click-drag on the x or y axis:

```python3
import pyqtgraph as pg
from pyqtgraph.Qt import QtCore, QtGui
import numpy as np
import time

class CustomViewBox(pg.ViewBox):
    def __init__(self, *args, **kwds):
        kwds['enableMenu'] = False
        pg.ViewBox.__init__(self, *args, **kwds)
        self.setMouseMode(self.RectMode)
        
    ## reimplement right-click to zoom out
    def mouseClickEvent(self, ev):
        if ev.button() == QtCore.Qt.RightButton:
            self.autoRange()


app = pg.mkQApp()

axis = pg.DateAxisItem(orientation='bottom')
vb = CustomViewBox()

pw = pg.PlotWidget(viewBox=vb, axisItems={'bottom': axis}, enableMenu=False, title=""PlotItem with DateAxisItem and custom ViewBox<br>Menu disabled, mouse behavior changed: left-drag to zoom, right-click to reset zoom"")
dates = np.arange(8) * (3600*24*356)
pw.plot(x=dates, y=[1,6,2,4,3,5,6,8], symbol='o')
pw.show()
pw.setWindowTitle('pyqtgraph example: customPlot')

r = pg.PolyLineROI([(0,0), (10, 10)])
pw.addItem(r)

## Start Qt event loop unless running in interactive mode or using pyside.
if __name__ == '__main__':
    import sys
    if (sys.flags.interactive != 1) or not hasattr(QtCore, 'PYQT_VERSION'):
        QtGui.QApplication.instance().exec_()

```

For `examples/customPlot.py`, this PR
  * updates the method to disable the right-click menu, using `ViewBox.enableMenu`, a feature of PyQtGraph instead of a monkey-patch.
  * shows how to monkey-patch `mouseDragEvent` anyways in case someone wants to e.g. disable continuous zoom via right-click-drag on an axis. This might come in handy e.g. in case of complicated rebinning after zooming

Fixes #1277",1,5,[]
286,521933883,1442,12777496,2020-11-16 20:30:44,2020-11-17 00:18:27,closed,TickSliderItem: allowRemove property added,"Following #744, this PR suggests the addition of a property
`allowRemove` to `TickSliderItem` and therefore also to
`GradientEditorItem`. It sets the default of whether ticks can
be removed by the user and therefore contemplates `allowAdd`.

I would be interested in other opinions on this design decision,
as #744 suggests to reuse `allowAdd` for the prohibition of
tick removal.
I personally suggest this solution, since it does not change
the effect of the current API.

Demo code - Should this be part of an example?:
```python3
import pyqtgraph as pg
from pyqtgraph.Qt import QtCore
import numpy as np

app = pg.mkQApp()

class CustomWidget(pg.GraphicsView):
    def __init__(self, parent=None, *args, **kargs):
        pg.GraphicsView.__init__(self, parent, useOpenGL=False, background=None)
        self.item = pg.TickSliderItem(*args, allowRemove=False, **kargs)
        
        for pos in (0, 0.5, 1):
            tick = self.item.addTick(pos)
        
        self.setCentralItem(self.item)
        self.setFixedHeight(31)


w = CustomWidget()
w.show()

app.exec_()
```

Fixes #744",8,4,[]
287,521868184,1441,12777496,2020-11-16 19:07:37,2020-11-16 19:54:47,closed,TickSliderItem: Use Tick.removeAllowed,"Previously, `Tick.removeAllowed` was only used in `GradientEditorItem`. This PR makes `removeAllowed` a regular property of `Tick` and enables the use of `removeAllowed` with `TickSliderItem` for a consistent interface.

Test code:
```python3
import pyqtgraph as pg
from pyqtgraph.Qt import QtCore
import numpy as np

app = pg.mkQApp()

class CustomWidget(pg.GraphicsView):
    def __init__(self, parent=None, *args, **kargs):
        pg.GraphicsView.__init__(self, parent, useOpenGL=False, background=None)
        self.item = pg.TickSliderItem(*args, **kargs)

        for pos in (0, 0.5, 1):
            tick = self.item.addTick(pos)
            tick.removeAllowed = False # Possibility 1

        # Possibility 2
        for tick, value in self.item.listTicks():
            tick.removeAllowed = False

        self.setCentralItem(self.item)
        self.setFixedHeight(31)

w = CustomWidget()
w.show()

app.exec_()
```",1,2,[]
288,521854604,1440,12777496,2020-11-16 18:39:42,2020-11-16 18:54:39,closed,TickSliderItem: Use Tick.removeAllowed,"This prohibits removing ticks from a `TickSliderItem` if they were set to `tick.removeAllowed=False`.

Test code:
```python3
import pyqtgraph as pg
from pyqtgraph.Qt import QtCore
import numpy as np

app = pg.mkQApp()

class CustomWidget(pg.GraphicsView):
    def __init__(self, parent=None, *args, **kargs):
        pg.GraphicsView.__init__(self, parent, useOpenGL=False, background=None)
        self.item = pg.TickSliderItem(*args, **kargs)

        for pos in (0, 0.5, 1):
            tick = self.item.addTick(pos)
            tick.removeAllowed = False # Possibility 1

        # Possibility 2
        for tick, value in self.item.listTicks():
            tick.removeAllowed = False

        self.setCentralItem(self.item)
        self.setFixedHeight(31)

w = CustomWidget()
w.show()

app.exec_()
```",0,1,[]
289,521837536,1439,12777496,2020-11-16 18:07:09,2020-11-16 18:56:58,closed,Fix: TickSliderItem method uses function from subclass GradientEditorItem,"This fixes an issue where using `TickSliderItem.setTickValue` fails because it references a `GradientEditorItem` function. Further, since I was on it, the code is now improved do make much more use of signals and slots to avoid code duplication and weak references. This made it possible to reduce the amount of `GradientEditorItem.updateGradient` calls upon `GradientEditorItem` initialization from 34 to 2 in my tests.

Test code to reproduce error:

```python3
import pyqtgraph as pg
from pyqtgraph.Qt import QtCore
import numpy as np

app = pg.mkQApp()

class CustomWidget(pg.GraphicsView):
    def __init__(self, parent=None, *args, **kargs):
        pg.GraphicsView.__init__(self, parent, useOpenGL=False, background=None)

        self.item = pg.TickSliderItem(*args, allowAdd=False, **kargs)
        tick = self.item.addTick(0.5, color=""w"", movable=False)
        self.item.setTickValue(tick, 0.05)

        self.setCentralItem(self.item)
        self.setFixedHeight(31)


w = CustomWidget()
w.show()

app.exec_()

```

Test code to show that nothing broke:

```python3
import pyqtgraph as pg
from pyqtgraph.Qt import QtCore
import numpy as np

app = pg.mkQApp()

class CustomWidget(pg.GraphicsView):
    def __init__(self, parent=None, *args, **kargs):
        pg.GraphicsView.__init__(self, parent, useOpenGL=False, background=None)

        self.item = pg.GradientEditorItem(*args, **kargs)
        tick = self.item.addTick(0.5)
        self.item.setTickValue(tick, 0.05)

        self.setCentralItem(self.item)
        self.setFixedHeight(31)


w = CustomWidget()
w.show()

app.exec_()
```",3,2,[]
290,520873475,1437,12777496,2020-11-13 22:01:59,2021-02-06 07:00:36,closed,LegendItem: fix docs & minor bugs,"For ``pyqtgraph.LegendItem``s:
* [x] Removed unused variables & arguments
* [x] fix typos
* [x] Document ``colCount`` usage
* [x] small test updates
* [x] update rowCount as items are added",5,10,[]
291,519642884,1435,12777496,2020-11-12 06:02:46,2020-11-21 08:02:33,closed,Fix autosize not taking to correct range with TextItem in view,"When pressing the auto-scale button, the scale can be taken to an incorrect scale, or if you zoom out _way_ too far, it can be taken to some bogus range.

Issue #1373 discusses a little more of the troubleshooting effort, eventually stumbled across the the first-call to ViewBox.updateMatrix in ViewBox.resizeEvent was causing the issue.",5,8,[]
292,518029839,1432,12777496,2020-11-09 20:46:31,2020-11-09 22:57:02,closed,Fix ExampleApp: Use pg module from directory,"One should be able to run the example app from the folder without installation of pyqtgraph or when a different pyqtgraph version is installed, e.g. via 
```
pyqtgraph $  python3 examples
```
or 
```
pyqtgraph\examples $  python3 .
```
, which is again possible after this.

Fixes #1431",1,1,[]
293,516273405,1428,12777496,2020-11-05 19:00:57,2020-11-11 17:03:51,closed,default colors for enum ColorMap type,,3,2,[]
294,515079054,1426,12777496,2020-11-04 01:26:14,2020-11-05 18:52:08,closed,update to default setting based on ColorMap type,,3,2,[]
295,513480786,1424,12777496,2020-10-31 18:43:29,2021-01-05 06:01:31,closed,Colormap extension,"Proof of concept for addressing 
#1407 Feature - Add Available Colors
by extending ColorMap object.

The function colormap.load() directly creates a ColorMap object from color map / palette files.
Such files can be distributed with pyqtgraph (now in colormaps/ folder), or can be supplied by the user.

Optional color names can be provided in the same files. Color can be used directly from the ColorMap object by making it indexable (`__getitem__`). Using different ColorMap objects for different palettes avoids a cluttered namespace:
`cm1=pg.colormap.load('xkcd_rgb.txt')`
`cm2 = pg.colormap.load('CET-C1s.csv')`
`pen=cm1['ugly purple']`
`symbolBrush=cm2[42]`",14,11,[]
296,513414969,1423,12777496,2020-10-31 11:12:26,2020-11-06 22:04:35,closed,Fix small bug in GridItem.py:setTextPen,Bug in GridItem.setTextPen() : on line 49 **kargs should be **kwargs. setTextPen does not work (until this simple fix is applied),1,1,[]
297,510412357,1422,12777496,2020-10-27 02:00:32,2020-10-28 04:26:06,closed,Permit entry of non-finite values into float SpinBox,"Bounds are enforced for `inf `and `-inf`, but `nan` ignores them. Attempting to step any of these values doesn't do anything.

A previously existing bug is also fixed where the text is not updated properly when out-of-bounds data is entered.",4,6,[]
298,509563126,1420,12777496,2020-10-25 09:29:59,2020-12-16 19:07:39,closed,Scatter Plot Improvements,"- Fixes various bugs and performance issues.
- Adds a hovering API to `ScatterPlotItem` which lets the user specify a separate style for the hovered points and show a tool tip containing information about them. A signal is also emitted during hovering.",40,57,[]
299,509403379,1419,12777496,2020-10-24 09:31:48,2020-10-24 23:58:52,closed,DataTreeWidget: dict sorting crashfix,"Solves issue when DataTreeWidget crashes if some dictionary contains both ints and tuples (yeah, I have such weird stuff). Sorting falls and then it looks like this: 

`File ""/packages/python3-3.7.7-2/.self/non-packaged/lib/python3.7/site-packages/pyqtgraph/widgets/DataTreeWidget.py"", line 25, in __init__
    self.setData(data)
  File ""/packages/python3-3.7.7-2/.self/non-packaged/lib/python3.7/site-packages/pyqtgraph/widgets/DataTreeWidget.py"", line 35, in setData
    self.buildTree(data, self.invisibleRootItem(), hideRoot=hideRoot)
  File ""/packages/python3-3.7.7-2/.self/non-packaged/lib/python3.7/site-packages/pyqtgraph/widgets/DataTreeWidget.py"", line 72, in buildTree
    self.buildTree(data, node, asUnicode(key), path=path+(key,))
  File ""/packages/python3-3.7.7-2/.self/non-packaged/lib/python3.7/site-packages/pyqtgraph/widgets/DataTreeWidget.py"", line 72, in buildTree
    self.buildTree(data, node, asUnicode(key), path=path+(key,))
  File ""/packages/python3-3.7.7-2/.self/non-packaged/lib/python3.7/site-packages/pyqtgraph/widgets/DataTreeWidget.py"", line 50, in buildTree
    typeStr, desc, childs, widget = self.parse(data)
  File ""/packages/python3-3.7.7-2/.self/non-packaged/lib/python3.7/site-packages/pyqtgraph/widgets/DataTreeWidget.py"", line 96, in parse
    childs = OrderedDict(sorted(data.items()))
TypeError: '<' not supported between instances of 'tuple' and 'int'
`",1,1,[]
300,509290495,1418,12777496,2020-10-24 00:15:01,2021-01-13 05:06:15,closed,Avoid using ``np.linalg.inv()`` for transform inversion,"This fixes not only latency but high CPU usage when inverting a Qt transform matrix.

There is a known recent issue in ``numpy`` pertaining to this:
numpy/numpy/issues/17166

I've ripped off the ""hard coded"" solution from that issue verbatim and using it has reduced both latency and CPU usage in pretty much all mouse related interaction with `ViewBox`.
I'm happy to write up profiling and test code for this in case there are any doubts.

There are even faster solutions inside the referenced issue that might be worth exploring as well; I know we have to keep py2 in mind but it might be worth some flag logic in this case since [`invertQTransform()` seems to be used throughout `ViewBox` and `GraphicsItem`](https://github.com/pyqtgraph/pyqtgraph/search?q=invertQTransform). This would explain why I'm seeing improvements outside my original use case (calling `GraphicsObject.mapFromView()` on label coordinates fed from the mouse).

I also would like to benchmark using `*np.ravel()` to pass the matrix results to `QtGui.QTransform()` since I've done that with good results in `QPicture()` drawings and it should in theory be faster then the existing multiple  element access.

### Update
Commit that changed away from using the internal transform is  a41d330
Relevant Qt bug reports are:
- https://bugreports.qt.io/browse/QTBUG-52070
- https://bugreports.qt.io/browse/QTBUG-8014
- https://bugreports.qt.io/browse/QTBUG-8557
- troublesome underlying function is https://doc.qt.io/qt-5/qtglobal.html#qFuzzyIsNull",46,2,[]
301,508856875,1416,12777496,2020-10-23 10:00:28,2020-10-27 05:04:38,closed,User-defined keywords of getArrayRegion,"The three parameters ""shape, vectors, origin"" can't be passed as parameters because they are computed, which raise an error when kwds is passed to affineSlice.

Proposal for issue #1415 ",1,1,['ROI']
302,508454157,1414,12777496,2020-10-22 17:39:23,2020-10-22 18:18:00,closed,Emit event with mouse clicks for some items,Harmonizes behavior with PlotCurveItem.,1,1,[]
303,508446102,1413,12777496,2020-10-22 17:23:35,2020-10-22 18:17:34,closed,Call GraphicsItem.viewTransformChanged(),"Follow up to #1391 got a bug report on slack about infinite lines not extending the height of the view; this was due to some cache handling in GraphicsItem; fix was just to call the inherited viewTransformChanged method from GraphicsItem for InifiniteLine.

I'm wondering if we should take a look at some of the other places we call out `viewTransformChanged` explicitly.

Other places we call it include:

-  ImageItem.py
-  PlotCurveItem.py
-  ROI.py
-  ScatterPlotItem.py
-  TextItem.py
-  TargetItem.py (not currently used much)",2,2,[]
304,508038880,1411,12777496,2020-10-22 06:05:27,2020-10-22 15:28:04,closed,Hide WidgetParameterItem.defaultBtn if param has no default,Currently the button is both visible and enabled when the parameter has no default. This PR hides it in this case. It could alternatively disable it - I just found this way more visually appealing.,1,1,[]
305,508012140,1410,12777496,2020-10-22 04:57:18,2020-10-22 05:18:37,closed,Add fontSize kwarg (taken from PR #129),"Fixes #129 

Thank you to @kinverarity1 for making this PR so long ago (almost 6 years!) sorry nobody has followed up.  It's a good feature.  Reason I'm creating a separate PR was that there were some merge conflicts, and one needed change; unfortunately I did not have write permissions on that branch, so I had to create a new PR with the changes.

",2,1,[]
306,507987103,1409,12777496,2020-10-22 03:29:30,2020-10-22 03:48:20,closed,prepend conda-forge channel prior to env creation,"This is to make a fix for (likely) one of the changes for conda 4.9.0, causing a non-desirable dependency resolution on linux with conda-forge pyside2.

Thanks to @ksunden for identifying the issue and suggesting a fix.",0,1,[]
307,507905565,1408,12777496,2020-10-21 22:45:40,2020-10-22 03:52:44,closed,Fixed mouse interaction issues with DockLabel,"- Fixes #1122 
- Prevents emission of sigClicked when the mouse has moved significantly between press/release
- Only starts drag with the left button",1,1,[]
308,507052113,1406,12777496,2020-10-20 19:43:24,2021-01-03 22:30:23,closed,Use Python 3.9 to Test CI on [Latest] Versions,"As Python 3.9 is out, we should likely test that on our CI platform... Only the latest versions of PyQt5/PySide2 are tested against Python 3.9.",13,2,[]
309,505956069,1405,12777496,2020-10-19 13:11:45,2020-10-21 03:02:53,closed,ScatterPlotItem: Fix name setting in options,,1,5,[]
310,505852394,1404,12777496,2020-10-19 10:11:25,2021-01-05 05:02:09,closed,LegendItem: Make ItemSample customizable,"This PR introduces `sampleType` of the LegendItem. It is possible to customize the `ItemSample` of the LegendItem
",11,9,[]
311,505392936,1403,12777496,2020-10-18 05:21:26,2020-10-18 06:01:17,closed,Do not apply transparent background in Qt4,"This makes it so the change in PR #1383 is only applied to when using Qt5.  When using Qt4, this would make non-updating GraphicViews transparent/blank.",1,2,[]
312,505389789,1402,12777496,2020-10-18 04:49:13,2020-10-18 05:22:29,closed,handle case of version string having no '+',"Ran into this issue while testing out another unrelated issue.  I went to check out tag `pyqtgraph-0.11.0` and did `python.setup.py install`  and got the following error:

```
$ python setup.py install
Traceback (most recent call last):
  File ""setup.py"", line 70, in <module>
    version, forcedVersion, gitVersion, initVersion = helpers.getVersionStrings(pkg='pyqtgraph')
  File ""tools/setupHelpers.py"", line 470, in getVersionStrings
    _, local = gitVersion.split('+')
ValueError: need more than 1 value to unpack
```

The issue here is that `gitVersion` is reporting the version `0.11.0` with no `+`.  We can work around this by using `str.partition(""+"")` instead which won't blow up should a `+` not be present.",0,1,[]
313,504826053,1401,12777496,2020-10-16 13:05:09,2020-10-28 04:27:31,closed,"Fix width, height and background in SVG exporter","Fixes #1157

With this PR, the `viewBox` attribute with appropriate width and height is added to the top `svg` tag. Its absence caused trouble visualizing the image on certain browsers, and issues when zooming the image.

Also, the SVG exporter is now storing the background color too.",13,6,[]
314,504244053,1400,12777496,2020-10-15 16:53:35,2020-10-15 17:12:36,closed,Docs should have no warnings on pcolormeshitem,PR just has some fixes so that sphinx does not generate warnings/error for building the `PColorMeshItem.py` docs,0,1,[]
315,503094751,1399,12777496,2020-10-14 04:19:21,2020-10-14 05:33:00,closed,Disable mouse rate limiting on test_ROI,The mouse rate limiting appears to be causing issues with the test_ROI test suite.  This PR disables the limiting allowing for tests to pass w/o issue.,0,1,[]
316,502340346,1397,12777496,2020-10-13 13:50:03,2020-10-15 17:56:34,closed,LegendItem: Enable customization of label text size and tests,"This improves a little bit the customization of the LegendItem.

- I use a default labelTextSize of 9pt at first. Suggestions?",14,7,[]
317,502149634,1396,12777496,2020-10-13 09:47:31,2020-10-13 16:06:35,closed,GraphicsView: Add basic tests ...,,4,1,[]
318,497515690,1392,12777496,2020-10-04 23:24:39,2020-10-13 15:50:23,closed,SignalProxy: Correct initialization without slot argument and tests,"This PR will fix #1178 

- Provided a bunch of basic tests in addition
- Took the opportunity to clean up a bit the file",6,13,[]
319,496620925,1391,12777496,2020-10-02 00:49:18,2020-10-18 23:42:40,closed,caching for viewRect of LinearRegionItem to reduce CPU load,"## Issue

Having a LinearRegionItem inside a ViewBox causes large CPU loads on any mouse interaction - just moving the cursor around anywhere in the ViewBox (even outside the Item) takes up 2 threads at 100 % for me. This seems to be caused by `viewRect()` of the LinearRegionItem, which is called on every mouse event and does some heavy coordinate transforms.

## Solution
Similar issues elsewhere in Qt/pyqtgraph seem to be solved by caching the boundaries. I suspected that the `viewTransformChanged()` slot on pyqtgraph's GraphicsItem was intended specifically to allow that, so I set up a simple cache which is invalidated by `viewTransformChanged()`. This seems to work (CPU load reduced ~20x), but I'm not sure if that slot really catches every change that invalidates `viewRect`. Would be good if someone with better understanding could take a look.
",8,2,[]
320,496295636,1388,12777496,2020-10-01 14:15:53,2020-11-06 22:06:53,closed,Emit signal when GraphicScene.addItem() is used,"Emit a signal (`sigItemAdded`) just after adding an item to a scene.
The item object is emited as the only signal argument.
This signal is useful for code that may want to react to newly added
items of a plot.",5,2,[]
321,496166112,1387,12777496,2020-10-01 10:58:24,2020-10-10 20:10:58,closed,ScatterPlotItem: Make + and x symbols thicker,"This is something we're overriding in Orange3 (biolab/orange3#5007), as we change the symbols' alpha_value to show selected symbols. The default + and x symbols are too thin to show a noticeable change in alpha_value.

But I thought you might agree that the symbols look nicer this way.

Before:

<img width=""254"" alt=""Screenshot 2020-10-01 at 12 56 36"" src=""https://user-images.githubusercontent.com/24586651/94800970-a7a5ff00-03e5-11eb-971d-2202d0f7144f.png"">

After:

<img width=""257"" alt=""Screenshot 2020-10-01 at 12 55 48"" src=""https://user-images.githubusercontent.com/24586651/94800977-aaa0ef80-03e5-11eb-9dfd-115346520813.png"">",2,1,[]
322,495934182,1386,12777496,2020-10-01 04:06:06,2020-10-01 04:30:47,closed,Remove a few remaining mentions of the develop branch,,0,1,[]
323,494922571,1384,12777496,2020-09-29 15:30:10,2020-09-29 17:00:47,closed,fix typo in documentation,"found a tiny typo when reading the docs...

thank you guys for this awesome library :rocket:",1,1,[]
324,493572508,1383,12777496,2020-09-26 12:44:08,2020-10-13 02:44:54,closed,GraphicsView: Set a transparent background palette,"The background of the GraphicsView is blocking other features. In my example a grid in a designer. On the road to set a single viewbox background to white without affecting others:

- The background of the QPalette is set to transparent.

Before:

![qt_graph_no_transparency](https://user-images.githubusercontent.com/43136580/94341054-b1ef8400-0006-11eb-9913-8da6d83724c9.png)


After:

![qt_graph_transparency](https://user-images.githubusercontent.com/43136580/94341057-b87dfb80-0006-11eb-9fae-85091b5c45a1.png)

",7,1,[]
325,493569274,1382,12777496,2020-09-26 12:11:31,2020-10-13 05:28:01,closed,LegendItem: A bit auto flake8,"Before working on the LegendItem in a feature branch, a little cleanup. It is already very noisy, that why it comes as a separate branch.

@j9ac9k ",2,1,[]
326,490037070,1377,12777496,2020-09-21 05:07:46,2020-09-23 03:18:04,closed,Consolidate and fix downsample factor computation in ImageItem,Fixes #1353 and cleans things up a bit to consolidate duplicate code,1,1,[]
327,489968836,1376,12777496,2020-09-20 22:39:46,2020-09-23 03:25:03,closed,Fix PlotItem.setAxisItems,"Fixes #1358

I believe this is the intention of the logic that's there currently. Technically, it does appear to be possible to use a single `AxisItem` for multiple `PlotItem`s, but the conditions under which this works (and doesn't cause a segfault) aren't crystal clear to me. In the future, if someone figures out how to robustly detect when it's ok to do so, we can allow for it. For now this should make things work as intended and I'm pretty sure separate linked instances should work equivalently.",1,3,[]
328,489959053,1375,12777496,2020-09-20 21:07:47,2020-09-20 21:54:48,closed,Add targeted Vector test coverage,I wrote some tests for #1339 but didn't get around to finishing things up and pushing,1,1,[]
329,489926917,1374,12777496,2020-09-20 16:41:30,2020-09-20 21:52:50,closed,Test warnings cleanup,This should hopefully clean up most of the warnings cropping up in CI,1,2,[]
330,487833498,1370,12777496,2020-09-16 08:49:44,2020-09-17 04:40:29,closed,Fix deprecation warning in multiprocess module ,"The argument to qtimer.start should be an int not a float
and the current code raises a deprecation warning with python 3.8.
This fixes that by simply converting it to an int. ",2,1,[]
331,487498672,1369,12777496,2020-09-15 19:06:41,2020-09-16 14:44:14,closed,Bug fix in PlotCurveItem.mouseClickEvent,Move ev.accept() to follow sigClicked.emit so event is passed with sigClicked.,1,1,[]
332,486778759,1368,12777496,2020-09-14 17:43:26,2020-09-17 05:04:18,closed,Fix disconnect() in Flowchart with wrong receiver slot,,1,1,[]
333,486733448,1367,12777496,2020-09-14 16:17:58,2020-10-15 03:40:55,closed,AxisItem: Account for empty strings in the visibility of text and units,"- Account for empty `text` and `units`
- Always reset the visibility of the label, in case of swap",5,5,[]
334,484434800,1364,12777496,2020-09-10 23:25:03,2020-09-17 05:27:04,closed,fix for log scaling being broken ,"Running examples/Plotting.py produced RuntimeWarnings and failed to display data for the middle plot (the example for log scaling). This PR fixes that.

-- log10 was being calculated twice, resulting in nan. Now it's only being calculated once.",1,1,[]
335,483831549,1362,12777496,2020-09-10 13:09:50,2020-10-13 04:46:29,closed,DataTreeWidget exception with multivalue Terminal (flowchart),"Fix exception in DataTreeWidget when clicking on a node with multivalue Terminal connected

The problem is that data for multi value Terminal is {Terminal: value}, but Terminal object is not sortable.
Adding the < operator to Terminal solve the problem.

To reproduce the problem: build a Flowchart with a connected multivalue Node Terminal, and click on the Node. An exception occurs in DataTreeWidget

```
Traceback (most recent call last):
  File ""pyqtgraph\flowchart\Flowchart.py"", line 910, in selectionChanged
self.selectedTree.setData(data, hideRoot=True)
  File ""pyqtgraph\widgets\DataTreeWidget.py"", line 35, in setData
self.buildTree(data, self.invisibleRootItem(), hideRoot=hideRoot)
  File ""pyqtgraph\widgets\DataTreeWidget.py"", line 72, in buildTree
self.buildTree(data, node, asUnicode(key), path=path+(key,))
  File ""pyqtgraph\widgets\DataTreeWidget.py"", line 72, in buildTree
self.buildTree(data, node, asUnicode(key), path=path+(key,))
  File ""pyqtgraph\widgets\DataTreeWidget.py"", line 50, in buildTree
typeStr, desc, childs, widget = self.parse(data)
  File ""pyqtgraph\widgets\DataTreeWidget.py"", line 96, in parse
childs = OrderedDict(sorted(data.items()))
TypeError
:
'<' not supported between instances of 'Terminal' and 'Terminal'
```",1,1,[]
336,483104962,1361,12777496,2020-09-09 20:02:45,2020-11-11 17:02:47,closed,Prevent item duplication in Node context menu,"If you right-click on a Node in the Flowchart, there is a Add Node menu.
If you close the context menu, and open it again, there are two Add Node menu.
A new Add Node item is added each time you right-click on the Node.

This should solve this.",8,5,[]
337,482006492,1360,12777496,2020-09-08 12:28:33,2020-10-13 15:52:08,closed,"Add ""left"" and ""right"" step Modes","stepMode is currently either `True` or `False`. If it is `True`,
it requires the user to make `len(x) = len(y)+1`. This is
inconvenient because it makes it difficult to change the
stepMode on a given curve (just as one would change, e.g.,
its color).

This commit extends the current situation by introducing
two more step modes: `""lstep""` and `""rstep""`, which do not require
passing an extra x value. In turn, this modes associate each
y value to either the left or the right boundary of the step.

For example, the `""rstep""` mode is handy when plotting ""live""
digital signals in which x,y data pairs are appended as they
are read.

This commit does not modify the behavior in case of `stepMode=True`",13,11,[]
338,481880785,1359,12777496,2020-09-08 08:37:26,,open,Added multi axis plots,Added management for multiple axis on the same plot,31,20,['scipy-sprint']
339,478886652,1356,12777496,2020-09-03 19:55:08,2020-10-27 04:56:27,closed,Fix parametertree name/title handling,"- Parameters now respond to title change in setOpts
- Add Parameter.title()
- Action parameter uses default name/title handling in addition to setting button text (fixes #1320)",4,1,[]
340,473396858,1350,12777496,2020-08-25 19:00:54,2020-09-03 19:59:37,closed,Bugfix for issue #1320 : Fix for ActionParameterItem name changing to empty string when hidden,"This is a fix for issue #1320 

",2,1,[]
341,472707388,1349,12777496,2020-08-24 19:03:14,2020-10-14 17:07:13,closed,Fixed bug where removeTempArea would be called on home even if it was not defined,Ran into an issue where after poping a graph from a dock area I would get an error about calling removeTempArea on None. This seems to have fixed the problem.,5,2,[]
342,466322498,1344,12777496,2020-08-11 19:54:26,2020-08-12 05:36:38,closed,rename SignalProxy.block,`block` is being overwritten with a boolean by QObject in PyQt5. This method was added recently enough that we should be able to rename it without breaking anyone's code (exception: ACQ4 will have a complimentary PR).,1,1,[]
343,465372676,1341,12777496,2020-08-10 09:05:20,2020-12-16 19:15:24,closed,Make ScatterPlotItem.paint aware of layout offset,Without this addition the markers of the ScatterPlotItem are not visible in the export when the ScatterPlotItem is not located in the first panel of a Layout.,5,1,[]
344,463583095,1339,12777496,2020-08-05 19:01:42,2020-08-16 15:40:07,closed,Vector init in qt5,"`Vector.__init__` improvements

 * add docstring
 * fix handling of QVector3D args (cannot list() them)
 * refactor to no longer need return statements

Also add Pa to the list of units.",3,4,[]
345,457634100,1336,12777496,2020-07-28 08:14:49,2020-08-18 04:07:19,closed,Fix an error in ArrowItem constructor when passed a parent=... argument,"```python
import pyqtgraph as pg
app = pg.mkQApp()
parent = pg.GraphicsObject()
a = pg.ArrowItem(parent=parent)
```
Raises an 
```
Traceback (most recent call last):
  File ""<stdin>"", line 4, in <module>
  File ""/Users/aleserjavec/workspace/pyqtgraph/pyqtgraph/graphicsItems/ArrowItem.py"", line 42, in __init__
    self.setStyle(**defaultOpts)
  File ""/Users/aleserjavec/workspace/pyqtgraph/pyqtgraph/graphicsItems/ArrowItem.py"", line 82, in setStyle
    raise KeyError('Invalid arrow style option ""%s""' % k)
KeyError: 'Invalid arrow style option ""parent""'
```
(since #1297)

Fixed by poping the 'parent' arg from opts.
",2,3,[]
346,457385835,1334,12777496,2020-07-27 20:30:04,2020-08-03 22:14:08,closed,More data validity checks in PlotCurveItem,More data validity checks in PlotCurveItem,1,2,[]
347,457354877,1333,12777496,2020-07-27 19:23:16,,open,BarGraphItem: add missing methods,"Make BarGraphItem's interface closer to the GraphItem's one.
Add setPen, setBrush and  dataBounds methods, factor out setData method.",7,6,[]
348,457136578,1331,12777496,2020-07-27 12:39:29,2020-08-15 19:45:06,closed,"sip: switch to new PyQt5 api import, with fallback to the old impleme…","…ntation if not found.

Also calls to setapi are not needed anymore, so use them only with the old implementation.

See: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=966045
for reference",2,1,[]
349,456836589,1328,12777496,2020-07-27 00:58:47,2020-10-15 15:43:24,closed,Add a docs build job to CI,"Just an idea - it might be nice to catch docs issues in PRs before merging and finding out via readthedocs.

Seems like it'd be easy to publish the built docs as an artifact, but I don't know if there's a reasonable way to look at them without downloading a zip and opening manually.

Also, feedback welcome on where this should go in the pipeline - I'm not sure pre-test is the right stage.",9,7,[]
350,453733342,1327,12777496,2020-07-20 18:51:46,,open,"Enhancement: [Issue/986]: Expose param ""nudge"" via AxisItem.setStyle()","Ref issue: https://github.com/pyqtgraph/pyqtgraph/issues/986

This PR:
- exposes the parameter ""nudge"" via AxisItem .setStyle() method so you can adjust axis label offset (was fixed to 5, and now defaults to 5)
- updates DateAxisItem example",1,3,[]
351,452786326,1326,12777496,2020-07-19 21:30:35,2020-08-02 00:19:19,closed,Improve docs for MultiPlotWidget and MultiPlotItem,Fixes #1325 ,0,1,[]
352,452579357,1324,12777496,2020-07-19 14:00:47,2020-07-19 20:59:25,closed,Enhancement: [Issue/812]: MultiPlotItem handles pen (QPen) as a keywo…,"In response to issue : https://github.com/pyqtgraph/pyqtgraph/issues/812

This PR:
- allows MultiPlotItem .plot() method to handles kwargs
- allows the usage of a QPen as an argument to customize curves",1,3,[]
353,452576416,1323,12777496,2020-07-19 13:54:21,2020-07-19 13:55:07,closed,Feat/multiplotwidget plot with pen,"In response to this issue : https://github.com/pyqtgraph/pyqtgraph/issues/812

This PR:
- offers kwargs to MultiPlotItem .plot() method
- handles the **pen** keyword argument to allow customization",0,149,[]
354,452386248,1321,12777496,2020-07-19 06:47:16,2020-07-21 13:43:07,closed,Revert plotcurveitem changes from 18999c,"The commit 18999c (https://github.com/pyqtgraph/pyqtgraph/commit/18999c) says it's just simplifying code, but it changes the API and breaks some use cases.

Example, generates a stream of error messages:

    import pyqtgraph as pg
    p = pg.plot()
    c = pg.PlotCurveItem([1,2,3], pen=None)
    p.addItem(c)

",1,1,[]
355,450849628,1319,12777496,2020-07-17 07:05:50,2020-07-17 18:57:08,closed,Acq4 merge,"- fix reload on py3 (again) -- don't automatically reload modules without pyc
- clean up exception messages in console -- don't raise from eval syntax error
- make ptime.time on py3 return precision wall-clock time ",1,4,[]
356,450738822,1318,12777496,2020-07-17 03:51:36,2021-04-11 05:42:45,closed,Improve target item - incorporate bits from PR 313,"At the time #313 was created, `TargetItem` did not exist, but it is there now; but it's options are very limited.  PR #313 added the equivalent feature, but had some other methods such as `setPen`, `setBrush`, `setHoverPen` and so on... making the item far more feature complete.  It also included a label which could be configured for various text annotation purposes.

This PR attempts to merge the existing functionality, and the functionality in PR #313, with the addition of supporting more symbols (in-fact this PR makes it so you can use any symbol in the SymbolAtlas in ScatterPlotItem).

~What does not work is the positioning of the label that goes alongside the target.  The label is positioned correctly on load, but the moment the TargetItem is clicked + dragged anywhere, the TargetLabel gets positioned somewhere very incorrectly.~

~I'm opening this PR in case anyone wants to give it another go, or try something themselves.~

From the root folder, you can interact with the TargetItem by running `python examples/InfiniteLine.py`
",16,34,[]
357,450441880,1317,12777496,2020-07-16 19:15:50,2020-07-16 21:20:27,closed,Fix line width not being set,Added missing gl.glLineWidth(width) in PlotCurveItem,3,1,[]
358,448566910,1312,12777496,2020-07-14 00:00:25,2020-07-14 00:33:08,closed,TargetItem fix + performance improvements,"- avoid extra work when setLabelAngle would have no effect
- fix errors from bad parent transform (usually the displaying widget has not been given a size yet)",0,1,[]
359,448557335,1311,12777496,2020-07-13 23:26:25,2020-07-13 23:59:05,closed,performance fix for histogramlutitem,setImageItem is now able to detect trival color gradients like gradientChanged has previously.,0,1,[]
360,448543598,1310,12777496,2020-07-13 22:53:39,2020-07-13 23:13:39,closed,Acq4 merge,"Many small unrelated changes; the worst kind of PR.

- Fixed `Vector.__init__` when used with QVector3D argument
- SimpleParameter.setValue: coerces argument to int if parameter type is int
- Rate-limit Qt event processing in ProgressDialog if it is modal
- BusyCursor: only restore cursor after all nested levels have exited
- Add Pa to units
- Add test for functions.subArray
- add SignalProxy.block for temporarily disabling signal forwarding
- InfinifteLine.setPos add support for array arg
- debug.ThreadTrace add support for thread names
- Fix console exception filtering for py3",0,12,[]
361,448465160,1309,12777496,2020-07-13 20:13:46,2020-07-14 04:28:06,closed,Properly retain and use hoverPen argument in _PolyLineSegment,Fixes #1308,0,1,[]
362,448452753,1307,12777496,2020-07-13 19:45:09,2020-07-13 22:47:16,closed,Fix reload to use mod.__cache__ to get name of pyc files,reload now appears to be working correctly in py3.,0,3,[]
363,448422333,1306,12777496,2020-07-13 18:36:18,2020-10-14 02:47:50,closed,Fix incorrect rendering of overlapping object in renderToArray(),"This commit adds a depth buffer in renderToArray().

This fixes the issue that overlapping objects are rendered incorrectly
when using renderToArray() on a GLViewWidget.

This might be related to issue #743.",2,1,[]
364,446229589,1304,12777496,2020-07-08 13:04:01,2020-07-08 17:10:33,closed,Import ThreadSafeTimer in __init__,This fixes issue #1303,1,1,[]
365,445959374,1302,12777496,2020-07-08 04:48:28,2020-10-19 18:51:13,closed,example app now works with Qt4 and Python2 again,"This PR fixes an issue introduced in #1124 where the example application was not compatible with Python2 (due to a python3 method of calling `super()`) and Qt4 (due to depending on `paletteChanged` signal which only exists in Qt5).

Fixes #1301",13,11,[]
366,444622450,1297,12777496,2020-07-06 08:33:08,2020-07-06 10:59:42,closed,ArrowItem performance ,"- Avoid updates that would have no effect
- Raise exception on invalid arguments to setStyle",0,2,[]
367,444612122,1296,12777496,2020-07-06 08:12:18,2020-07-06 09:34:24,closed,update h5py deps in metaarray,"- update h5py usage to support latest api version
- bugfix in __getitem__ for fancy indexing
- code cleanup",0,1,[]
368,444591228,1295,12777496,2020-07-06 07:26:34,2020-07-06 08:00:05,closed,TextItem performance,"Avoid expensive work if textitem is not visible, or when setPlainText / setHtml would have no effect.
Avoid duplicate calls to updateTextPos",0,1,[]
369,444566724,1294,12777496,2020-07-06 06:22:52,2020-07-06 07:19:14,closed,console fixes,"- add fileno method since console occludes sys.stdout, and thus it needs to look like a file handle
- don't store sys.stdout, since this is not guaranteed to be the real stdout; instead use `sys.__stdout__`
- fix editor spawning
",0,1,[]
370,444555430,1293,12777496,2020-07-06 05:55:34,2020-07-06 06:20:53,closed,some lingering py3 fixes,,0,1,[]
371,444367396,1291,12777496,2020-07-05 06:46:32,2020-07-07 17:54:27,closed,Get ImageView ROI working with both row and col major data,"Fixes #1280. The comment [here](https://groups.google.com/d/msg/pyqtgraph/SE8KcK2LOv4/Ic07AftBAAAJ) is implemented, plus there was a bug in the region averaging for the single-image case. Now the selection is averaged along the y axis of the ROI in both row-major and col-major cases (x axis of the `PlotItem` should correspond to the x axis of the ROI).

Script I used for testing (along with `examples/ImageView.py` for testing an image stack):

```python
from skimage import data
import pyqtgraph as pg
from pyqtgraph.Qt import QtGui
import numpy as np

# row-major: rows of array are rows of image
# col-major: cols of array are rows of image
rowmajor = False # should still work if this is switched

if rowmajor:
    pg.setConfigOptions(imageAxisOrder='row-major')

app = pg.mkQApp()

win = QtGui.QMainWindow()
win.resize(800, 800)
imv = pg.ImageView()
win.setCentralWidget(imv)
win.show()

# shape: (300, 451, 3), row-major as loaded
img_data = data.chelsea()
if not rowmajor:
    # as if loaded col-major data
    img_data = img_data.swapaxes(0, 1)

imv.setImage(img_data)
imv.roi.setSize((451, 5)) # width, height
imv.ui.roiBtn.click()

app.exec_()
```",1,1,[]
372,444202725,1289,12777496,2020-07-03 22:03:21,2020-07-05 17:50:54,closed,Disable autoSIPrefix for DateAxisItem by default,"When adding a label, it adds the offset for the epoch seconds, (1e09), which is not helpful for date axes",0,1,[]
373,441724648,1287,12777496,2020-06-30 01:11:04,2020-11-23 04:27:25,closed,Fill in non-finite plot values for Qt versions >= 5.12.3,"Fixes #1057 

I have only manually tested this for a few cases; it would be nice to have some test coverage here before merging.",2,2,[]
374,441269064,1286,12777496,2020-06-29 08:01:36,2020-11-23 04:30:20,closed,convert connect='finite' to connect=ndarray,"Qt no longer accepts non-finite values for plotting as seen here:
https://github.com/qt/qtbase/blob/f6b7b64ed0168038e365b936a1daea9b3bcda335/src/gui/painting/qpainterpath.cpp#L2537

This would prevent PlotCurveItem.setData(connect='finite') from working.

This commit converts a call using connect='finite' to the equivalent call using connect=ndarray with all the non-finite elements removed.

Related to PR #1058 
Related to issue #1057",8,3,[]
375,441202075,1285,12777496,2020-06-29 05:22:45,2020-06-29 05:44:14,closed,Improve control over ROI/handle pens,"Picks up from #271. I fixed merge conflicts and added the suggested `handleHoverPen` argument. It turns out the option to set the `Handle` hover pen was added with #1243 but was called `activePen`. Given that was merged a couple weeks ago, I figured it'd be acceptable to rename it.

Fixes #271",1,8,[]
376,441119958,1284,12777496,2020-06-28 21:54:26,2020-06-29 04:58:09,closed,Update doc strings to clarify getArrayRegion API for ROI subclasses,"Re-implementation of #116. Some of the work in that PR was overcome by events - particularly adding/passing the `axes` kwarg which was implemented in the meantime. I opted to make a note that `returnMappedCoords` isn't supported rather than raising an exception. It should be pretty clear from the method signatures where it's not directly supported, but the presence of `**kwds` could make it seem like you can pass additional arguments through to the base `ROI.getArrayRegion`.

One additional thing I didn't pull from #116 is renaming `arr` -> `data`. I think the correspondence is pretty clear, and technically it would be an API change since users could be using ""named arguments"" (e.g. `roi.getArrayRegion(arr=imgdata, img=imgitem)`).

Fixes #116",1,1,[]
377,441104088,1283,12777496,2020-06-28 19:38:57,2020-06-29 23:35:28,closed,Fix arrayToPath,"Use the correct format for streaming QByteArray to QPainterPath.

In `PlotCurveItem`, `QDataStream` is used to accelerate the build of the path, which would otherwise need a for-loop in Python. However, according to the C++ implementation https://github.com/qt/qtbase/blob/f6b7b64ed0168038e365b936a1daea9b3bcda335/src/gui/painting/qpainterpath.cpp#L2499, the format of the `QByteArray` used in the current version is not correct. Luckily, the result is almost correct except `cStart`, which should be 0 instead of 1. If I undertood `cStart` correctly, it means the start index of the current path.",8,2,[]
378,440962476,1282,12777496,2020-06-27 21:08:12,2020-06-28 15:51:36,closed,Handle axis SI prefix scaling in MatplotlibExporter,"Finally following up #1051 

Basic test:

```python
import pyqtgraph as pg
from pyqtgraph.exporters import MatplotlibExporter

plt = pg.plot(x=[0, 1, 2], y=[1e10, 2e10, 3e10])
plt.setLabel('left', 'magnitude')

exp = MatplotlibExporter(plt.plotItem)
exp.export()

pg.mkQApp().exec_()
```

I ended up sticking with the basic idea of #1051, keeping the axis labels and scaling the data. The alternative I had considered was stripping the prefix from the label and letting matplotlib handle the axis scaling with a multiplier label, but this maintains the pyqtgraph style.

I recommend viewing the diff ignoring whitespace changes. I usually try to make minimal diffs, but removing the unnecessary indentation level seemed worthwhile.

~No test because we don't have matplotlib in CI afaik.~

Fixes #1050 
Fixes #1051",11,4,[]
379,440370840,1279,12777496,2020-06-26 04:14:49,2020-07-17 03:47:02,closed,Implement PR313 Diff + Enable Infinite Line Example,"This PR Implements PR 313 which cannot be merged due to coming from an `unknown repository` and there being a merge conflict.  Thank you to @lesauxvi for the PR, sorry it's taken us so long to follow up.

Fixes #313",5,4,[]
380,439677769,1276,12777496,2020-06-25 05:42:23,2020-06-26 03:52:12,closed,fix problems with high freequency game mouse,"This PR is made entirely from the contents of #307, unfortunately due to merge conflicts, and the PR originating from an `unknown repository` the merge conflicts could be resolved.

Thank you @ombschervister for creating the PR!

Fixes #307 ",0,1,[]
381,439640046,1275,12777496,2020-06-25 03:49:01,2020-06-25 04:35:06,closed,Fix Parameter.hasDefault,"This is a slightly different version of #847 and #331. There's some discussion in #847 for background.

Essentially, it seems we got stuck deciding whether or not explicitly passing `Parameter(default=None)` or calling `param.setDefault(None)` should make `param.hasDefault() == True`.

In this version, `param.hasDefault() == False` if you set it to `None` or don't set it at all. I eventually came around to lean toward this behavior by realizing that if `Parameter.__init__` didn't hide its argument structure in `**opts`, we'd have `default=None` and it wouldn't even be possible to tell whether or not the user set it explicitly. It's also fairly natural in Python for `None` to represent ""unspecified.""

I also implemented an alternative version where `param.hasDefualt() == True` when you `setDefault(None)`. You can see that here to compare: https://github.com/ixjlyons/pyqtgraph/commit/6d506f27d21ef0102de62f49167c45fd86aeda98

Fixes #847 
Fixes #846 
Fixes #331",5,1,[]
382,439567733,1274,12777496,2020-06-24 23:18:24,2020-06-25 00:42:29,closed,Add tickAlpha to AxisItem Style Options,"This PR implements PR 127 (thanks @ogarod ) however I was unable to handle the merge conflict that currently is holding up that PR from merging.

Fixes #127 ",0,3,[]
383,438770229,1273,12777496,2020-06-23 19:20:10,2020-10-12 16:24:11,closed,Implemented pColorMeshItem,"As discussed in the issue #1262 I proposed here a minimal implementation of an item mimicking the `pcolormesh` function of [matplotlib](https://matplotlib.org/3.2.1/api/_as_gen/matplotlib.pyplot.pcolormesh.html).
As I didn't know what to do to make the pull request valid I decided to make it as minimal as possible.
I am willing to integrate it more into pyqtgraph if someone gives me some directions.
In particular a I think a kind of pColorMeshWidget with axis and Histogram would be an excellent end result of this work.

Fixes #146
Fixes #1262",45,18,[]
384,438638220,1272,12777496,2020-06-23 15:12:32,2020-06-24 04:04:35,closed,LegendItem: fix clear() not closing widgets,"`LegendItem.clear()` did previously not call `.close()` on the child widgets after removing them from the layout. This caused them to still be rendered even after calling `.clear()`. It does the same as `LegendItem.removeItem()` now.

The issue I had was that after clearing all items and adding new ones, the old items were still visible underneath the newly added ones. My changes fixed this issue. Because `LegendItem.removeItem()` also calls `.close()`, I assume this is the correct way to do it.

I didn't add or modify and unit tests because I don't know how this could be tested. If somebody knows a way, let me know and I will implement it.",6,1,[]
385,438330488,1270,12777496,2020-06-23 05:36:40,2020-06-24 22:57:02,closed,Implement pr 403,"This PR implements PR 403, with the suggested change by @SamSchott here: https://github.com/pyqtgraph/pyqtgraph/pull/959#issuecomment-507217802

I would have updated PR 403, but github is saying it's come from an `unknown repository` so I cannot update the PR accordingly.

Fixes #403 
Fixes #235
Fixes #1053 
Fixes #1183 
Fixes #959 
Fixes #821 
Fixes #449",12,2,[]
386,437452555,1268,12777496,2020-06-20 19:43:00,2020-06-23 02:58:59,closed,Check for container before setting dock orientation,"Fixes #833.

This is an alternative to #900. Yet another alternative would be `if self.container() is not None and self.container().type() == 'tab':`, but I don't see a reason to do any of the stuff in `setOrientation` until the container is set. Once the container *is* set, `setOrientation` is called thereafter anyway.

I played around with `examples/dockarea.py` for a while as well as the example in #833 and I haven't found any problems.
",1,1,[]
387,437371663,1267,12777496,2020-06-20 06:08:49,2020-06-20 15:19:52,closed,Add mouse event to PlotCurveItem sigClicked signature,"Follow-up to #1242. Currently, clicking the curve in the bottom plot in examples/PlotWidget.py generates:

```
[23:00:47]  Error sending click event:

    |==============================>>
    |  Traceback (most recent call last):
    |    File ""examples/PlotWidget.py"", line 94, in <module>
    |      QtGui.QApplication.instance().exec_()
    |    File ""/home/kenny/src/pyqtgraph/pyqtgraph/widgets/GraphicsView.py"", line 363, in mouseReleaseEvent
    |      QtGui.QGraphicsView.mouseReleaseEvent(self, ev)
    |    File ""/home/kenny/src/pyqtgraph/pyqtgraph/GraphicsScene/GraphicsScene.py"", line 212, in mouseReleaseEvent
    |      if self.sendClickEvent(cev[0]):
    |    File ""/home/kenny/src/pyqtgraph/pyqtgraph/GraphicsScene/GraphicsScene.py"", line 359, in sendClickEvent
    |      debug.printExc(""Error sending click event:"")
    |    --- exception caught here ---
    |    File ""/home/kenny/src/pyqtgraph/pyqtgraph/GraphicsScene/GraphicsScene.py"", line 357, in sendClickEvent
    |      item.mouseClickEvent(ev)
    |    File ""/home/kenny/src/pyqtgraph/pyqtgraph/graphicsItems/PlotCurveItem.py"", line 616, in mouseClickEvent
    |      self.sigClicked.emit(self, ev)
    |  TypeError: PlotCurveItem.sigClicked[object] signal has 1 argument(s) but 2 provided
    |==============================<<
```

It may be worth noting `PlotDataItem` re-exposes a `sigClicked` signal via a slot connected to `PlotCurveItem.sigClicked`, but the slot doesn't take either signal argument, so I don't think anything needs to change there at the moment.",1,1,[]
388,437060420,1265,12777496,2020-06-19 11:56:58,2020-06-20 05:21:20,closed,Make the documentation reproducible,"Whilst working on the [Reproducible Builds](https://reproducible-builds.org/) effort we noticed that pyqtgraph could not be built reproducibly. This is because it generates copyright years from the current build date and therefore will vary on when you build it.

This commit uses [`SOURCE_DATE_EPOCH`](https://reproducible-builds.org/specs/source-date-epoch/) for the ""current"" build date.

This was originally filed in Debian as [#963124](https://bugs.debian.org/963124).",4,1,[]
389,436853500,1264,12777496,2020-06-19 02:32:01,2020-06-21 20:59:45,closed,Issue #1260: Added exception to checkOpenGLVersion to highlight OpenGL ES incompatibility on Raspberry Pi,"@2xB recommendation to output the correct exception when (incompatible) OpenGL ES is used to run GLViewWidget.py

```
During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/home/ubuntu/pyqtgraph/pyqtgraph/opengl/GLViewWidget.py"", line 431, in checkOpenGLVersion
    if int(ver.split(b'.')[0]) < 2:
ValueError: invalid literal for int() with base 10: b'OpenGL'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""GLScatterPlotItem.py"", line 46, in <module>
    w.addItem(sp1)
  File ""/home/ubuntu/pyqtgraph/pyqtgraph/opengl/GLViewWidget.py"", line 62, in addItem
    self.checkOpenGLVersion('Error while adding item %s to GLViewWidget.' % str(item))
  File ""/home/ubuntu/pyqtgraph/pyqtgraph/opengl/GLViewWidget.py"", line 438, in checkOpenGLVersion
    raise Exception(""pyqtgraph requires OpenGL 2.0 (non-ES) for its 3D Features in GLViewWidget. Please check that you are not using OpenGL ES"")
Exception: pyqtgraph requires OpenGL 2.0 (non-ES) for its 3D Features in GLViewWidget. Please check that you are not using OpenGL ES
```

Replaces the previous ValueError exception where

```
File ""pyqtgraph/opengl/GLViewWidget.py"", line 430, in checkOpenGLVersion
    if int(ver.split(b'.')[0]) < 2:
ValueError: invalid literal for int() with base 10: b'OpenGL' 
```",10,6,[]
390,434399819,1257,12777496,2020-06-15 09:13:50,2020-06-15 14:54:26,closed,AxisItem: Make painter (tick) font dependent,"##### Issue
When setting a tick font manually, texts may collide since not considering the font.

##### Description of changes
Set painter's font before generating ticks specifications.
",2,1,[]
391,434093021,1256,12777496,2020-06-14 04:29:18,2020-06-14 04:49:34,closed,Implement diff from PR 317,"This diff comes from #317 however Github was reporting some conflicts, but as the PR was originating from an ""unknown repository"" I couldn't make changes to that active PR, hence creating a new one.

Thank you @lesauxvi for the PR, sorry it's taken so long for us to follow up.

Fixes #317  ",0,1,[]
392,433961924,1252,12777496,2020-06-13 05:29:33,2020-06-13 05:52:47,closed,fix-incorrect-tick-text-boundaries-calculation,This PR  Fixes #336 created by @ombschervister  however I could not update the PR to reflect changes to the repo since the PR was made.,0,1,[]
393,433878254,1251,12777496,2020-06-12 20:46:53,2020-06-13 05:53:20,closed,DateAxisItem: Parameterize utcOffset during construction,"Allows for control over timezone offset in a simple, optional manner",1,1,[]
394,433481568,1249,12777496,2020-06-12 05:58:34,2020-06-12 06:18:40,closed,Implement PR160 - clear current SpotItems,"Having to create this PR feels like admitting weakness in my git-foo.

This PR implements the change requested in #160.  Unfortunately I was unable to merge that PR directly, and github did not give me a way to resolve any conflicts, so I'm just recreating the change myself. 

Thanks @lidstrom83 for the PR sorry it's taken so long for us to get to it.

Fixes #160",0,1,[]
395,433449434,1247,12777496,2020-06-12 03:57:11,2020-06-12 04:20:21,closed,Restore the now-deprecated PlotWindow and ImageWindow classes,"Fixes #1246 

As part of the git bisect, I identified changes made to `graphicsWindows.py` were causing the segfaults we were seeing when closing out the PlotWindow or ImageWindow from the examples.

This PR restores those classes what they were like before.",0,1,[]
396,432862176,1245,12777496,2020-06-11 06:13:04,2020-06-11 06:31:40,closed,Lidstrom83 scatter plot item visibility control,"Fixes #161

This PR contains the diff of PR161, but I resolved the merge conflict, which I did not have permission to do on that branch.  Thanks @lidstrom83 for the PR, sorry it's taken us so long to get to it.",1,2,[]
397,432854063,1244,12777496,2020-06-11 05:47:52,2020-06-11 06:03:44,closed,Peque scatter symbols,"Fixes #123

I attempted to modify @Peque 's PR, but I did not have permission to edit the PR, so I'm resubmitting my own with his changes, and merge conflicts resolved.  In addition, I added the extra symbols to `example/Symbols.py`",0,5,[]
398,432822314,1243,12777496,2020-06-11 03:53:43,2020-06-11 04:07:09,closed,Implement suggested changes in PR 143,"As the source of PR 143 was inaccessible, the suggested changes could not be implemented, so I created a new PR.

Thanks @CPrescher for the PR.

Fixes #143",0,1,[]
399,432811202,1242,12777496,2020-06-11 03:09:47,2020-06-11 03:34:44,closed,Emit the event with sigClicked in PlotCurveItem,"This fixes #142 with the suggested change.  I could not modify the existing PR as the source was ""unknown repository"".

Thanks @miili for the PR!",0,1,[]
400,432177860,1241,12777496,2020-06-10 03:28:50,2020-06-10 03:49:28,closed,Use older pytest-xvfb for py2 configs,This PR handles the case with support py2 with the updated pytest-xvfb.  Thanks to @The-Compiler for maintaining the `pytest-xvfb` package we're dependent on.,2,1,[]
401,432173261,1240,12777496,2020-06-10 03:12:35,2020-06-10 03:12:43,closed,Reset self._needsUpdate in GLImageItem after updating,"This PR was done by @fschill, but I accidentally merged into develop instead of into master.",0,2,[]
402,431530693,1239,12777496,2020-06-09 04:37:52,2020-06-09 05:18:15,closed,PlotItem doesn't add item if already there,Implements #343 from @xiaoqiangwang along with the suggested change from @2xB ,0,1,[]
403,431448447,1238,12777496,2020-06-08 23:26:28,2020-06-08 23:42:16,closed,Final preparations for 0.11.0 release,"Intend to merge to master, tag, and upload after this is merged",2,1,[]
404,430655932,1235,12777496,2020-06-08 03:29:39,2020-06-08 03:54:33,closed,"Revert ""changed structure to redefine axis via plotitem.setAxes""",Reverts pyqtgraph/pyqtgraph#391,0,1,[]
405,429675814,1231,12777496,2020-06-07 03:37:38,2020-06-08 16:47:46,closed,Update README for 0.11 release,"PR includes some updates for the README

* removes reference to installer packages on pyqtgraph.org 
* removes incorrect statement about examples app not working on PySide2 (testing of the example app didn't work, still works to call it manually)
* slight reworking on macos/py2/qt4 limitations
* says to install current development version to install from master branch (this is assuming we change our current master/develop workflow)
",0,1,[]
406,429649683,1230,12777496,2020-06-07 02:56:35,2020-06-07 03:06:15,closed,Update changelog with changes since v0.11.0rc0,,1,2,[]
407,429519651,1229,12777496,2020-06-06 23:35:17,2020-06-07 00:12:08,closed,Wrap text in tables in docs,"Before:

![image](https://user-images.githubusercontent.com/943602/83956479-86584c00-a813-11ea-83e1-fd29c228ec4a.png)

After:

![image](https://user-images.githubusercontent.com/943602/83956490-9b34df80-a813-11ea-90e2-87ed1ea40b7e.png)

Live example: https://pyqtgraph.readthedocs.io/en/rtd/graphicsItems/plotitem.html#pyqtgraph.PlotItem.setLabel",1,1,[]
408,429497238,1228,12777496,2020-06-06 23:00:53,2020-06-06 23:25:31,closed,Minor improvements to LegendItem,"Fixes #1226, #1227, #1171",1,1,[]
409,429216529,1225,12777496,2020-06-06 13:55:43,2020-06-06 18:38:49,closed,ParameterTree: Fix custom context menu,"This issue was introduced in merging develop into #1175.
While refactoring for the merge, I did not attribute the change in namespace correctly, leading to the parameter `opts` to be assumed in local namespace when it isn't.",2,2,[]
410,428006325,1223,12777496,2020-06-04 18:13:02,2020-06-06 03:57:21,closed,Remove workaround for memory leak in QImage,"Fixes #724 - PySide2 < 5.12 should not be considered stable, and due to its age, pyqtgraph should not try and compensate with it by embedding workarounds.",17,1,[]
411,426299439,1222,12777496,2020-06-02 01:40:02,2020-06-02 02:16:44,closed,py3 fix for ScatterPlotWidget.setSelectedFields,,0,1,[]
412,425791339,1221,12777496,2020-06-01 06:53:05,2020-06-01 07:09:17,closed,Identify pyqt5 515 ci issue,"Fixes #1220

With PyQt5 5.15.0 released, our CI system failed at the debug stage.  Some googling turned up QTBUG-84489 which the author there reported this being a new issue with Qt 5.15.0.  I suspect we'll likely see the same thing with PySide2 (speaking of which, we should add a ""latest"" PySide2 pipeline).

I also renamed the Python38-PyQt-5.14 pipeline to Python38-PyQt-Latest (as that is what it really is).",2,11,[]
413,425558006,1219,12777496,2020-05-31 04:14:24,2020-05-31 04:31:48,closed,Encode csv export header as unicode,Fixes #1081 and is also an alternative implementation to #126,1,1,[]
414,425490842,1218,12777496,2020-05-30 16:29:15,2020-05-30 20:00:11,closed,Fix ParameterTree.clear(),Fixes #731 ,2,1,[]
415,425490271,1217,12777496,2020-05-30 16:24:52,2020-05-30 20:02:45,closed,Get docs version and copyright year dynamically,"https://pyqtgraph.readthedocs.io/en/rtd/

The version in the sidebar shows the RTD build version - for dev docs it'll show ""latest"" where it's implicit that it's up to date with github, and for versioned docs it'll show the tag name. This fixes the page title so it shows the pyqtgraph version string when the docs were built.

I considered adding ""...and pyqtgraph contributors"" to the copyright string, but that doesn't really feel like my decision to make. @campagnola any thoughts?",3,1,[]
416,425476180,1216,12777496,2020-05-30 14:35:31,2020-05-30 15:07:08,closed,Add cache for mapRectFromView,"In some cases, repeated calls to invertQTransform add up to become quite time consuming. This PR introduces a cache for it to speed things up.",1,1,[]
417,425472344,1215,12777496,2020-05-30 14:21:38,2020-05-30 14:25:37,closed,Skipping this test on python 5.9 configs,"`test_pg_exit()` is behaving problematically on macOS pyqt 5.9.  It's failing as other code in the library is modified, and passes when run as a stand-alone.  To not hold up every other library and based on the discussion in #1163 seems like most folks agree to skip this test and move on, which is what this PR does.",0,1,[]
418,424850996,1214,12777496,2020-05-29 02:37:38,2020-05-29 02:55:49,closed,Pin PyVirtualDisplay Version,"@2xB found another issue describing the same problem we're seeing with our CI system where we have failures with xvfb.  A dependency of pytest-xvfb was updated, this commit merely pins the version back.",1,1,[]
419,424739748,1212,12777496,2020-05-28 21:17:04,2020-05-29 17:23:42,closed,Fix PixelVectors cache,Suggested fix for issue #1189 where I stumbled upon an issue with the PixelVectors cache. See the issue for more details.,5,1,[]
420,424674243,1211,12777496,2020-05-28 19:01:51,2020-06-04 08:07:40,closed,Add support for running pyside2-uic binary to dynamically compile ui files,fixes #1102 ,6,8,[]
421,422065430,1206,12777496,2020-05-22 17:46:00,2020-05-30 05:55:20,closed,Added context menu option to parametertree,"Added custom context menu options in the parametertree
Usage: 
```python
{'name': 'Custom context menu', 'type': 'group', 'children': [
    {'name': 'List contextMenu', 'type': 'float', 'value': 0, 'context': [
        'menu1',
        'menu2'
    ]},
    {'name': 'Dict contextMenu', 'type': 'float', 'value': 0, 'context': {
        'changeName': 'Title',
        'internal': 'What the user sees',
    }},
]},
```
Result:

![List Menu](https://user-images.githubusercontent.com/60338487/82691978-1d8fa200-9c5f-11ea-9743-ca0ab9ce7aa9.png)
![Dict Menu](https://user-images.githubusercontent.com/60338487/82692020-3009db80-9c5f-11ea-8a7b-c1b0cff90abc.png)
",4,1,[]
422,420377470,1203,12777496,2020-05-19 21:33:50,2020-06-06 04:36:01,closed,Image axis order bugfix,"Lavinia B found a bug when using an roi to select part of an image displayed in ImageView when pyqtgraph's imageAxisOrder option was set to 'row-major'. (See this forum thread: https://groups.google.com/forum/#!topic/pyqtgraph/SE8KcK2LOv4)

This PR is a fix for these bugs. The bugs were occurring in ImageView.roiChanged because accounting for the axis order was only partially implemented. 

",2,4,[]
423,419190551,1201,12777496,2020-05-17 23:22:29,2020-05-18 21:58:06,closed,Get readthedocs working,"Results can be viewed here: https://pyqtgraph.readthedocs.io/en/rtd_build/index.html

The main thing that wasn't working previously was the API documentation because autodoc wasn't able to import the code without the dependencies installed. All that was really needed to fix it was adding the requirements.txt and readthedocs could figure out the rest. I added a config file [as they recommend](https://docs.readthedocs.io/en/stable/config-file/index.html) to be a little more explicit about the configuration and keep it in the repo itself.

Adding `fail_on_warning` may become annoying, but I think it's worth it.

One (possibly separate) issue I haven't quite figured out is how to get the `stable` docs working correctly to point to the latest tagged release. I *think* it's not parsing the `pyqtgraph-x.y.z` tag names the way it would parse `x.y.z`, but I haven't confirmed that. We can always manually activate versions as needed.",8,7,[]
424,418099396,1199,12777496,2020-05-14 16:12:34,2020-05-15 18:31:43,closed,Pass non-empty sys.argv to QApplication,"This is important to preserve the default behaviour of Qt that
applications may expect, for example on Linux setting the X WM_CLASS
attribute based on sys.argv[0], or setting themes as command line
options to the application.

This is a better fix for #1165 than #1169",13,1,[]
425,415907555,1198,12777496,2020-05-11 06:59:04,2020-05-30 06:08:41,closed,improve SymbolAtlas.getSymbolCoords and ScatterPlotItem.plot performance,"* only use the required fields from the opts
* better handling of recarray views in ScatterPlotItem.paint",1,15,[]
426,415674212,1197,12777496,2020-05-10 06:04:43,2020-05-10 15:39:18,closed,Disable remove ROI menu action in handle context menu,"This disables the ROI context menu in case the menu is requested from right clicking on a handle. Now for a non-removable ROI, the context menu is not shown at all if you right click in the middle of the ROI and the submenu is disabled if you right click a handle. It's shown/enabled in both cases if the ROI is removable.

Example:

```python
import pyqtgraph as pg

app = pg.mkQApp()

plotitem = pg.plot().plotItem

roi1 = pg.PolyLineROI([[0, 0], [1, 1], [0, 1]], closed=True, removable=True)
plotitem.addItem(roi1)
roi1.sigRemoveRequested.connect(plotitem.removeItem)

roi2 = pg.PolyLineROI([[2, 2], [3, 3], [2, 3]], closed=True, removable=False)
plotitem.addItem(roi2)

app.exec_()
```

Fixes #1186 ",1,1,[]
427,413866563,1188,12777496,2020-05-06 04:11:23,2020-05-10 15:42:05,closed,Added support for plot curve to handle both fill and connect args.,"Added option to handle both fill and connect options in plot curve to enclose shapes without having to plot them all separately.

Example use and screenshot of output attached.

[plot_example_using_fills_and_connect_py.txt](https://github.com/pyqtgraph/pyqtgraph/files/4584781/plot_example_using_fills_and_connect_py.txt)
![Screen Shot 2020-05-06 at 4 09 56 PM](https://user-images.githubusercontent.com/1945175/81137843-296b3b00-8fb4-11ea-85b5-12d2000be707.png)

.",1,1,[]
428,410550178,1184,12777496,2020-04-29 07:55:37,2020-05-04 20:42:04,closed,improve SymbolAtlas.getSymbolCoords performance,"I've done some tests plotting ~900 ScatterPlotItem objects each with ~500 samples.

Profiling the current code I get about 4.98s

![image](https://user-images.githubusercontent.com/20952040/80572933-c43da580-8a07-11ea-9ae1-a9bea1f79a85.png)

and profiling the patched code I get 2.51s

![image](https://user-images.githubusercontent.com/20952040/80572958-cf90d100-8a07-11ea-88a9-9ede0622d852.png)
",7,8,[]
429,409705651,1180,12777496,2020-04-27 19:40:19,2020-05-04 21:58:30,closed,Fix: AxisItem tickFont is defined in two places while only one is used,"To set the tick font of `AxisItem`s, there are two options:
`setStyle({""tickFont"":...})` and `setTickFont(...)`.
The first option sets `AxisItem.style['tickFont']`, the second
sets `self.tickFont`. Only `self.tickFont` is actually used.
This PR replaces all occurrences of the second variable with the first
variable, so both options work again. Also, documentation from
`setStyle` is copied to `setTickFont`.

Replaces former draft #1172.",0,1,[]
430,409697698,1179,12777496,2020-04-27 19:24:47,2020-05-05 16:16:08,closed,DateAxisItem: AxisItem unlinking tests and doc fixed,"This is a small follow-up to #1154. It implements the results from discussion with @ixjlyons and @axil in https://github.com/pyqtgraph/pyqtgraph/pull/1154/files#diff-9e1abc92379d2b4c257b8f4c5692cda7 and https://github.com/pyqtgraph/pyqtgraph/pull/1154/files#diff-aefdb23660d0963df0dff3a116baded8 :

 * #917 implements a feature similar to `AxisItem.unlinkFromView()`, and provides tests. This PR uses those tests (found by @ixjlyons , code by @mliberty1 ).
 * `ZoomLevel` is not needed to be accessible from the outside. (comment by @axil )
 * Do not recommend users to change the `DateAxisItem.zoomLevels` dict (and a no longer existing variable)  (comment by @axil )

Replaces #917.",2,5,[]
431,403354137,1175,12777496,2020-04-14 18:48:38,2020-05-30 20:01:40,closed,Fix: Parameter tree ignores user-set 'expanded' state,"When setting the 'expanded' state of parameters, this change is not applied
in the graphically visible tree. This commit changes that behaviour by
adding a clause in `ParameterItem.optsChanged` to react to that.

Also, an old and trivial out-commented debugging code line is removed.

Fixes #1130",13,6,[]
432,403265226,1174,12777496,2020-04-14 15:45:14,2020-05-30 06:00:11,closed,Fixed a possible race condition with linked views,"The `linkedView()`-function of the `AxisItem` uses the attribute `_linkedView`, which is a weakref (or `None`). The current implementation of the changed event-handlers leaves a small timeframe for the corresponding viewbox to be deleted after the check against `None` but before being used. This is remedied by introducing a temporary local variable `lv`, which holds a strong reference, thereby preventing the deletion while the function is running.

I did not actually experience any crashes due to that issue and producing an error-case would be probably very hard, since the timeframe is very small and the problem can only appear if the gc is working on a different thread. However, the problem exists in theory and this fix is the clean solution to it.",1,1,[]
433,402899193,1173,12777496,2020-04-14 00:04:28,2020-05-30 20:04:38,closed,GraphicsLayout: Always call layout.activate() after adding items,"When items are added to a `GraphicsLayout` items in the layout only learn their updated size information after the internal `QGraphicsGridLayout` recalculates the layout.
This is happening as a slot in the Qt event queue.
Not having updated geometry bounds directly after adding an item leads to multiple issues when not executing the Qt event loop in time (see below). This commit fixes that by always calling `layout.activate()` after adding items, updating item sizes directly.

This is a follow-up to PR #1167, where introducing a direct call to `processEvents` was suspected to be able to cause side effects.

Notifying @j9ac9k and @campagnola, as they were involved in #1167.

Testing code used next to MWE from issues below:
```python3
import pyqtgraph as pg
pg.mkQApp()

win = pg.GraphicsLayoutWidget()
win.show()

p1 = pg.PlotItem()
p2 = pg.PlotItem()
win.addItem(p1, None, None, 1, 1)
win.resize(800,800)
win.addItem(p2, None, None, 1, 1)
# pg.QtGui.QApplication.processEvents() # <-- workaround
print(p1.boundingRect()) # Should return something slightly smaller than (0,0,400,800)
print(p2.boundingRect()) # Should return something slightly smaller than (0,0,400,800)
```

Fixes #8
Fixes #1136",2,1,[]
434,402825580,1172,12777496,2020-04-13 20:29:13,2020-04-27 19:40:40,closed,Fix: AxisItem tickFont is defined in two places while only one is used,"To set the tick font of `AxisItem`s, there are two options:
`setStyle({""tickFont"":...})` and `setTickFont(...)`.
The first option sets `AxisItem.style['tickFont']`, the second
sets `self.tickFont`. Only `self.tickFont` is actually used.
This PR replaces all occurrences of the second variable with the first
variable, so both options work again. Also, documentation from
setStyle is copied to setTickFont.

[DRAFT]: This is a draft, since this PR collides with one commit suggested for the `DateAxisItem` PR #1154 that uses `self.tickFont` in a new location. To avoid conflicting PRs, this is held as a draft and updated once PR #1154 is merged.",1,4,[]
435,402280172,1169,12777496,2020-04-12 03:20:25,2020-04-12 04:16:48,closed,Replace default list arg with None,"Didn't catch #1165 in time. Just a suggestion to avoid issues with a mutable default argument.

I had also considered changing the function to accept a single optional list and use `['pyqtgraph']` if it's None, but either way seems fine.",2,1,[]
436,402268247,1168,12777496,2020-04-12 00:51:14,2020-05-27 14:32:18,closed,GroupParameterItem: Did not pass changed options to ParameterItem,"`ParameterItem` handles visibility changes in `optsChanged`. 
`GroupParameterItem` overrides this function, but never calls
the super function, resulting in visibility changes not being
applied. This PR fixes this by calling said function.

Fixes #788",1,1,[]
437,402262400,1167,12777496,2020-04-11 23:43:23,2020-04-13 20:50:03,closed,GraphicsLayout: Always call processEvents after adding items,"Items added to a `GraphicsLayout` need a call to `processEvents` to receive their size information.
Needing to call `processEvents` is unintuitive, leading to multiple issues (see below).
This commit fixes that by always calling `processEvents` after adding items.

Fixes #8
Fixes #1136",2,1,[]
438,402257578,1166,12777496,2020-04-11 22:48:06,2020-04-12 00:01:17,closed,pg.mkQApp: Pass non-empty string array to QApplication() as default,"According to Qt documentation, the `QApplication` initializer should never be called with an empty array: See warning in https://doc.qt.io/qt-5/qapplication.html#QApplication .
This manifests in a warning being printed to the console:
```
QSettings::value: Empty key passed
QSettings::value: Empty key passed
```

This PR changes `pg.mkQApp()` to pass ""pyqtgraph"" as application name and adds parameters to pass a different name and Qt command line arguments.
Further, some documentation to the function is added.

I do not know what the status of this function is, but I find it very convenient. Most examples use `QApplication([])` though, generating said warning. Therefore if this idea finds support, I'd extend this PR to replace every call to `QApplication([])` by `pg.mkQApp`, removing unnecessary warnings arising when launching the examples.

Fixes #1165.",3,1,[]
439,401600930,1164,12777496,2020-04-09 19:21:44,2020-04-09 20:03:04,closed,Ensure call_with_timeout will call p.poll,Ensure `call_with_timeout()` will call `p.poll()` as discussed in #1163,1,2,[]
440,401494095,1163,12777496,2020-04-09 15:32:16,2020-05-30 15:19:03,closed,[Discussion] How to proceed with failing pyqtgraph exit test,"test_pg_exit fails inconsistently, as seen in #1159. It seems like PyQtGraph is not exiting in time, which would be fixed by increasing the timeout for that test, which is what this PR aims at.

This is just a quick suggestion and open for discussion! A counter-argument would be that we then no longer test whether PyQtGraph exits *fast*.

As @j9ac9k pointed out in #1159, this failure was also observed by @ixjlyons . Does someone have any input on this?

[Edit] Update: The pipelines indicate that this fix did not work.",18,1,['help wanted']
441,401236391,1161,12777496,2020-04-09 06:34:27,2020-05-30 15:09:26,closed,import numpy as np for lines 44 and 51,"1. Undefined name `np` in pyqtgraph/PlotData.py
~2. To fix CI, make sure that `call_with_timeout()` polls at least once.~

@j9ac9k @2xB Your reviews please.",3,6,[]
442,400916984,1159,12777496,2020-04-08 15:23:20,2020-04-09 14:50:26,closed,Fix: Update axes after data is set,"On data changes on PlotCurveItems, bounds are updated before the new data is set, leading to axes not performing autoscaling directly. This PR changes the order of execution for setting data and updating bounds to fix that.

Fixes #1144",4,1,[]
443,400556056,1158,12777496,2020-04-07 23:48:24,2020-10-28 04:27:48,closed,[WIP] SVGExporter: Write SVG viewbox size,"With this PR, exported SVG files have an associated viewbox size, so that their boundaries are known to renderers.
Current issue: `pyqtgraph/exporters/test/test_svg.py` fails with the following log:
```
self = <pyqtgraph.exporters.SVGExporter.SVGExporter object at 0x7f32ea2e4d00>

    def getSourceRect(self):
        if isinstance(self.item, GraphicsScene):
            w = self.item.getViewWidget()
            return w.viewportTransform().inverted()[0].mapRect(w.rect())
        else:
>           return self.item.sceneBoundingRect()
E           AttributeError: 'QGraphicsScene' object has no attribute 'sceneBoundingRect'

../Exporter.py:90: AttributeError
```

Note that if one replaces the SVGExporter with the ImageExporter and "".svg"" file endings with "".png"" file endings, a similar error occurs that has obviously nothing to do with this PR:

```
self = <pyqtgraph.exporters.ImageExporter.ImageExporter object at 0x7f846003ae20>

    def getTargetRect(self):
        if isinstance(self.item, GraphicsScene):
            return self.item.getViewWidget().rect()
        else:
>           return self.item.mapRectToDevice(self.item.boundingRect())
E           AttributeError: 'QGraphicsScene' object has no attribute 'mapRectToDevice'

../Exporter.py:96: AttributeError
```

If someone is interested, suggestions or Pull Requests to my branch ""2xb-fix-1157"" to fix this test are very welcome.

Fixes #1157",2,1,['help wanted']
444,400549151,1156,12777496,2020-04-07 23:22:26,2020-04-09 14:52:47,closed,SVGExporter: Correct image pixelation.,"This PR adds the following tag to every exported SVG:

```
<style>
    image {
        image-rendering: crisp-edges;
        image-rendering: -moz-crisp-edges;
        image-rendering: pixelated;
    }
</style>
```
This is needed because otherwise, pixel images are interpolated. See example in #1155.

The correct way according to CSS specifications would be to use `image-rendering: pixelated`, as seen in e.g. https://developer.mozilla.org/de/docs/Web/CSS/image-rendering or https://stackoverflow.com/a/25278886/8575607. As seen in the first link, `pixelated` is not supported by e.g. Firefox. Therefore, to keep compatibility, all the applicable image-rendering options are given in inverse preference order. I tested this to work with Inkscape, Firefox and Chromium.

An example for this PR with screenshots from Inkscape is given in #1155.

Fixes #1155.",0,1,[]
445,400466912,1154,12777496,2020-04-07 19:47:02,2020-04-27 18:43:23,closed,Date axis item,This is an improvement over PR #74 (see discussion there).,71,58,[]
446,398443024,1152,12777496,2020-04-04 00:59:08,2020-04-04 01:39:11,closed,Fnanfix test,Follow-up for #1098. Adds a couple tests to make sure both grayscale and rgb(a) input images with NaNs work.,1,4,[]
447,397960189,1151,12777496,2020-04-03 06:21:20,2020-04-03 16:46:46,closed,ImageExporter py2-pyside fix with test,"Adds a test on top of #1133. It pretty much only hits the code that #1133 fixes, but it's better than nothing. We should really have more coverage of `ImageExporter` - maybe for a future PR?",7,2,[]
448,396942458,1148,12777496,2020-04-01 11:43:53,2020-04-02 01:25:11,closed,fix bug of add context menu to dockarea cause crash and give float dock a window title,"1. when float a dock, change the window title of dock to dock name, not the default ""python"";
2. when add contextmenu to dockarea, using the mouse right button will make the app crash, need to detinguish which mouse button event to make sure only the left button is using for drag and release
3. when closing the last dock of the dockarea, the dockarae.home change to None, removeTempArea make the app crash, need to check the home first.",0,1,[]
449,395334237,1147,12777496,2020-03-29 22:44:32,2020-03-29 23:17:21,closed,Update ptime.py,The function time.clock() has been deprecated since Python 3.3,1,1,[]
450,393185015,1145,12777496,2020-03-24 18:27:37,2020-04-03 22:33:22,closed,Pass showAxRect keyword arguments to setRange,"Subclasses of ViewBox may wish to, for example, set padding when executing a scale or translation.",1,1,[]
451,388478757,1142,12777496,2020-03-14 23:21:16,2020-04-03 17:06:26,closed,Miscellaneous doc fixups,"Iterated until the docs built without warnings and made some drive-by improvements along the way.

Other things of note:

- Reworked installation page a little bit.
- Added representation of classes in graphicsWindows.py even though they're deprecated. Remove when the classes are actually removed.
- Added `BarGraphItem` (fixes #686)
- Removed extra parametertree doc from widgets TOC (it's already documented at the top level & apireference). widgets/parametertree rendered an empty page previously.
- Moved dockarea to top level of apireference (similar to parametertree, flowchart). Eventually this should be expanded I think
- Made sphinx_rtd_theme default. It seems to be rendered with that theme on readthedocs and pyqtgraph.org/documentation",1,2,[]
452,386100230,1140,12777496,2020-03-10 12:18:48,2020-10-19 05:34:41,closed,dynamic range limiting in PlotDataItem,"Workaround for issue #31 
PlotCurveItem disappears with large ViewBox scale factor

(Code editor ate trailing whitespace, sorry.)

Test code:
```
from PyQt5 import QtWidgets
import sys
import pyqtgraph as pg

class MainWindow(QtWidgets.QMainWindow):
    def __init__(self, *args, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)
        self.graphWidget = pg.PlotWidget()
        self.setCentralWidget(self.graphWidget)

        y_data_a = [  10,  10, -1,  1,  0,  10,  10]
        y_data_b = [ 2e9, 2e9,  0,  1, -1, 2e9, 2e9]
        y_data_c = [-2e9,-2e9,  0, -1,  1,-2e9,-2e9]
        x_data = [idx for idx, val in enumerate(y_data_a)]
        self.graphWidget.setYRange( -1.1, 1.1)
        item0 = pg.PlotDataItem( x=x_data, y=y_data_a, pen='g')
        item1 = pg.PlotDataItem( x=x_data, y=y_data_b, pen='r')
        item2 = pg.PlotDataItem( x=x_data, y=y_data_c, pen='m')

        disable = False
        for item in [item0, item1, item2]:
            self.graphWidget.addItem( item )
            if disable: item.setLimitDynamicRange(False)

def main():
    app = QtWidgets.QApplication(sys.argv)
    main = MainWindow()
    main.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
```
",11,13,[]
453,384867295,1139,12777496,2020-03-06 15:03:09,2020-03-06 19:26:49,closed,"Bug fix in LegendItem for `setPen`, `setBrush` etc","Fixes a bug where `setPen`, `setBrush` and `setLabelTextColor` would fail because they call `LegendItem.paint` without a pen. They should instead call `LegendItem.update`.",3,1,[]
454,382067266,1133,12777496,2020-03-01 16:52:46,2020-04-03 16:46:48,closed,compatibility-fix for py2/pyside,"replaced py3-specific string construction.
compatible with pyside/pyside2/PyQt#.",3,1,[]
455,378393977,1131,12777496,2020-02-21 17:35:39,2020-03-06 18:47:05,closed,Update CI/tox and Enable More Tests,"Currently azure pipelines is starting to get a little dated (using macOS 10.13, older windows and ubuntu images); and I'm not making use of the `free` conda channel for python2 (instead I'm downloading/installing an old version of miniconda presently.

This should be addressed, along with the fragile `tox.ini` file, and some tests should be enabled.

Furthermore, the CI should be able to compensate for PySide2 losing the loadUIFile functionality as well.",2,16,[]
456,372974930,1125,12777496,2020-02-10 07:13:44,2020-06-10 04:51:49,closed,"GraphicsObject.py, GraphicsObject().itemChange():","fixes ""TypeError: unable to convert a QVariant back to a Python object"" by replacing value == QtCore.QVariant() with None",4,1,[]
457,372883725,1124,12777496,2020-02-09 22:49:40,2020-03-08 14:19:55,closed,Syntax highlighting for examples.,"Allow bad eyesighted people like me to read and play with examples.

Tested and working with both `PyQt5` and `PySide2`, on Python `3.6` and `3.7`.

Based on https://github.com/art1415926535/PyQt5-syntax-highlighting",11,3,[]
458,372811141,1123,12777496,2020-02-09 09:59:35,2020-02-11 20:17:52,closed,Embed pyside2uic from pyside2 5.13,"This fixes #1102 by copying pyside2uic out of pyside2 v5.13 and embedding it inside pyqtgraph.util. 
I have also copied the license file from https://code.qt.io/cgit/pyside/pyside-tools.git/tree/LICENSE-uic, which is dual BSD/GPL. I have no idea what legal repercussions this has (if any) for pyqtgraph users.

This solution makes me squirm, so I am leaving it here for discussion and review. I don't immediately see anything better, though. As far as I can tell, there is no replacement in pyside2 5.14 for the `loadUiType` functionality that was lost when they dropped pyside2uic (and furthermore the new ui compiler chokes on `examples/designerExample.ui`).

Another possible fix is just to declare pyqtgraph's incompatibility with 5.14 (actually the last version I could find that worked at all was 5.11) in some way. Maybe this can be done in setup.py, or maybe we can just raise an exception recommending 5.11.",4,4,[]
459,368970950,1121,12777496,2020-01-30 09:35:17,2020-06-10 04:37:06,closed,Make LegendItem compatible with BarGraphItems,I have a Use Case where I'd like to display a BarGraphItem in a plot. This leads to a `KeyError` since it does not hold any antialiasing information in its `opts` dictionary.,4,1,[]
460,367291596,1120,12777496,2020-01-27 02:27:43,,open,"A bitmask type for the parametertree, e.g. enum.IntFlag","From Python 3.6 there is a nice class called enum.IntFlag https://docs.python.org/3/library/enum.html#enum.IntFlag for managing bitmasks. I wanted to use it in a parametertree (which is a great utility, by the way!) and made a BitmaskParameter that shows a boolean sub-Parameter (i.e. checkbox in the GUI tree) for each bit of the bitmask. Examples of usage are provided in examples/parametertree_bitmask.py.

Although I didn't show such an example, the BitmaskParameter can be used also for plain integer values without IntFlag, e.g. defined with `'value': 1|2, 'values': {'x': 1, 'y': 2, 'z': 4}`. If the import-statement and isinstance-check would be changed to something more dynamic or version-dependent it should thus be possible to make it usable on older Python versions too.

I modified `parametertree.__init__` to load this module and get the 'bitmask' type registered, but maybe you want to put the code in the big file with all simple parameters or maybe not automatically register it at all? I didn't find test cases covering other parameter types so I didn't bother learning how to add something for this. Some of my usage example is duplicated in the docstring for the class, which maybe is redundant?

This is my first pull request ever, so let me know if I should have done something differently ;) I did get warnings about lines longer than 79 characters when running the `python setup.py style`. But since also existing code goes beyond that in several cases (and thinking that for indented python code within docstrings, 79 is a too low limit considering today's widescreens), I didn't correct all of them. Except for the example, the code should be within 100 characters now.",1,1,"['parameterTree', 'post nep-29']"
461,363877126,1117,12777496,2020-01-16 22:26:49,2020-06-09 18:32:47,closed,Updated for aligned csv data output with separtor of spaces,This feature would be useful to have a space separated csv-like output where the headers and data are aligned.,3,1,[]
462,361385782,1114,12777496,2020-01-10 10:36:13,2020-01-10 17:09:07,closed,doc: Fix small mistake in introduction,,1,1,[]
463,361167530,1113,12777496,2020-01-09 21:25:05,2020-01-11 18:40:31,closed,Fix typo bug,,1,1,[]
464,361165122,1112,12777496,2020-01-09 21:18:47,2020-02-06 00:08:27,closed,Add opengl text item and example,,2,1,[]
465,361153237,1111,12777496,2020-01-09 20:51:21,2020-03-06 23:30:58,closed,Add name label to GradientEditorItem,,2,1,[]
466,360641658,1110,12777496,2020-01-08 20:31:31,2020-03-06 21:32:12,closed,fix for makeARGB error after #955,It resolves #1109 ,3,1,[]
467,356683220,1101,12777496,2019-12-24 18:05:29,2020-01-02 22:49:48,closed,Fix small oversight in LegendItem,Fixes #1094,1,1,[]
468,355346690,1098,12777496,2019-12-19 20:42:43,2020-04-04 01:40:09,closed,#406 does not work for 3D data,"Without the PR on gets the following error for RGB data

```
Traceback (most recent call last):
  File ""/home/jkotan/sources/lavue/lavuelib/imageDisplayWidget.py"", line 64, in paint
    _pg.ImageItem.paint(self, p, *args)
  File ""/home/jkotan/testinst/lib/python2.7/site-packages/pyqtgraph/graphicsItems/ImageItem.py"", line 439, in paint
    self.render()
  File ""/home/jkotan/testinst/lib/python2.7/site-packages/pyqtgraph/graphicsItems/ImageItem.py"", line 431, in render
    argb, alpha = fn.makeARGB(image, lut=lut, levels=levels)
  File ""/home/jkotan/testinst/lib/python2.7/site-packages/pyqtgraph/functions.py"", line 1187, in makeARGB
    imgData[nanMask, 3] = 0
IndexError: too many indices for array
```",1,3,[]
469,353486896,1097,12777496,2019-12-16 10:29:54,2020-05-30 20:53:39,closed,pretty-print log-scale axes labels,"This patch pretty-prints log-scale axes tick labels.

before:
![1](https://user-images.githubusercontent.com/2853022/70899527-1650d200-1ff7-11ea-87fc-93d3cad4082a.png)
after:
![2](https://user-images.githubusercontent.com/2853022/70899529-1650d200-1ff7-11ea-86a8-551eb3cf55cf.png)

This probably does not work for Python2 because of the unicode characters in the labels.",3,2,[]
470,351541190,1093,12777496,2019-12-10 18:53:05,2020-05-30 20:09:09,closed,Fix aspectRatio and zoom range issues when zooming,"- fixes issue #1030 
- Moves range check logic out of the updateViewRange function into the setRange function, forcing the requested range into limits
- Modifies the aspect ratio check logic to keep the final aspect ratio corrected viewRange within any set limits
- Added a test module testing the above features. There are many more combinations of limits/zoom requests that could be tested, I'm sure, but I tried to cover the major areas.

I noticed that my IDE ""cleaned up"" a bunch of blank lines, which made it into the commit. Sorry about the noise!",6,9,[]
471,350052680,1092,12777496,2019-12-06 15:41:22,2020-03-06 23:11:38,closed,avoid App Nap on macOS >= 10.9,"This solves several errors rising up in an application that uses realtime plotting based on pyqtgraph.
The problem is that macOS will activate App Nap for an application when it is minimised or not displayed on the screen. The moment when it happens it is up to the OS.
If this happens it is not possible to communicate with the application anymore and errors like timeout will occur. Also as a side effect code might get slow.
![Screenshot 2019-12-06 at 16 22 38](https://user-images.githubusercontent.com/31376402/70334113-13125500-1845-11ea-8eaa-e985fd47c502.png)

This might not be the right way of doing it but is the solution I found. It avoids runtime errors which are cryptic and hard to debug.

Might also not be the correct file to put this lines of code.
Might also not be a good idea to do it at all as it defeats the purpose of App Nap.
I just wanted to share this with the world. Maybe it solves other issues.

Maybe this should be a concern for each application that make use of pyqtgraph. In my case I cannot fix it on the level of my application because it is being built on top another python module that uses pyqtgraph under the hood.

Related readings:
- [https://github.com/msorvig/qt-and-app-nap](url)
- [https://codereview.qt-project.org/c/qt/qtbase/+/202515](url)

P.S. Ignore lines below 35, just whitespaces that my editor removed",7,1,[]
472,348261228,1090,12777496,2019-12-03 10:56:05,2020-05-30 06:11:47,closed,dump ExportDialog.exporterParameters,fixes #1087,1,1,[]
473,346465656,1088,12777496,2019-11-27 23:52:14,2019-11-29 23:05:03,closed,Update ptime.py for 3.8 compatibility,systime.clock() is no longer supported for Python 3.8. perf_counter works well. Tested in Windows 10,1,1,[]
474,345210373,1085,12777496,2019-11-25 13:16:27,2019-11-25 14:52:02,closed,fix wrong offset when drawing symbol,"I believe this was not correctly implemented in #88.
Note that this fix has nothing to do with #176.",3,1,[]
475,344804023,1083,12777496,2019-11-23 12:18:02,2019-11-24 04:21:21,closed,fix faulty SVG export of scatter plots (KeyError: 'resolutionScale'),"This PR fixes the SVG export of scatter plots.

Steps to reproduce:

- Ubuntu 18.04.3 LTS
- pyqtgraph develop
- Python 3.6.8
- PyQt5==5.13.2

1. run ""GraphicsItems/ScatterPlot"" example

2. Right click on the plot and ""Export...""

3. Choose entire scene and SVG export.

Expected Result: Entire plot is exported.

Actual Result:
![GraphicsScene_1](https://user-images.githubusercontent.com/2853022/69478573-43450700-0df4-11ea-9c35-9829d5473954.png)


In addition, the following message is printed:
```
[13:05:51]  Ignored exception:

    |==============================>>
    |  Traceback (most recent call last):
    |    File ""/pyqtgraph_issue/pyqtgraph/examples/ScatterPlot.py"", line 122, in <module>
    |      QtGui.QApplication.instance().exec_()
    |    File ""/pyqtgraph_issue/pyqtgraph/pyqtgraph/exporters/Exporter.py"", line 77, in fileSaveFinished
    |      self.export(fileName=fileName, **self.fileDialog.opts)
    |    File ""/pyqtgraph_issue/pyqtgraph/pyqtgraph/exporters/SVGExporter.py"", line 54, in export
    |      xml = generateSvg(self.item, options)
    |    File ""/pyqtgraph_issue/pyqtgraph/pyqtgraph/exporters/SVGExporter.py"", line 77, in generateSvg
    |      node, defs = _generateItemSvg(item, options=options)
    |    File ""/pyqtgraph_issue/pyqtgraph/pyqtgraph/exporters/SVGExporter.py"", line 255, in _generateItemSvg
    |      csvg = _generateItemSvg(ch, nodes, root, options=options)
    |    File ""/pyqtgraph_issue/pyqtgraph/pyqtgraph/exporters/SVGExporter.py"", line 255, in _generateItemSvg
    |      csvg = _generateItemSvg(ch, nodes, root, options=options)
    |    File ""/pyqtgraph_issue/pyqtgraph/pyqtgraph/exporters/SVGExporter.py"", line 255, in _generateItemSvg
    |      csvg = _generateItemSvg(ch, nodes, root, options=options)
    |    [Previous line repeated 2 more times]
    |    File ""/pyqtgraph_issue/pyqtgraph/pyqtgraph/exporters/SVGExporter.py"", line 186, in _generateItemSvg
    |      item.paint(p, opt, None)
    |    File ""/pyqtgraph_issue/pyqtgraph/pyqtgraph/debug.py"", line 93, in w
    |      printExc('Ignored exception:')
    |    --- exception caught here ---
    |    File ""/pyqtgraph_issue/pyqtgraph/pyqtgraph/debug.py"", line 91, in w
    |      func(*args, **kwds)
    |    File ""/pyqtgraph_issue/pyqtgraph/pyqtgraph/graphicsItems/ScatterPlotItem.py"", line 753, in paint
    |      pts = self.mapPointsToDevice(pts)
    |    File ""/pyqtgraph_issue/pyqtgraph/pyqtgraph/graphicsItems/ScatterPlotItem.py"", line 709, in mapPointsToDevice
    |      tr = self.deviceTransform()
    |    File ""/pyqtgraph_issue/pyqtgraph/pyqtgraph/graphicsItems/GraphicsItem.py"", line 101, in deviceTransform
    |      scaler = self._exportOpts['resolutionScale']
    |  KeyError: 'resolutionScale'
    |==============================<<
```

This PR sets the scale to 1.0 if it is not set (setting a scale for SVG export does not make sense).
Result:
![GraphicsScene_2](https://user-images.githubusercontent.com/2853022/69478563-214b8480-0df4-11ea-963b-e3e9c4e67d87.png)

(I converted the images to png using inkscape)
",1,1,[]
476,344128413,1082,12777496,2019-11-21 16:43:20,2019-11-25 14:52:45,closed,"Redo ""Allow MetaArray.__array__ to accept an optional dtype arg""",Reverts pyqtgraph/pyqtgraph#360,0,2,[]
477,343380159,1080,12777496,2019-11-20 14:19:46,2019-11-20 14:21:11,closed,MOT3-1136 plots cannot be exported as img,,0,12,[]
478,342635754,1079,12777496,2019-11-19 11:42:35,2019-11-19 16:14:53,closed,improve performance of updateData PlotCurveItem (saves about 2us per call),,1,5,[]
479,340345807,1076,12777496,2019-11-13 09:56:08,2019-11-19 16:21:37,closed,Reset currentRow and currentCol on GraphicsLayout.clear(),"If a GraphicsLayout has multiple columns and GraphicsLayout.clear() is called, then when adding new plot items, there will be an offset in the first row which propagates to all remaining rows.

This is a simple fix.

actual behavior:
![image](https://user-images.githubusercontent.com/2853022/68752675-ff881b80-0603-11ea-86f3-a4b00577f6c4.png)

desired behavior:
![image](https://user-images.githubusercontent.com/2853022/68752755-234b6180-0604-11ea-8ef6-3f6436f39e29.png)
",1,1,[]
480,339175535,1074,12777496,2019-11-10 18:13:53,2019-11-12 16:36:17,closed,Validate min/max text inputs in ViewBoxMenu,Fixes #851 ,1,1,[]
481,339084307,1073,12777496,2019-11-09 20:10:18,2019-11-12 16:45:43,closed,Qulogic py3 fixes,"Cherry-picked some of the commits in #357. I left out the `MetaArray` stuff as I think that's handled more completely in #742 

edit: I find it's easiest to view the changes with split view and whitespace changes ignored",1,4,[]
482,339072388,1072,12777496,2019-11-09 17:53:02,2019-11-12 17:01:50,closed,HDF5Exporter handling of ragged curves with tests,"Builds from #748, which I thought could use some testing.

Fixes #747",1,4,[]
483,338093087,1071,12777496,2019-11-07 15:19:47,2020-05-30 06:38:04,closed,Update Data.py,Python eval not working with python 3 - bug fix with the exec() part,4,2,[]
484,337671488,1069,12777496,2019-11-06 21:51:59,2019-11-20 04:05:46,closed,Allow actions to display title instead of name,"ActionParameterItem changed so that if there is
a title it will be displayed, otherwise displays name.",1,1,[]
485,335994474,1067,12777496,2019-11-03 05:34:51,2019-11-12 17:02:09,closed,Declare scipy optional,Fixes #1026 ,0,2,[]
486,335993572,1066,12777496,2019-11-03 05:15:39,2019-11-19 16:15:28,closed,Add RemoteGraphicsView to __init__.py,"Fixes #1061 

",1,1,[]
487,333117064,1063,12777496,2019-10-28 13:31:44,2020-03-07 00:16:15,closed,Fix: AttributeError in ViewBox.setEnableMenu,"### Issue

Executing
```python
from PyQt5.QtWidgets import QApplication
import pyqtgraph as pg

app = QApplication([])

view = pg.PlotWidget()
viewbox = view.plotItem.vb
viewbox.setMenuEnabled(False)
viewbox.setMenuEnabled(False)  # <- error here
```
raises a 
```
Traceback (most recent call last):
  File ""<stdin>"", line 9, in <module>
  File ""/Users/aleserjavec/workspace/pyqtgraph/pyqtgraph/graphicsItems/ViewBox/ViewBox.py"", line 388, in setMenuEnabled
    self.menu.setParent(None)
AttributeError: 'NoneType' object has no attribute 'setParent'
```
in the second call to setMenuEnabled(False)

Fixed by validating the current menu state and only deleting it when necessary.",7,3,[]
488,330892583,1062,12777496,2019-10-22 09:31:21,2019-10-22 16:45:46,closed,Fix typo in documentation,,1,1,[]
489,329897277,1060,12777496,2019-10-18 19:44:39,2019-11-03 04:36:58,closed,fix flowchart context menu redundant menu,fix #1059 ,1,1,[]
490,329285932,1058,12777496,2019-10-17 14:13:44,2020-11-23 04:28:49,closed,Avoid Qt receiving nan values,"Since Qt 5.13.1, paths containing non-finite values are not drawn. This PR avoids passing non-finite values to Qt. Also, as long as `connect` is neither `'all'` nor an array, it also draws paths unconnected at places where a non-finite value occurs.

Fixes #1057.",12,3,[]
491,326291106,1055,12777496,2019-10-09 14:41:47,2019-11-03 04:51:21,closed,Remove global for CONFIG_OPTIONS in setConfigOption,This PR removes `global` for `CONFIG_OPTIONS` in `setConfigOption` because it is redundant for dictionary.,2,1,[]
492,323144991,1051,12777496,2019-10-01 08:21:58,2020-06-28 15:51:35,closed,Matplotlib exporter scientific notation bugfix,"Fix setting labels and values in case of plots which use scientific notation.

Solves issue #1050 ",2,2,[]
493,322447931,1048,12777496,2019-09-28 21:29:40,2019-09-30 16:15:05,closed,Fix: InfiniteLine bounding box wrong,"The bounding box of `InfiniteLine`s is wrong: Currently the pen width is translated into a width `w` relative to the plot range in one direction. But `w` is then used in both directions, x and y. Since `w` is only necessary in one direction, this PR removes its influence in the bounding box in the other direction.

Fixes #1037 ",1,1,[]
494,321357348,1046,12777496,2019-09-25 17:28:22,2019-09-26 17:08:44,closed,remote legacy work-around for old numpy errors,The referenced numpy bug had been fixed since 2013 (https://github.com/numpy/numpy/issues/2084),5,3,[]
495,320575505,1045,12777496,2019-09-24 04:23:19,2019-09-26 00:57:13,closed,Raise AttributeError in __getattr__,"It's in a deprecated class, but might as well fix it while it's still in the code. In Python 2, any exception means `hasattr` returns False, but now it needs to be an `AttributeError`. edit: actually I realized there's a simpler way.

Fixes #525 ",0,2,[]
496,320095686,1044,12777496,2019-09-23 00:05:09,2019-09-23 00:21:03,closed,Fix PlotCurveItem.paintGL,Just happened to come across this,0,1,[]
497,320090696,1042,12777496,2019-09-22 22:54:20,2019-09-27 20:37:41,closed,Close windows at the end of test functions,Fixes #1040,5,2,[]
498,312050362,1031,12777496,2019-08-28 21:49:49,2019-09-13 04:00:39,closed,Fix: Reset ParentItem to None on removing from PlotItem/ViewBox,"When a GraphicsItem is removed from a PlotItem, it keeps the `ViewBox.childGroup` as parent. When it is removed from a ViewBox, also an error is risen when the item does not have an axxessible GraphicsScene.
In both cases this prevents the item from being removed if it does not have an accessible GraphicsScene. Example for both:

```python3
import sys
from PyQt5 import QtGui, QtCore, QtWidgets
import pyqtgraph as pg

class Ellipse(QtWidgets.QGraphicsItem):
    def __init__(self, rect):
        super(Ellipse, self).__init__()
        
        self.rect = QtCore.QRectF(rect[0], rect[1], rect[2], rect[3])

    def boundingRect(self):
        return self.rect

    def paint(self, painter, option, widget=None):
        painter.drawEllipse(self.rect)
        
app = QtWidgets.QApplication(sys.argv)

gv = pg.GraphicsLayoutWidget()
gv.show()

vb = pg.ViewBox() # or pg.PlotItem
gv.addItem(vb, 0, 0)

item = Ellipse((0,1,2,3))
vb.addItem(item)

gv.removeItem(vb)
vb.removeItem(item)
gv.addItem(vb)

if __name__ == '__main__':
    sys.exit(app.exec_())

```

Fixes #1028 ",1,1,[]
499,309118033,1024,12777496,2019-08-20 15:49:45,2019-09-13 04:30:40,closed,"Prevent element-wise string comparison, second try","As discussed in issue #835, the former solution from #921 did not work to prevent `np.ndarray.__eq__` to element-wise compare a string against an array. This Pull Request adds a type check so the comparison is only executed against strings, not against arrays. It is just copy-pasted from @flutefreak7 s comment on issue #835.

Fixes #835.",1,1,[]
500,308900699,1023,12777496,2019-08-20 06:49:59,2019-11-03 05:00:07,closed,add bookkeeping exporter parameters,With this PR  `exportDialog` keeps the exporter parameters.  Loosing already set parameters is quite annoying. ,1,2,[]
501,308314475,1022,12777496,2019-08-17 19:44:29,2019-08-18 03:43:22,closed,Fix: Allow wrapped GraphicsLayoutWidget to be deleted before its Python object,"With #942, I introduced a warning when a Python `GraphicsView` window is closed by GC. This introduced issue #1021. This PR fixes #1021, by catching RuntimeExceptions that occur if the wrapped `GraphicsLayoutWidget` is removed before its associated `GraphicsView` is deleted.

An associated question is whether #942 should be reverted completely. Regarding this: PyQtGraph advertises ""learning by doing"" and ""learning by trying and editing examples"", as opposed to a tutorial-rich documentation, which makes it unlikely for people to read through documentation to this topic, especially since they would not know where exactly to search for. But I also understand other opinions here - I would also be fine with it being removed again, if that is favored. This PR gives only the opportunity to keep this warning if wanted.

Fixes #1021.",0,1,[]
502,307546127,1019,12777496,2019-08-15 00:48:40,2019-08-17 03:19:32,closed,Fix: GLScatterPlotItem and GLImageItem initializeGL only executed once,"If a `GLScatterPlotItem` is for example removed from and readded to a plot, its `initializeGL` function is executed twice (called through `GLViewWidget.addItem`). This causes GLGridItems to disappear, as can be currently tested on develop with this code:

```python3
from pyqtgraph.Qt import QtCore, QtGui, QtWidgets
import pyqtgraph.opengl as gl
import pyqtgraph as pg
import numpy as np

app = QtGui.QApplication([])
w = gl.GLViewWidget()
w.show()

gx = gl.GLGridItem()
w.addItem(gx)

plt3 = gl.GLScatterPlotItem(pos=np.zeros((1, 3)))
w.addItem(plt2)
w.addItem(plt3)

app.processEvents()
plt2.initializeGL()

if __name__ == '__main__':
    import sys
    if (sys.flags.interactive != 1) or not hasattr(QtCore, 'PYQT_VERSION'):
        QtGui.QApplication.instance().exec_()
```

This PR fixes that by checking if this function was called before.

Fixes #1018 ",1,1,[]
503,306120859,1017,12777496,2019-08-09 20:06:37,2019-08-17 18:52:46,closed,Fix: Item on ViewBox causes duplicate paint calls,"Analysis leads to the reason for issue #7:

Via `scene.sigPrepareForPaint.connect(self.prepareForPaint)` in `ViewBox.checkSceneChange()`, the method `ViewBox.prepareForPaint()` is called whenever a paint event happens. This calls `ViewBox.updateMatrix`, which - if the transformation was not yet applied - calls `ViewBox.childGroup.setTransform()`, that issues a repaint. This brings a total of two `paint` calls.

By moving the task of detecting scene changes to the method `update`, that is there to be notified on scene changes before `paint`, this PR fixes the issue and cleans up code.

Fixes #7",9,3,[]
504,305640368,1016,12777496,2019-08-08 15:47:14,2019-08-17 03:28:03,closed,Fix: ImageView sigTimeChanged was only emitted on mouse interaction,"Signal `ImageView.sigTimeChanged` was only emitted in method `ImageView.timeLineChanged`. It was skipped via
```
        if self.ignoreTimeLine:
            return
```
when `ImageView.setCurrentIndex` changed the timeline. This PR moves the update of `ImageView.currentIndex` from `ImageView.setCurrentIndex` to `ImageView.timeLineChanged`, so the latter function is always executed and therefore the call to `ImageView.sigTimeChanged` always happens when the index is changed, therefore fixing the original issue.

Fixes #862",1,1,[]
505,305620021,1015,12777496,2019-08-08 15:00:31,2019-08-17 03:29:07,closed,Always convert PlotDataItem data to NumPy array,"Currently, the following code does not work:

```python3
import pyqtgraph as pg

pg.plot(range(3), range(3))
```

This is because only lists are converted to NumPy arrays, not e.g. iterators like `range(...)`. This PR fixes this by converting everything that is not a NumPy array.",1,1,[]
506,305218955,1014,12777496,2019-08-07 16:01:18,2019-08-18 03:38:06,closed,Fix: colormap: Support various arguments as color,"Currently, `colormap`s may be provided with RGB values, but internally treat `self.color` as an array of RGBA values. Examples are provided in issue #1009.

This PR fixes that by allowing to pass any type of color to `colormap` that `mkColor` accepts.

Fixes #1009 ",2,2,[]
507,305104981,1012,12777496,2019-08-07 11:29:33,2019-09-14 05:12:24,closed,fix: circular texture was slightly off-center,,3,1,[]
508,304798304,1010,12777496,2019-08-06 16:33:43,2019-08-17 03:42:59,closed,BarGraphItem CSV/image export,,3,2,[]
509,302131974,1005,12777496,2019-07-29 15:53:44,2019-12-16 04:30:23,closed,Update Changelog,"For a release, we need an up-to-date changelog. I tried to put all ""important"" PRs into this - but for the whole Azure/Travis/CI/CD topic, decided not to mention every single PR, as this would become quite some rendundant entries. I opted for a short description on what happened instead. Feel free to add missing PRs.",3,6,[]
510,300041839,1002,12777496,2019-07-22 21:14:25,2019-07-22 21:18:16,closed,fixes ,,0,2,[]
511,299589761,999,12777496,2019-07-20 20:41:13,2019-08-17 16:57:41,closed,Make outline around fillLevel optional,"PR #922 introduced outlines surrounding fillLevel areas. This is a design element that is not always wanted: In some scientific use cases, multiple lines in the same color are commonly interpreted as a bifurcation or hysteresis. This PR aims at providing a boolean option `fillOutline` to be used together with `fillLevel` to activate outlines.

An example of a confusing outline can be seen in the bottom left plot of example `Plotting.py`:
![](https://user-images.githubusercontent.com/31772910/61583890-f9df6500-ab3e-11e9-8232-355c377f85c0.png)

This Pull Request demonstrates the new option in the example `histogram.py`:
![](https://user-images.githubusercontent.com/31772910/61583914-52aefd80-ab3f-11e9-8e0e-a1530188b270.png)

Further, API documentation is added.",4,1,[]
512,299583026,998,12777496,2019-07-20 18:38:56,2019-08-17 04:21:47,closed,Fix QtProcess proxy transmitting small multidimensional arrays,"This fixes issue #461 as a workaround for https://bugs.python.org/issue37637 by transforming all objects into bytes objects before transmitting them using `send_bytes`.

Note: I did not notice any performance decrease using the example `RemoteSpeedTest.py` with this workaround.",1,1,[]
513,298450294,996,12777496,2019-07-17 12:39:45,2019-08-17 04:19:18,closed,Update LegendItem.py,Propose adding a clear() method (or equivalent) for easier legend re-use with dynamically updated plots...,6,1,[]
514,297840181,994,12777496,2019-07-16 01:22:37,2020-06-12 05:06:14,closed,Disable the downsample ratio spinbox when you have autodownsampling enabled,"Basically, right now, the plotitem context menu has the option to configure downsampling. However, when you turn on automatic downsampling, you can still manually set the downsampling ratio (which is then ignored).

This can be very confusing, so this sets the downsampling spinbox to disabled when you have autodownsampling enabled.

I'd like to have the actual downsampling ratio percolate back up and change the value in the read-only spinbox, but doing that involves a lot of changes, and if you have two datasets with different x-axis spacings, there is no single value you can put in the spinbox anyways, so this just does the simpler thing.

",4,1,[]
515,296620245,992,12777496,2019-07-11 12:15:17,2019-08-17 16:55:56,closed,Adding setter for GLGridItem.color,`GLGridItem` has a color attribute that has no setter. This Pull Requests adds such a setter function. It originates from a cherry-picked commit from PR #419.,8,5,[]
516,296021592,991,12777496,2019-07-10 06:08:17,2019-08-29 20:56:25,closed,Expand CI + pre-commit,"Current azure-pipelines only does unit-testing on the 18 configurations we have set.  With this pull request, azure-pipelines does more checks in line with the `extra` flag on used in Travis CI.

To be more specific, azure-pipelines now has multiple stages, `pre-test` and `test`.  During the `pre-test` stage, the following things happen in parallel

* `python.setup.py style` is run
  * checks flake8 required on entire codebase
  * checks flake8 optional on files that have diffs
  * checks for correct style line-endings
* diff size is checked
* pyqtgraph bdist_wheel is built (and then uploaded as an artifact)

During the `test` stage, all the unit tests run as before, with the exception that they download the bdist_wheel artifact and install that (so instead of creating 18 wheels and installing each one for on its own pipeline, we create one wheel, and use that wheel for all 18 pipelines)

The latest build can be seen here:

https://dev.azure.com/j9ac9k/pyqtgraph-fork/_build/results?buildId=284
In addition, this PR includes a few other features

* `.flake8` file is added to better support flake8 integration with editors  and `pre-commit`
* `.pre-commit-config.yml` is added allowing for support for `pre-commit` checks to run at commit time.

A note about `pre-commit` is added to `CONTRIBUTING.md`; it is strictly optional, however it will be helpful for ensuring code passes quality checks at commit time.

Also some changes were made to some files with diffs to make them conform to the new flake8 checks that are run against the CI.
",8,5,[]
517,295987740,990,12777496,2019-07-10 03:00:42,2019-07-10 17:42:55,closed,Fix typo,,1,1,[]
518,295984384,989,12777496,2019-07-10 02:38:40,2019-07-10 17:45:56,closed,Fix typo,,1,1,[]
519,294876632,987,12777496,2019-07-05 13:27:11,2019-08-18 03:36:35,closed,FIX: Curves are automatically set visible when one is deleted,"On call of `PlotItem.removeItem`, `PlotItem.updateDecimation` is called, which sets invisible curves visible. This behavior seems unintended.

Fixes #985.",2,2,[]
520,294069808,982,12777496,2019-07-03 09:00:37,2020-03-06 19:27:49,closed,[WIP] Fix segfaults in GLViewWidget on Mac,"This is a work in progress. `glClear` is said to fail if there is no valid OpenGL context, so the first step is to check if that is the case.

Aims at fixing #967 ",18,20,[]
521,293854888,981,12777496,2019-07-02 17:55:01,2019-08-17 03:16:02,closed,Merge master into develop,"This PR merges `master` into `develop`, so the branches are no longer diverging. That effectively only causes one spelling error to be corrected.

`pyqtgraph/graphicsItems/PlotItem/PlotItem.py` and `pyqtgraph/graphicsWindows.py` had merge conflicts in documentation strings that I resolved in favor of the version from `develop`.",1,8,[]
522,293600662,980,12777496,2019-07-02 06:23:38,2019-07-02 11:01:32,closed,remove deprecated call to time.clock,,3,2,[]
523,293564065,979,12777496,2019-07-02 03:01:49,2019-07-02 10:57:46,closed,relax image comparison for failing windows test,One ROI test was failing on windows/py27 due to a single edge of a single handle shifting by a pixel. Fixed by relaxing the image comparison criteria for that test.,1,2,[]
524,293556785,978,12777496,2019-07-02 02:15:26,2019-07-02 02:38:09,closed,Reduce test window size for OSX compatibility,"May fix some broken OSX tests. The main problem is that OSX reports its window size in _logical_ pixels rather than _physical_ pixels, which means that on some systems we can have unexpectedly small maximum window sizes. This causes the test window to shrink vertically, changing the aspect ratio and breaking the test. (solution is just to use a smaller window with the same aspect ratio)",1,1,[]
525,293550988,977,12777496,2019-07-02 01:34:49,2020-06-14 04:08:34,closed,Add a faster method for computing pseudoscatter,"The current `pseudoScatter` function (used for beeswarm plots) has very slow performance on large arrays. This PR introduces an alternative method that produces an approximate result much more quickly. By default, the original (exact) method is still used.",3,1,[]
526,293512549,976,12777496,2019-07-01 21:57:35,2019-07-02 14:26:52,closed,Add issue template,"Using an issue template improves the amount of information given when an issue is opened and provides guidance. I tried to create an issue template that fits PyQtGraph, that I hereby propose.

I would be glad about feedback regarding the tone and style of this template. It can be tested here: https://github.com/2xB/pyqtgraph/issues/new/choose",0,2,[]
527,293118664,975,12777496,2019-06-30 17:10:59,2019-07-01 19:42:32,closed,Remove pytest-faulthandler from test dependencies,"As of a few days ago, the pytest-faulthandler plugin was merged into pytest: https://github.com/pytest-dev/pytest/pull/5441

Along with this, the `--faulthandler-timeout` command line option was moved to an ini option `faulthandler_timeout`, causing most CI environments to fail.

This PR introduces `pytest>=5` as a requirement so we can just assume the new ini option is available and remove `pytest-faulthandler`.",20,4,[]
528,293114127,974,12777496,2019-06-30 15:53:49,2019-08-17 04:43:33,closed,FIX: RecursionError when instanciating CtrlNode,"CtrlNode checks this:
https://github.com/pyqtgraph/pyqtgraph/blob/23b4e174f073bb1d444ff8390641dc2c7c52e0a0/pyqtgraph/flowchart/library/common.py#L95

Problem is: If 'uiTemplate' does not exist (it could exist via subclassing CtrlNode), it calls `Node.__getattr__`, with the important line
https://github.com/pyqtgraph/pyqtgraph/blob/23b4e174f073bb1d444ff8390641dc2c7c52e0a0/pyqtgraph/flowchart/Node.py#L192

, before `Node.__init__` is called. Therefore `self.terminals` does not yet exist (it is initialized in `Node.__init__`), which causes a new call to `Node.__getattr__` - you spot the recursion.

This pull request fixes this by calling `Node.__init__` before the call of `hasattr`.

This is a follow-up to #973, where I missed two lines that set defaults that are used for the `__init__`. 

Fixes #296.",1,1,[]
529,293062722,973,12777496,2019-06-29 21:03:12,2019-06-30 15:47:36,closed,FIX: RecursionError when instanciating CtrlNode,"CtrlNode checks this:
https://github.com/pyqtgraph/pyqtgraph/blob/23b4e174f073bb1d444ff8390641dc2c7c52e0a0/pyqtgraph/flowchart/library/common.py#L95

Problem is: If 'uiTemplate' does not exist (it could exist via subclassing CtrlNode), it calls `Node.__getattr__`, with the important line
https://github.com/pyqtgraph/pyqtgraph/blob/23b4e174f073bb1d444ff8390641dc2c7c52e0a0/pyqtgraph/flowchart/Node.py#L192

, before `Node.__init__` is called. Therefore `self.terminals` does not yet exist (it is initialized in `Node.__init__`), which causes a new call to `Node.__getattr__` - you spot the recursion.

This pull request fixes this by calling `Node.__init__` first, as the lines before do not have any influence on that call.

Fixes #296.",2,1,[]
530,292859045,972,12777496,2019-06-28 14:43:30,2019-09-13 04:58:50,closed,Correctly include SI units for log AxisItems,"Currently, `AxisItem.enableAutoSIPrefix` does not do anything for logarithmic axes. This pull request adds both the labeling and the value scaling for that case.

Fixes #827",2,1,[]
531,292843484,971,12777496,2019-06-28 14:01:44,2019-07-01 13:59:40,closed,Fix method disconnect of SignalProxy class.,,1,1,[]
532,292684078,970,12777496,2019-06-28 04:32:55,2019-09-14 05:04:49,closed,Always update transform when setting angle of a TextItem,"As demonstrated in #871, calling `TextItem.setAngle()` with a new angle doesn't actually rotate the `TextItem` visually because `updateTransform` uses a cached transform to avoid extra computation if it hasn't changed, but setting the `angle` attr of the `TextItem` doesn't invalidate it.

I decided to use a keyword arg instead of setting `self._lastTransform = None` right before calling `self.updateTransform()` for readability. I don't know if `force` is the right name (maybe `use_cache` with inverted logic?), but it's not really a user method so maybe it doesn't matter much.

Fixes #871",20,5,[]
533,292641920,969,12777496,2019-06-27 23:55:45,2019-06-28 04:17:44,closed,Corrected documentation for heightColor shader,"shaders.py formula is documented in another way than it is implemented.

Fixes #252",1,1,['docs']
534,292560142,968,12777496,2019-06-27 18:51:10,2019-07-01 14:01:06,closed,Fix for AxisItem using old scale to create label,"The self.setLabel() call in updateAutoSIPrefix() was being made before the autoSIPrefixScale was written, which caused the label string to be generated with an incorrect unit in some cases.",1,1,[]
535,291836979,966,12777496,2019-06-26 06:18:16,2019-06-26 16:48:13,closed,Skip GL* examples if on macOS with python2 and qt4 bindings,"Due to an error in `glClear` and macOS's implementation of openGL, the GL examples don't work when running on python 2 with qt4 bindings.  Use qt4 bindings with python3? you're good, use qt5 bindings with python2? you're good... 

As this hasn't really worked in some time, and we don't see an issue about it, we've elected to skip those examples from our test suite, and make a note on `README.md` about that configuration not working. ",0,1,[]
536,291825591,965,12777496,2019-06-26 05:27:21,2019-06-26 05:45:46,closed,Preventing conda from updating in CI builds,"With conda 4.7.5, azure pipelines was having a hard time constructing our test environment for python2; solution is to prevent conda from updating, and hopefully what ever issue they have is resolved before azure pipelines default to conda 4.7.X.

Fixes 964",0,1,[]
537,291764583,963,12777496,2019-06-25 23:14:12,2019-06-26 07:00:07,closed,Allow last image in stack to be selected by slider in ImageView,Fixes #298 and fixes #912 and fixes #751,3,1,[]
538,291381198,962,12777496,2019-06-25 04:37:39,2019-06-26 07:00:51,closed,[WIP] x2 Ixjlyons fix exit oserror,"Don't have travis setup on my fork, so need a PR to evaluate on Travis...",2,1,[]
539,291329485,961,12777496,2019-06-24 23:19:21,2019-06-25 17:50:21,closed,[WIP] Fix pg.exit test in case pyqtgraph is not installed,Stole the implementation from the other test in `test_exit_crash.py` even though it's skipped. This test should now work on Travis where we don't install pyqtgraph until after the tests are run.,4,4,[]
540,291322580,960,12777496,2019-06-24 22:44:55,2019-06-24 23:04:38,closed,Work around PySide setOverrideCursor bug in BusyCursor,"This should fix failures observed in CI with PySide and `examples/VideoSpeedTest.py` on Linux. See https://bugreports.qt.io/browse/PYSIDE-243. It doesn't look like the issue was ever resolved though at least it doesn't produce a segfault like it did at one time.

I selectively use the workaround for PySide, but passing the [CursorShape](https://doc.qt.io/qt-5/qt.html#CursorShape-enum) directly to [setOverrideCursor](https://doc.qt.io/qt-5/qguiapplication.html#setOverrideCursor) seems to work for all Qt implementations despite not being documented.",1,1,[]
541,291252710,959,12777496,2019-06-24 18:48:45,2020-06-24 22:57:01,closed,[WIP] Update max text size,"This takes over from #838 which was reverted for causing the `ErrorBarItem` test to fail. Not sure if there's a cleaner way to re-implement with fixes, but hopefully this works.

I've found that I have to call `app.processEvents()` twice after initializing the plot window to get the test to pass but I'm not sure why (hence the WIP).

Here's a script that's similar to the test case with some sleeps added in so you can see what's happening. You can see that the second `app.processEvents` call causes the view rect to change because the y axis shifts to the left. It makes some sense that this would be caused by the `_updateMaxTextSize` change, but I haven't determined why it takes two cycles.

```python
import pyqtgraph as pg
import numpy as np
import time

app = pg.mkQApp()

x = np.arange(5) + 100
y = np.array([1, 2, 1, 3, 1])
e = np.array([1, 0.1, 0.5, 0.1, 3])

plt = pg.plot()

cur = pg.PlotCurveItem(x=x, y=y)
plt.addItem(cur)
app.processEvents()
print(plt.viewRect())
time.sleep(1)

app.processEvents()
print(plt.viewRect())

err = pg.ErrorBarItem()
plt.addItem(err)
app.processEvents()
print(plt.viewRect())
time.sleep(1)

err.setData(x=x, y=y, top=e, bottom=e)
app.processEvents()
print(plt.viewRect())
time.sleep(1)

err.setData(x=None, y=None)
app.processEvents()
print(plt.viewRect())
time.sleep(1)
```",5,2,[]
542,291159820,958,12777496,2019-06-24 14:29:54,2019-11-20 05:42:32,closed,Nicer legend,"Improvements to the legend appearance:

- Give options for legend frame and background color (`pen` and `brush`, respectively) instead of hard-coded values. Default to no legend background or frame. This is especially useful for a white background.
- Control spacing of legend items through `horSpacing ` and `verSpacing ` (taken from PR #64).
- Give separate option `labelTextColor` for legend text color.
- New method `self.clear` to clear all legend items.
- New methods to get and set the `offset` relative to the legend's parent.
- Horizontal instead of tilted lines for legend pictures (also fixes #578).

An example of how the modified legend will look like from [keithleygui](https://github.com/OE-FET/keithleygui): 

![keithleygui screenshot](https://github.com/OE-FET/keithleygui/blob/master/screenshots/KeithleyGUI.png?raw=true)
",4,11,[]
543,290958146,957,12777496,2019-06-24 03:42:42,2019-06-24 04:41:20,closed,"Revert ""`_updateMaxTextSize` to reduce text size when no longer needed""","Reverts pyqtgraph/pyqtgraph#838

Reverting the merged PR since I got carried away and did the merge before noticing CI blew up on me.",0,1,[]
544,290911011,956,12777496,2019-06-23 19:19:13,2019-06-24 18:15:12,closed,Handle invalid file descriptor in exit,"It looks to me like the special case of file descriptor 7 on OSX can't be handled with a try/except (illegal instruction doesn't raise an exception afaik), so this just brings the implementation for OSX closer to that of `closerange` (see https://docs.python.org/3/library/os.html#os.closerange).

Fixes #552 ",15,2,[]
545,290901721,955,12777496,2019-06-23 16:30:30,2019-06-23 16:38:48,closed,Fix infinite scale in makeARGB,"In case `minVal == maxVal`, the small constant used currently 1e-16 can be too small to effectively make `maxVal - minVal` nonzero. Choosing the next available floating point value should be a robust method of avoiding this, regardless of the magnitude of `maxVal`.

Fixes both #926 and #927",1,1,[]
546,290864196,954,12777496,2019-06-23 04:56:47,2019-06-24 06:03:52,closed,Add mesa drivers to windows CI images and show openGL info during debug stage,"This PR primarily addresses the issue of outdated OpenGL drivers (`opengl32.dll`) on the Windows images.  It grabs pre-compiled drivers from the releases section of this repo, moves the DLL into `C:\Windows\system` and `C:\Windows\SysWOW64`, and updates the registry.  The suggestion came from [this stack overflow post](https://stackoverflow.com/a/48582129/5298841).

The other thing I did was add openGL information to the debug section of the CI run.  This was useful in determining if the drivers were working, but decided it should likely remain there.

EDIT:

fixes #938 #928 ",2,2,['test-code']
547,290860191,953,12777496,2019-06-23 02:50:31,2019-09-27 20:02:55,closed,Fix HistogramLUTWidget with background parameter,"HistogramLUTWidget cannot be initialized with the `background` parameter, because all parameters are also passed to the constructor of HistogramLUTItem which does not have a `background` parameter. This pull request fixes that issue by defining `background` explicitly as parameter in the function header.

Closes #175",11,5,[]
548,290859103,952,12777496,2019-06-23 02:16:45,2019-06-24 00:01:32,closed,Fix RotateFree handle not rotating freely,"@alguryanow made a very good issue #174 explaining this. In short, handles added via `ROI.addRotateFreeHandle` behaved as if added via `ROI.addRotateHandle`, in that they did not allow the user to drag them towards or away from the center. This fixes that.

Closes #174",1,1,[]
549,290851393,951,12777496,2019-06-22 22:28:44,2019-06-24 00:05:12,closed,Fire a sigRegionChangeStarted Signal When Moving a Scale Handle,"Fixes [https://github.com/pyqtgraph/pyqtgraph/issues/950](https://github.com/pyqtgraph/pyqtgraph/issues/950)

Moving a scale handle on a ROI object does not fire a sigRegionChangeStarted signal.  This patch adds the signal emit to handleMoveStarted() to cause the signal to be fired.",2,1,[]
550,290794314,949,12777496,2019-06-22 03:50:57,2019-06-23 05:17:15,closed,Allow multiline parameters in configparser,"Currently parameters may be written to multiple lines in config files but cannot be read, as described in the linked issue.

Fixes #491.",1,4,[]
551,290787010,947,12777496,2019-06-22 02:11:16,2019-06-22 04:18:13,closed,Fix another numpy deprecation warning by typecasting,This is basically another occurrence of what Dschoni fixed in pull request #875.,0,1,[]
552,290786604,946,12777496,2019-06-22 02:02:53,2019-06-22 04:19:03,closed,Replaced usage of deprecated ROI classes in example,Both `MultiLineROI` and `PolygonROI` print deprecation warnings and therefore should not be used in examples. This pull request aims at replacing them with their active pendant.,0,1,[]
553,290770112,945,12777496,2019-06-21 22:59:26,2019-06-21 23:52:12,closed,Add pytest-faulthandler to Travis,"Follow-up to PR #944. Currently our `pytest.ini` requires to have `pytest-faulthandler` installed, and as it makes sense to have it installed in a CI, this PR adds it.
This is independent from the question whether it is good to require further packages for running pytest on the project in general.",1,1,[]
554,290676212,944,12777496,2019-06-21 16:41:18,2019-06-21 19:54:05,closed,Update Travis according to new xvfb syntax,Travis updated their syntax to start xvfb. This is further described here: https://benlimmer.com/2019/01/14/travis-ci-xvfb/,11,1,[]
555,290428857,942,12777496,2019-06-21 01:11:55,2019-08-17 05:32:06,closed,Warn if visible GraphicsView is garbage collected,"Python Garbage Collection and Qt windows sometimes produce unexpected behaviour, causing windows to close. This PR aims at providing a warning if this happens so users can react properly.

Test code:
```python
import pyqtgraph as pg

def plot():
    pg.GraphicsWindow()

plot()
```

Warning:
```
C:\[...]\pyqtgraph\__init__.py
test.py:4: RuntimeWarning: Visible window deleted by Python Garbage Collection. To prevent this, store a reference to the window object.
  pg.GraphicsWindow()
```

Closes #936 ",5,5,[]
556,290321014,941,12777496,2019-06-20 18:12:14,2019-06-21 01:34:19,closed,[WIP] Fix checkOpenGLVersion raising exception on gl call [2],"Follow-up on PR #940.
Fetching the OpenGL version before an error occurs should avoid later problems when OpenGL whyever is in an invalid state.

(Hopefully) Fixes second error of #928.

This is a WIP and still a PR because I would like to see the according Azure tests. If they prove my assumption, this will be a regular PR.",0,4,[]
557,289990407,940,12777496,2019-06-20 06:20:59,2019-06-20 18:12:04,closed,[WIP] Fix checkOpenGLVersion raising exception on gl call,"As can be seen in this stackoverflow post, seemingly OpenGL remembers errors and throws them as soon as it can, e.g. on the next function call: https://stackoverflow.com/a/36377085/8575607
That might cause errors to be raised in weird places. Fetching errors beforehand circumvents that problem.

(Hopefully) Fixes second error of #928.

This is a WIP and still a PR because I would like to see the according Azure tests. If they prove my assumption, this will be a regular PR.",1,2,[]
558,289984151,937,12777496,2019-06-20 05:52:18,2019-06-21 15:36:43,closed,Skip some test examples,"This PR skips two tests

1. The remote plotting test is skipped, this is failing pretty consistently, and will likely take a fair amount of work/investigation to diagnose.
2. `optics_demo.py` is skipped when running with pyside1, this is due to a known bug that is even linked as a comment in the code.",5,3,[]
559,289943100,935,12777496,2019-06-20 02:41:11,2019-06-20 16:18:58,closed,PlotItem.addLine now accepts 'pos' and 'angle' parameters,"The issue and this solution are discussed in issue #70:
> specifying the ""angle"" kwd on the addLine() call will lead to `InfiniteLine.__init__(pos, angle, **kwds)` being called with two angle keywords (the first, explicit one, and the one in **kwds).

Closes #70",1,1,[]
560,289396547,934,12777496,2019-06-18 18:17:04,2019-06-20 05:03:29,closed,Write Python representation of path to Python file,"Before, if the path contained escaped sequences, they would be parsed before being written to `reload_test_mod.py`, therefore when the file was parsed by the Python interpreter, the escape signs would be missing. With this PR, the Python representation is written to the file, so escaped sequences stay escaped.

Note that I did not test the full commit locally because of time constraints - The CI tests should therefore be read.

Closes #929",3,1,[]
561,289358502,932,12777496,2019-06-18 16:22:41,2019-06-20 05:07:58,closed,Fix incorrect clipping of horizontal axis when stopAxisAtTick is set,"Fixes #930.

Horizontal axes are incorrectly clipped when `stopAxisAtTick` is set to `(True, True)`. This happens because the code always takes the vertical coordinate of the span even if the axis is horizontal.",5,1,[]
562,289066702,924,12777496,2019-06-18 00:35:51,2019-08-18 17:17:35,closed,Use Qt5 QWheelEvent functions if necessary,"As issue #426 shows, QWheelEvent has no longer the methods `.delta()` and `.orientation()` in Qt5. This pull request aims at fixing this in consistency with https://github.com/pyqtgraph/pyqtgraph/blob/6632355719173c1a64448e4e1eadcd06a841f693/pyqtgraph/opengl/GLViewWidget.py#L374 , where already fixes are done. Note that this is not necessary for https://github.com/pyqtgraph/pyqtgraph/blob/6632355719173c1a64448e4e1eadcd06a841f693/pyqtgraph/graphicsItems/ViewBox/ViewBox.py#L1147, as there one does not deal with a QWheelEvent but with a QGraphicsSceneWheelEvent, which (obviously! ... ?) still only has the methods from Qt4 in Qt5: https://doc.qt.io/qt-5/qgraphicsscenewheelevent.html . Well.

Note that I tested the success of this PR with `examples/RemoteGraphicsView.py`, which does not occur in the examples list. Also note that I so far only tested with Qt5 - if you quickly can, please also test on other platforms (like Qt4).

Closes #426",15,6,[]
563,289025143,922,12777496,2019-06-17 21:21:15,2019-06-24 00:07:56,closed,Curve fill: draw line around patch ,"This is a matter of personal taste, but it sometimes looks a lot more refined when drawing a line around the fill-patch. For instance this example, created with pyqtgraph:

<img src=""https://raw.githubusercontent.com/OE-FET/mercurygui/master/screenshots/MercuryGUI.png"" alt=""mercurygui screenshot""/>",4,3,[]
564,288936250,921,12777496,2019-06-17 17:11:50,2019-06-17 17:22:16,closed,Prevent element-wise string comparison,"Issue #835 shows that comparing `bins`, which may be a numpy array, with a string `'auto'` leads to element-wise comparison. This is because the `==` operator for numpy arrays is used. With this Pull Request, potential array and string are switched, so the `==` operator for strings is used, which does no element-wise comparison.

Closes #835",1,1,[]
565,287770116,919,12777496,2019-06-13 05:50:30,2019-06-20 05:08:55,closed,Check if items having events sent to are still in the scene,"This PR makes it so that before a GraphicsScene sends an event to any given item, it ensures that the item is actually in the scene.

This fixes #884 and may fix some other issues as well.",2,2,[]
566,286507291,918,12777496,2019-06-09 23:42:00,2019-06-13 06:05:54,closed,Small Text and Documentation Changes,"This PR is to incorporate some fixes and niceties into our test suite.  For example, I had some Qt versions incorrectly labeled in Azure Pipelines.  Furthermore, the `tox.ini` command is restructured a bit so that it's easier to see which configs are being tested.

I suppress some known warnings (look at changes in `pytest.ini`) and show display information during the debug stage of the CI.

Some changes that still need to be incorporated are 

- [x] `README.md` update (including putting azure pipelines badge)
- [x] `README.md` should have a table of ""supported configurations""
- [x] `CONTRIBUTING.md` update (detailing tox usage)

With this PR, I also want to suggest we formally deprecate support for PySide2 5.6.x.  None of the examples in the example app seem to work correctly under that binding.  Getting to install PySide2 5.6 is also not trivial, only place you can install it is with a conda environment on python 3.5.  If you have a conda environment with a python 3.6 (or 3.7) installing pyside2 with conda will install PySide2 5.9.0.
 ",0,4,[]
567,286495635,917,12777496,2019-06-09 20:22:16,2020-05-30 13:12:35,closed,Allow AxisItem linked view to be unlinked.,"The AxisItem.linkToView() method allows the Axis instance to be associated with a ViewBox instance.  The linked view is initially None, but the current implementation does not support unlinking the view (returning the linked view to None) after one view is linked.  This pull request adds support for linkToView(None) to unlink the active view.

**What is changed**
The linkToView() method checks the parameter view, and if None sets _linkedView to None (no weakref).  Where view would normally be connected to signals, it is first checked to not be None.

**Motivation**
In my application, I have a single x-axis AxisItem essentially serving multiple ViewBoxes which are added and removed dynamically.  The AxisItem is linked to one ""primary"" ViewBox, and all other ViewBoxes are then linked to that ""primary"" through setXLink().  If the user wants to remove all ViewBoxes, the existing AxisItem implementation has no clean way of unlinking the ""primary"" ViewBox from the AxisItem.",8,12,[]
568,286347229,914,12777496,2019-06-07 22:08:30,2019-06-10 01:24:59,closed,Fix attribute lookup reference,"This should fix #820  there is no attribute in the library anywhere named `lastScene`, but plenty of `_lastScene`, so I'm fairly sure this was a typo.",0,1,[]
569,284318889,911,12777496,2019-06-02 06:00:10,2019-06-11 05:30:31,closed,Overhaul testExamples,"This PR filters down the example tests run by not even creating parametrized tests for frontends we don't have installed (so no needless skipping), and allowing to skip testing examples if some non-standard dependency is not installed.  For example, `hdf5.py` requires `h5py` to be installed, and with this PR, when the testing gets to `hdf5.py` example, and sees that `h5py` is not installed, the test will be skipped.  What separates this PR from #905 is that `hdf5.py` will run if `h5py` is installed.  This represents a desired behavior IMO.

Furthermore, this PR makes the testing of example code better integrated with pytest, and by extension, our CI systems (similar to that of #890).  Failures in the examples are now registered by our CI (as seen by the [results in my fork](https://dev.azure.com/j9ac9k/pyqtgraph/_build/results?buildId=157)).  

Also some code has been shuffled around such that test code now resides in test files.  Prior to this PR, a user could test all the examples by running `python -m pyqtgraph.examples --test` (as far as I'm aware, this was an undocumented feature).  This functionality is now removed, in part that if anyone wants to do testing, they should utilize `pytest` as with the rest of our suite.  Now, the equivalent command is `python -m pytest -k ""testExamples"" -sv`.

Lastly, duplicate entries were also identified in the example application, and have been removed.

Tagging @2xB as they have done some work in this area of the library, I'd like their input.   Also tagging @asottile to thank him for showing me how to skip certain parametrized tests.",15,5,['test-code']
570,284296225,910,12777496,2019-06-01 20:33:05,2019-06-06 18:48:46,closed,Moved emits after all method state updates,"PySide2 immediately executes signals without passing through the Qt Event Queue. 

Pull request #907 addressed a specific case where a signal was emitted before a state update.
If an application's slot then calls back into the instance, the instance was in an inconsistent
state.  This pull request audits and fixes similar issues throughout the pyqtgraph library.  This
commit fixes several latent issues:

* SignalProxy: flush -> sigDelayed -> signalReceived would have incorrectly resulted in timer.stop().
* ViewBox: resizeEvent -> sigStateChange -> background state
* ViewBox: setRange -> sigStateChange -> autoranging not updated correctly
* ViewBox: updateMatrix -> sigTransformChanged -> any _matrixNeedsUpdate = True -> ignored
* Parameter: Child may have missed state tree messages on insert or received extra on remove
* GraphicsView: updateMatrix -> sigDeviceRangeChanged/sigDeviceTransformChange -> before propagated to locked viewports.",11,1,[]
571,284260455,909,12777496,2019-06-01 10:12:49,2020-12-25 05:45:03,closed,Fixed GLViewWidget Gimbal Lock with Quaternion Parametrization,"**Problem**
Currently, the `GLViewWidget` is parametrized with a spherical coordinate (`azimuth` and `elevation`). However, this results in a [gimbal lock](https://en.wikipedia.org/wiki/Gimbal_lock), which can lead to an unnatural interaction with the GUI.

**Solution**
GLViewWidget has been refactored to use a `QtGui.QQuaternion` that can sufficiently represent the orientation of the camera with 3DoF.

This is a close-to drop-in replacement for the previous implementation, but any code that relied on features such as  `GLViewWidget.opt['azimuth']`  might be broken. As this introduces a minor break in the API, I'm not 100% sure if everyone would welcome this change -- but I was certainly quite frustrated when I encountered this problem.",24,8,"['openGL', 'post nep-29']"
572,284225539,908,12777496,2019-06-01 00:13:28,2019-06-01 00:56:34,closed,Add pytest config file specifying colordepth when using pytest-xvfb,"This PR is meant to address some of the failures on Linux, as @campagnola pointed out he was suspicious of the color depth setting.  I ran the tests on one of the head less servers I have access to and confirmed 6 tests that failed now pass.",1,1,['test-code']
573,283472744,907,12777496,2019-05-30 00:08:42,2019-06-01 04:05:30,closed,Fixed ViewBox.updateViewRange to apply transformation sooner,"With PySide2, I traced updateViewRange triggering the sigXRangeChanged and sigYRangeChanged before _matrixNeedsUpdate was set to True.  This results in an incorrect mapViewToScene call in my application.  By assigning _matrixNeedsUpdate to True before these signals, the transform is correctly updated within the slot's code giving the correct mapViewToScene result. ",6,1,[]
574,283317637,906,12777496,2019-05-29 15:32:50,2019-06-04 16:22:50,closed,Fixed compatibility with Qt5,"GraphicsLayoutWidget does not have a size keyword, nor a show keyword, removing these results in the display not showing, adding a QMainWindow() fixed the issue

ROI does not have a keyword resizable

Here are all of the tracebacks that I get when trying to run this demo:
```python
Traceback (most recent call last):
  File ""/home/aaron/.PyCharmCE2019.1/config/scratches/emerson_pmd/new/scratch_8.py"", line 35, in <module>
    w = pg.GraphicsLayoutWidget(show=True, size=(1000, 800), border=True)
  File ""/home/aaron/anaconda3/envs/royale_backup/lib/python3.5/site-packages/pyqtgraph/widgets/GraphicsLayoutWidget.py"", line 27, in __init__
    self.ci = GraphicsLayout(**kargs)
TypeError: __init__() got an unexpected keyword argument 'show'
```

Removing the `show=True` keyword results in:
```python
Traceback (most recent call last):
  File ""/home/aaron/.PyCharmCE2019.1/config/scratches/emerson_pmd/new/scratch_8.py"", line 35, in <module>
    w = pg.GraphicsLayoutWidget(size=(1000, 800), border=True)
  File ""/home/aaron/anaconda3/envs/royale_backup/lib/python3.5/site-packages/pyqtgraph/widgets/GraphicsLayoutWidget.py"", line 27, in __init__
    self.ci = GraphicsLayout(**kargs)
TypeError: __init__() got an unexpected keyword argument 'size'
```

Removing the `size=(1000, 800)` argument results in:
```python
Traceback (most recent call last):
  File ""/home/aaron/.PyCharmCE2019.1/config/scratches/emerson_pmd/new/scratch_8.py"", line 139, in <module>
    r4 = pg.ROI([0, 0], [100, 100], resizable=False, removable=True)
TypeError: __init__() got an unexpected keyword argument 'resizable'
```
After removing `resizable=False` the program is runnable, but no window pops up (since `show` was removed) and must be terminated with a kill command.

I have uploaded my conda environment export as well, find it at the link below:
[conda_list.txt](https://github.com/pyqtgraph/pyqtgraph/files/3248512/conda_list.txt)

",10,1,[]
575,283202655,905,12777496,2019-05-29 10:51:20,2019-06-01 05:28:55,closed,Exclude selected examples from tests (such as HDF5),"This pull request is following from the discussions to PR #891 and #892 and issue #882.
It adds an array of examples that are excluded from testing.

Closes #882.",2,1,[]
576,283104699,904,12777496,2019-05-29 05:58:36,2019-05-29 20:12:13,closed,Take screenshots + Show Resolution,"This PR consists of a few changes.

1. Add `--pyside2` option to `examples/__main__.py
2. Take screenshots of failed tests, and optionally upload them to `data.pyqtgraph.org`
  * We will use this capability to extract failed images from CI systems via Artifact upload
3. Have `test_ViewBox.py` show us the available resolution of the desktop being tested on.
  * This may assist with troubleshooting the `assertMapping` failed tests on macOS Azure pipeline

Once this PR is merged, I will update the azure-pipeline templates to add the ability to capture the stored images from the failed tests and upload them as an artifact for further review.",0,5,[]
577,283028379,903,12777496,2019-05-28 23:10:27,2019-05-31 23:01:16,closed,More Robust CI,"This CI configuration provides a few benefits over the existing one:

* Steps are cross-platform compatible and cross install method (pip/conda) compatible as well, so the configuration is far easier to read, and there is no duplicated code
* Make use of Screen Resolution Utility so tests can now pass on Windows
* Make use of the miniconda and python built in tasks
* Test reporting tools (including coverage) are uploaded and displayed properly In the Code Coverage tab
* Screen shots from failed Image tests are saved as artifacts and can be downloaded for review
* `pyqtgraph` is installed from a built wheel, also that built wheel is available to download as an artifact
* Uses the native test reporting
* This PR fixes #898 

What is not added is the ability to attach files to specific tests.  The idea would be that for every test, we grabbed a screen shot of the active widget and stored it along with the test; but to my knowledge you cannot do that with their current setup.  I created a feature request, if anyone thinks this is a good idea, please upvote it here:

[Azure Pipelines Docs for Attachments](https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=yaml#attachments-support)
[Feature Requesst](https://developercommunity.visualstudio.com/idea/589590/allow-for-attachments-to-junitxml-tests.html)

",13,5,[]
578,282964333,902,12777496,2019-05-28 19:25:55,2019-05-28 19:45:38,closed,"New Templates, without coverage, using screen resolution utility","This is a new azure-pipelines template that makes use of the Windows screen resolution utility.  I also cleaned up a number of the conda configurations so more of the steps are cross-platform compatible.

I also removed the coverage check within pytest as that caused a segmentation fault on Windows - PySide2 5.12 configuration, and we'll likely want to patch that up at some point.

On my fork, this template shows 5/18 configurations passing.",2,1,[]
579,282619208,901,12777496,2019-05-27 21:52:50,2019-06-04 17:01:58,closed,Add condition for namespace packages,"Previously, on my local machine, `test_reload` would fail 
in environments with namspace packages (specifically, my
failure was `aspy` from `aspy.yaml`).

The namespace package has `__file__ = None`, so the splitext call
was failing.

I'm still a little confused as to why it was loaded for this test
in the first place, but this fixed the problem.",0,1,[]
580,282427866,900,12777496,2019-05-27 09:02:51,2020-06-23 02:59:54,closed,Fix for setOrientation ,"Proposed change to setOrientation function of Dock.py.

Should fix issue pyqtgraph#833",2,2,['Dock']
581,282325170,897,12777496,2019-05-26 21:46:44,2019-05-28 04:07:25,closed,Add PyQt5 and PySide2 to test_example.py,"Before, example tests were skipped for Python 3 on Travis because it used PyQt5, which was not used for testing examples.",2,2,[]
582,282212457,894,12777496,2019-05-25 07:26:06,2019-05-28 00:55:07,closed,Simpler way of extracting types from QByteArray,"This pull request deals with one of the last test failures with unit-testing pyside2.  

After making this change, the following command generated this result:

command
```
tox -- pyqtgraph/exporters/tests/test_svg.py::test_plotscene
```

result
```
______________________________________________________________________________________ summary ______________________________________________________________________________________
  py27-pyside2-pip: commands succeeded
  py37-pyside2-pip: commands succeeded
  py35-pyqt5-pip: commands succeeded
  py37-pyqt5-pip: commands succeeded
  py27-pyqt5-conda: commands succeeded
  py37-pyqt5-conda: commands succeeded
  py35-pyqt5-conda: commands succeeded
  py27-pyside2-conda: commands succeeded
  py35-pyside2-conda: commands succeeded
  py37-pyside2-conda: commands succeeded
  py27-pyqt4-conda: commands succeeded
  py36-pyqt4-conda: commands succeeded
  py27-pyside-conda: commands succeeded
  py36-pyside-conda: commands succeeded
  congratulations :)
```",1,1,[]
583,282209855,893,12777496,2019-05-25 06:30:52,2019-05-26 00:19:13,closed,PySide2 is also a Qt5 binding,"This fixes some of the pyside2 tests for image checks; existing code checked for the presence of PyQt5 and had the following comment

```
            # Qt5 generates slightly different results; relax the tolerance
            # until test images are updated.
```

This PR merely checks if the bindings are either PyQt5 or PySide2.",0,1,[]
584,282189767,892,12777496,2019-05-25 00:23:21,2019-05-29 08:42:15,closed,Skip testing example if ImportError occurs,"This is an alternative to #891 with the advantage of less code that needs to be maintained (no extra dict) and therefore less bug probability. Note that this does produce more ugly output, because stdout and stderr are both printed, so one can reproduce what caused the ImportError.

Closes #882 ",5,2,[]
585,282186317,891,12777496,2019-05-24 23:49:05,2019-05-29 10:54:07,closed,Only execute hdf5 example if module h5py exists,"Introduces a dictionary containing requirements of chosen examples. If a requirement is not met, the example will not be executed.

To test whether this really also works if h5py exists, I created a new branch with a similar commit but also let travis import h5py (not the identical, it contains one unnecessary import statement more - sorry):
branch: https://github.com/2xB/pyqtgraph/commits/hdf5_test
log: https://travis-ci.com/2xB/pyqtgraph/jobs/203002184

Closes #882 ",3,3,[]
586,282166089,890,12777496,2019-05-24 21:37:46,2019-06-11 05:32:42,closed,"Show failing examples as ""FAILED"" in pytest","Catching everything and then just outputting the words ""FAILED"" does not help keeping track of errors. With this pull request, pytest is noticed via assert when an error occurred. This also replaces further additional text output of whether the test was failing.",1,2,[]
587,281999007,889,12777496,2019-05-24 12:39:20,2019-06-04 20:14:05,closed,Check if Item actually has a parent before checking for collision,Trying a fix for #884 ,5,42,[]
588,281890709,888,12777496,2019-05-24 07:00:13,2019-05-25 05:53:37,closed,TreeWidget.topLevelItems Python 3 fix,"Fixes #726 

Opted to use the same pattern as in `TreeWidgetItem.childItems` rather than importing `xrange` from `python2_3`.",1,1,[]
589,281857908,887,12777496,2019-05-24 03:53:00,2019-05-25 23:25:50,closed,Try to import from collections.abc for Python 3.3+,Fixes #885 ,3,2,[]
590,281833058,886,12777496,2019-05-24 01:01:19,2019-05-24 22:59:00,closed,Fix flowchart save on Python 3,"I took the work started in #231 and implemented the additional requested change to only append the `.fc` extension if the user didn't add it in the file dialog.

If this is merged, we can close duplicate pull requests #231, #423, #435, #441, #513.

Also fixes #512",2,6,[]
591,281445351,880,12777496,2019-05-23 05:11:41,2019-05-24 05:25:28,closed,"[skip ci] Create tox configuration, update README accordingly.","This pull request adds a configuration for tox where test code is tested against many of the supported configurations of pyqtgraph.  This should make it easier to ensure that any change to the codebase will not break a less-checked configurations.

Currently, some of the configurations, specifically the pyside2-conda configurations will hang indefinitely; this is not a problem with tox, but with the codebase most likely.

To run this config, you will need `tox` and the `tox-conda` plugin.",0,1,[]
592,281398080,879,12777496,2019-05-22 23:53:22,2019-05-23 00:08:41,closed,Add h5py dependency to Conda in Travis,"test_examples.py needs h5py, which it hereby gets.",4,1,[]
593,281383177,877,12777496,2019-05-22 22:34:20,2019-05-22 22:44:55,closed,Fix Travis CI on 'develop' branch,"Basically #873 with additional removal of unused code in Travis YML.

Closes #869",0,2,[]
594,280755616,876,12777496,2019-05-21 12:15:24,2019-05-24 05:26:22,closed,Typecast Levels to be float,"This circumvents cases in which ""levels"" is a boolean array and therefore the substraction fails due to deprecation. It seems to be, that ""levels"" is only used for min/max calculation further down, so this change should not affect other code.",1,1,[]
595,280743990,875,12777496,2019-05-21 11:41:36,2019-05-24 05:02:33,closed,Fix numpy deprecation warning by typecasting multi-dimension indices to tuples.,"I messed up my previous pull-request by doing something stupid. I hope, it's fixed now.",1,2,[]
596,280130463,873,12777496,2019-05-18 22:33:22,2019-05-22 20:25:45,closed,Fix Travis CI,"Travis CI currently does not work because system_site_packages do not work with Conda installations. As system_site_packages are not needed, this pull request aims at removing them.

Note that now the build fails because of real bugs in the code, and not because of Travis.
Also note that some tests pass although there are errors in the Travis log that need attention.

Closes #869",2,1,[]
597,279655784,868,12777496,2019-05-16 20:21:17,2019-05-24 04:35:02,closed,FIX: Crash when closing Matplotlib exporter,"Adds a call of `deleteLater` for the Matplotlib export QMainWindow when closing so although the local reference to that window might be deleted by the Python Garbage Collector, the QMainWindow object is not deleted too early, which otherwise leads to a segmentation fault. Note that since this is an effect of the Garbage Collector, this behavior seemingly occurs at random.

Closes #867",0,1,[]
598,278093508,866,12777496,2019-05-13 00:38:42,2019-05-22 21:16:12,closed,Fix pyside2 qt.py tests,"This PR will address some of the errors with PySide2 tests, specifically fixes two errors, the `test_isQObjectAlive` test and `test_loadUiType`.  It also incorporates `shiboken2.isValid()`.

For `test_isQObjectAlive`, we remove the `gc.collect()` call.  After removing this call, we no longer get a segfault on pyside2.  The test passes on pyside2 and pyqt5 bindings, pyqt4/pyside1 were not tested.

We now no longer attempt to import `pysideuic` with `pyside2` bindings, and now import `import pyside2uic as pysideuic`.

Lastly, made reference to `shiboken2.isValid()`.  `shiboken2` is a dependency of pyside2.  There may be issues with this on conda-based pyside2 installations (that use Qt 5.6)
",2,3,[]
599,277987625,865,12777496,2019-05-11 15:05:29,2019-05-22 22:24:22,closed,Implement azure ci,"This pull request is for implementing azure pipelines on the pyqtgraph library.  

The configuration supports the following operating system 

- macOS 10.13
- ubuntu 16.04 
- Windows Server 2016

Under each operating system, the following Qt bindings are tested

- conda based pyqt4
- conda based pyside
- conda based pyside2 (5.6)
- conda based PyQt5 (5.9)
- pip basedd PyQt5 (5.12)
- pip based PySide2 (5.12)

For each configuration, it runs `python -m pytest --cov pyqtgraph -sv`.  The only configuration that actually passes all tests is Ubuntu-pip-PyQt5

Should I look to add other steps besides that test?",0,29,[]
600,277639988,864,12777496,2019-05-10 05:55:42,2019-05-10 06:00:14,closed,Initial azure pipelines CI setup,Attempting to create CI builds for pyqtgraph,1,2,[]
601,275888656,861,12777496,2019-05-04 02:00:19,2019-06-09 16:23:37,closed,Set path attr in case ErrorBarItem initialized without data,"This aims to fix issue #860.

In case the user wants to defer setting `ErrorBarItem` data, we can set the `path` attribute to the plain `QPainterPath` which has a bounding rect with zero width/height. Example (borrowed from #860):

```python
import pyqtgraph as pg
import numpy as np

x = np.arange(5)
y = np.array([1, 2, 1, 3, 1])
e = np.array([1, 0.1, 0.5, 0.1, 3])

plt = pg.plot()
err = pg.ErrorBarItem()
cur = pg.PlotCurveItem(x=x, y=y)
plt.addItem(err)
plt.addItem(cur)

err.setData(x=x, y=y, top=e, bottom=e)

pg.mkQApp().exec_()
```

This avoids the error shown in the issue, but one potential shortcoming of this approach is the bounding rect is at the origin, so it could cause scaling/range issues until the `ErrorBarItem` data is set:

```python
import pyqtgraph as pg
import numpy as np

x = np.arange(5) + 100  # offset x data by 100 to demonstrate
y = np.array([1, 2, 1, 3, 1])
e = np.array([1, 0.1, 0.5, 0.1, 3])

plt = pg.plot()
err = pg.ErrorBarItem()
cur = pg.PlotCurveItem(x=x, y=y)
plt.addItem(err)
plt.addItem(cur)

pg.mkQApp().exec_()
```

![issue_860_2](https://user-images.githubusercontent.com/943602/57172471-51d6bd00-6dd5-11e9-8f70-b55651553162.png)",10,7,[]
602,275400780,859,12777496,2019-05-02 15:01:34,2019-05-21 11:32:13,closed,Typecast slice list into tuple in imageviewer,To fix deprecation warning with multidimensional arrays in numpy. Closes #842 ,1,0,[]
603,274794778,856,12777496,2019-04-30 16:07:54,2019-04-30 16:08:57,closed,Moved temperature control loop attributes to `MercuryITC_TEMP`,"* Moved temperature control loop attributes to `MercuryITC_TEMP` since a control loop is always associated with a temperature sensor. This is also more consistent with the SCPI command structure.
* Renamed control loop attributes to follow the SCPI commands.
* Fixed `KeyError` when calling `_write_cached_property` with a property which has not been cached yet.",0,11,[]
604,270257208,850,12777496,2019-04-13 22:05:35,2020-11-07 15:36:23,closed,Implemented PlotDataItem.appendData(),Simple implementation of PlotDataItem.appendData() based on PlotDataItem.setData().,3,2,[]
605,265684208,847,12777496,2019-03-29 11:43:25,2020-06-25 04:35:06,closed,"Parameter: hasDefault, setDefault, and other default functions behaviour fixed","Closes: #846 

This changes the behaviour of 'default' in the Parameter class. Basically, if you don't pass in a default value, then Parameter.hasDefault returns False. This will be set to Parameter.hasDefault will return True when the default value is changed (setDefault).",7,1,['parameterTree']
606,263641766,845,12777496,2019-03-22 14:47:59,2019-05-24 06:33:47,closed,Bugfix: ValueError for histogram of pictures with all pixels of the same value,"When mx == mn the following Exception was thrown:
""pyqtgraph\graphicsItems\ImageItem.py"", line 497, in getHistogram
    bins = np.arange(mn, mx+1.01*step, step, dtype=np.int)
ValueError: arange: cannot compute length

Fixed by handling this edge case",1,1,[]
607,261539855,841,12777496,2019-03-15 12:53:21,2019-11-20 04:43:28,closed,set color of tick-labels separately,,5,3,[]
608,261369200,840,12777496,2019-03-14 23:01:44,2019-06-27 05:29:32,closed,Clipping: don't assume that x-values have uniform spacing,"Do not assume that x-values have uniform spacing -- this can cause problems especially with large datasets that have non-uniform x-value spacing.

Use `np.searchsorted` instead to find the first and last data index in the view range. This only assumes that x-values are in ascending order and prevents potentially too strong clipping.",11,4,[]
609,259645818,839,12777496,2019-03-09 00:17:01,2019-05-22 21:19:01,closed,fix a misplaced ),This pull request fixes a misplaced parenthesis that cause exception when mouse moves over a plot,3,1,[]
610,259607306,838,12777496,2019-03-08 21:06:13,2019-06-24 01:10:36,closed,`_updateMaxTextSize` to reduce text size when no longer needed,"Currently `_updateMaxTextSize ` will increase the current space required for axis labels, if necessary, but not decrease it when the extra space is no longer needed. The proposed change will release no longer needed space again.",12,1,[]
611,258889055,837,12777496,2019-03-06 21:37:28,2019-03-08 20:55:24,closed,add option to set other field variables in ColorMapWidget,,0,4,[]
612,257745683,836,12777496,2019-03-03 15:47:03,2019-06-24 00:27:17,closed,tickSpacing bug fix,"Fixed a bug where `tickSpacing` would return `None` if `style['maxTickLevel'] < 2`, resulting in the axis not being drawn.",1,2,[]
613,253752208,832,12777496,2019-02-18 00:11:16,2019-05-24 04:33:24,closed,Bug fix in test_csv.py,Fixed bug where the temp file ```test_CSVExporter``` generates remains open and ```os.unlink``` raises a ```PermissionError```. This commit closes the TextIO connection after the data is read. ,1,1,['test-code']
614,253233257,830,12777496,2019-02-14 21:45:04,2019-05-23 00:24:58,closed,MNT: future-proof the code a bit,,0,4,[]
615,249716021,824,12777496,2019-02-01 19:47:07,2019-05-03 17:58:22,closed,Fix for PySide2; QtCore.QPoint.__sub__ no longer works with tuples,"Otherwise, hovering over GraphicsViews produces error:
```
Traceback (most recent call last):
  File ""C:\Users\rp\PycharmProjects\pyqtgraph\pyqtgraph\widgets\GraphicsView.py"", line 365, in mouseMoveEvent
    delta = Point(ev.pos() - self.lastMousePos)
TypeError: 'PySide2.QtCore.QPoint.__sub__' called with wrong argument types:
  PySide2.QtCore.QPoint.__sub__(Point)
Supported signatures:
  PySide2.QtCore.QPoint.__sub__(PySide2.QtCore.QPoint)
```",6,1,[]
616,249100286,823,12777496,2019-01-31 02:49:20,2019-01-31 13:03:27,closed,Added PySide2 support,"PySide2 now works with pyqtgraph. It looks like there are a lot of deprecation warnings for numpy. PySide2 also seems to have trouble with similar types. QPoint() - QPointF() raises a TypeError. QMatrix4x4(QMatrix4x4()) does not work as well, but would work for QMatrix4x4(QMatrix()). I was able to get all of the examples running for PySide2.

Also be careful when installing PyQt4, PyQt5, and PySide in a Python environment that has PySide2. PySide2 seems to raise odd errors when another Qt library is installed.",1,9,[]
617,245901044,818,12777496,2019-01-18 16:26:12,2019-05-22 21:18:35,closed,Fixed incorrect evaluation of Point in mouseMoveEvent.,"ev.pos() is a QT Point, but self.lastMousePos was converted to pyqtgraph Point.",2,1,[]
618,245758760,817,12777496,2019-01-18 08:01:31,2019-06-24 00:30:41,closed,avoid double call to mkPen when creating PlotCurveItem objects,Avoid double call to _mkPen_ if _'pen'_ keyword argument is provided ,1,2,[]
619,245722300,816,12777496,2019-01-18 04:02:52,2020-06-23 03:54:45,closed,Avoid constructing shadow pens when no shadow pen is set,"Basically, profiling has pointed me to the fact that a fair bit of code time (3%, actually) is spent in `setShadowPen()` (actually, it's in `mkPen()`, which `setShadowPen()` calls), even when no shadow pen is specified.

In my application, I'm calling `pyqtgraph.PlotDataItem.setdata()`, which calls through PlotDataItem->setData, PlotDataItem->updateItems. At some point in the call stack, the default value for `shadowPen` is being inserted into the kwargs, which then causes the specious calling of setShadowPen.

Anyways, if we check if shadowPen is a value other then none, this doesn't happen.",17,6,[]
620,245445862,815,12777496,2019-01-17 10:20:50,2019-05-24 05:44:20,closed,Fix issue #811,,2,1,[]
621,245180691,814,12777496,2019-01-16 15:08:30,2019-05-24 06:22:52,closed,enforce enableMenu in ViewBox,"enforce _enableMenu_ when False:
* set _menu_ attribute to None at __init__
* populate _menu_ as necessary is the state is changed

For example in case of 400 ViewBox objects, the time spent creating the _menu_ attributes was 1.2s. If no menu is needed then this can improve the performance. ",1,1,[]
622,245173864,813,12777496,2019-01-16 14:50:08,2019-06-01 05:16:47,closed,AxisItem performance improvements,"
### Avoid calling _setLabel_ repeatedly on AxisItem
* add _setLabel_ arguments to __init__
* in _setLabel_ only call _showLabel_ once if either _text_ or _units_ have changed

For example in the case of creating 400 AxisItem objects and customizing the axis label and units, the _setLabel_ was previously called 3300 times, and with this implementation the call count went down to 920.

### improve \_\_init\_\_ speed
call _showLabel(False)_ earlier to avoid unnecessary _setLabel_ calls via _setRange->updateAutoSIPrefix_",1,2,[]
623,244400206,809,12777496,2019-01-14 10:44:37,2020-05-30 06:35:59,closed,Fix selection of FlowchartWidget input/output nodes from issue #808,"Fixes #808.

Whenever they were clicked on, FlowchartWidget was trying to highlight the input and output nodes in the tree widget FlowchartCtrlWidget. These nodes are not put into the tree, so a KeyError was being raised and stopped the information about these nodes from being populated in FlowchartWidget.

FlowchartWidget now always checks if a node is found in FlowchartCtrlWidget before calling 'select' on that node. If it is not found, it calls a new method of FlowchartCtrlWidget to clear the selection in the tree. In this way, the selection in the tree does not become out of sync with the selection in FlowchartWidget.",1,2,[]
624,244283286,807,12777496,2019-01-13 14:43:31,,open,Add new GraphicsItem: GLGraphItem,"GLGraphItem imitates its 2D counterpart GraphItem
by extending the (GL)ScatterPlotItem with edges.
The edges are specified by the user
as well as their appearance (width, color).",3,1,['openGL']
625,240416470,801,12777496,2018-12-21 09:26:33,2020-05-11 15:38:40,closed,Remove use of GraphicsScene._addressCache in translateGraphicsItem,"Use `QGraphicsItem.toQGrapicsObject` on the item instead.

(This probably is not even needed since PyQt 4.9)

The problem with `_addressCache` is that it can map a plain QGraphicsItem that was not 'registered' with a `registerObject` to an invalid (already deleted on the C++ side) wrapper object. For instance:

1. An item registered with registerObject and added to a scene.
2. The item is deleted from the C++ side, but the PyQt wrapper remains live (its entry remains in `_addressCache`).
3. A plain QGraphicsItem that is not registered with `registerObject` is created that reuses the memory that the first item occupied (it is located at the same address) and is added to the scene.
Then calling `scene.items()` will replace the new item with a wrapper for the old invalid item in the output.

I have used `item.toQGraphicsObject()` in the past to workaround the same bug (I am pretty sure it is no longer needed since PyQt 4.9)",3,1,[]
626,240386748,800,12777496,2018-12-21 06:49:32,2020-06-10 04:35:45,closed,add legend for bar graph and update the examples,,2,4,[]
627,239386225,797,12777496,2018-12-18 07:14:45,2019-05-22 21:18:29,closed,ensure QPoint.__sub__ doesn't get called,"In PySide2 5.12.0, the following code snippet: 
```python
import pyqtgraph
import PySide2
from PySide2.QtCore import QPoint

print(PySide2.__version__)

x = QPoint()
y = pyqtgraph.Point()
z = x - y
```
gives the following error output:
```text
5.12.0
Traceback (most recent call last):
  File ""test_qpoint.py"", line 9, in <module>
    z = x - y
TypeError: 'PySide2.QtCore.QPoint.__sub__' called with wrong argument types:
  PySide2.QtCore.QPoint.__sub__(Point)
Supported signatures:
  PySide2.QtCore.QPoint.__sub__(PySide2.QtCore.QPoint)
```

Previously, (tested on 5.11.2) Point.\_\_rsub\_\_ method was getting invoked.
This fix ensures that Point.\_\_sub\_\_ gets invoked rather than QPoint.\_\_sub\_\_ ",6,1,[]
628,235271948,793,12777496,2018-12-02 17:18:23,2019-08-18 05:19:12,closed,Fixes incorrect default value for scale parameter in makeARGB.,Fixes issue #792,8,2,[]
629,235164998,791,12777496,2018-12-01 03:03:55,2018-12-01 03:05:32,closed,BUG: use of undefined variable,,0,1,[]
630,231977850,787,12777496,2018-11-19 13:44:29,2019-08-18 19:16:32,closed,fix encoding error in checkOpenGLVersion,"In the error handling of opengl errors, this error was thrown. I tried on Ubuntu 18.10 with python 3.6 and on Windows 10 with python 3.7. They both showed the same error, that this small change fixes. 

This also fixes #261 

I ran the tests and none of the errors were close to the change I made. 
",5,3,['openGL']
631,226748166,782,12777496,2018-10-29 23:40:45,2019-06-25 15:04:54,closed,Terminate FileForwarder thread on process end,"Fixes #781 

Previously on windows the FileForwarder threads would continue to run and eat up a lot of CPU once the child process they were forwarding dies. This commit shuts down those threads when the child process is joined.",3,1,[]
632,226660890,780,12777496,2018-10-29 18:06:14,2018-10-29 19:33:45,closed,"Revert ""Fixed AxisMouse drag issue""","Reverts #565. The original change breaks mouse dragging directly on the axis - the axis moves one step but then does not receive any more drag events because the first was ignored. Since the original PR only applies to a relatively rare situation (when the user has manually changed the Z value of the AxisItem), I prefer the original behavior for now. 

A better fix for #565 would allow the axisitem+grid lines to be drawn above the viewbox background without changing its z value, but this is tricky wrt. item parenting in the current hierarchy. Another option is for the axisitem to check the location of its mouse events and ignore drags that started over the viewbox.",0,1,[]
633,226226360,778,12777496,2018-10-26 21:06:57,2019-06-04 20:24:15,closed,Fix bug in GLViewWidget.py,call debug.printExc() instead of pyqtgraph.debug.printExc(),0,1,[]
634,225869887,776,12777496,2018-10-25 19:04:37,2019-05-06 00:55:22,closed,Updated according to NumPy FutureWarning,"FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
Closes #842",2,1,[]
635,224373381,772,12777496,2018-10-19 18:29:32,2020-05-31 04:45:00,closed,Legend labels should align left with some spacer,As discussed here: #578 #654 #625 ,3,1,[]
636,222727968,771,12777496,2018-10-14 16:52:40,2019-05-24 06:24:04,closed,No warning for arrays with zeros in logscale,"NumPy evaluates log10(0) to -inf, so there is no reason to show the user a RuntimeWarning. Before, if visualizing data arrays containing zeros in logscale, a RuntimeWarning was shown. Additionally: Removed some invisible whitespace.",1,1,[]
637,222473538,770,12777496,2018-10-12 13:50:56,2019-06-04 20:29:27,closed,Fix issue #481,"The method `setCameraPosition` of the `GLViewWidget` seems the ignore its first argument `pos` (see #481)
By adding the attached lines the position is set correctly.",7,1,[]
638,222121683,768,12777496,2018-10-11 12:37:30,2018-10-11 13:13:01,closed,changelog all caught up,,0,1,[]
639,221813091,767,12777496,2018-10-10 14:31:59,2019-05-24 06:33:27,closed,fixed bug in graphicsItems/ImageItem.py: degenerate images (max==min) ,"… would raise exception in getHistogram(). Just added two lines:

if mx == mn:
    mx += 1",3,1,[]
640,221336347,765,12777496,2018-10-09 07:39:28,2018-10-11 12:58:16,closed,import python2_3 for basestring,missing import of python2_3 for basestring,1,1,[]
641,220993993,764,12777496,2018-10-08 03:00:19,2019-05-22 21:30:27,closed,Update the installation document,* Add the method to directly install the latest commit or any branch on the GitHub.,1,1,[]
642,220836214,763,12777496,2018-10-05 22:07:43,2018-10-11 13:09:24,closed,FIX: Protection over downsampling calculation.,This PR adds a couple of checks to avoid OverflowError when using Auto Downsampling.,1,1,[]
643,217392373,761,12777496,2018-09-21 20:24:40,2020-06-13 04:25:11,closed,added optional Gradient argument to HistogramLUTItem,In case the image lut was different than gray it can get the same gradient as the imageItem. ,1,3,[]
644,214649385,758,12777496,2018-09-11 14:19:01,2018-09-11 15:54:16,closed,Flush shared memory file before attempting to map,"fixes #730 

This avoids the error ""ValueError: mmap length is greater than file size""
on OSX.",0,1,[]
645,213853667,757,12777496,2018-09-07 08:30:20,2019-06-04 20:25:37,closed,Fixed issue #726,"I restored the compatibility layer.

Also, I the `weakref` import is not used anywhere in the file.",1,1,[]
646,212296095,755,12777496,2018-08-31 07:24:03,2020-05-31 05:30:43,closed,Check lastDownsample in viewTransformChanged,"Add a check in the viewTransformChanged function to only force a rerender when the downsampling factor changed.
Previously simply moving the image around or zooming in/out without changing the downsampling factor would force a complete rerendering of the image, which was very slow with large images. This way, the expensive rerender is only forced if necessary.

Fixes #752 ",2,1,[]
647,209877564,748,12777496,2018-08-21 16:02:22,2019-11-12 17:01:04,closed,HDF5Exporter handling of ragged curves,Set up the HDF5Exporter to save ragged curves into different datasets based on their names. They are grouped under a datagroup which is named like the dataset for not ragged curves.,2,1,[]
648,206450029,742,12777496,2018-08-06 16:18:59,2019-11-21 06:11:10,closed,Metaarray py3 support,"Adds support + unit tests for reading metaarray files in python 3
See: #733",3,8,[]
649,205766053,740,12777496,2018-08-02 15:01:57,2021-07-18 04:02:56,closed,Added clipItem option to LinearRegionItem,Added a clipItem option to LinearRegionItem which can be used to limit the rectangle of the region to the clipItem's boundingRect instead of the ViewBoxes. This is useful when placing a linearRegionItem on top of an ImageItem and we do not want the region rectangle to go beyond the image.,6,3,[]
650,204893044,739,12777496,2018-07-30 18:37:25,2018-07-30 18:46:45,closed,Fix error in ViewBox wheelEvent when mouse has 2-axis wheel events,Fixes #736 ,0,1,[]
651,204732612,738,12777496,2018-07-30 08:41:45,2018-07-30 18:38:34,closed,Undo regression in wheelEvent of ViewBox,"Due to a missing line, the scroll wheel event on the axis caused an exception: UnboundLocal error for the variable ""mask"". Restored from previous commit.",1,2,[]
652,203904217,735,12777496,2018-07-25 17:08:21,2018-07-26 16:37:48,closed,Fix exit error caused by callback invoked during Qt teardown,Reference: https://groups.google.com/d/msgid/pyqtgraph/993a12ef-654c-406c-9d41-44812f74e61f%40googlegroups.com?utm_medium=email&utm_source=footer,0,1,[]
653,203687457,733,12777496,2018-07-25 00:06:25,2020-05-31 02:50:06,closed,"Py2/3 MetaArray adjustments, first pass","Suggested approach for making metaarray work in Py2 and 3.
This addresses the issue that the "".ma"" file contains bytestrings as generated by hdf5 in py3.
Tested under py2.7.14 and py3.6.5 with small test script (on google groups for pyqtgraph).
The PR is against the current ""develop"" branch on github.com/pyqtgraph
",1,2,[]
654,201519189,727,12777496,2018-07-15 22:33:37,,open,InfiniteLine: Fix bounding box for differing x and y ranges,"Previously, the same pixel -> local transform was used for both
direction, which breaks <del>e.g. for `AxisItem.scale`</del> if the
displayed coordinate range is not the same for both axes. This also
fixes the computation of label coordinates in that situation.",21,2,['scipy-sprint']
655,200940072,725,12777496,2018-07-12 09:28:38,2019-05-24 06:44:05,closed,Fix X axis values when the axis scale is inverted.,,1,1,[]
656,200722849,723,12777496,2018-07-11 14:37:02,2018-07-11 15:58:24,closed,AxisItem: Fix tick elision with self.scale set,"Previously, only the highest level ticks would be displayed
for e.g. `scale == 1e3`.",2,1,[]
657,200387658,721,12777496,2018-07-10 12:59:38,2018-07-10 13:20:07,closed,Viewbox wheel fix,"Fixes mouse wheel ignoring disabled mouse axes -- although the scaling was correct, it was causing auto range to be disabled.

Reference:
https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!msg/pyqtgraph/GJSFLSXhxpE/PQnTSp0pBAAJ",0,2,[]
658,200167690,720,12777496,2018-07-09 17:24:23,2018-07-10 13:19:44,closed,Fix axis autoscaling with disabled mouse axes,"This PR modifies wheelEvent to put None in the scaling array s where the mouseEnabled mask is not set. It further fixes scaleBy, which would crash with a scaling array containing None (at the point where it calls scale=Point(s)). As s is unconditionally turned into a Point later, this can be deferred.",1,1,[]
659,199884688,719,12777496,2018-07-07 07:11:41,2018-07-07 19:17:12,closed,Add image hover callback to imageAnalysis example,,0,1,[]
660,199756810,718,12777496,2018-07-06 14:02:26,2018-07-10 22:44:28,closed,SVGExport: Initialize option.exposedRect for items that use it,"
Ref: http://doc.qt.io/qt-5/qstyleoptiongraphicsitem.html#exposedRect-var",3,1,[]
661,199079297,717,12777496,2018-07-03 20:47:11,2018-07-10 22:03:16,closed,Make console handle exceptions from non-gui threads a little more carefully,"If sys.excepthook is called from a non-gui thread while ConsoleWidget is listening for exceptions, it causes gui modifications from the remote thread. This change allows the console to send information about the exception (semi) safely to the gui thread to be handled there.",0,1,[]
662,197475223,716,12777496,2018-06-26 16:04:52,2019-05-22 21:29:27,closed,Add appveyor CI,,1,6,[]
663,196870667,715,12777496,2018-06-23 00:33:06,2018-06-25 16:39:48,closed,File dialog fix,fixes #714,1,2,[]
664,196256922,713,12777496,2018-06-20 20:05:19,2018-06-20 20:13:24,closed,Console scrolling,"* Add `scrollToBottom` argument to ConsoleWidget.write(), allowing control over whether to automatically scroll down when new contents are added.
* Fixed a bug when using up/down arrows would sometimes prevent using down-arrow to get back to the original (usually blank) input state.",0,2,[]
665,195645937,712,12777496,2018-06-18 20:55:59,2018-06-19 15:43:51,closed,avoid repeated signal emission in filterwidget,,1,1,[]
666,195286492,710,12777496,2018-06-15 21:25:44,2018-06-16 03:30:38,closed,Roi mouse interaction,"Adds ability to rotate/scale ROIs by mouse drag on the ROI itself (using alt/shift modifiers), without handles. Primarily intended for when the view is zoomed so far in that the handles are no longer visible, but it also provides an easier/faster UI since it doesn't require hunting down tiny handles with the mouse.

Deeper down, mouse drag interaction is now defined in an external class that should be easy to swap out / customize.",1,3,[]
667,193654842,707,12777496,2018-06-08 15:49:34,2018-06-14 00:31:10,closed,Plotitem refactor,"Builds on #660.
- more code cleanup (pep8 / commented code removal)
- replace PlotItem.writeImage implementation (which was buggy) with call to ImageExporter",0,4,[]
668,193170604,706,12777496,2018-06-06 23:51:40,2018-06-10 07:23:33,closed,WIP: DO NOT MERGE: Flake8 all pyqtgraph repos,"Just a test. Do not merge. Find Syntax Errors and Undefined Names. 

Output: https://travis-ci.org/pyqtgraph/pyqtgraph/builds/389026011",0,1,[]
669,192853008,705,12777496,2018-06-05 22:24:20,2018-06-08 00:56:10,closed,Don't store `children` key in Parameter.opts,"closes #494, fixes #493
#493 fixed this too once upon a time, but it is no longer mergeable (because I sat on it too long).",1,1,[]
670,191996120,700,12777496,2018-06-01 10:33:35,2018-06-02 00:36:53,closed,Fix issue #699,"See issue #699 for context.

I ditched `numpy.min` and `numpy.max` for their `nanmin` and `nanmax` equivalent.

I suppose this does have a small impact on performance as each element needs to be compared to `NaN`. However, it is largely offset by the gain in robustness.",2,1,[]
671,191967580,698,12777496,2018-06-01 08:33:16,2018-06-02 04:39:03,closed,Fix issue #697,As per the title.,2,1,[]
672,191624697,696,12777496,2018-05-31 01:59:39,2018-05-31 16:13:03,closed,Fix error when using PlotDataItem with both stepMode and symbol,"When a `PlotDataItem` uses `stepMode=True`, the expectation is that the length of `x` is one more than the length of `y`, but this is not allowed for ScatterPlotItem. Solution here is to modify x values in PlotDataItem, before they are passed to the scatter plot.

closes #684 ",0,1,[]
673,191504495,695,12777496,2018-05-30 16:03:33,2018-05-31 01:48:13,closed,Version string update,"Change version string to 0.11.0.dev0 to indicate this is non-release code.
Builds on part of #684.",1,2,[]
674,190483560,693,12777496,2018-05-25 05:14:11,2018-05-31 17:41:14,closed,unable to set color on GLLinePlotItem,"currently setting a color results in:


    |==============================>>
    |  Traceback (most recent call last):
    |    File ""lorenz system.py"", line 80, in <module>
    |      v.animation()
    |    File ""lorenz system.py"", line 74, in animation
    |      self.start()
    |    File ""lorenz system.py"", line 46, in start
    |      QtGui.QApplication.instance().exec_()
    |    File ""/home/kolt/.local/lib/python3.6/site-packages/pyqtgraph/opengl/GLViewWidget.py"", line 179, in paintGL
    |      self.drawItemTree(useItemNames=useItemNames)
    |    File ""/home/kolt/.local/lib/python3.6/site-packages/pyqtgraph/opengl/GLViewWidget.py"", line 219, in drawItemTree
    |      self.drawItemTree(i, useItemNames=useItemNames)
    |    File ""/home/kolt/.local/lib/python3.6/site-packages/pyqtgraph/opengl/GLViewWidget.py"", line 200, in drawItemTree
    |      debug.printExc()
    |    --- exception caught here ---
    |    File ""/home/kolt/.local/lib/python3.6/site-packages/pyqtgraph/opengl/GLViewWidget.py"", line 197, in drawItemTree
    |      i.paint()
    |    File ""/home/kolt/.local/lib/python3.6/site-packages/pyqtgraph/opengl/items/GLLinePlotItem.py"", line 90, in paint
    |      glColor4f(*fn.glColor(self.color))
    |  NameError: name 'fn' is not defined
    |==============================<<
Error while drawing item <pyqtgraph.opengl.items.GLLinePlotItem.GLLinePlotItem object at 0x7fa86a2601f8>.
",2,1,[]
675,188284841,690,12777496,2018-05-15 23:45:18,2018-05-17 15:44:57,closed,Py3 cleanup,"flush out some old iteritems and itervalues calls.
fixes #688 ",0,3,[]
676,188260569,689,12777496,2018-05-15 21:26:32,2018-05-16 15:36:52,closed,ViewBox fix: don't call setRange with empty args,fixes #687,1,1,[]
677,186995751,685,12777496,2018-05-09 17:58:45,2018-05-09 18:07:55,closed,Data filter defaults,Add option to set enum default values in DataFilterWidget ,0,2,[]
678,186544109,684,12777496,2018-05-08 07:05:29,2018-05-31 16:13:03,closed,update version for new development and PlotDataItem stepMode fix,"### Version 
PyPI version is 0.10.0 and uses the release code from november 2016, however the documentation (http://www.pyqtgraph.org/documentation/index.html) has the same version but is based on the development branch. This is very confusing (take for example _addMarker_ method of InfiniteLine).

### PlotDataItem fix
If _stepMode_ is True we get an exception in the _addPoints_ method of _ScatterPlotItem_ since X and Y axis length is not the same. The last X point is in this case excluded.

",5,4,[]
679,186106324,683,12777496,2018-05-04 21:17:57,2018-05-04 21:26:42,closed,Allow data filter entries to be updated after they are created,,0,1,[]
680,186069506,682,12777496,2018-05-04 18:43:49,2018-05-04 21:05:13,closed,Fix: mkQApp returned None if a QApplication was already created elsewhere,,1,1,[]
681,184758187,679,12777496,2018-04-28 02:09:24,2018-04-28 02:27:45,closed,Fix overflow in Point.length(),"Avoid overflow in Point.length by using trig functions or returning inf.
Fixes #678 ",1,1,[]
682,184447599,677,12777496,2018-04-26 19:58:02,2018-04-28 19:00:33,closed,typo fix in comment,trivial typo fix,1,1,[]
683,184214842,676,12777496,2018-04-26 03:08:51,2018-06-08 00:54:33,closed,Allow for panning in the plane of the camera,"Accessed via CTRL-[left click]

The current panning only pans around axis. By panning along the plane of the camera, more natural scene movement is achieved.
",3,2,[]
684,184187525,675,12777496,2018-04-25 23:12:10,2018-04-25 23:57:43,closed,Gracefully handle case where image data has size==0,,0,1,[]
685,184182892,674,12777496,2018-04-25 22:41:06,2018-04-25 23:12:36,closed,Prevent parallelizer leaking file handles,,0,1,[]
686,184175843,673,12777496,2018-04-25 22:02:08,2018-04-25 22:39:36,closed,Change integer parameter formatting,"Integer values in ParameterTree are now formatted as integer (%d) by default, rather than scientific notation (%g). This can be overridden by providing `format={value:g}` when creating the parameter.",0,2,[]
687,184148348,672,12777496,2018-04-25 20:05:33,2018-04-25 20:18:21,closed,Busy cursor fix,"* Fix busy cursor nesting 
* Ignore BusyCursor when called from thread ",1,2,[]
688,184146245,671,12777496,2018-04-25 19:56:58,2018-04-25 20:05:49,closed,Svg export updates,"* fixed svg export of path failing of the first sample has nan values
* add svg export option to switch strokes from non-scaling to scaling",1,2,[]
689,184120515,670,12777496,2018-04-25 18:13:49,2018-04-25 18:56:41,closed,Scatterplotwidget updates,Adds point selection to scatterplotwidget,1,3,[]
690,184083985,669,12777496,2018-04-25 15:55:56,2021-01-20 07:20:07,closed,[wip] Imageitem performance,"Working on improving update performance of ImageItem:
* ensure that ubyte data can be passed through to QPixmap without any extra overhead
* optimize levels / lookup tables / clipping / channel ordering where possible (maybe we can use numba to combine multiple steps into a single loop)

Fixes #667 ",5,12,[]
691,183895536,668,12777496,2018-04-25 00:04:16,2018-04-25 00:32:38,closed,OpenGL high-dpi fix,Builds on #516 to ensure backward compatibility with Qt4.,1,4,[]
692,181505219,666,12777496,2018-04-13 14:29:59,2018-04-25 23:17:08,closed,Fix issue #145,Disable textures after painting is finished.,2,1,[]
693,181505113,665,12777496,2018-04-13 14:29:37,2021-06-19 22:08:56,closed,feature More parameter item types,"Pen: Pops up a dialogue that allows the user to customize a pen. Setting pen value is not working yet.
Progress bar: For indication things.
Slider: Easier way to set values that dont require precision.
Fonts: Picking font types. Next thing could be a Font dialog.
Calendar: For picking dates or intervals
Open/save file/files/directory: Pops up an open/save file/directory dialog to select a file/directory. Filter string and caption can be defined too.

A PenSelectorDialog widget was created for the pen parameter item too.

Also added these parameter items to the example.",6,14,['parameterTree']
694,181504864,664,12777496,2018-04-13 14:28:48,2021-02-15 13:54:23,closed,feature TriangleROI,"Added equilateral  TriangleROI.
getArrayRegion is not working yet",4,1,['ROI']
695,181504054,663,12777496,2018-04-13 14:26:05,2021-07-31 03:38:11,closed,feature GLGradientLegendItem,Adds a hud like colorbar to the 3D view.,2,1,['openGL']
696,179587908,661,12777496,2018-04-05 07:01:00,2018-05-31 02:03:28,closed,Improve test,"* Add PlotDataItem test_setData()
* Add PlotDataItem test_clear()",2,2,[]
697,179445850,660,12777496,2018-04-04 16:29:42,2018-06-14 00:31:34,closed,Refactor PlotItem.py and test_GraphicsItem.py,"* Remove some outdated comments
* Extract function to reduce the redundancy",2,2,[]
698,178804672,659,12777496,2018-04-02 09:21:44,2019-06-28 04:51:55,closed,Add Dock test and remove outdated comments,"* Add test for `closable` and `hideTitle` arguments.
* Remove some outdated and debug comments.",2,3,['Dock']
699,178617064,658,12777496,2018-03-30 19:06:29,2018-04-25 23:21:38,closed,examples: use integer division in indexing,"This fixes an error that I saw in the examples while evalulating pyqtgraph.

In python3 `/` operator produces a float, which is not a valid index.
Replace with `//` integer division.

Here are the errors that this fixes under python3:
```
Traceback (most recent call last):
  File ""/home/ilyak/work/pyvenv3.5/lib/python3.5/site-packages/pyqtgraph/examples/isocurve.py"", line 20, in <module>
    data = pg.gaussianFilter(data, (10, 10, 10))[frames/2:frames + frames/2]
TypeError: slice indices must be integers or None or have an __index__ method

...

Traceback (most recent call last):
  File ""/home/ilyak/work/pyvenv3.5/lib/python3.5/site-packages/pyqtgraph/examples/GLImageItem.py"", line 29, in <module>
    tex1 = pg.makeRGBA(data[shape[0]/2], levels=levels)[0]       # yz plane
IndexError: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices
```",2,1,[]
700,178601632,657,12777496,2018-03-30 17:34:37,2018-06-08 01:02:31,closed,"When a floating Dock window is closed, the dock is now returned home","When a Dock is floated by double clicking on the label, it pops into a new window. However when that window is closed the dock is closed rather than restored to its original DockArea. This can be a problem especially for Docks that are not supposed to be closed (and have the closable flag False).
This PR places the floated Dock back to its original area upon TempAreaWindow close.",1,1,[]
701,178408248,656,12777496,2018-03-29 18:38:00,2018-03-29 18:39:19,closed,Markotoplak svg,minor modifications on #642,0,3,[]
702,178369487,655,12777496,2018-03-29 15:50:32,2018-03-29 15:57:37,closed,add reduce import to fractal demo,fixes #643 ,1,1,[]
703,178301759,653,12777496,2018-03-29 11:32:30,2018-03-29 15:55:54,closed,ScatterPlotItem: Fix a GC memory leak due to numpy issue 6581,"Accessing ``ScatterPlotItem.points` causes that instance to persist in memory indefinitely

```python
import gc

from PyQt5.QtWidgets import QApplication
from pyqtgraph import ScatterPlotItem

app = QApplication([])

sp = ScatterPlotItem(x=[1, 2], y=[1, 2], data=[42, 43])
sp.points()  # fill in data[""items""]

del sp

gc.collect()

print([o for o in gc.get_objects() if isinstance(o, ScatterPlotItem)])
```

The cause is that `data` numpy array with object fields contains reference cycles back to itself (via a SpotItem._plot), but numpy does not support cyclic gc for object arrays ([numpy issue 6581](https://github.com/numpy/numpy/issues/6581)).

Fixed by taking a weak reference to `plot` in `SpotItem`
",2,1,[]
704,175874197,648,12777496,2018-03-19 11:41:34,2018-03-30 00:56:34,closed,fix color ignored in GLGridItem. Issue #283 solved,,2,1,[]
705,174447674,646,12777496,2018-03-12 17:55:48,2021-02-21 21:17:14,closed,Multiple improvements for log scale support,"Support log in HistogramLUTItem
Add minLevel, maxLevel edit box in GradientEditor
Small improvements in the behaviours
Replace #411 ",9,22,['log-scale']
706,173877430,645,12777496,2018-03-08 23:11:12,2018-03-09 18:17:06,closed,fix: scatterplotwidget behaves nicely when data contains infs,Also: Add methods to make it easier to programatically configure scatterplotwidget,1,1,[]
707,172449743,642,12777496,2018-03-02 08:49:30,2018-03-29 18:39:36,closed,SVG export: handle Qt.NoPen on Qt5,"Example code that used to crash on Qt5:

```
from PyQt5.QtWidgets import QApplication
from PyQt5.QtGui import QPen
from PyQt5.QtCore import Qt

import pyqtgraph as pg
from pyqtgraph.exporters.SVGExporter import SVGExporter


if __name__ == '__main__':
    app = QApplication([])
    win = pg.GraphicsWindow()
    win.resize(300, 300)
    p1 = win.addPlot()
    p1.plot(x=[1, 10], y=[1, 10], pen=QPen(Qt.NoPen))
    exporter = SVGExporter(p1)
    exporter.export(""test2.svg"")
```",1,1,[]
708,172256003,641,12777496,2018-03-01 14:44:36,2018-03-30 01:03:19,closed,SVGExporter: fix axes position and scale,"Fixes problems with non-aligning axes on Qt5 svg exports.  In the output svg, the axes were (individually) scaled for physical/logical ration.

The export still works well in on Qt4. I suspect there were no problems there, because, at least on my machine (Ubuntu 14.04), logical and physical dpis return the same value.",4,1,[]
709,171224131,638,12777496,2018-02-25 10:54:57,2018-03-30 00:53:02,closed,Fix grame typo,,2,1,[]
710,171153983,637,12777496,2018-02-24 01:52:40,2018-02-24 03:58:11,closed,Fix isosurface error:,"Fixed bug in functions.isosurface:
TypeError('only integer scalar arrays can be converted to a scalar index',)

(this is one of those ""I wonder how it ever worked in the first place"" bugs)",1,1,[]
711,171153368,636,12777496,2018-02-24 01:42:18,2018-02-24 01:48:44,closed,Example update,This is #634 + some cleanup and a bugfix,1,3,[]
712,169768403,635,12777496,2018-02-17 04:47:54,2018-05-25 00:14:12,closed,WIP: PySide2 support,"Based off of maxpeng's work on #376 
Most of the infrastructure is in place, but there are still some major rendering issues to work out.",4,11,[]
713,169545586,634,12777496,2018-02-16 04:22:16,2018-02-24 01:49:05,closed,Replace deprecate class in examples,"Using class GraphicsLayoutWidget to replace the deprecated class GraphicsWindow, cc #631.",1,1,[]
714,167691842,633,12777496,2018-02-07 13:25:49,2018-03-30 01:08:23,closed,Cylinder now generates the correct amount of sides,Before the first and the last vertex was overlapping.,2,1,[]
715,167164395,631,12777496,2018-02-05 14:52:57,2018-02-14 01:26:50,closed,Improve Documentation,"Improve documentation by following changes:
* Use bold font in `mouse_interaction.rst`
* Add `pip3` installation method in `installation.rst`
* Add `Graphics Windows` content in API Reference
",4,3,[]
716,167119995,630,12777496,2018-02-05 11:28:59,2018-03-30 01:11:40,closed,Refactor MultiPlotSpeedTest.py,"* Change variable to meaningful name,
* Remove the outdated commented out code.",1,1,[]
717,166818835,629,12777496,2018-02-02 14:43:08,2018-03-30 01:31:38,closed,Add main window title for the examples,Add title for the examples program,0,1,[]
718,166633368,628,12777496,2018-02-01 19:44:39,2018-02-01 19:52:41,closed,Add a signal for detecting scatter plot point clicks in ScatterPlotWidget,,1,1,[]
719,166633043,627,12777496,2018-02-01 19:43:12,2018-02-01 20:06:49,closed,Fix ConsoleWidget to work with changed stack format in python 3.5,,1,1,[]
720,166405461,626,12777496,2018-01-31 23:31:03,2018-02-05 16:52:02,closed,Fix issue # 366,"Set the right texture for rendering, otherwise a previously set texture is overwritten.",2,1,[]
721,165758066,624,12777496,2018-01-29 16:49:19,2018-01-30 02:54:51,closed,end travis testing on python 2.6,"Your time has come, Python 2.6. ",0,1,[]
722,165593654,623,12777496,2018-01-28 23:20:02,2018-01-30 02:55:20,closed,Scatter plot,"In PyQt5 QPainterPath is not hashable anymore which causes SymbolAtlas to fail accept it as a custom symbol, use id instead.
Add corresponding test and an example of using arbitrary text strings as a custom symbols for ScatterPlotItem.",2,2,[]
723,165173143,621,12777496,2018-01-25 16:57:28,2018-01-26 16:52:10,closed,Rgb histogram,"Adds an option for RGB level controls to HstogramLUTItem.
",0,14,[]
724,165008464,620,12777496,2018-01-25 01:33:00,2018-01-25 16:47:08,closed,Fix spinbox units,"Fixes bug where spinbox value cannot be edited if the suffix begins with a letter that is also an SI prefix (for example, 'PSI')",0,2,[]
725,164122230,618,12777496,2018-01-20 10:52:28,2021-04-08 19:10:02,closed,"ROI.py, getArrayRegion: Fix return mapped coordinates","The *getArrayRegion* method is defined as returning a tuple of the points
in the selected region and the mapped coordinates if the
*returnMappedCoords* keyword argument is set to True in the parent class
*ROI*.

In the *EllipseROI* and *PolyLineROI* classes, *getArrayRegion* was overriden,
however it ignores the *returnMappedCoords* keyword argument, leading to
unintended bugs because of the change in interface between the parent class and
the subclass.

This patch fixes the above bug.
If *returnMappedCoords* is set to False, then only *arr* containing the
array region is returned. If *returnMappedCoords* is set to True, a
tuple of the array region and the mapped coordinates is returned.

EDIT: Fixed the same bug for PolyLineROI.

@campagnola Do you require unit tests? I wanted to write some but I gave up for now as I cannot get unit tests to succeed in my environment (maybe I missed something in the setup):

```
$ python --version
Python 3.6.3
$ pip --version
pip 9.0.1 from /home/malik/workspace/pyqtgraph/venv/lib/python3.6/site-packages (python 3.6)
$ pip freeze
apipkg==1.4
attrs==17.4.0
coverage==4.4.2
execnet==1.5.0
numpy==1.14.0
pkg-resources==0.0.0
pluggy==0.6.0
py==1.5.2
PyQt5==5.9.2
pytest==3.3.2
pytest-cov==2.5.1
pytest-forked==0.2
pytest-xdist==1.22.0
scipy==1.0.0
sip==4.19.6
six==1.11.0
$ py.test
7 failed, 24 passed, 129 skipped in 4.04 seconds
```",12,2,['ROI']
726,161766460,616,12777496,2018-01-09 01:33:50,2018-01-30 02:59:55,closed,Play image along 't' axis instead of first axis,The play function under timeout iterates along axis 0. This could be changed to axis 't'.,1,1,[]
727,159753607,615,12777496,2017-12-21 21:27:29,2020-06-24 06:01:26,closed,Limit wheel mouse scroll to zoom limits if set,Especially with pinch gestures the zoom level gets too deep easily. Some logic from updateViewRange is duplicated into the wheelEvent handler.,2,2,[]
728,159036588,614,12777496,2017-12-18 22:45:01,2018-01-30 04:13:59,closed,Add custom gradients and name to GradientEditorItem,"The first commit is because I always see color-bar names in commercial software. I add a simple name label in front of the color-bar. I think it helps user selection and communication with colleagues. In future, when the list grows even longer, we may add search option.

The second one builds on top of the first one, providing user the freedom to add their favorite gradients.

BTW. I've been using PyQtGraph for several months and I really like it. Thank you very much @campagnola . I just started using GitHub and this is my first pull :)",1,8,[]
729,158950986,613,12777496,2017-12-18 15:59:30,2017-12-20 05:58:23,closed,Prevent ReferenceErrors on cleanup,Prevents a ReferenceError being thrown when PyQtGraph tries to put TensorFlow stuff onto a QGraphicsScene() on cleanup - see https://github.com/pyqtgraph/pyqtgraph/issues/603 and https://stackoverflow.com/questions/41542571/pyqtgraph-tries-to-put-tensorflow-stuff-onto-a-qgraphicsscene-on-cleanup,1,1,[]
730,156365794,610,12777496,2017-12-05 03:46:20,2017-12-06 11:43:11,closed,fix an error type in the cleanup function,"Fix the error type from RuntimeError to ReferenceError in the cleanup function.

A problem happened when try to use both pyqtgraph and tensorflow at a same time This was reported on [PyQtGraph tries to put TensorFlow stuff onto a QGraphicsScene() on cleanup](https://stackoverflow.com/questions/41542571/pyqtgraph-tries-to-put-tensorflow-stuff-onto-a-qgraphicsscene-on-cleanup)

Here is minimal code (from above post) that cause a following error message when closing the app.

----
```
from PyQt5 import QtGui
import tensorflow as tf
import pyqtgraph as pg


app = QtGui.QApplication([])
wnd = QtGui.QWidget()
wnd.show()
app.exec_()
```

_Error in atexit._run_exitfuncs:
Traceback (most recent call last):
  File ""~\anaconda3\lib\site-packages\pyqtgraph\__init__.py"", line 312, in cleanup
    if isinstance(o, QtGui.QGraphicsItem) and isQObjectAlive(o) and o.scene() is None:
ReferenceError: weakly-referenced object no longer exists_
",0,1,[]
731,153591014,608,12777496,2017-11-20 10:20:49,2018-01-25 16:48:24,closed,"Information is spelled with an r, even in comments",,0,1,[]
732,153486987,607,12777496,2017-11-19 08:43:41,2018-01-30 04:19:49,closed,"Infrastructure Fixes: ParameterError where due, type safety for SimpleParameter","The need for this patch (and the addition of the Qt import) arose during trying
to make Jupyter Notebooks work with pyqtgraph. Since these belong in the area
of infrastructure fixing rather than forward dev, PR'ing against master.

The PR containing rudimentary Notebook integration will be done separately
against develop.",5,2,[]
733,152054990,606,12777496,2017-11-11 12:13:26,2018-01-30 04:26:16,closed,Avoid raising a general Exception for Dock,"It is not very pythonic to raise just a general Exception whenever an error appears. Here, for Dock, we define a DockError class, which is always raised whenever there is an exception, which makes it much easier to catch.",2,1,[]
734,149051373,601,12777496,2017-10-26 21:33:54,2018-01-30 04:34:48,closed,"Fixed a couple of bugs, added new items","Bugfixes for #366 #145 

Added: GLGradientLegendItem, TrianleROI, new parameter types",2,6,[]
735,148020049,600,12777496,2017-10-22 23:47:44,2018-01-30 04:36:10,closed,Update ImageItem.py,Functions nanmin and nanmax are defined in the numpy module and cannot be accessed from the global namespace. An exception is raised each time the code in ImageItem:331 is executed.,2,1,[]
736,148019866,599,12777496,2017-10-22 23:42:38,2019-09-13 03:24:49,closed,Update GraphicsScene.py,In lines 174 and 191 cev[0] is being accessed when cev is an empty list. I get this error when inheriting from GraphicsLayoutWidget and overloading mouseDoubleClickEvent.,6,1,[]
737,147804267,598,12777496,2017-10-20 13:47:09,2018-01-31 16:47:09,closed,fix: some unreadable items in dark themes,"The problem:
on KDE5 breeze dark theme few pyqtgraph items are not readable. I think the problem is not only on KDE5, but apparently could be seen on win10? It is caused by statically set background color, supposing that default font color is black, but that is not the case when OS uses dark theme/skins.
Two items were identified: 
1. subgroup items in parameter tree:
![parameter_tree1](https://user-images.githubusercontent.com/12324068/31823698-39433818-b5ad-11e7-993e-d487244c060a.png)
2. console output:
![console_foreground](https://user-images.githubusercontent.com/12324068/31823817-a23c5048-b5ad-11e7-9f1a-f8b16e905b22.png)

Fix:
The foreground color of these items is statically set.
",3,1,[]
738,147226573,597,12777496,2017-10-18 07:27:54,2018-01-25 16:59:29,closed,Add an interactive fractal demo,"Just for fun.
Also snuck in a couple of bug fixes.",1,3,[]
739,147206841,596,12777496,2017-10-18 04:25:05,2017-10-18 04:31:00,closed,Fix polyline click,A recent bug was introduced that causes PolyLineROI segments to be drawn incorrectly after the user has clicked to add a new handle.,1,3,[]
740,147109255,595,12777496,2017-10-17 17:49:10,2017-10-17 18:03:45,closed,Fix: make TreeWidget.invisibleRootItem return a singleton,This makes the method more similar to QTreeWidget.invisibleRootItem; should have better backward compatibility.,1,1,[]
741,145004162,593,12777496,2017-10-05 19:45:51,2017-10-05 19:57:01,closed,Override qAbort on slot exceptions for PyQt>=5.5,"PyQt5, starting in v5.5, calls qAbort when an exception is raised inside a slot. To maintain backward compatibility (and sanity for interactive users), we install a global exception hook to override this behavior.

See: 
http://pyqt.sourceforge.net/Docs/PyQt5/incompatibilities.html#pyqt-v5-5
https://www.riverbankcomputing.com/pipermail/pyqt/2017-July/039411.html",1,1,[]
742,144980079,592,12777496,2017-10-05 17:50:51,2017-10-05 19:43:32,closed,Fix: InvisibleRootItem is no longer a subclass of QTreeWidgetItem,"The __getattr__ method is supposed to wrap attributes from the internal TreeWidgetItem,
but this was broken because the superclass had already implemented these.",0,1,[]
743,144713541,591,12777496,2017-10-04 16:14:24,2017-10-04 17:13:23,closed,Nested progress dialog,Update ProgressDialog to allow nesting -- display multiple (hierarchical) progress bars in one dialog.,1,6,[]
744,144517266,589,12777496,2017-10-03 20:13:33,2017-10-04 17:13:44,closed,Roi updates,"- Remove spiral ROI (was never intended to be there, probably nobody else uses it)
- Add RulerROI
- Fix: very small ellipse/circle ROIs have bad click areas",1,5,[]
745,144517013,588,12777496,2017-10-03 20:12:23,2017-10-04 16:14:52,closed,Add PlotCurveItem composition mode,,1,1,[]
746,144516936,587,12777496,2017-10-03 20:12:02,2017-10-04 16:29:42,closed,Make PathButton margin customizable,,0,1,[]
747,144516872,586,12777496,2017-10-03 20:11:44,2017-10-04 16:26:35,closed,Parametertree updates,"- Add GroupParameter.sigAddNew signal
- systemsolver: add method for checking constraints / DOF
- add systemsolver copy method
- Parameter.child raises KeyError if requested child name does not exist
- Fix: make parameter name,value inint args go through setValue and setName
- Fix colormapwidget saveState",0,8,[]
748,144516554,585,12777496,2017-10-03 20:10:16,2017-10-04 16:15:46,closed,MetaArray: make it possible to append multiple axis values,Example use case: taking an image stack where each frame has a time value AND a position. Previously we could only append new time values.,1,1,[]
749,144516449,584,12777496,2017-10-03 20:09:47,2017-10-04 16:25:34,closed,"LegendItem: make it possible to remove items directly, rather than by name",,1,1,[]
750,144516347,583,12777496,2017-10-03 20:09:15,2017-10-04 17:30:42,closed,Function updates,"eq(): avoid comparing arrays that have different shapes
subarray(): simplify by using ndarray strides argument",1,4,[]
751,144516029,582,12777496,2017-10-03 20:07:51,2017-10-04 16:37:03,closed,Add Combobox save/restoreState methods,Also allow tuple as input type in addition to list,0,1,[]
752,144515945,581,12777496,2017-10-03 20:07:27,2017-10-04 16:25:07,closed,Fix colormapwidget saveState,,0,1,[]
753,144515773,580,12777496,2017-10-03 20:06:42,2017-10-03 20:15:19,closed,Allow calling sip.setapi in subprocess before pyqtgraph is imported,,1,1,[]
754,143534936,577,12777496,2017-09-28 01:14:14,2018-01-31 01:14:15,closed,BarGraphItem can plot horizontal bars.,Proposed fix to https://github.com/pyqtgraph/pyqtgraph/issues/576,2,1,[]
755,142713982,571,12777496,2017-09-23 13:24:39,2018-06-02 00:52:46,closed,Fixed: items are not removed from legend,"LegendItem.removeItem requires the name of the item to be removed as an input. However, here the entire GraphicsItem was passed instead.",2,1,[]
756,142390689,570,12777496,2017-09-21 16:34:33,2017-09-23 04:51:14,closed,ViewBox: make sure transform is up to date in all mapping functions,,1,1,[]
757,142390573,569,12777496,2017-09-21 16:34:02,2017-09-23 05:17:29,closed,PlotItem.addLegend will not try to add more than once,,0,1,[]
758,142390497,568,12777496,2017-09-21 16:33:42,2017-09-23 04:50:02,closed,Linearregion updates,"* InfiniteLine can draw markers attached to the line
* InfiniteLine can limit the region of the viewbox over which it is drawn
* LinearRegionItem gets customizable line swap behavior (lines can block or push each other)
* LinearRegionItem.setHoverBrush",1,2,[]
759,142390011,567,12777496,2017-09-21 16:31:25,2017-09-23 04:51:43,closed,Flowchart updates,"* Add several new data nodes
* Add EvalNode.setCode
* Fix spinbox range/bounds usage
* Binary operator nodes can select output array type
* Add floordiv node
* Gaussian filter node uses internal function to remove scipy dependency",1,8,[]
760,142386367,566,12777496,2017-09-21 16:14:23,2018-01-26 16:59:42,closed,ArrowItem: rotate painterpath instead of the item,"This behavior change makes it easier to attach text to the arrow.
It does break backward compatibility a bit, but it's easy to work around by using arrow.rotate() instead.
",0,2,[]
761,142205691,565,12777496,2017-09-20 21:18:33,2018-09-28 23:02:29,closed,Fixed AxisItem mouse drag issue,Issue where MouseDragEvent would only work for 1 AxisItem. I made it so the MouseDragEvent could propagate to other AxisItems. I had this issue by setting the ViewBox background color and changing the AxisItem ZValue to make the AxisItems visible. This made one of the AxisItems receive all of the MouseDragEvents and only one Axis would actually allow dragging. ViewBox.mouseDragEvent sets event.accept() preventing the mouse event to propagate to other AxisItems.,3,2,[]
762,141902277,564,12777496,2017-09-19 16:52:48,2017-09-19 17:10:44,closed,Allow console exception label to wrap text,This prevents the console window from growing if the exception message contains a very long line,1,1,[]
763,141697419,563,12777496,2017-09-18 20:33:11,2017-09-19 16:49:13,closed,Prevent viewbox auto-scaling to items that are not in the same scene.,"This can happen when an item that was previously added to the viewbox
is then removed using scene.removeItem().",1,1,[]
764,140984601,560,12777496,2017-09-14 05:16:05,2017-09-14 05:21:41,closed,Debugging updates,"Add function to enable faulthandler on all threads
Allow Mutex to be used as drop-in replacement for python's Lock",1,2,[]
765,140981671,559,12777496,2017-09-14 04:41:24,2017-09-14 04:54:30,closed,Export updates,"- Image exporter gets option to invert value while leaving hue fixed
- Minor fixes for hdf5 exporter",1,2,[]
766,140979111,558,12777496,2017-09-14 04:09:57,2017-09-14 04:34:07,closed,Clean up canvas codebase,"- Remove commented code
- Give CanvasItem save/restore
- Refactor ui to be easier to embed or extend",1,4,[]
767,140978199,557,12777496,2017-09-14 03:59:06,2017-09-14 04:07:43,closed,Allow console stack to be set outside of exceptions,,1,2,[]
768,140875862,555,12777496,2017-09-13 16:42:31,2017-09-14 03:46:52,closed,Multiprocess updates,"- API change: using `callSync='sync'` no longer returns a future in case of timeout
- fix console color issues
- allow to copy sys.path to the subprocess
- fix some issues with subprocess closing
",1,4,[]
769,140684897,553,12777496,2017-09-12 21:15:54,2018-03-30 02:04:25,closed,Fixed legend size after remove item,When the legend removed an item with a large label name the legend would not shrink in width. This fix uses the sample and label minimum width to allow the legend to shrink when an item is removed.,2,1,[]
770,139709471,551,12777496,2017-09-07 03:32:17,2020-06-13 04:55:47,closed,added fps class variable to ImageView to enable consistent playback f…,"…rame rate

Apologies for the mistaken master pull request #550 ",3,1,[]
771,139708797,550,12777496,2017-09-07 03:24:27,2019-05-22 21:34:20,closed,Implement fps parameter in ImageView for consistent playback frame rate,Detailed in Issue #549 ,3,456,[]
772,139610810,548,12777496,2017-09-06 16:40:22,2018-04-26 21:57:36,closed,Signal handling tools,"Adds: 
* a disconnect() function that allows to conditionally disconnect signals, and also disconnect after reload
* a SignalBlock class used to temporarily block a signal-slot pair

This also requires some modifications to `reload()`, and adds a unit test for reload.
The unit test breaks if py.test assertion rewriting is used, so travis is switched to use `--assert=plain`",1,10,[]
773,139083210,546,12777496,2017-09-04 05:05:44,2017-09-04 05:22:02,closed,Add check for EINTR during example testing to avoid sporadic test failures on travis,,1,1,[]
774,139077494,545,12777496,2017-09-04 03:31:16,2017-09-04 05:32:33,closed,Transform3D map() update,"Minor changes to Transform3D:
- allow more types to be passed through map() 
- add some sanity checks",0,1,[]
775,139076674,544,12777496,2017-09-04 03:18:13,2017-10-12 18:05:43,closed,Dockarea updates,"Make DockArea.restoreState behavior configurable in cases where either a dock to be restored is missing, or an extra dock exists that is not mentioned in the restore state.
 +related bugfixes",1,6,[]
776,139066600,543,12777496,2017-09-03 23:52:10,2017-09-04 05:29:15,closed,Add targetitem class,Simple graphicsitem that draws a scale-invariant target symbol (circle+crosshair).,1,1,[]
777,139066532,542,12777496,2017-09-03 23:49:41,2017-09-04 05:28:53,closed,Add a collapsible QGroubBox widget,,0,1,[]
778,138660094,541,12777496,2017-08-31 12:58:09,2018-09-28 22:38:03,closed,ImageItem render error if graph is too small.,Fixed issue where render would error because 'mapToDevice' would return None if the view size was too small.,2,1,[]
779,134961325,530,12777496,2017-08-09 18:37:48,2018-09-28 22:35:28,closed,Fixed issue where setData only updated opts if data is given,,2,1,[]
780,134752551,529,12777496,2017-08-08 20:34:54,2018-09-28 22:30:59,closed,Fixed dataBounds issue for a line with inf values.,Fixed dataBounds issue for an inf line.,3,2,[]
781,134744455,528,12777496,2017-08-08 19:54:08,2018-04-25 23:32:03,closed,Fixed downsample inf image issue,The fn.downsample function can cause an image array size to go to 0. This will cause an error in makeQImage.,2,4,[]
782,134142450,526,12777496,2017-08-04 11:03:24,2018-04-25 23:26:53,closed,Added essential if.,"When autorange is enabled and there is no dots of `ScatterPlotItem` on current scene, `np.nanmin` (line 655) throws exception as `d` is empty.",2,1,[]
783,133365183,521,12777496,2017-08-01 00:25:27,2017-08-02 22:30:57,closed,Relax type checking on string parameters,"Before #479, it was possible to set a string parameter from a non-string type. This PR relaxes the type checking for string parameters to restore the old behavior.",1,4,[]
784,133113073,520,12777496,2017-07-30 01:57:29,2018-04-25 01:00:31,closed,Support HiDPI in OpenGL,In response to https://github.com/pyqtgraph/pyqtgraph/issues/422,2,2,[]
785,133097305,519,12777496,2017-07-29 16:08:05,2021-04-14 05:02:31,closed,Expose the `clickable` property of `PlotDataItem`.,"Currently if you attempt to set the `clickable` property of a PlotDataItem,
this property is silently ignored. The expected behavior is to set the
`clickable` property of the underlying PlotCurveItem, and to return the 
property from the PlotCurveItem.

This commit allows us to set the `clickable` property in these ways:
```
pdi = pq.PlotDataItem(...,clickable=True)
pdi.setClickable(True)
pdi.clickable = True
```
and ""get"" the property in this way:
```
print(pdi.clickable)
```
without referencing `pdi.curve`.",9,3,[]
786,133066903,518,12777496,2017-07-28 23:10:16,2017-10-04 16:39:57,closed,Treewidget updates,"* Add new TreeWidget signals:  sigItemCheckStateChanged, sigItemTextChanged, sigColumnCountChanged
* Allow setting expansion state of items before they are added to a treewidget
* Support for using TreeWidget.invisibleRootItem()",1,4,[]
787,133065979,517,12777496,2017-07-28 23:00:29,2017-07-28 23:17:31,closed,Small fixes,"* corrected a docstring
* fix error when trying to plot array with all nan values
* catch error when trying to wait on forked processes",1,3,[]
788,132941197,516,12777496,2017-07-28 10:35:14,2018-04-25 00:32:54,closed,Fix GL Views being half size on hidpi monitors,"On retina / hidpi displays GL Views are too small.

I have modified the appropriate self.width and self.height to multiply by self.devicePixelRatio.

I.e.:
`
(0, 0, self.width(), self.height())`

becomes

`(0, 0, self.width()*self.devicePixelRatio(), self.height()*self.devicePixelRatio())`

Fixes #497  and #422 

Needs checking on a non-retina non-mac device first.

",5,2,[]
789,132907939,514,12777496,2017-07-28 07:11:22,2017-07-28 23:01:16,closed,Viewbox fix,Fixes bug where `ViewBox` emits `sigRangeChanged` before it has marked its transform dirty. This prevents slots getting access to the latest transform. ,1,2,[]
790,132619796,513,12777496,2017-07-26 21:34:34,2019-05-24 23:00:29,closed,Making flowchart saving compatible with Python 3,"- Replaces some calls to `unicode` made by `Flowchart` as it is being saved with calls to `asUnicode`, which is Python 2/3 compatible.
- Fixes an attempt to merge two OrderedDict values as if they were lists. In Python 3, `OrderedDict.values()` returns a generator. These objects have been wrapped in `list()` to make them mergeable in Python 2 or 3.",4,3,[]
791,130357744,510,12777496,2017-07-13 12:27:18,2017-08-08 19:58:15,closed,Fixed dataBounds error when all values were inf.,If all values are inf. d = d[mask] will create an empty array. You cannot call min or max on an empty array.,1,3,[]
792,129196761,509,12777496,2017-07-06 14:17:29,2021-01-20 05:43:58,closed,"Add NonUniformImage, example and tests.",We've used this class extensively to visualize our simulation results and we'd like to contribute it to your library. Its functionality is similar to [matplotlib.image.NonUniformImage](https://matplotlib.org/api/image_api.html#matplotlib.image.NonUniformImage).,7,5,['post nep-29']
793,128578732,508,12777496,2017-07-03 08:38:35,2020-06-09 05:51:14,closed,Fix siScale imprecision errors,Fix siScale imprecision errors,1,3,[]
794,128578042,507,12777496,2017-07-03 08:34:21,2020-05-31 07:50:16,closed,Fix Dock close event QLabel still running with no parent,,2,1,['Dock']
795,128314205,505,12777496,2017-06-30 07:53:29,2020-05-31 07:19:11,closed,Avoid imprecission errors in siScale function,With this change avoid precission errors on multiply operation,3,4,[]
796,127958302,504,12777496,2017-06-28 15:54:48,2020-04-07 00:14:54,closed,Make two class names into links,,2,1,['docs']
797,126941987,503,12777496,2017-06-22 09:01:42,2020-06-10 03:50:58,closed,Fix bug in RawImageWidget.py,"For example: it prevents integration of this widget to Enaml.

Actually I'm not sure that this wasn't intentional... But for some reason `parent` was not used and set to `None`.

New:

1. Bug was in the `def paintGL(self)` method (at least with PySide1): image was mirrored upside down.
2. Added support for `setConfigOptions(imageAxisOrder='row-major')`
3. Small cosmetic changes",2,3,[]
798,126760806,502,12777496,2017-06-21 13:16:05,2019-06-06 23:43:36,closed,fix some small indexing bug.,,2,1,[]
799,126751501,501,12777496,2017-06-21 12:31:29,2019-06-06 23:41:40,closed,Add some compatibility for Python3,"Mainly add some compatibility for Python3. More exactly, it is change some division operations from ""/"" to ""//"" for indexing list.",2,11,[]
800,125182332,498,12777496,2017-06-12 16:54:50,2018-03-30 17:42:59,closed,Fixes an issue where isosurface fails on later versions of numpy. See Issue #490,Fixes an issue where isosurface fails on later versions of numpy. See Issue #490,2,1,[]
801,124561868,496,12777496,2017-06-08 03:42:55,2020-06-09 06:33:13,closed,draw connector lines between gradient and region with anti-aliasing,"render the connector lines with anti-aliasing. independent from chosen pyqtgraphs CONFIG_OPTIONS.

why?
-----
it looks much better! its only 2 lines - i dont see any reason why this option should be controllable with   CONFIG_OPTIONS['antialias']


without anti-aliasing:
![image](https://user-images.githubusercontent.com/350050/26911334-3231b090-4c3f-11e7-830e-1ab1ba140494.png)


with anti-aliasing:
![image](https://user-images.githubusercontent.com/350050/26911318-11a9051c-4c3f-11e7-863e-7d011b1ce7f4.png)

",3,2,[]
802,123328777,494,12777496,2017-05-31 17:39:46,2018-06-08 00:56:10,closed,Fixed stale data about children in Parameter.opts,See issue #493,1,1,[]
803,123150847,492,12777496,2017-05-30 21:45:49,2019-06-28 15:29:39,closed,Added ability to specify pen colors for LinearRegionItem,As requested in issue #462 ,2,1,[]
804,121387370,487,12777496,2017-05-18 22:01:58,2019-07-10 11:13:28,closed,debugged: RGB images cause exception if GradientEditorItem is not 'grey',"to reproduce error:
- load RGB image into imageView
- change gradient to anything, but 'grey'
--> you will see the error:

```
    argb, alpha = fn.makeARGB(image, lut=lut, levels=levels)
  File ""/home/karl/git/pyqtgraph_karl/pyqtgraph_karl/functions.py"", line 1110, in makeARGB
    imgData[..., i] = data[..., order[i]] 
ValueError: could not broadcast input array from shape (512,512,3) into shape (512,512)
```

no gradient can still be changed but no error is generated",1,1,[]
805,121056761,485,12777496,2017-05-17 13:26:02,2017-05-25 00:48:48,closed,Fixed incorrect height in VTickGroup.,"Tick heights are incorrect if they start at anything other than the bottom of the view.

Here is some test code:

```Python
from pyqtgraph.Qt import QtGui, QtCore
import numpy as np
import pyqtgraph as pg

app = QtGui.QApplication([])
win = pg.GraphicsWindow(title=""VTickGroup example"")
win.resize(1000,600)
win.setWindowTitle('pyqtgraph example: VTickGroup')
p1 = win.addPlot(title=""Basic plot with ticks"", y=np.random.normal(size=100))

for start_ix in range(0, 90, 10):
    xvals = range(start_ix, start_ix+10)
    yrange = [start_ix/100, (start_ix+10)/100]
    penColor = QtGui.QColor(*np.random.randint(0, 255+1, 3).tolist())
    new_tick_group = pg.VTickGroup(xvals=xvals, yrange=yrange, pen=penColor)
    p1.addItem(new_tick_group)

if __name__ == '__main__':
    import sys
    if sys.flags.interactive != 1 or not hasattr(QtCore, 'PYQT_VERSION'):
        pg.QtGui.QApplication.exec_()

```

Before the fix:
<img width=""999"" alt=""screen shot 2017-05-17 at 9 21 40 am"" src=""https://cloud.githubusercontent.com/assets/303797/26155930/ca986568-3ae2-11e7-9a39-75ab0d3edf3f.png"">

After the fix:
<img width=""999"" alt=""screen shot 2017-05-17 at 9 22 46 am"" src=""https://cloud.githubusercontent.com/assets/303797/26155946/d117387e-3ae2-11e7-8097-6024ddefc425.png"">
",2,1,[]
806,118464786,479,12777496,2017-05-02 00:14:44,2017-06-14 16:02:11,closed,Add basic type checking to parameters,"Check types before setting value for simple parameters.
Related: #454 ",1,1,[]
807,118412597,478,12777496,2017-05-01 18:12:43,2017-05-01 18:31:43,closed,Fix QImage memory leak with PySide + Python3,Minor modifications on #470 from @HashSplat.,1,2,[]
808,118400242,477,12777496,2017-05-01 16:48:34,2017-05-01 17:27:30,closed,Fix value stepping in intColor,"Fix handling of the `value` argument to `functions.intColor`.
Also remove an unused `**kwds` sinkhole.",1,1,[]
809,118399626,476,12777496,2017-05-01 16:43:52,2017-05-01 17:28:12,closed,Add option to set composition mode for scatterplotitem,,1,2,[]
810,118399236,475,12777496,2017-05-01 16:40:43,2017-05-01 17:24:08,closed,Fixed unicode error when exporting to SVG with non-ascii symbols,,1,1,[]
811,118392332,474,12777496,2017-05-01 15:47:04,2017-05-01 15:47:15,closed,Vanilla,update fork,0,6,[]
812,117013329,473,12777496,2017-04-21 15:42:48,2019-06-07 21:39:13,closed,Correct wrong function call in LayoutWidget.addLabel and LayoutWidget…,"….addLayout

Previously LayoutWidget.addLabel and LayoutWidget.addLayout called a function ""addItem"", that didn't exist. Corrected to call LayoutWidget.addWidget.

This fixes #242",1,1,[]
813,115335738,470,12777496,2017-04-11 14:35:27,2017-05-01 18:31:52,closed,Fixed PySide image memory leak,PySide has a known memory leak issue when using QImage. It does not handle the reference counter correctly. I manually adjusted the reference counter to the data as suggested in a bug report by Neil Whelchel. This bug report can be found at https://bugreports.qt.io/browse/PYSIDE-140,3,1,[]
814,115058691,468,12777496,2017-04-10 09:25:48,2020-06-01 18:23:19,closed,Patch/window handling,"This PR reduces number of references to PyQtGraph windows implicitly hold by the package. Also removes some memory leak in `ImageView.close()` not taking care of `self.imageItem`.

This PR is related to https://github.com/pyqtgraph/pyqtgraph/issues/466",3,5,[]
815,113665803,467,12777496,2017-03-31 14:46:24,2020-06-27 19:50:44,closed,derivativePlots_cleanup,"This is a cleaned up version of the derivative and phase map transforms that Paul wrote. The code isn't changed, but I cherry-picked his relevant commit into a new branch for easier merging. ",6,5,[]
816,113071322,465,12777496,2017-03-28 21:28:27,2017-11-17 16:03:56,closed,Fix np image exporter error,Fixing the numpy error for non-integer dimensions when creating an empty array in the ImageExporter Class,3,3,[]
817,109713663,459,12777496,2017-03-08 15:06:48,2019-07-10 09:01:28,closed,Fix color alpha limits in LinearRegionItem hover.,"Clip hover color alpha to limits (0, 255) for LinearRegionItem, to
remove QT warnings about calling the function QColor::setAlpha with a
invalid value.",2,1,[]
818,109438883,458,12777496,2017-03-07 09:35:58,2017-05-02 00:30:51,closed,fix image export bug,fixes #454,2,1,[]
819,109156868,457,12777496,2017-03-05 17:27:56,2017-03-07 09:30:08,closed,fix image export,"cast self.params['width'], self.params['height'] to int
see #454",1,1,[]
820,109100595,455,12777496,2017-03-04 08:57:31,2019-06-04 20:46:04,closed,Use floor division,needed to avoid float as index in array slicing.,3,1,[]
821,106903327,447,12777496,2017-02-19 14:40:34,2019-07-10 11:30:18,closed,ScatterPlotWidget deprecated boolean index now int,"Numpy doesn't like boolean indexes for ndarrays
```
IndexError: in the future, 0-d boolean arrays will be interpreted as a valid boolean index
```",2,1,[]
822,106811058,446,12777496,2017-02-17 20:59:24,2018-11-09 15:08:40,closed,Included matplotlib 2.0 colormaps,"Included the four Perceptually Uniform Sequential colormaps from the matplotlib 2.0 release.

- viridis
- inferno
- plasma
- magma

![colormaps_reference_00](https://cloud.githubusercontent.com/assets/25739586/23082998/1217eb88-f55c-11e6-8c5e-43342054e93e.png)
",2,1,[]
823,106508227,445,12777496,2017-02-16 11:43:55,2019-06-10 15:53:07,closed,add warnings for remote exceptions,"For remote objects that generate an exception the exception is printed to screen. This is inconvenient of the software using the remote object wants to generate an exception (ipython does this to test some capabilities of objects). This PR solves this issue by replacing the `print` statement with a `warning.warn` This solves #442 by allowing the user to filter output on a `RemoteExceptionWarning`. 

An alternative to warnings would be to use the Python logging framework, or add an option to the `pyqtgraph` to not print exceptions at all.
",3,1,[]
824,106392684,444,12777496,2017-02-15 20:29:27,2020-06-01 00:39:51,closed,Fix duplicate menus in GradientEditorItem,Add call to ev.accept in Tivk.mouseClickEvent to prevent parent menu from opening on a right click of a Tick.,3,3,[]
825,106365929,443,12777496,2017-02-15 18:01:34,2019-06-27 17:18:55,closed,Add bugfix for exportClicked() for PyQt5,"The Export functionality from the context menu was not working properly with PyQt5 if the User clicked the cancel button once the FileDialog was opened.

The is a result of an API change in PyQt5 where the return type of getSaveFileName (along with many other file dialog functions) is now a tuple. The first item in the tuple is the string of the file name which was the item returned in PyQt4. 

If the Cancel button is clicked, previously this situation was addressed by checking the fileName for an empty string.  Now an additional check is made to see if the return type is tuple. If so, then the first item of the tuple is checked for an empty string which indicates the Cancel scenario.

This will change nothing if PyQt4 is being used and will fix the Cancel scenario for PyQt5.

Tested on Mac OS X.11.6 and Ubuntu 16.0.4 with PyQt 5.6",2,1,[]
826,105606107,441,12777496,2017-02-10 10:53:52,2019-05-24 23:00:18,closed,flowchart: python3: replaced calls to unicode function with asUnicode,necessary for running flowcharts on python3,4,4,[]
827,104746039,436,12777496,2017-02-06 07:13:43,2017-02-06 07:29:42,closed,Add unit test covering plotdataitem fft,,0,1,[]
828,104718983,435,12777496,2017-02-05 22:32:12,2019-05-24 23:00:06,closed,fix flowcharts saveState in python3.5,"OrderedDict values can not be concatenated with '+' in python 3.5, which results in failure when trying to save the flowchart. Here is a trivial fix (sorry about the 3 commit messages, my editor automatically removed whitespace in my first commit). ",3,3,[]
829,101870399,429,12777496,2017-01-17 14:09:50,2017-02-03 10:25:06,closed,fix fft premature slicing away of 0 freq bin,"#179 already slices away the first element when doing X log scale.
the old implementation slices away the first frequency value but still computes the freq coord as starting from 0.

also fixes:
- use rfft for better efficiency
- use rfftfreq to compute coords correctly
  - works for both odd/even lengths
- python3: integer division needed for numpy indexing",2,3,[]
830,101747976,428,12777496,2017-01-16 19:42:33,2018-04-25 19:55:53,closed,DataTreeWidget updates,"* Use TableWidget to represent arrays rather than plain text
* Improved support for displaying tracebacks
* Add DiffTreeWidget, which highlights differences between two DataTreeWidgets",0,6,[]
831,100557874,425,12777496,2017-01-07 04:25:32,2017-01-15 06:17:35,closed,Removed unnecessary 'curve1' from 'global',"It works without ""curve1"" being global, so I figured we should take it out to avoid confusing newcomers (like me).

(Note: This is the first time I've contributed to someone else's githib repo, so let me know if minor changes like this are silly.)",2,1,[]
832,100192855,424,12777496,2017-01-04 21:35:37,2017-01-14 19:27:20,closed,Fix crash when running pyqtgraph with python -OO,Running pyqtgraph with python -OO gives a crash since version 0.10.0,2,1,[]
833,99937889,423,12777496,2017-01-03 10:59:17,2019-05-24 22:59:38,closed,python3 fixes for flowchart saving,This fixes a crash on pressing the save button in the flowchart panel with python 3.,4,2,[]
834,98214255,419,12777496,2016-12-15 19:25:32,2019-07-11 12:27:44,closed,Adding color support for GLGridItem,"GLGridItem init has attribute color which is ignored. Currently the grid is hardcoded to draw in white. This minor modification takes into consideration a 4-element tuple (r,g,b,a) such as glColor passed by the user at the method's init to draw the grid at the desired color. The Standard grid color is still white.",2,5,['openGL']
835,98083820,417,12777496,2016-12-15 04:04:40,2019-05-24 04:52:51,closed,In PlotDataItem.clear() use corresponding curve.clear() and scatter.clear(),"Otherwise when stepMode is True curve.setData([]) causes exception:
""len(X) must be len(Y)+1 ...""",4,2,[]
836,98005631,416,12777496,2016-12-14 18:10:34,2016-12-14 18:35:24,closed,Add print wrapper to work around interrupted system calls on travis,"Printing on travis occasionally fail with `IOError: Interrupted system call`. Usually just restarting the job on travis fixes the problem, but this is a pain.

Example: https://travis-ci.org/pyqtgraph/pyqtgraph/jobs/183496470#L1066

This PR is an attempt to work around the issue..",3,3,[]
837,97996973,415,12777496,2016-12-14 17:21:01,2017-01-14 19:08:39,closed,Fix getarrayregion,"Adds support for order=0 (nearest-neighbor) interpolation in ROI.getArrayRegion.
Also adds unit tests and fixes a race condition that causes tests to fail sporadically.",1,6,[]
838,97691924,414,12777496,2016-12-13 06:10:12,2017-01-14 19:09:02,closed,Fix canvas classes for PyQt5 and PySide,"Brings ui templates up to date for pyqtgraph.canvas. 
This should fix #405.",0,1,[]
839,97691528,413,12777496,2016-12-13 06:04:53,2016-12-14 18:49:36,closed,Fixes to --publish option in pg-release script,This provides the final version of the script used to build and publish the 0.10.0 packages.,1,1,[]
840,97690991,412,12777496,2016-12-13 05:58:03,2018-04-25 18:23:14,closed,Scatterplot bugfixes,"- Corrects a long-standing issue with exporting ScatterPlotItem to image when the resolution does not match that of the original graphics view.
- Fixes scatter plot symbols being incorrectly culled when they come close to the edge of the view box.

fixes #16, fixes #105",1,3,[]
841,97154776,411,12777496,2016-12-08 16:29:02,2018-03-12 17:53:19,closed,Hacky log in histogram,"Add a log scale on histogram

! This is more a request for feature with code than a PR. !
",2,13,[]
842,96868550,410,12777496,2016-12-07 06:58:30,2017-01-14 19:09:52,closed,Spinbox formatting,"Multiple bugfixes for SpinBox:
     - fixed bug with exponents disappearing after edit
     - fixed parsing of values with junk after suffix
     - fixed red border
     - reverted default decimals to 6
     - make suffix editable (but show red border if it's wrong)
     - revert invalid text on focus lost
     - siPrefix without suffix is no longer allowed
     - fixed parametree sending invalid options to spinbox
     - fix spinbox wrapping (merged #159 from @lidstrom83)
     - fixed parametertree ignoring spinbox bounds (merged #329 from @lidstrom83)
     - fixed spinbox height too small for font size

..and a few enhancements:
     - select only numerical portion of text on focus-in
     - let user set arbitrary format string

fixes #340, closes #407, fixes #210, fixes #263, fixes #256",2,15,[]
843,95512401,408,12777496,2016-11-28 14:52:54,2016-12-14 19:13:31,closed,Fix `cleanup` when the running qt application is not a QApplication,"Fix a segmentation fault in atexit registered cleanup function (in QGraphicsScene constructor) when the running qt application is not a fully fledged QApplication but a QCoreApplication (or possibly QGuiApplication on PyQt5).
",2,1,[]
844,95411005,407,12777496,2016-11-27 18:17:54,2017-01-14 19:09:51,closed,DEBUGGED: Spinbox.setOpts,"to eval. this PR:
just modify parametertree example as follows:

before
'if __name__ == '__main__':'
add line:
'p.param('Basic parameter data types', 'Integer').show()'

In result the example will crush, because if a parameter is Spinbox-based all options are directly forwarded.
however, SpinBox.setOpts doesnt have k=='visible'
and therefore raises an error


",0,1,[]
845,95171621,406,12777496,2016-11-24 12:38:52,2019-09-27 20:31:47,closed,makeRGBA/ImageItem: Applying alpha mask on numpy.nan data values,"Alpha channel is pulled on all `numpy.nan` values encountered in `makeARGB()`.

For a cleaner slate `ImageItem` could have a switch turning this behaviour on or off. E.g.`showNans`.",9,2,[]
846,94478902,403,12777496,2016-11-19 11:12:16,2020-06-24 22:57:00,closed,Axis fixes,"Modification of PR #235 proposed by JenSte taking into account the modification suggested in the discussion of PR #235.
",1,3,[]
847,94366307,402,12777496,2016-11-18 13:59:47,2020-06-23 03:58:05,closed,added method clear() to GLViewWidget,It can be very useful to be able to clear the scene in one call. It would also be consistent with clear() methods in other widgets. The base class does not have clear() method so there is not danger of changing existing behavior due to overriding.,2,5,['openGL']
848,94043553,401,12777496,2016-11-16 20:28:49,2019-06-25 15:04:16,closed,Join the fileforwarder threads in RemoteGraphicsView,Deals with the occasional exception thrown when RemoteGraphicsView closes but these threads aren't stopped.,2,1,[]
849,93443710,400,12777496,2016-11-12 16:24:06,2020-06-23 05:48:55,closed,ImageView.Timeline better visibility and fixed,"That's the state so far:
![orig](https://cloud.githubusercontent.com/assets/350050/20239244/ffc0a6b4-a8f3-11e6-909e-eaeffbec87fe.PNG)
Good enough - but why should it be possible to move the timeline area up:?
![orig_timeline_moved](https://cloud.githubusercontent.com/assets/350050/20239247/261fc088-a8f4-11e6-8971-1aa3970708d5.PNG)
This can be nerving and doesn't help at all. This pull request fixes its position and changes its look slightly:
![mod_1](https://cloud.githubusercontent.com/assets/350050/20239250/42b4ed54-a8f4-11e6-8c29-94ccffc84f97.PNG)

Another issue is, that the timeline handle is barely visible when you chose a white background:
![orig_white](https://cloud.githubusercontent.com/assets/350050/20239251/52e307ce-a8f4-11e6-8bb4-92d103d42458.PNG)
I made it visible:
![mod_2](https://cloud.githubusercontent.com/assets/350050/20239253/58d7e6a4-a8f4-11e6-80af-9460a992bc3a.PNG)



",1,5,[]
850,93206071,399,12777496,2016-11-10 18:36:12,2021-06-25 20:39:05,closed,NEW parameter 'empty' and 'menu' + TextParameterItem debugged,"![image](https://cloud.githubusercontent.com/assets/350050/20189243/3876b72c-a774-11e6-9be2-cf9ba610eb2b.png)

the update also gived the rudimentray option to add a QMenu into the parametertree
def fn(menu):
   menu.clear()
   menu.addction('.....)
   ...

m = param.addChild('type':'menu')
m.aboutToShow.connect(fn)",3,3,['parameterTree']
851,93199837,398,12777496,2016-11-10 17:56:26,2021-06-20 01:42:19,closed,NEW sliderWidget,"![image](https://cloud.githubusercontent.com/assets/350050/20188092/fc580386-a76e-11e6-99e2-d42d8b2c0101.png)
![image](https://cloud.githubusercontent.com/assets/350050/20188544/06d8a9a8-a771-11e6-87cb-b8946466c223.png)

",5,4,['parameterTree']
852,93199034,397,12777496,2016-11-10 17:51:31,2019-08-17 16:56:14,closed,NEW method setColor,color in glGridItem was fixed before. Now it can be changed,1,1,[]
853,93198081,396,12777496,2016-11-10 17:45:44,2021-06-11 02:07:55,closed,NEW features in imageView,"NEW  method setHistogramLabel
![image](https://cloud.githubusercontent.com/assets/350050/20187570/b1961dd0-a76c-11e6-930d-6bb9cf5fde16.png)

NEW method setHistogramPrintView
![image](https://cloud.githubusercontent.com/assets/350050/20187595/c25c45ea-a76c-11e6-80d2-c42c1565f68f.png)

NEW option 'discreteTimeSteps'
to rather jump from 0->1->2 than to slide smoothly when changing time (if you have 3 images, people find it hard to understand why there should be time=2.5)

NEW opts{'autoLevels', 'autoRange'}
look in opts for values for 'autoLevels', 'autoRange' if not given in setImage(**kwargs)

DEBUGGED method play, keypressevent, timeIndex
allow to actually setup framerate

NEW property nframes",2,5,[]
854,93194382,395,12777496,2016-11-10 17:24:19,2020-06-13 05:40:21,closed,NEW options for LegendItem,"* align items in columns
* show/hide frame
* access labelItem from outside (e.g. to modify label text)",4,5,[]
855,93192310,394,12777496,2016-11-10 17:12:24,2021-04-20 23:07:38,closed,NEW features for HistgramLUTItem,"* option to place gradient left or right
* link histograms to others
* speed up through only paint histogram if visible
 
",3,1,[]
856,93190464,393,12777496,2016-11-10 17:02:14,2020-06-01 04:03:28,closed,NEW show/hide gradient ticks NEW link gradientEditor to others,"
 
",2,1,[]
857,93187496,392,12777496,2016-11-10 16:47:48,2020-06-01 18:24:19,closed,new method 'getAxpectRatio' with code taken from 'setAspectLocked',"
 
",1,2,[]
858,93185555,391,12777496,2016-11-10 16:37:53,2020-06-01 18:12:52,closed,changed structure to redefine axis via plotitem.setAxes,"this allows to redefine the plotItems axes after creation.
 
",5,5,[]
859,93176290,390,12777496,2016-11-10 15:51:40,2020-06-01 18:05:40,closed,moved some functionality from method 'export' to new method,'getSupportedFormats' making it acessible from outside,1,3,[]
860,93130523,389,12777496,2016-11-10 11:11:22,2020-06-09 06:22:05,closed,"Revert ""ignore wheel events in GraphicsView if mouse disabled""","This reverts commit f49c179275e86786af70b38b8c5085e38d4e6cce.

On Qt 5.7 ignoring the initial `wheelEvent` when `phase() ==
Qt.ScrollBegin` suppresses all intermediate events (`Qt.ScrollUpdate`)
from being delivered to the view. This makes ViewBox zooming
unresponsive.",4,1,[]
861,92628837,386,12777496,2016-11-07 17:36:38,2019-06-26 17:47:02,closed,Suppress VisibleDeprecationWarning when using numpy 1.11.1,"np.ceil returns a float
however, slicing with a float step results in the following warning:

VisibleDeprecationWarning: using a non-integer number instead of an integer will result in an error in the future",1,1,[]
862,92485544,385,12777496,2016-11-06 12:19:50,2020-06-10 05:04:30,closed,Implement headWidth parameter for arrows,"Although the documentation used to say that specifying tipAngle would
override headWidth, headWidth was never used. The new behaviour is that
tipAngle will be used, with a default value of 25, unless headWidth is
specified.

I also adapted the arrow example to give the 3rd arrow a wider head to clearly 
show that the default tipAngle of 25 was being overridden.",4,2,[]
863,91320699,383,12777496,2016-10-28 04:28:39,2016-11-05 06:01:47,closed,Release 0.10.0,"All updates in preparation for 0.10.0 release.

Major changes are to setup.py and support tools, especially the addition of a script for automating release package builds and publishing. 

There are also several fixes for broken examples and documentation thrown in.
",7,29,[]
864,89676505,382,12777496,2016-10-17 18:27:46,2016-11-24 17:02:05,closed,Background color of legend,"It was #379 ""Background color of legend"" but I deleted the forked repository after created pull request...
I couldn't edit these files. So I fork and make pull request again. sorry.
",1,3,[]
865,89536049,381,12777496,2016-10-16 19:20:46,2020-06-13 04:32:01,closed,Fix bounds when ROI snaps to pixel edge.,"When ROIs snap to pixel boundaries, the bounds calculation in getArraySlice includes an extra row/column. If we take the ceiling of intBounds rather than truncate with int and then add 1, getArraySlice returns the correct bounds.
",2,1,[]
866,88196121,379,12777496,2016-10-06 04:10:21,2016-10-17 18:28:57,closed,Background color of legend.,"I tried to solve the problem in the [Developer Forum](https://groups.google.com/forum/?fromgroups#!searchin/pyqtgraph/legend$20color%7Csort:relevance/pyqtgraph/m6vzUUgc-1g/vcb1t-dtqUkJ).
I added new keyword argument ""bkgnd"" to the ""PlotItem.addLegend"" function or that related functions.

Usage:
- self.graph01.addLegend(bkgnd=(255,0,0,100))
  ![20161006-02](https://cloud.githubusercontent.com/assets/22639280/19139676/93aa718e-8bc1-11e6-84c9-134a0601fbfe.png)
- self.graph01.addLegend(bkgnd=(0,255,0,100))
  ![20161006-03](https://cloud.githubusercontent.com/assets/22639280/19139687/ab52d182-8bc1-11e6-899f-7d273edb7c08.png)
- self.graph01.addLegend(bkgnd=(0,0,255,100))
  ![20161006-04](https://cloud.githubusercontent.com/assets/22639280/19139699/c5951474-8bc1-11e6-95a5-8664e89c2446.png)
- self.graph01.addLegend(bkgnd=(255,0,255,100))
  ![20161006-05 255 0 255 100](https://cloud.githubusercontent.com/assets/22639280/19139727/e8e721ba-8bc1-11e6-829c-9fdd53d48345.png)
- self.graph01.addLegend(bkgnd=(255,255,0,100))
  ![20161006-05 255 255 0 100](https://cloud.githubusercontent.com/assets/22639280/19139752/3099a3e8-8bc2-11e6-8486-baa8c106cb17.png)
- self.graph01.addLegend(bkgnd=(0,255,255,100))
  ![20161006-05 0 255 255 100](https://cloud.githubusercontent.com/assets/22639280/19139754/3ba49310-8bc2-11e6-9a29-050eeac98f5f.png)
- self.graph01.addLegend(bkgnd=(0,0,0,0))
  ![20161006-01](https://cloud.githubusercontent.com/assets/22639280/19139756/40a37d9a-8bc2-11e6-9c7c-d26c3ebbdc8d.png)

``` python
from PySide import QtCore, QtGui
import pyqtgraph as pg

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName(""MainWindow"")
        self.centralwidget = QtGui.QWidget(MainWindow)
        self.centralwidget.setObjectName(""centralwidget"")
        MainWindow.setCentralWidget(self.centralwidget)
        MainWindow.resize(200, 200)
        self.verticalLayout = QtGui.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName(""verticalLayout"")

        self.graph01 = pg.PlotWidget(self.centralwidget)
        self.graph01.setObjectName(""graph01"")
        self.verticalLayout.addWidget(self.graph01)
        self.graph01.addLegend(bkgnd=(0,0,0,0))

        self.psbtn = QtGui.QPushButton(self.centralwidget)
        self.psbtn.setObjectName(""psbtn"")
        self.psbtn.setText(""Plot"")
        self.verticalLayout.addWidget(self.psbtn)

        QtCore.QObject.connect(self.psbtn, QtCore.SIGNAL(""clicked()""), self.plot)


    def plot(self):
        frq = 10.0
        duration = 1.0
        samples = 1001
        x = np.linspace(0, duration, samples)
        theta = np.linspace(0, 2 * np.pi * frq, samples)
        y = np.sin(theta)
        self.graph01.plot(x, y, name=""Test"")


import sys
import numpy as np

pg.setConfigOption('foreground', 'k')
pg.setConfigOption('background', 'w')


class ControlMainWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(ControlMainWindow, self).__init__(parent)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

if __name__ == ""__main__"":
    app = QtGui.QApplication(sys.argv)
    mySW = ControlMainWindow()
    mySW.show()
    sys.exit(app.exec_())
```
",4,4,[]
867,87218059,378,12777496,2016-09-28 23:02:29,2019-05-24 04:54:44,closed,Fix issue with Python3 and changes in how it handles zip.,"See https://groups.google.com/forum/?fromgroups#!searchin/pyqtgraph/Charles%7Csort:relevance/pyqtgraph/_AD2eQxKGes/O3c_vv1PFwAJ for details. This one line pull request convert the zip output to a list output to address a problem with pyqtgraph with python3. 
",3,1,[]
868,86622989,376,12777496,2016-09-24 16:34:54,2018-05-25 00:14:22,closed,modifications to support pyside2,"I followed this guide - [Compiling PySide2 from source · Fredrik Averpil](https://fredrikaverpil.github.io/2016/08/17/compiling-pyside2/) - to build pyside2 on Windows then tested the modifications, most of the examples can be executed.
",5,3,[]
869,84745799,374,12777496,2016-09-10 05:41:09,2016-09-10 05:46:32,closed,Use console's namespace as both local and global context for exec/eval.,"This allows functions defined in the console to access global variables.
Also expose the console itself via special **console** variable.
",1,1,[]
870,83409956,373,12777496,2016-08-31 08:36:34,2016-11-24 09:55:37,closed,ImageItem.getHistogram handling NaNs,"`ImageItem.getHistogram` now save with `numpy.nan` datasets.

Before `ValueError` was risen

``` python
  File ""/usr/local/lib/python2.7/dist-packages/pyqtgraph/graphicsItems/ImageItem.py"", line 402, in getHistogram
    hist = np.histogram(stepData, **kwds)
  File ""/usr/local/lib/python2.7/dist-packages/numpy/lib/function_base.py"", line 505, in histogram
    'range parameter must be finite.')
ValueError: range parameter must be finite.
```
",2,1,[]
871,83002512,370,12777496,2016-08-28 00:40:22,2016-09-08 06:18:51,closed,Image alignment,"Adds a global configuration option allowing image data to be interpreted in row-major format (by default, we assume col-major, which requires most users to transpose image data before displaying).

fixes #315 
",4,16,[]
872,83000951,369,12777496,2016-08-27 23:01:43,2016-08-28 00:26:43,closed,Imageitem tests,"Adds unit tests for ImageItem.
",1,4,[]
873,81238524,368,12777496,2016-08-14 09:12:30,2019-09-14 06:22:53,closed,Fix canceling GraphicsScene context menu.,"When the `GraphicsItem` context menu is cancelled (by left-clicking outside the menu), an `IndexError` is being raised. The `cev` event list is empty. This simple pull request fixes this.

Catching this exception will become more important in Qt5 because [in PyQt 5.5 Qt exceptions are no longer swallowed](http://pyqt.sourceforge.net/Docs/PyQt5/incompatibilities.html#pyqt-v5-5).

Steps to reproduce:
1.     Start the `ImageItem.py` example.
2.     Right click on the image to get the context menu.
3.     Left click outside the menu to cancel it (i.e. close the menu without selecting an option).

The following exception occurs:

```
    Traceback (most recent call last):
      File ""/Users/kenter/prog/py/pyqtgraph/pyqtgraph/GraphicsScene/GraphicsScene.py"", line 200, in mouseReleaseEvent
        if self.sendClickEvent(cev[0]):
    IndexError: list index out of range
```
",8,1,[]
874,78689380,361,12777496,2016-07-25 14:20:11,2017-01-20 12:11:19,closed,Use pyqt5 canvas templates when needed.,,2,1,[]
875,78238211,360,12777496,2016-07-20 23:49:27,2019-11-21 06:17:19,closed,Allow MetaArray.__array__ to accept an optional dtype arg,"Fixes #359
",2,1,[]
876,76840111,357,12777496,2016-07-09 07:15:27,2019-11-12 17:37:23,closed,Python 3 fixes,"This fixes various issues on Python 3:
- Broken multiprocessing/remote examples due to `iteritems` calls.
- Drop `sortList` compat function; key-based sorting is available on all supported Python versions, and is simpler.
- Use a context manager for file I/O in as many places as possible; could cause a `ResourceWarning` on Python 3, though it's not enabled by default.
- Fix some encoding issues with `MetaArray`. I'm not sure why the tests are hidden away in the file and not run on Travis, but they would have pointed out this problem.
",2,7,[]
877,76835077,356,12777496,2016-07-09 02:32:05,2019-09-13 05:36:56,closed,Fix some NumPy warnings,"This fixes several of the simpler NumPy warnings I found when running the examples. Either indexing with a non-integer or doing things that trigger future deprecation warnings.
",6,3,[]
878,71953423,349,12777496,2016-05-31 03:15:37,2016-08-27 22:59:53,closed,Roi tests,"Adds unit tests and several bugfixes for ROI and subclasses.
",5,15,[]
879,71849812,348,12777496,2016-05-30 03:49:31,2019-06-27 21:19:22,closed,Update MatplotlibWidget.py,"NavigationToolbar2QTAgg doesn't exist in matplotlib >= 1.4.0 anymore, and has been replaced with import NavigationToolbar2QT. This is detailed [here](http://matplotlib.org/api/api_changes.html). 
In this pull request, it is proposed that if there is an error importing NavigationToolbar2QTAgg, then NavigationToolbar2QT is imported instead. This is both backwards and forwards compatible.
",3,1,[]
880,70953500,345,12777496,2016-05-21 16:20:53,2020-06-09 04:40:29,closed,performance improvement of GLImageItem,"The paint method didn't clear the _needUpdate flag, resulting in redundant re-uploads of textures at each redraw. This commit clears the flag, improving rendering performance significantly.
(solution to this issue: https://github.com/pyqtgraph/pyqtgraph/issues/344 )
",2,1,['openGL']
881,70904649,343,12777496,2016-05-20 19:21:29,2020-06-09 04:38:16,closed,PlotItem.addItem checks item's existence,"It should avoid adding an item twice.
",4,1,[]
882,70365149,340,12777496,2016-05-17 14:19:18,2017-01-14 19:09:51,closed,Fix error in siEval for exponential notation with plus sign,"if number has  a plus sign in exponent, the conversion failed and e.g.
2.0e+03 returned 2.0 instead of 2000 in a SpinBox
",2,1,[]
883,70096093,338,12777496,2016-05-14 16:06:27,2018-03-30 02:08:44,closed,Implement GLGridItem color.,"Fixes #283 
",4,1,[]
884,69133906,336,12777496,2016-05-06 10:44:24,2020-06-13 05:52:47,closed,Fix incorrect tick text boundaries calculation on axis by setting the font,"In AxisItem.generateDrawSpecs painter should have the same font as tickFont, otherwise it calculates tick text boundaries incorreclty. Without this fix we have tickLabels overflowing each other and everything else on the screen when we change their font. This quick fix solved the issue for us.
",1,1,[]
885,69131650,335,12777496,2016-05-06 10:22:52,2019-06-06 20:44:12,closed,fix work of hasattr(PlotWidget),"Change NameError to AttributeError in PlotWidgte.**getattr** to fix hasattr(PlotWidget) calling.
",2,1,[]
886,68973363,334,12777496,2016-05-05 07:08:00,2021-01-29 06:02:59,closed,Added left-click and right-clicked signals ,"Adding left-clicked and right-clicked signal to InfiniteLine Class
",10,9,[]
887,68896445,333,12777496,2016-05-04 16:59:39,2019-06-27 21:44:56,closed,fix legendItem drag,"Fix https://github.com/pyqtgraph/pyqtgraph/issues/332
",5,1,[]
888,68800852,331,12777496,2016-05-04 01:38:27,2020-06-25 04:35:06,closed,Allow Parameter to have no default value.,"Currently the default is always set to None, while it's clear from the rest of the code that a missing 'default' key in Parameter.opts is meant to represent the case of a missing default.

Edit: To be more clear, the default is set to None if neither 'value' nor 'default' are explicitly set.
",2,1,['parameterTree']
889,68792004,330,12777496,2016-05-03 23:32:42,2020-06-27 22:12:04,closed,Set parameter's default button autoDefault value to False,"When a parameter tree is included in a dialog, currently when the user presses Enter, the first parameter's default button is clicked.  This seems unexpected.
",2,1,['parameterTree']
890,68752966,329,12777496,2016-05-03 18:33:02,2017-01-14 19:09:57,closed,Fix bug where int and float parameter limits are not always set,"Here's a script to demonstrate:

```
from pyqtgraph.Qt import QtGui
from pyqtgraph.parametertree import ParameterTree, Parameter

app = QtGui.QApplication([])
tree = ParameterTree()
param = Parameter.create(name='param', type='int', limits=[0, 1])
tree.setParameters(param)
tree.show()
app.exec_()
```

Note that the bug is non-deterministic; while SpinBox.setOpts loops through the defs dict, sometimes the default min and max keys are hit before the bounds key, in which case the bug won't be triggered.
",1,1,[]
891,68747451,328,12777496,2016-05-03 17:56:09,2019-06-28 13:26:44,closed,"Fix Parameter.show for float, int, and group types","Fixes issue #263.  Here's a script for demonstrating the bugs/fixes:

```
from pyqtgraph.Qt import QtGui
from pyqtgraph.parametertree import ParameterTree, Parameter

app = QtGui.QApplication([])
tree = ParameterTree()
param = Parameter.create(name='param', type='group', children=[
    {'name': 'int', 'type': 'int'},
    {'name': 'float', 'type': 'float'},
    {'name': 'group', 'type': 'group'}
])
tree.setParameters(param)
tree.show()
for child in param.children():
    child.show(False)

app.exec_()
```
",2,2,[]
892,68736535,327,12777496,2016-05-03 16:41:11,2016-05-03 17:11:28,closed,Made InfLineLabel.setFormat actually set the format string.,,2,1,[]
893,68675832,326,12777496,2016-05-03 08:59:08,2016-05-03 15:06:29,closed,"Added  ""self.moving = False"" in  InfLineLabel class","Added  ""self.moving = False"" in  InfLineLabel class to solve the error message when clicking on the label.

error message:

 |==============================>>
    |    File ""D:/VenableInstruments/w_s/venable6/main.py"", line 3, in <module>
    |      main()
    |    File ""D:\VenableInstruments\w_s\venable6\Venable\venable6\controller.py"", line 338, in main
    |      app.exec_()  # and execute the app
    |    File ""D:\Python\Python34\lib\site-packages\pyqtgraph\widgets\GraphicsView.py"", line 354, in mouseReleaseEvent
    |      QtGui.QGraphicsView.mouseReleaseEvent(self, ev)
    |    File ""D:\Python\Python34\lib\site-packages\pyqtgraph\GraphicsScene\GraphicsScene.py"", line 200, in mouseReleaseEvent
    |      if self.sendClickEvent(cev[0]):
    |    File ""D:\Python\Python34\lib\site-packages\pyqtgraph\GraphicsScene\GraphicsScene.py"", line 348, in sendClickEvent
    |      debug.printExc(""Error sending click event:"")
    |    ---- exception caught ---->
    |    File ""D:\Python\Python34\lib\site-packages\pyqtgraph\GraphicsScene\GraphicsScene.py"", line 346, in sendClickEvent
    |      item.mouseClickEvent(ev)
    |    File ""D:\Python\Python34\lib\site-packages\pyqtgraph\graphicsItems\InfiniteLine.py"", line 449, in mouseClickEvent
    |      if self.moving and ev.button() == QtCore.Qt.RightButton:
    |  AttributeError: 'InfLineLabel' object has no attribute 'moving'
    |==============================<<
",2,1,[]
894,67684168,321,12777496,2016-04-25 08:49:36,2019-06-27 05:33:22,closed,Fixing the border rect overlapping for ViewBox and GraphicsLayout,"This PR fixes issue #316 
Please review this PR.
",9,3,[]
895,67666554,320,12777496,2016-04-25 05:08:05,2020-06-26 16:57:18,closed,Addition of the _name attribute to ROI,"Small PR to add a _name attribute as well as a getter and a setter.

I'm developing a widget that list all the elements that are present in a plotItem and I'm taking advantage of the _name attribute to feed this widget with the items name. I'll propose it as PR when it will be ready... Currently, only PlotDataItem and InfiniteLine objects have this feature.
",8,1,['ROI']
896,67599230,319,12777496,2016-04-23 07:22:24,2016-08-29 11:18:05,closed,Correction of a bug in the removeHandle method of PolyLineROI,"I had some troubles trying to restore the state of PolyLineROI objects using the setState method. This simple modification fixed the problem. 

Here is the error message I got (if it helps):

  `File ""/home/lesaux/Documents/Belenos/belenos/plottingwidgets/ImageWidgetFull.py"", line 305, in addPolyLineROI`
    `polyLine.setState(params)`

  `File ""/home/lesaux/Documents/Belenos/belenos/pyqtgraph/graphicsItems/ROI.py"", line 1854, in setState`
    `self.clearPoints()`

  `File ""/home/lesaux/Documents/Belenos/belenos/pyqtgraph/graphicsItems/ROI.py"", line 1844, in clearPoints`
    `self.removeHandle(self.handles[0]['item'])`

  `File ""/home/lesaux/Documents/Belenos/belenos/pyqtgraph/graphicsItems/ROI.py"", line 1907, in removeHandle`
    `handles = [h['item'] for h in segments[1].handles]`
`IndexError: list index out of range`
",8,2,[]
897,67405729,318,12777496,2016-04-21 19:05:21,2016-04-24 14:22:15,closed,[WIP] Porting to C++ with Python wrapper using SIP,"This PR is for introducing the (work in progress) porting of pyqtgraph to C++ and a SIP Python wrapper. Since Python is sometime limiting the performance of the visualization, my purpose is to translate the most part of the library to Qt C++. Actually only a limited set of classes have been ported:
- `Point`
- `GraphicsItem`
- `GraphicsObject`
- `GraphicsWidget`
- `ViewBox` (not 100%)
- `UIGraphicsItem`
- `ItemGroup`
- `ChildGroup`
- `HoverEvent`
- `MouseClickEvent`
- `MouseDragEvent`

There is a lot of work to be done before completing the porting only of the GraphicsView framework. The code is not 100% stable and not all examples are working.

Actually I'm working in my spare time to document the C++ code and then I will continue to porting the rest of the graphics items.

The actual performance are not better than the original Python code, but before investigating the reason, I need to port other computing intensive function and classes.

I hope you find my work interesting, but I think that this is a complicated PR that could break the most part of the library. Maybe it can be considered an initial working on the version 2.0 of the pyqtgraph library.

Thank you.
",8,169,[]
898,67215089,317,12777496,2016-04-20 16:10:01,2020-06-14 04:49:34,closed,addition of a saveState and setState for LineSegmentROI,"Addition of a saveState and setState for LineSegmentROI. LineSegmentROI and PolyLineROI now have the same behaviour regarding thet state saving and restoring.
",6,3,[]
899,66498715,313,12777496,2016-04-14 14:56:53,2021-04-11 05:49:45,closed,add a CursorItem class,"This pull request aims at providing a first implementation of a CursorItem, i.e. a cursor that can be dragged to a specific location. For the moment, the current implementation provides the following features : 
- convenience methods for customizing the look of the cursor
- a label attached to the object indicating its current location in the viewbox

A non neglectible part of the code comes from the Handle class (available in the ROI file) because some features where already available in this class. I just extended them. I think it should be possible to rewrite the Handle class taking this new class into account.

The idea of this class is to provide a basic item that can be use for more advanced widgets, such as  a crossHair item for example (already written, but waiting for the feedback on this item before proposing it as a pull request).

Some interesting new features can also be proposed in the future (if this class is judged useful), such as an equivalent to the ginput functionnality of matlab which allows the user to pick the exact value of a PlotDataItem...

Waiting for your feedback!
",5,3,[]
900,66398155,312,12777496,2016-04-13 21:54:09,2021-02-25 22:58:29,closed,Trying to add support for roiCurves with multi-color image stacks in ImageView,"roiCurve is replaced by a list, roiCurves. When an roi is changed in a 4-dimensional image stack, an roiCurve is added for each color.

*I apologize in advance if these changes are undesirable. (This is my first time submitting a pull request on an open source project.)
",6,5,['ROI']
901,66252949,311,12777496,2016-04-13 01:18:37,2019-07-09 20:26:30,closed,Update BarGraphItem.py,"add setData()
",2,4,[]
902,66099613,309,12777496,2016-04-12 04:35:15,2016-04-22 03:34:56,closed,Encode QPropertyAnimation property name if not passed as bytes.,"Fixes #257 

Note: someone should check compatibility with PySide

As mentioned in the comment I added, this is needed because PyQt stopped automatically converting as of v5.5 [(ref)](http://pyqt.sourceforge.net/Docs/PyQt5/incompatibilities.html). This was _probably_ disabled because it's not a smart way to handle things, but I can't think of a better way to do it.
",3,2,[]
903,66097841,308,12777496,2016-04-12 04:03:21,2016-04-12 16:55:21,closed,Fix opt name for SpinBox: range -> bounds.,"Fixes #260 
",1,1,[]
904,65901776,307,12777496,2016-04-10 05:44:23,2020-06-26 03:52:11,closed,fix problems with high freequency game mouse,"The number of mouseMoveEvents was limited to ~60 per second.

Issue is analog of https://github.com/vispy/vispy/issues/1146
Pull request is analog of https://github.com/vispy/vispy/pull/1153
",5,8,[]
905,64558351,305,12777496,2016-03-30 01:11:33,2016-04-24 21:30:09,closed,"MetaArray: PrettyInfo for all axes, not skipping last axis.","It seems deliberate that the final axis in a MetaArray was excluded from the pretty info print treatment but I can't figure out why. This was frustrating to me because I often put 'time' on the last axis as that yields slightly shorter processing time in my signal processing pipeline but then my MetaArrays were messy when printed and I didn't get the best benefits (like sample interval estimation).

This simple change no longer omits the last axis from formatted printing.
",7,2,[]
906,64544858,304,12777496,2016-03-29 22:30:15,2016-04-21 07:35:31,closed,OSX RemoteGrahpics.py: Add shared mem file open and close to get around no mremap.,"[OS X does not have mremap](http://stackoverflow.com/questions/3521303/is-there-really-no-mremap-in-darwin) and therefore `mmap.mmap(...).resize(...)` does not work. Therefore, none of the RemoteGraphicsView examples worked ([offending line](https://github.com/pyqtgraph/pyqtgraph/blob/develop/pyqtgraph/widgets/RemoteGraphicsView.py#L197)).

I've hacked around the deficiency by simply closing the file and opening a new one of the appropriate size (similar to what is done for Windows). The RemoteGraphicsView examples now work in OS X.

Tested with python 2.7.10 on OS X 10.11.3
",2,1,[]
907,64267846,302,12777496,2016-03-27 15:18:28,2016-03-27 17:40:52,closed,fix a color name error,"pen=(R,G,B), so actually the second curve is green and the third curve is blue.
",1,1,[]
908,63910321,301,12777496,2016-03-23 16:22:11,2017-11-01 13:58:51,closed,TST/CI/DOC: Use `coverage` as it is intended to be used,"On the Python Test Podcast, @nedbat recommended using the coverage package as
the execuable with the `run` subcommand, e.g., `coverage run run_tests.py`.
This guarantees that all code executed goes through the `coverage` pipeline and
code reporting stats are accurate.  This PR makes those changes by adding a
test script that provides the same results (or better) as running `py.test
-vrxs --cov pyqtgraph`.  Additionally, @nedbat recommends using coverage
directly instead of the coverage plugins for the various testing frameworks
(nose coverage, pytest-cov, etc...) because those plugins can lag behind
development of coverage.
",5,7,[]
909,63907695,300,12777496,2016-03-23 16:06:39,2016-04-21 07:33:27,closed,MNT: Call close() up the inheritance chain,"Closes #280
Closes #299
",6,2,[]
910,61594179,293,12777496,2016-03-03 17:23:49,2016-04-21 10:26:48,closed,Control si prefix,"I would like to switch enableAutoSIPrefix to False by setLabel argument.
",9,3,[]
911,61058474,291,12777496,2016-02-29 10:43:30,2016-03-28 06:13:28,closed,slight changes in TextItem,"The default text color of any TextItem objects is reinitialized everytime the setText method is called. As a consequence, the color argument of labelOpts in the new InfiniteLine class can not be taken into account. This PR changes this behaviour.
",12,5,[]
912,61039621,290,12777496,2016-02-29 07:47:12,2016-02-29 07:47:49,closed,update,,1,4,[]
913,60158688,287,12777496,2016-02-22 11:23:39,2016-04-04 20:06:32,closed,Qt5 compatifility fixes,"- fix QHeaderView.setResizeMode monkey patch (has a two argument overload)
- fix QGraphicsItem.scale monkey patch (has a zero argument overload)
- Remove (unnecessary?) import of unified  PyQt5.Qt module
",3,3,[]
914,60137407,286,12777496,2016-02-22 08:05:13,2016-02-29 05:00:09,closed,combined infiniteline updates,"- Performance improvements from #275
- New unit tests covering InfiniteLine
- Labels provided by #267, with modifications:
  - Label handling code moved out of InfiniteLine, to its own subclass of TextItem
  - Orientation-independent code; labels can be attached to lines at any angle
  - Labels can be dragged along line (but position along the line is not affected by the position of the line itself)
- Supporting changes:
  - TextItem now supports mouse interaction and rotation
  - TextItem may be automatically aligned to an axis of its parent
",15,32,[]
915,59420089,284,12777496,2016-02-15 22:20:08,2016-04-03 06:28:51,closed,Image view work,"Added convenience functions to ImageView for setting colormaps and preset gradients.
",2,7,[]
916,59159619,282,12777496,2016-02-12 11:06:59,2016-03-22 14:31:10,closed,Image testing,"Adds image output testing framework based on vispy's implementation.
This will allow us to easily add and audit unit tests that verify pyqtgraph's graphical output.
",9,10,[]
917,58863777,281,12777496,2016-02-10 09:13:45,2016-04-21 07:34:45,closed,Fixing order of positions in colormap,"numpy.interp (called in ColorMap.map) forces pos to be in increasing order. Not following this requirement does not raise any Error but provide unexpected behavior.
",3,1,[]
918,57995084,275,12777496,2016-02-02 14:39:25,2016-02-04 07:38:54,closed,Improve InfiniteLine drawing performance by caching the line and bounding rect.,"This PR is for improving `InfiniteLine` drawing performance by caching the line and the bounding rect.
The performance has been improved for situations in which items close to the `InfiniteLine` are changing.

Please, try the following code before and after the PR to have an idea of the improvements.

```
#!/usr/bin/python

from pyqtgraph.Qt import QtGui, QtCore
import numpy as np
import pyqtgraph as pg
from pyqtgraph.ptime import time
app = QtGui.QApplication([])

p = pg.plot()
p.setWindowTitle('pyqtgraph performance: InfiniteLine')
p.setRange(QtCore.QRectF(0, -10, 5000, 20))
p.setLabel('bottom', 'Index', units='B')
curve = p.plot()

# Add a large number of horizontal InfiniteLine to plot
for i in range(100):
    line = pg.InfiniteLine(pos=np.random.randint(5000), movable=True)
    p.addItem(line)

data = np.random.normal(size=(50, 5000))
ptr = 0
lastTime = time()
fps = None


def update():
    global curve, data, ptr, p, lastTime, fps
    curve.setData(data[ptr % 10])
    ptr += 1
    now = time()
    dt = now - lastTime
    lastTime = now
    if fps is None:
        fps = 1.0/dt
    else:
        s = np.clip(dt*3., 0, 1)
        fps = fps * (1-s) + (1.0/dt) * s
    p.setTitle('%0.2f fps' % fps)
    app.processEvents()  # force complete redraw for every plot


timer = QtCore.QTimer()
timer.timeout.connect(update)
timer.start(0)


# Start Qt event loop unless running in interactive mode.
if __name__ == '__main__':
    import sys
    if (sys.flags.interactive != 1) or not hasattr(QtCore, 'PYQT_VERSION'):
        QtGui.QApplication.instance().exec_()
```
",11,1,[]
919,57747077,273,12777496,2016-01-30 18:47:00,2016-01-30 21:37:41,closed,Corrections for numpy API changes,"Further bugfixes for recent numpy API changes. 
@u55, your PR #264 is included here.
",0,8,[]
920,57734267,272,12777496,2016-01-30 08:24:58,2016-01-30 08:36:30,closed,Image performance,"Improves performance of ImageItem for video display by rescaling the LUT instead of the image whenever possible.
",1,4,[]
921,57418968,271,12777496,2016-01-27 20:38:26,2020-06-29 05:44:14,closed,Allow pens to be set for ROI handles and hover,"Small tweaks to allow pens to be passed when instantiating an ROI. The `handlePen` is the pen for the handles on the ROI, and `hoverPen` is the pen used while the mouse is hovering over the ROI shape (or its handles; i.e. the shape and its handles share the same hover pen).
",10,6,['ROI']
922,57246296,270,12777496,2016-01-26 17:51:11,2016-01-26 18:52:05,closed,"Fix issue where numpy is (planning on) overloading `==` to operate elementwise, while `is` operates object-wise.","So, the numpy people have decided that overloading `==` is a good idea, and are now throwing a warning message every time you use `==` to check if an array is anything. It's annoying, silence it.

Very, very minor change.
",4,1,[]
923,56315550,269,12777496,2016-01-18 08:58:21,2019-03-12 19:58:41,closed,let cprint handle bytestrings,"Something in pyqtgraph tried to write a `bytes` using cprint (python 3.5 on a mac) - might as well let it, yes?

I chose `'latin1'` just to be failsafe - I presume the only things people care about here (this is only used for debugging, right?) are ascii anyway.
",0,1,[]
924,56211333,268,12777496,2016-01-15 19:33:07,2016-02-15 08:34:37,closed,Axis fixes,"Modification of [PR#235](https://github.com/pyqtgraph/pyqtgraph/pull/235) proposed by [JenSte](https://github.com/JenSte) taking into account the modification suggested in the discussion of [PR #235](https://github.com/pyqtgraph/pyqtgraph/pull/235).

If relevant, [PR #235](https://github.com/pyqtgraph/pyqtgraph/pull/235) can be closed.

Thanks to [JenSte](https://github.com/JenSte) for the modification!
",2,1,[]
925,56180610,267,12777496,2016-01-15 15:14:51,2016-02-29 05:00:14,closed,InfiniteLine enhancement,"Add some new features to InfiniteLine and an example illustrating some of them.
",29,12,[]
926,56163200,266,12777496,2016-01-15 12:22:44,2016-02-15 07:17:14,closed,new markers,"Addition of several markers that can be used to plot data and creation of an example highlighting all the markers currently available in pyqtgraph.
",4,2,[]
927,55718349,264,12777496,2016-01-12 06:12:52,2016-01-30 21:37:44,closed,Fix Numpy FutureWarning.,"Don't accidentally compare an array to string. Fixes issue #243 when `connect=='finite'`.
",2,2,[]
928,54920255,262,12777496,2016-01-03 07:18:23,2016-01-03 07:23:11,closed,Py26compat,"@ericdill, this is based on #207 to see whether disabling parallel unit tests encourages travis to behave itself..
",2,7,[]
929,54910399,254,12777496,2016-01-02 18:38:31,2016-01-02 19:04:00,closed,Numpy fix,"I think this is the best-case fix for the `rescaleData` issue with latest numpy--fixes the casting issue without any performance hit.

closes #249 
closes #239 
fixes #236 
",1,3,[]
930,51815518,249,12777496,2015-11-25 16:22:44,2016-01-02 19:04:00,closed,Fixing numpy bug in functions.py,"Fixing an error which is caused by a new numpy version: 
d2 *= scale 
gave:
""TypeError: Cannot cast ufunc multiply output from dtype('float64') to dtype('int16') with casting rule 'same_kind'""
however, d2 = d2 \* scale does seem to work without problems
",2,1,['bug']
931,48671598,241,12777496,2015-10-25 04:27:43,2015-12-21 00:37:42,closed,TableWidget key press events,"Key press events should be passed up to the parent class so arrow key and tab key navigation works. Fixes #240.
",3,1,[]
932,48554169,239,12777496,2015-10-23 08:33:25,2016-01-02 19:04:00,closed,Update functions.py,"BUG: fix scaling with numpy 1.10
",4,1,[]
933,48022448,237,12777496,2015-10-19 00:28:02,2015-12-21 00:49:10,closed,Develop,,2,102,[]
934,46477761,235,12777496,2015-10-01 01:53:37,2020-06-24 22:57:01,closed,Axis fixes,"These changes correct two problems the AxisItem has:
- It never shrinks when the space for the tick labels is not needed any more: ![example](https://www.dropbox.com/s/mdiodhlo4oap0tn/axis1.png)
- Depending on the zoom, sometimes a wrong value is used to calculate the distance between the axis label and the tick labels: ![example](https://www.dropbox.com/s/fnovmzngx55zv1f/axis2.png)
",7,2,[]
935,45399516,232,12777496,2015-09-18 12:14:38,2015-12-21 03:23:45,closed,fix repetitive update() of nodes with multiple input,"This commit fixes the issue below:
For a flowchart with connections between nodes like
node A -> node B -> node D
node A -> node C -> node D
The update() method of node D would be called twice if node A is changed and propagate the change through two different paths. This should not be the behavior expected. The update of D should only be called once after processing node B and node C.
",1,1,[]
936,45398410,231,12777496,2015-09-18 11:59:45,2019-05-24 22:59:06,closed,Python3 support for save and load of flowchart,"- Fix errors encountered while trying to save and load a flowchart(.fc) file.
- Automatically add "".fc"" to the end of the file name if omitted.
",2,3,[]
937,45095345,229,12777496,2015-09-15 20:04:05,2015-12-21 03:28:26,closed,Remove trailing spaces,"Hello Luke,

I'm currently working on improving the docking system in PyQtGraph. My editor is setup to automatically strip trailing spaces, as they are mostly diff garbage. I can see why you left some of them (to ease indentation on the next line), but many of them have no particular reason to be there.
So before creating pull requests for the rest, here's a PR with all trailing spaces removed from all *.py file.
Feel free to apply or not ! :)

Anyway, thanks for your great work. I'm eagerly looking into vispy too, but it's not yet as mature as PyQtGraph.

Alexis :)
",3,1,[]
938,44310455,227,12777496,2015-09-06 21:38:52,2015-12-21 04:21:41,closed,Multiprocess cleanup,"Minor updates to multiprocessing system:
- Debugging messages now avoid expensive string processing if debugging is disabled
- Unicode and bytes types added to the default no-proxy list (these types are serialized and passed by value instead of by proxy)
- Check for invalid arguments to `ObjectProxy._setProxyOptions`
- Fix error messages caused by trying to delete proxy objects after connection has closed
",2,2,[]
939,44267031,226,12777496,2015-09-04 22:23:39,2015-12-21 04:44:20,closed,invalid slice fix,"I don't understand why this line used to work without problems. But for the last few days it was crashing my HistogramLUTItem because np.ceil(self.image.shape[0] / targetImageSize) returned a float
",2,1,[]
940,43767674,224,12777496,2015-08-31 14:06:49,2015-12-21 04:54:27,closed,Fix import of OrderedDict for old python API,"Hi,

This file do not use your backport of OrderedDict (which is already part of pyqtgraph). This fix only use your default way to import OrderedDict.

The file ./examples/relativity/relativity.py should also be fixed in the same way.

We are using pyqtgraph tag 0.9.10 in production to have something stable. This bug is also part of this tag.

Thanks a lot.
",3,1,[]
941,43340114,221,12777496,2015-08-25 21:39:17,2015-12-21 05:09:35,closed,support multiple polygon paths in FillBetweenItem,"addresses issue #220 by supporting fills between finite-connected curves
",2,1,[]
942,43289912,219,12777496,2015-08-25 14:08:22,2015-12-21 05:14:11,closed,Ignore wheel events in GraphicsView if mouse disabled,"This allows parent dialogs to receive these events
if needed.
",1,1,[]
943,42219164,215,12777496,2015-08-12 09:17:23,2019-05-24 04:57:13,closed,Fix to be able to use scatterplot in python 2.6,"Problem was that memoryview is used and does not exist in python 2.6
",1,1,[]
944,41970412,213,12777496,2015-08-09 13:28:13,2019-07-09 20:09:52,closed,do not close non-closable docks that are floating,"Non-closable docks that are floating can still be closed by closing their window. This is a pretty serious bug as it may render the application completely unusable when the improperly closed docks contain important widgets.

This patch fixes the problem by moving non-closable docks to the home area when they are floating and their window is closed.
",2,1,[]
945,41957359,212,12777496,2015-08-08 17:25:01,2015-08-08 17:27:43,closed,travis test,,0,2,[]
946,41509364,208,12777496,2015-08-03 21:00:54,2017-11-01 13:58:47,closed,Simpify ExampleLoader code and close #133,"- Remove pre-compiled example loader for pyqt4, pyqt5 and pyside.
- Add a font-selector to the example loader
- Closes #133.
",2,2,[]
947,41424996,207,12777496,2015-08-02 21:37:39,2016-01-03 07:23:14,closed,WIP: Py26compat,"@campagnola How important is python 2.6 compatibility?  I started tackling this problem before I asked if you are planning on keeping python 2.6 support alive. I'll wait to hear back from you before I do any more work on this PR
",9,6,[]
948,41419773,206,12777496,2015-08-02 15:47:44,2017-11-01 13:58:42,closed,[py2/py3] dict.iteritems() --> six.iteritems(dict),,3,13,[]
949,41419107,205,12777496,2015-08-02 15:00:54,2015-08-02 21:45:34,closed,Test python 2.6 on travis,,1,1,[]
950,41376138,203,12777496,2015-07-31 20:08:40,2015-08-02 01:12:14,closed,WIP: Testing codecov and coveralls,,8,4,[]
951,41373574,202,12777496,2015-07-31 19:38:26,2015-07-31 19:40:03,closed,"I should, uh, badge this repo correctly...",,2,1,[]
952,41014224,201,12777496,2015-07-28 13:58:58,2015-08-05 14:57:19,closed,Smoother realtime scrolling via quantized downsampling option; support for individual min and max downsampling ,"When downsampling, the indices chosen to bucket over change
whenever the x data is updated. This causes the plot line
to 'wiggle' when plotting a real-time data stream.

The ""quanitizedDownsample"" option snaps the bucket centers
to deterministic points such that the downsampled values
for the same underlying data don't change as new data is
added.

Individual options for min and max downsampling are now supported.

This also switches to using midpoint x-values
for downsampled data instead of the left edge of the bucket.
",0,3,[]
953,40945149,200,12777496,2015-07-27 20:25:16,2015-07-27 21:26:13,closed,Option for quantized downsampling; support for individual min and max downsampling,"When downsampling, the indices chosen to bucket over change
whenever the x data is updated.  This causes the plot line
to 'wiggle' when plotting a real-time data stream.  

The ""quanitizedDownsample"" option snaps the bucket centers
to deterministic points such that the downsampled values
for the same underlying data don't change as new data is
added.  

Individual options for min and max downsampling are now supported.

These updates also switches to using midpoint x-values
for downsampled data instead of the left edge of the bucket.
",0,2,[]
954,40909182,199,12777496,2015-07-27 14:30:52,2015-08-05 14:57:48,closed,prevent divide-by-zero in PlotDataItem downsample,"In the edge case of a PlotDataItem with only a single data point,
don't downsample since this leads to a divide by zero exception
",1,6,[]
955,40741249,196,12777496,2015-07-24 04:08:28,2019-04-09 20:31:18,closed,Fixed ImageView custom axes.,"Custom axes, for example `{""t"": 3, ""c"": 2, ""x"": 0, ""y"": 1}`, don't currently work with the `ImageView` widget.  It messes up the time slider, the key binds, and `play()` functionality because they all assume that the time axis is 0.

A simple way to fix this is to just adjust the `setImage` method to always transpose the image data after checking the `axes` kwarg, and to do that before the `tVals` attribute is set.

This minor adjustment fixed this issue for me.
",2,7,[]
956,40606715,194,12777496,2015-07-22 20:16:49,2015-08-08 17:30:08,closed,Use glColor instead of mkColor to set GLViewWidget background color.,,1,1,[]
957,40270182,191,12777496,2015-07-17 20:50:11,2015-07-31 19:34:31,closed,Putting travis back to work!,,19,19,[]
958,39973685,190,12777496,2015-07-14 23:18:33,2015-11-26 20:24:53,closed,trying to fix error in log scale Issue  #144,"Trying to fix the error in log scaling in issue 144.
Running the example code in that issue i get:

 ""RuntimeWarning: divide by zero encountered in log10""

going from np.log10(y) to np.log10(1.0+y) fixes the issue
",0,1,[]
959,39867364,188,12777496,2015-07-13 23:19:03,2015-07-18 08:22:49,closed,Clean up temp file from test suite,,1,2,[]
960,39769308,187,12777496,2015-07-12 21:43:24,2015-07-12 22:16:15,closed,Document the valid args for bg/fg,,0,1,[]
961,39768403,186,12777496,2015-07-12 20:47:13,2015-07-12 22:15:34,closed,Continue testing the examples,,1,1,[]
962,39766722,185,12777496,2015-07-12 19:00:44,2015-07-12 19:26:49,closed,DOC: Add instructions for running the test suite,,0,1,[]
963,39766488,184,12777496,2015-07-12 18:46:12,2015-07-12 19:12:14,closed,Add unit test coverage for the examples folder,,1,2,[]
964,39751667,183,12777496,2015-07-11 20:20:58,2015-07-12 17:08:24,closed,MNT: Don't allow divide by zero,"- also, a lot of whitespace removal, apparently
",1,3,[]
965,39751639,182,12777496,2015-07-11 20:19:03,2015-07-12 17:07:42,closed,DOC: Note odd behavior with setup.py develop,,0,1,[]
966,39748294,181,12777496,2015-07-11 16:25:20,2015-07-11 17:20:50,closed,MNT: Add to gitignore,,0,1,[]
967,39748255,180,12777496,2015-07-11 16:22:53,2015-07-11 16:35:13,closed,python3  compat,,0,2,[]
968,39278903,179,12777496,2015-07-06 15:21:54,2015-07-12 19:33:29,closed,Log scale and fft transform fix,"If the plotted data is fourier transformed and an x log scale is chosen, the first bin causes an error because np.log10(0) doesn't make any sense.
",1,1,[]
969,38371377,178,12777496,2015-06-23 19:05:46,2015-08-09 07:50:35,closed,ENH: Added a new shader,"Hi,
we are developing an engineering app and it would help a lot if a shader as proposed could be added to the pyqtgraph. The purpose of this shader is to ignore the order of the triangle nodes for shading purposes as discussed in pyqtgraph google group:
https://groups.google.com/forum/#!topic/pyqtgraph/F9tymaHmT8o

Maybe would be better to implement a way so that custom shader could be read from a file? I'm willing to try that. 
",3,1,[]
970,38227861,177,12777496,2015-06-22 12:47:08,2019-06-06 23:10:25,closed,Fix clickRadius feature,"Hi. The current version of PyQtGraph do not support anymore the setClickRadius feature. The code was broken somewhen.

To support again the clickRadius feature (which allow to select an item anyway the mouse is over it or not):
- `items` list must come from the `rgn` shape (computed from `_clickRadius`)
- `shape contains point` must be removed cause that's especially what must allow the clickRadius feature.

This patch does that.

Thanks a lot.
",3,1,[]
971,35929573,171,12777496,2015-05-21 12:44:38,2015-08-04 02:16:19,closed,Passed axes flag in getArrayRegion for EllipseROI (2 lines modification),"axes isn't passed in EllipseROI, just passed it. two line modification
",0,2,[]
972,35575333,169,12777496,2015-05-16 18:43:32,2015-05-19 03:08:39,closed,Properly remove select box when export dialog is closed,"Previously, only clicking the ""Close"" button would remove it,
but it would stay behind when directly closing the window.
",2,1,[]
973,35405776,168,12777496,2015-05-14 09:15:26,2016-01-15 07:55:45,closed,New plotting items,"Existing items that can be added to a PlotItem (such as InfiniteLine or LinearRegionItem) missed some functionnalities I needed. I've extended their functionalities with some extra features. I also added a CrossHair item and an example to illustrate these new functionnalities.
",4,5,[]
974,32431768,165,12777496,2015-04-01 15:46:21,2015-04-01 15:52:36,closed,Do not create an axis if a custom one is specified,"Because get(key, default) creates the default object unconditionally,
and the default axis gets linked with the PlotItem, a bogus axis
ends up displayed in the top left corner when a custom axis is used.

Change-Id: I7bfd5e126cc7bd150122edd8436348f0c74ff947
",1,1,[]
975,31379340,161,12777496,2015-03-17 21:21:28,2020-06-11 06:31:40,closed,Give ability to hide/show individual spots,"I currently use this to mask out classes of points, and to pseudo-remove individual ones (as true removal is not part of the current API).
",0,1,[]
976,31365732,160,12777496,2015-03-17 18:48:34,2020-06-12 06:18:40,closed,Remove ScatterPlotItem's SpotItems during addItem call,"After addItem is called and a new data array is constructed, any previously created SpotItems will have obsolete references to the old data array.  This clears these SpotItems so that new ones can be created with up-to-date array references.
",0,1,[]
977,31302247,159,12777496,2015-03-17 02:19:18,2017-01-14 19:09:55,closed,Add wrapping option to SpinBox,"This overrides inherited wrapping and setWrapping methods which don't work.
",0,2,[]
978,31301847,158,12777496,2015-03-17 02:08:49,2019-09-14 06:08:29,closed,Make DockArea compatible with Qt Designer,"Qt Designer passes a parent as the first argument to a widget.  This allows one to promote a QWidget to a DockArea.
",4,1,[]
979,31301457,157,12777496,2015-03-17 01:58:07,2020-06-11 03:02:38,closed,Provide widgetGroupInterface to GradientWidget,,1,1,[]
980,31301409,156,12777496,2015-03-17 01:56:53,2019-06-20 05:44:09,closed,Make ViewBox update matrix for invertX and setState,"I couldn't figure out why these updateMatrix calls were commented out, but they seem to be necessary (or equivalently as in invertY, _matrixNeedsUpdate can be set to True).
",1,1,[]
981,31261189,154,12777496,2015-03-16 16:45:34,2015-03-18 02:47:16,closed,Fix DockArea save/restore when topContainer is None," I.e. when no docks are present, or when all are in temporary windows.
",1,1,[]
982,31212024,153,12777496,2015-03-16 01:32:27,2015-03-18 03:08:05,closed,Dock to emit signal when closed,,4,2,[]
983,31211912,152,12777496,2015-03-16 01:28:32,2015-03-18 02:36:50,closed,Make it possible to change Dock titles,,1,1,[]
984,31196575,151,12777496,2015-03-15 07:12:53,2020-06-01 04:06:00,closed,Optionally provide custom PlotItem to PlotWidget,,3,1,[]
985,31196200,150,12777496,2015-03-15 06:28:43,2020-06-12 05:33:50,closed,Speed up ViewBox panning,"Noticeable when a large number of items are present.
",3,1,[]
986,30017665,149,12777496,2015-02-25 19:33:28,2020-06-11 03:04:27,closed,"made gradients a private variable, added addPreset function",,5,3,[]
987,29552489,148,12777496,2015-02-18 18:58:48,2015-02-18 18:58:56,closed,Update graphicsWindows.py,,0,1,[]
988,29551621,147,12777496,2015-02-18 18:49:01,2015-02-18 18:49:55,closed,Update __init__.py,"also see changes to graphicsWindows.py
",0,1,[]
989,28377532,143,12777496,2015-01-30 17:19:03,2020-06-11 04:07:09,closed,Bugfix: a user provided handle for ROIs was not set to the correct posit...,"I just changed the position of the h.setPos so that also a user provided handle will get initially the correct position on the ROI
",0,2,[]
990,28016866,142,12777496,2015-01-26 10:22:43,2020-06-11 03:34:44,closed,Bugfix: PlotCurveItem.sigClicked emits MouseClickEvent,"Hi all,

currently `PlotCurveItem.sigClicked` emits `self`, a `PlotCurveItem`:

```
def mouseClickEvent(self, ev):
    if not self.clickable or ev.button() != QtCore.Qt.LeftButton:
        return
    if self.mouseShape().contains(ev.pos()):
        ev.accept()
        self.sigClicked.emit(self)
```

Since it can be useful to get the MouseClickEvent in the GraphicsView I suggest to either emit
            `self.sigClicked.emit(ev)`
or
            `self.sigClicked.emit(self, ev)`

cheers!
",1,1,[]
991,27837417,140,12777496,2015-01-22 12:06:19,2015-02-28 16:48:37,closed,Pyqt5,"Fixed some bugs for running the examples
",1,3,[]
992,27446616,139,12777496,2015-01-15 17:34:45,2019-06-27 17:57:31,closed,bugfix: don't attach spurious AxisItem to plot,"Bug description: when PlotItem is given a custom axis in constructor:
PlotItem(axisItems={'bottom': myAxis})
the result is a plot with _2_ bottom axes visible instead of just user's custom axis.

Cause: axisItems.get(k, AxisItem(orientation=k, parent=self)) attaches an axis to the parent via ""parent=self"" directive, even if custom axis is present in 'axisItems'.

Fix: create and attach default AxisItem to parent _only_ after verifying that no custom AxisItem is available.

Fixes regression in f6ded808efc89cb65d51edd2257c5a204b856317
""Fixed a few exit crashes, added unit tests to cover them""
(where parent=self was added)

Signed-off-by: Picket G
",2,1,[]
993,27173424,136,12777496,2015-01-12 03:16:35,2015-06-02 02:49:34,closed,Don't create extraneous AxisItems,"Fixes a bug introduced in 0.9.10.
",2,2,[]
994,26920424,135,12777496,2015-01-06 21:44:14,2015-08-08 17:02:16,closed,PlotItem.addAvgCurve: pass through 'stepMode',"Selecting ""Plot Options""->""Average"" and checking checkbox freezes KDE if
the curve has stepMode=True. See examples/histogram.py as an example.
",0,1,[]
995,26709352,134,12777496,2014-12-30 23:34:58,2019-06-06 22:58:18,closed,Fix bug in LayoutWidget.py,"getWidget tries to get self.row which doesn't exist, get self.rows instead
",1,1,[]
996,26539637,130,12777496,2014-12-24 00:31:55,2015-03-14 19:51:16,closed,DockArea apoptose fix.,"Fixes problem where docks can't be added to a non-temporary area once all of its docks have been closed.
",1,1,[]
997,26494055,129,12777496,2014-12-23 03:29:07,2020-10-22 05:18:37,closed,Add fontSize kwarg to DockLabel constructor,"Allows the font size of Dock title bars to be adjusted.

I need this for a project I'm writing -- the default font is quite small for what are significant graphical elements in a GUI.
",0,1,['Dock']
998,25462276,127,12777496,2014-12-03 23:46:21,2020-06-25 00:42:29,closed,Add tickAlpha setting to AxisItem style,"In the AxisItem class, ticks are arranged in a hierarchy (major, minor, subminor). When you have a plot with gridlines, the higher ticks are drawn with heavier lines. I needed to produce a plot where the gridlines all look the same, but could not find a straightforward way of doing so. I could have subclassed the AxisItem class and used the custom class in my code, but I felt that other people might find this added functionality useful, so I instead created this pull request.
",0,1,[]
999,25328168,126,12777496,2014-12-02 09:27:45,2020-05-31 04:32:52,closed,UTF-8 support for CSVExporter,"Hello, I had a problem with exporting UTF-8 encoded headers with the CSVExporter, so I came up with this fix.
",1,2,[]
1000,25010021,123,12777496,2014-11-25 14:11:10,2020-06-11 06:03:44,closed,Added arrow symbols for the ScatterPlotItem,"This commit adds arrows (up, right, down and left) to the ScatterPlotItem's symbol list.

When executing the ScatterPlot example, we can see they are significantly smaller than the rest of the symbols because, as I have seen, the symbols' path is to fit in the 1x1 square centered at (0, 0). Of course the arrows have been implemented to point to the actual point in the scatter plot, which means they only use a small part of that area.

Is there a better way to implement them? I will be glad to change anything if that leads to the acceptance of these symbols in PyQtGraph.
",2,3,[]
1001,24595329,121,12777496,2014-11-18 08:29:32,2016-05-17 13:47:05,closed,Fix axis range growing infinitely if we have no data or zero-range.,"Fix axis range growing infinitely if we have no data or zero-range.
Before, the padding was applied over and over again.
",1,1,[]
1002,24523618,120,12777496,2014-11-17 09:40:08,2014-11-18 08:03:58,closed,Fix axis range growing infinitely if we have no data or zero-range.,"Fix axis range growing infinitely if we have no data or zero-range.
Before, the padding was applied over and over again.
",1,11,[]
1003,23726602,117,12777496,2014-11-02 01:16:06,2020-06-23 05:49:16,closed,Feature: Flow chart nodes resize based on inputs/outputs,"Changed the node sizing code so that nodes change size based on the number of inputs and outputs.
",1,1,[]
1004,23703420,116,12777496,2014-10-31 20:23:07,2020-06-29 04:58:09,closed,[ROI] make all ROI subclasses accept the same kwargs,"`ROI` subclasses are currently a little awkward to use because they accept a disjoint set of keyword args in `getArrayRegion()`. Fix that and make sure that they all support `axes=(m, n)` for commonality.
",0,1,['ROI']
1005,23229986,114,12777496,2014-10-23 14:03:15,2019-06-26 22:37:44,closed,Update GLViewWidget.py,"Change mouseMoveEvent to use the right mouse button for panning. 
Event is currently set to the middle mouse button. This causes erratic bevhavior when trying to click and drag since the wheel usually gets activated to and the graphic starts zooming at the same time. The right button is not currently used for anything.
I have tested this and it works in all of the demos.
",2,1,[]
1006,23198029,113,12777496,2014-10-22 23:36:33,2014-10-25 14:52:19,closed,Fix PySide error when ViewBox signal destroyed,"Fixes issue #107.

I figured out how to make multiple pull requests for the same repo on Github :)
",1,1,[]
1007,23122265,112,12777496,2014-10-21 22:13:33,2014-11-14 13:18:59,closed,Add recursive submenu support for node library.,"Added support for arbitrarily deep nested submenus.  The address of a menu item is specified in the paths argument to pyqtgraph.flowchart.library.registerNodeType().  This arg contains a list of tuples where each element of a tuple is a containing menu.

For example `pyqtgraph.flowchart.library.registerNodeType(newNode, paths=[('menu1', 'menu2'),('menu3'),))` would build this menu:

```
├─── menu1
│    └─── menu2
│         └─── newNode
└─── menu3 
     └─── newNode
```

We can test that example with this script:

``` python
from pyqtgraph import flowchart
from pyqtgraph.flowchart.Node import Node
import pyqtgraph.flowchart.library as fclib
from PyQt4 import QtGui

__dialogs = list()

class newNode(Node):
    nodeName = 'newNode'

def subMenuTest(fc):
    fclib.registerNodeType(newNode, [('menu1','menu2'), ('menu3',)])

def startGui():
    global __dialogs
    window = QtGui.QMainWindow()
    fc = flowchart.Flowchart()
    subMenuTest(fc)
    window.setCentralWidget(fc.widget())
    window.show()
    __dialogs.append(window)

if __name__ == '__main__':
    import sys
    QtGui.QApplication.setDesktopSettingsAware(False)
    app = QtGui.QApplication(sys.argv)
    startGui()
    sys.exit(app.exec_())
```

Gives us:
![pyqtgraph_submenus](https://cloud.githubusercontent.com/assets/6343590/4727743/6f769d82-596f-11e4-9354-5744d8c47ad9.png)
",2,2,[]
1008,22911430,110,12777496,2014-10-17 09:00:14,2014-10-25 17:04:44,closed,fixed a keyerror when passing a list into setBrush,"- https://groups.google.com/forum/#!topic/pyqtgraph/xVyCC2f7gVo

Signed-off-by: Nicholas Tan Jerome nicholas.jerome@kit.edu
",1,2,[]
1009,22845409,109,12777496,2014-10-16 10:29:03,2014-10-25 18:24:47,closed,fixed the Pen None property.,"previously, setting ""pen"" to None will not have any effects on the output, this pull request will fix this.
- https://groups.google.com/forum/#!topic/pyqtgraph/t6cl1CevlB0

Signed-off-by: Nicholas Tan Jerome nicholas.jerome@kit.edu
",1,1,[]
1010,22783117,108,12777496,2014-10-15 13:29:26,2014-10-25 20:05:42,closed,Fix memory leak in GLScatterPlotItem,"Fixes #103. If a ScatterPlotItem was removed from a plot and added again, glGenTetures was called again unneccesarily. Each time it is called, it eats up a little more space.

We agreed that this solution was fine, since `pyqtgraph.opengl` items should't be used in multiple contexts.

Thanks!
",1,1,[]
1011,21902955,102,12777496,2014-09-28 15:32:52,2014-10-15 01:47:04,closed,Fix OpenGL shader/texture sharing on PySide,"For some reason, the `GLViewWidget.ShareWidget` class attribute stayed as `None` on PySide. That is, `ShareWidget` was created, but other instances of the `GLViewWidget` class just saw `None`. It works great on PyQt4.

This may be to a difference in the way PySide and PyQt4 bind `QtOpenGL.QGLWidget`. Maybe PySide is using some metaclass mumbo jumbo that erases class attributes.

I simply made `ShareWidget` a module-level declaration. I see no problem with this, since the shaders are themselves declared at the module level.

See [this thread](https://groups.google.com/forum/#!topic/pyqtgraph/AOj_oRoN_fk) on the mailing list for more information.
",1,1,[]
1012,21791534,101,12777496,2014-09-25 15:39:34,2019-09-12 21:50:44,closed,configurable GridItem tick spacing and pen color,"this patch adds configuration options for GridItem grid and text color, and options for custom grid line spacing.

It also makes GridItem honor the 'foreground' config option.

this version uses setTextColor as advised. It also fixes setting of just one of the x/y tick spacings, and puts setting of the text color in the proper place.
",10,1,[]
1013,21136403,100,12777496,2014-09-12 07:15:33,2014-09-25 15:40:06,closed,configurable GridItem tick spacing and pen color,"Hi,

this patch adds configuration options for GridItem grid and text color, and options for custom grid line spacing.

It also makes GridItem honor the 'foreground' config option.
",1,1,[]
1014,20726135,95,12777496,2014-09-04 07:23:58,2016-06-24 20:28:39,closed,Python3 related fixes,"Two fixes related to Python3:
- py.test for python3 is not necessarily called py.test3, and
- do not inject python2 builtins in the python3 builtins namespace.
",1,3,[]
1015,20248935,94,12777496,2014-08-25 14:26:46,2014-08-26 14:25:12,closed,FillBetweenItem fixes,"Hi,

this patch modifies FillBetweenItem.py to

1) support disjoint paths at the input, which are present when using connect='pairs' plot option

2) disable the default black Pen, so it only fills the area between curves.
",3,2,[]
1016,20224749,93,12777496,2014-08-24 22:53:12,2014-08-30 01:31:37,closed,Fix getGitVersion showing a clean repo as modified,"`split('\n')` on an empty string results in a list containing an empty string, not an empty list. This causes the version (`python setup.py --version`) to have a ""+"" at the end, even when the tree is clean.

Using `--porcelain` additionally protects against things like user color settings.
",1,1,[]
1017,19318588,88,12777496,2014-08-05 01:52:19,2019-11-20 04:03:16,closed,Fixed image scatterplot export bug Issue #16,"Exporting an image with a ScatterPlotItem in it does not scale correctly. This seems to be due to the QImage that is being exported to not having the expected scaling in its transform attribute.

Fix for https://github.com/pyqtgraph/pyqtgraph/issues/16
",7,1,[]
1018,19279884,87,12777496,2014-08-04 12:45:23,2016-11-10 14:56:19,closed,textItem color change debugged,"Hi Luke,
I'm sorry for the last strange issues and pull request. ... I had a hard time using git for collaboration.
Anyway.
Let's start with textItem. This commit debugs the color change in textitem that is elsewise fixed to color=(200,200,200).
",0,4,[]
1019,19177670,84,12777496,2014-07-31 20:49:28,2014-08-04 12:46:44,closed,textItem color change bug resolved - again,"Hi Luke,
I created a new 'merge' branch to fit in everything i've done - one by one.
now let's start with the textItem, as discussed in 
https://github.com/radjkarl/pyqtgraph/commit/33883097ba911185c329753bed34cf65f530ff57
",1,1,[]
1020,18490447,79,12777496,2014-07-16 19:46:10,2015-05-14 09:19:29,closed,"Proposition of extra functionnalities to existing files, new features and dedicated examples","add a remapSlider method used by some GraphicsItems in the functions file, add some extra functionalities to the InfiniteLine and LinearRegionItem items, add a InfiniteLineLabel item, a LinearRegionItemLable item, a CrosshairLabel, a new CounterSlider widget add four dedicated example (on per new item) and modify the **init** file in the main directory to import the four new files
",1,37,[]
1021,18010889,77,12777496,2014-07-05 15:01:03,2014-07-06 11:19:32,closed,Fixed typo in readme,,0,1,[]
1022,17856185,76,12777496,2014-07-01 21:30:32,2014-07-31 20:54:42,closed,bug(color TextItem not changable) solved through new attribute TextItem.text_color,"the color in TextItem stayed white before

eg.
pg.TextItem(
            text='TEST', color='r', html=None, anchor=(
            0, 0), border=None, fill=pg.mkBrush(
            255, 255, 255, 80), angle=0)
",4,6,[]
1023,17344306,74,12777496,2014-06-19 10:54:55,2020-04-27 21:14:55,closed,DateAxisItem,"I implemented a date axis with basic time zone support. It's not perfect but it's a start. At the moment it only covers minute to year scales but it should be quite easy to add new zoom levels as required. 
",14,4,[]
1024,16844833,73,12777496,2014-06-06 21:54:03,2016-06-24 20:28:45,closed,Cleanup ROI.py (mostly whitespace & line lengths).,"Some cleanups to ROI.py: keep line lengths below 80 characters (most of the time), remove trailing whitespace, and replace `True if x else False` by `bool(x)`.
",2,2,[]
1025,15887325,68,12777496,2014-05-14 16:10:00,2015-02-28 17:01:11,closed,PyQt5 support via qt_backport package,"This is a cleaned up version of the last pull request I closed.

Most of the `PyQt5` support comes directly from `qt_backport`'s emulation of the `PyQt4` (or `PySide`) API.

I modified your `Qt.py` mostly to provide a bit more insight to the rest of the code on what the underlying Qt implementation is so that intelligent switching could be done where required.  Pre-existing code used `USE_PYSIDE`, and the existing `pyqt5` branch had `QT_LIB`, but I expanded on that.  Qt.py is by far the biggest change I made.

All other file changes were pretty much minor, coming about in support of the above.  Specifically while working to make every single example work as well as I could (this process also helped flesh out corners of the `qt_backport` emulation).

I see that a `.gitignore` change slipped in there, too (sorry).  This was because I was using `pip install -e` on the package while working and constantly removing the egg info was tiresome (you'll see I missed a round of it in the commits).

---

**Additional notes:**

What were the ""variety of bugs"" fixed by `setGraphicsSystem('raster')`?  Qt5 does not have this and I am curious what bugs will surface.

One oddity I haven't been able to fix is your `FillBetweenItem.py` example.  The fills end up being very blocky, as in [this screenshot](http://i.snag.gy/DRY86.jpg).  I'm not sure what is up here, especially since the fill between in the bottom left of the basic `Plotting.py` is perfect.
",14,19,[]
1026,15869484,67,12777496,2014-05-14 09:54:46,2021-02-14 16:49:42,closed,Fix scale-rotate ROI handler to allow to use a random scale axis and not only x/y,"This patch allow to use scale-rotate handler without orthogonal center.

```
    1-----2
    |     |
    |     |
    |     |
    4-----3
```

On my application the handler 1 use the center 3, the handler 2 use the center 4...
Without this patch it is not possible.

```
            self.addScaleRotateHandle(pos=(0, 1), center=(1, 0))
            self.addScaleRotateHandle(pos=(1, 0), center=(0, 1))
            self.addScaleRotateHandle(pos=(0, 0), center=(1, 1))
            self.addScaleRotateHandle(pos=(1, 1), center=(0, 0))
```

Unfortunatly i think this patch break the code relative to scaleSnap

Then are you interested by this patch? Else can we create another handler type too allow this kind of scale-rotation?

Thanks a lot
",6,1,['ROI']
1027,15861183,66,12777496,2014-05-14 05:20:58,2014-05-14 15:42:54,closed,PyQt5 support via qt_backport package,"Most of the `PyQt5` support comes directly from `qt_backport`'s emulation of the `PyQt4` (or `PySide`) API.

I modified your `Qt.py` mostly to provide a bit more insight to the rest of the code on what the underlying Qt implementation is so that intelligent switching could be done where required.  Pre-existing code used `USE_PYSIDE`, and the existing `pyqt5` branch had `QT_LIB`, but I expanded on that.

All other file changes came about in support of the above.  Specifically while working to make every single example work as well as I could (this process also helped flesh out corners of the `qt_backport` emulation).

I see that a `.gitignore` change slipped in there, too (sorry).  This was because I was using `pip install -e` on the package while working and constantly removing the egg info was tiresome (you'll see I missed a round of it in the commits).
",1,11,[]
1028,15860636,65,12777496,2014-05-14 04:46:15,,open,A table parameter tree item,"Subclass of WidgetParameterItem, used to edit a numpy record array
",0,2,['parameterTree']
1029,15735126,64,12777496,2014-05-10 17:00:48,2019-11-20 05:46:37,closed,Small Improvements for LegendItem,"Added 3 new parameters LegendItem:
horSpacing: Specifies the spacing between the line symbol and the label.
verSpacing: Specifies the spacing between individual entries of the
legend vertically. (Can also be negative to have them really close)
box: Specifies if the Legend should will be drawn with a rectangle
around it.

This made it possible to change the resize behavior by just using
layout.setVerticalSpacing and layout.setVerticalSpacing.

Changed the removeItem function to accept either name or the originally
added Item. I found the latter more useful, especially if several items
happen to have the same name.

Changed the rows in which addItem inserts a new item. Now the number
increases all the time. This was needed because there where some
overwriting issues (it did want to write in a row were already an item was existent, in the previous version) when using several times removeItem and addItem on
the same legend (in random order). The GraphicsGridLayout does not care
about empty rows. I found this approach to work best.
",3,1,[]
1030,15684810,63,12777496,2014-05-09 03:03:31,2014-05-19 22:24:20,closed,CSVExporter: fix the case when stepMode=True,"fix the case when stepMode=True
",1,1,[]
1031,14688255,61,12777496,2014-04-12 19:44:30,2014-04-12 22:05:17,closed,PlotDataItem: add missing 'stepMode' keyword argument for PlotCurveItem,,1,1,[]
1032,13923269,59,12777496,2014-03-24 20:54:20,2014-03-30 06:53:43,closed,Travis CI,,1,40,[]
1033,13612633,58,12777496,2014-03-16 14:16:37,2014-03-24 15:17:14,closed,PlotDataItem downsampling calculation fix,"There is a zero-division problem in PlotDataItem in case when automatic downsampling is enabled before a Plot and the corresponding ViewBox is properly set-up within it's container (in such case, the ViewBox.width is 0). This is the simplest fix.
",1,1,[]
1034,13611068,57,12777496,2014-03-16 09:44:50,2014-03-29 15:35:57,closed,AxisItem.showValues fix,"Implements the showValues setting of AxisItem class, which has been in the constructor for quite some time, but not having any impact. Implementation skips creation of tick text specs when showValues is False, and takes the setting into account when width/height of the axis is calculated.
",1,2,[]
1035,13543934,56,12777496,2014-03-13 20:45:13,2014-03-24 20:01:55,closed,PlotItem was keeping ViewBox alive (so clearing that cycle),"Fixed one cycle which would keep viewbox and plotitems alive as the plotitem was keeping a reference to instancemethods of the viewbox (which was never removed).

Also, making sure there's no reference to a ButtonItem on close.

And at last, I'm printing things in the exit if objects are still alive (which means things weren't cleared properly) -- feel free to make that a debug only option or skip it altogether if you want (but I think that the other parts are pretty important).
",1,1,[]
1036,13538490,54,12777496,2014-03-13 18:54:45,2014-03-24 20:01:55,closed,Checking if view is alive before returning it.,"If the view widget was deleted (in qt) but we still have a reference to it in a weak-ref, don't return it as being valid.
",2,1,[]
1037,13317091,50,12777496,2014-03-07 16:37:39,2015-03-17 04:45:50,closed,BarGraphItem improvements,"Make interface to BarGraphItem a little bit closer to PlotCurveItem and PlotDataItem
",0,3,[]
1038,13266103,49,12777496,2014-03-06 15:36:48,2015-02-28 16:54:01,closed,PyQt5 support for PyQtGraph,"Here is a pull-request for the PyQt5 support in pyqtgraph. Due to the API differences between Qt4 and Qt5 I've opted to use the existing PySide/PyQt4 wrapper `Qt.py` to implement a wrapper for PyQt5, re-implementing deprecated APIs in use in pyqtgraph and moving classes back to their previous places in the Qt namespace.

The approach to getting all the moved classes back into the correct namespace is as follows:

```
# Import all QtWidgets objects into QtGui
for o in dir(QtWidgets):
    if o.startswith('Q'):
        setattr(QtGui, o, getattr(QtWidgets,o) )
```

This is quite horrible, but I could not think of a nice way to do it. If we want to avoid shifting the lot a list of all QtGui objects used in the code that are now in QtWidgets would be needed (volunteers). This could be avoided entirely by importing the entire Qt namespaces within the Qt wrapper, e.g.

```
from QtGui import *
```

...in this wrapper, then....

```
import Qt
Qt.<QtClass> 
```

...in the pyqtgraph source. But that requires a bit overhaul elsewhere so I avoided it in favour of a drop-in replacement. However, the import and shift doesn't appear to take a noticeable amount of time.

Deprecated APIs are re-implemented using Python versions of the suggested replacement code available in the Qt5 release notes. I've implemented a bare-minimum to get Qt5 working, but others are very easy to add.

```
# Re-implement deprecated APIs
def scale(self, sx, sy):
    self.setTransform(QtGui.QTransform.fromScale(sx, sy), True)
QtWidgets.QGraphicsItem.scale = scale
```

As it stands, the implementation here works on all existing demos, except the OpenGL ones and a couple that directly import Qt (rather than using the wrapper) - these may be bugs in the demos rather than the wrapper, will need a look. I'm not familiar enough with how the demos are ""supposed"" to look under PyQt4 to be able to confirm that they are all working as expected though there are no errors.

Comments and suggestions welcome!
",6,3,[]
1039,13249007,48,12777496,2014-03-06 07:02:33,2020-11-07 05:08:54,closed,Docs dev,"Docs update inc,
- settings a theme
- adding link at top
- git hub banner
- and a few minor fixes
",5,17,['docs']
1040,13202837,47,12777496,2014-03-05 09:44:12,2020-11-07 05:05:12,closed,Split set and check options methods and avoid repeating code,"Try to split clearly the set/check and draw methods.
",2,1,[]
1041,13202296,46,12777496,2014-03-05 09:28:17,2020-06-11 00:06:09,closed,Add BarWidget,"Please check that the widget is correct.
",3,1,[]
1042,13202250,45,12777496,2014-03-05 09:26:46,2019-06-27 18:09:34,closed,Make the bars that are clickable visible,,3,1,[]
1043,13202232,44,12777496,2014-03-05 09:26:02,2014-03-06 20:31:40,closed,Detect range of the image using bottleneck if available and handle NaN values,,1,1,[]
1044,13160025,42,12777496,2014-03-04 13:07:36,2014-03-05 15:35:38,closed,Change FiniteCache to LRUCache (to fix critical bug),"FiniteCache has a bug where adding a few items to it and calling finite_cache.items() would makes it loop forever (I got it because when under a debugger it'd halt forever when trying to inspect a GraphicsItem).

So, changed it for an implementation which should be faster for the current use case and which doesn't have this bug.
",3,1,[]
1045,13111589,40,12777496,2014-03-03 12:37:57,2014-03-03 18:49:18,closed,Fixed crash when collecting items on ViewBox,"Also fixed exception which could happen when dragging when mouse handling is disabled.
",1,1,[]
1046,13018210,38,12777496,2014-02-27 19:14:24,2014-03-03 12:38:54,closed,Fix crash on ViewBox on PySide 1.2.1 / Fixed exception in pyqtgraph.graphicsItems.ViewBox.ViewBox.ViewBox.mouseDragEvent,"I just realized that I had trim-whitespaces enabled. Hope you don't mind...

As for the fixes, one is a simple one: in the mouseDragEvent the translateBy is only done if both x and y are not None (as this was a valid condition).

As for the crash, I can't say exactly how to reproduce it, but it happened reliably in my test-suite (which had many other things and pyqtgraph was the part that was crashing). In the test suite I created and deleted a number of graph windows -- and the crash never happened on the first one, only on subsequent requests.

Also note that in the test suite qt wasn't processing the events all the time, so, this could have some relation to the crash happening here... The comments in the commit should explain it better.
",3,6,[]
1047,12731942,37,12777496,2014-02-20 04:21:49,2014-03-01 14:38:37,closed,Make signature of the setPen method consistent,,2,2,[]
1048,12522565,36,12777496,2014-02-13 18:32:35,2014-03-05 09:24:41,closed,Detect range even if the array has nan values using bottlenck if available,"Modify quickMinMax to handle also numpy arrays with nan values, for performance reasons bottleneck is used if available.
",3,2,[]
1049,12453762,35,12777496,2014-02-12 09:05:20,2014-02-12 14:35:32,closed,BF: unicode fix for TableWidget,"Setting a table item value to a unicode value with non ascii chars would
cause the tablewidget contents to not be displayed (no exception thrown
either).

Changed all instances of str(..) or map(str,...) to use asUnicode and
issue seems to be fixed
",1,1,[]
1050,12445766,34,12777496,2014-02-12 01:53:12,2014-02-12 08:08:04,closed,BF: Dock.name() unicode fix,"If Dock.label.text() contained non ascii chars (for example if it was
set to évènts_zàhéér ), then Dock.name() was causing an exception as the
non ascii characters can not be decoded by str().

Simply removing the str() conversion around the Dock.label.text() being
returned seems to fix the issue and work for str and unicode label.text
types.
",2,2,[]
1051,12343144,32,12777496,2014-02-08 16:37:35,2014-03-01 02:34:26,closed,Link Updates in plotting.rst ,"Links to classes and functions updated/resolved in  plotting.rst

GraphicsLayoutItem renamed to GraphicsLayout (even in the svg/png)

Renaming of the ""Arguments:""

Additional findings fixed (alignments/malformed) lists
",6,17,[]
1052,12150384,30,12777496,2014-02-03 20:36:53,2014-02-05 19:07:27,closed,Minor changes on the docstrings,"Minor changes on the docstrings
- **Line style keyword arguments:** -List was not rendered because of missing blank line /identation
- Every ""argument"" in lists alligned to ""**Arguments:**
",2,3,[]
1053,12103848,29,12777496,2014-02-01 03:24:38,2014-12-24 00:35:33,closed,Master,"These are two corner cases I've encountered when playing with examples.
",2,4,[]
1054,11870618,28,12777496,2014-01-25 03:03:33,2014-01-25 14:04:54,closed,Fix metaarray import in MultiPlotWidget.py example and MultiPlotItem.py,"This fixes the MultiPlotWidget.py example.
",1,1,[]
1055,11623164,26,12777496,2014-01-17 15:01:01,2014-01-19 04:28:04,closed,LegendItem bugfix,"drawSymbol is module-level funct, not class method
",1,1,[]
1056,11487040,25,12777496,2014-01-14 10:32:43,2019-07-03 00:16:28,closed,Allow use of derived classes and add missing argument,"Unless one can recover the last event handled by the PlotCurveItem or the ScatterPlotItem, it is impossible to recover things like what mouse button was pressed and so on. The proposed modification allows to use derived classes of PlotDataItem, PlotCurveItem and ScatterPlotItem to handle events in a different manner.
",2,1,[]
1057,11485421,24,12777496,2014-01-14 09:34:53,2014-01-15 03:30:31,closed,Nicer range for value histogram of integer images.,"When an ImageItem's data has an integer dtype, this patch ensures that
each bin of the LUT histogram contains the same number of integer
values, in order to avoid ""spikes"" in the histogram that are merely due
to some bins covering more integer values than others.

This commit needs testing (it was rebased from an old commit).
",1,1,[]
1058,10875807,21,12777496,2013-12-16 23:04:39,2013-12-16 23:37:53,closed,Some Python3 related fixes.,"Nothing fancy here.
",1,1,[]
1059,10479748,20,12777496,2013-12-03 17:05:18,2016-01-27 19:28:56,closed,"ENH: glViewWidget: set background color, add lighting, add camera roll, validate color size","Todo:
- ~~Fix lighting location. (Isn't quite right, doesn't move with object -- should have to do with OpenGL frame of reference)~~
- Add automatic bounding sphere support to meshes
- Add automatic least-distance calculation to camera position
- Add FSAA?
",7,6,[]
1060,10328064,17,12777496,2013-11-27 06:47:47,2013-12-15 14:31:50,closed,Profilers controllable via PYQTGRAPHPROFILE.,"I wrote this patch to allow simpler use of the profilers (that is,
without having to modify the source to turn profilers on and off).

A new function profiling system is implemented.  Most importantly, this
allows one to profile various internal functions directly by setting the
`PYQTGRAPHPROFILE` environment variable to a comma separated list of
function and method names, e.g.

```
PYQTGRAPHPROFILE=functions.makeARGB,ImageItem.render \
    python -mexamples
```

Specifically, items in `PYQTGRAPHPROFILE` must be of the form
`classname.methodname` or `dotted_module_name.functionname`, with the
initial ""pyqtgraph."" stripped from the dotted module name.

Moreover, the overhead of inactive profilers has been kept minimal: an
introspective check of the caller's name (only if `PYQTGRAPHPROFILE` is
set) and a trivial function (not method) call per profiler call.

The new profilers rely on `sys._getframe` to find the caller's name,
although the previous system (passing the caller's name explicitely)
could certainly have been kept instead.

Finally the API of profilers has been changed: register a
profiling point simply by calling the profiler, and profilers are
automatically flushed on garbage collection.  See the docstring of
`pyqtgraph.debug.Profiler` for more details.
",2,1,[]
1061,10034945,14,12777496,2013-11-17 22:22:09,2013-11-22 04:44:04,closed,Don't copy the context menu of ViewBoxes.,"This allows customization of the context menu of a ViewBox simply by
calling viewbox.menu.addAction(...).  See issue #13.  Also some cleanup.
",6,3,[]
1062,10021503,11,12777496,2013-11-16 02:11:29,2013-11-16 02:18:51,closed,Faster import of PyQtGraph.,"- RawImageWidget (and thus OpenGL) isn't imported by default anymore.
- scipy.stats.scoreatpercentile is replaced by numpy.percentile.

This commit has **not** been tested as the example runner is currently
broken.

See issues #9 and #10.
",0,1,[]
1063,8588555,6,12777496,2013-09-25 10:26:44,2013-11-01 04:59:55,closed,Fix AxisItem with SIPrefix,"Fix #4. The problem seems to be that the textWidth is not measured for first level ticks. Why this bug is only occurring when there is a SI prefix? I have no idea, but it's a good idea to measure textwidth of first level ticks.
",0,4,[]
1064,8476013,3,12777496,2013-09-20 07:55:48,2014-01-19 00:21:30,closed,optimize ScatterPlotItem with pxMode=True,"Improve the performance of ScatterPlotItem with pxMode=True by 3x. #2
",1,9,[]
1065,8448999,1,12777496,2013-09-19 12:14:53,2020-11-06 21:06:44,closed,Add uncertainty,"Add the possibility to print an uncertainty in siFormat and ValueLabel. The uncertainty is printed with one significant number and the precision of the value is adjusted appropriately. Also add unittest for siFormat, siEval, siScale and ValueLabel. In addition correct a little bug found with the unittest, the character µ is not the same as μ but both should be recognized by siEval.
",7,7,[]
0,707585448,1584,92974124,2021-08-10 18:48:29,,open,Allow subclassing DataSet using _wrappers dict,"### Overview

This PR closes #1565 and allows for developers to sublass a `DataSet` class and be able to set this as the default object to coerce vtk objects to.

Sample usage:

```py
import pyvista

def Foo(pyvista.PolyData):
    pass

pyvista._wrappers['vtkPolyData'] = Foo

uniform_grid = pyvista.UniformGrid()
surface = uniform_grid.extract_surface()
assert isinstance(surface, Foo)
```
### Details

The test shows that this also works for `inplace=True` usage.  This eliminates the need to change the `overwrite` method.

",8,7,[]
1,705947048,1571,92974124,2021-08-07 21:18:12,,open,Documentation Overhaul,"We need to address several documentation related request (including #1531).

### Data Model Documentation Checklist
- [x] Creating Arrays from VTK, numpy, and list.
- [x] Creating geometry from those arrays.
- [ ] Data arrays
  - [ ] Point arrays
  - [ ] Cell arrays
  - [ ] Field arrays
- [ ] Data attributes and methods.
- [ ] Other geometry types?
- [ ] Comparison of vtk `__str__` and pyvista `__repr__`

### Misc
- [x] Add PyVista vs. VTK section
- [x] Cleanup what is a mesh
- [ ] Use templates for the rest of our class APIs

Additionally:
- Several examples were added to improve our example code coverage.",12,15,[]
2,705792370,1569,92974124,2021-08-06 23:23:05,,open,Add methods of flip and scale,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Add methods of flip and scale

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
https://github.com/pyvista/pyvista/issues/1568

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->
resolves https://github.com/pyvista/pyvista/issues/1568

### Details

#### main
```python
import pyvista as pv

mesh = pv.Sphere()
# Scale
mesh.points[:, 0] *= 1.0
mesh.points[:, 1] *= 2.0
mesh.points[:, 2] *= 3.0
# Flip with x axis
mesh.points[:, 0] *= -1
# Flip with y axis
mesh.points[:, 1] *= -1
# Flip with z axis
mesh.points[:, 2] *= -1
```

#### PR
```python
import pyvista as pv

mesh = pv.Sphere()
# Scale
mesh.scale([1.0, 2.0, 3.0])
# Flip with x axis
mesh.flip_x()
# Flip with y axis
mesh.flip_y()
# Flip with z axis
mesh.flip_z()
```
",5,15,[]
3,705031697,1564,92974124,2021-08-05 21:21:32,,open,"WIP: Add time to EnSight and OpenFOAM reader classes, add PVD reader class","### Overview
#1536 needs to be merged first.  I'm pushing this now in case it helps frame some of the decisions in #1536 or for reviewing in that PR.  I can also combine these PR's but this would result in a very, very large PR like this one looks like currently.

This PR is a followon to #1536 that adds time support to existing EnSight and OpenFOAM readers.  A from-scratch PVD reader is also added.

This is the functionality that I am most excited to finally get into pyvista!  It can replace my hacked mess for reading in these files for analysis.

### Details

EnSight and OpenFOAM both handle time a little differently, so an abstract class is inherited that ensures that we have a consistent user interface for interacting with the reader for time handling.

Again, I tested the OpenFOAM reader against an internal dataset.  There are some quirks.  For example, a reader cannot be reused, but overall it works OK.  This is untested here.

Closes: #414 

TODO:

- [ ] Keep up to date with Review in #1536
- [ ] Add better docstrings to time classes
- [ ] Upload PVD datasets to vtk-data
- [ ] Add another test for PVD reader including one dataset that includes multiple parts
",1,31,[]
4,704162099,1562,92974124,2021-08-04 23:26:50,,open,[WIP] Add examples coverage report,"This PR adds examples coverage report based on work from https://github.com/pyansys/PyAEDT/pull/368#issuecomment-893022213.

This example coverage report is not used other than to report on the coverage of our examples.  In the future we can report on specific modules. 

```
$ make example-coverage 
python tests/check_example_coverage.py

Documentation example coverage report for ""pyvista"".

Name                                        Docstrings    Missed   Covered
--------------------------------------------------------------------------
pyvista._typing                                      1         1      0.0%
pyvista._version                                     1         1      0.0%
pyvista._vtk                                         7         7      0.0%
pyvista.core.common_data                             2         1     50.0%
pyvista.core.composite                              30        16     46.7%
pyvista.core.dataobject                             23        20     13.0%
pyvista.core.dataset                                74        69      6.8%
pyvista.core.datasetattributes                      23        23      0.0%
pyvista.core.errors                                  9         9      0.0%
pyvista.core.filters.composite                       6         6      0.0%
pyvista.core.filters.data_set                       62        12     80.6%
pyvista.core.filters.poly_data                      41         6     85.4%
pyvista.core.filters.structured_grid                 4         2     50.0%
pyvista.core.filters.uniform_grid                    4         4      0.0%
pyvista.core.filters.unstructured_grid               3         3      0.0%
pyvista.core.grid                                   32        30      6.2%
pyvista.core.imaging                                 2         1     50.0%
pyvista.core.objects                                39        38      2.6%
pyvista.core.pointset                               74        35     52.7%
pyvista.jupyter.itkplotter                           8         6     25.0%
pyvista.plotting.axes                                8         2     75.0%
pyvista.plotting.background_renderer                 4         4      0.0%
pyvista.plotting.camera                             27         6     77.8%
pyvista.plotting.colors                              4         4      0.0%
pyvista.plotting.export_vtkjs                       17        17      0.0%
pyvista.plotting.lights                             40        11     72.5%
pyvista.plotting.mapper                              2         2      0.0%
pyvista.plotting.picking                            12        12      0.0%
pyvista.plotting.plotting                           95        64     32.6%
pyvista.plotting.render_window_interactor           44        35     20.5%
pyvista.plotting.renderer                           80        50     37.5%
pyvista.plotting.renderers                          24        23      4.2%
pyvista.plotting.scalar_bars                        14        13      7.1%
pyvista.plotting.tools                              12        11      8.3%
pyvista.plotting.widgets                            25        24      4.0%
pyvista.themes                                     104        24     76.9%
pyvista.utilities.cells                             12        10     16.7%
pyvista.utilities.errors                            28        27      3.6%
pyvista.utilities.features                           6         5     16.7%
pyvista.utilities.fileio                            13         8     38.5%
pyvista.utilities.geometric_objects                 21         2     90.5%
pyvista.utilities.helpers                           45        36     20.0%
pyvista.utilities.misc                               3         3      0.0%
pyvista.utilities.parametric_objects                25         3     88.0%
pyvista.utilities.regression                         5         4     20.0%
pyvista.utilities.sphinx_gallery                     4         4      0.0%
pyvista.utilities.transformations                    4         1     75.0%
pyvista.utilities.xvfb                               2         1     50.0%
--------------------------------------------------------------------------
Total                                             1125       696     38.1%
```
",4,4,[]
5,704127414,1561,92974124,2021-08-04 22:48:28,2021-08-05 02:34:27,closed,`probe` filter supports SetCellLocatorPrototype,Had some confusing behavior with the `probe` filter today that I don't really understand but specifying a cell locator fixed it.,1,1,[]
6,701178036,1557,92974124,2021-08-02 06:53:35,,open,Add pythreejs backend,"Jupyterlab support within pyvista is decent, but we still lack a great client side rendering backend.  ``ipygany`` is great, but it used Geometry vs. BufferedGeometry, resulting in lower quality scenes that use more bandwidth.  Additionally, these scenes only support a small subset of the representations avaialble in pyvista (i.e. wireframe and edges are not supported, nor is physically based rendering or flat shading).  Furthermore, since pythreejs is a lower level library, you can modify the camera and scene to get it to match the pyvista scene more accurately.

`pythreejs` brings us closer to faithfully representing a scene directly within a browser from VTK without using `vtk.js`.  In fact, many of our plots are broken due to a reliance on `panel` and `vtk.js` (see [What is a mesh?](https://github.com/jupyter-widgets/pythreejs/issues), though it's unclear who the culprate is.  This may only be broken on my end...

I still feel that three.js is a better javascript plotting backend, though this may change at a later date.  For now, this brings us much closer to being able to render many of our plots within our online documentation interactively.

- [x] Add basic scene support
- [x] Add lighting support
- [x] Add camera support 
- [x] Add scalar support
- [x] Add documentation
  - [x] Add section explaining pythreejs in the notebook plotting section
  - [ ] Include an example of exporting to html.
- [ ] Fix color saturation
- [ ] RGBA:
  - [ ] Point scalars
  - [x] Cell scalars
- [ ] Add multiple render windows.
- [ ] Add unit testing

https://user-images.githubusercontent.com/11981631/127816855-a5cf17fd-534d-4570-a950-f776dc7f60f3.mp4

---

For a follow-up PR.

- Create a ipyvista library that directly exposes features from threejs.  It seems that pythreejs isn't as well maintained as it should be: https://github.com/jupyter-widgets/pythreejs/issues

",3,13,[]
7,700999449,1555,92974124,2021-08-01 22:45:30,2021-08-02 02:35:03,closed,change default window size to 1024 x 768,"### Change default documentation build figure size to 1024 x 768

This has been bugging me for a while.  Currently, our docs are built at 2x the default window size (2048 x 1536), and this causes a variety of issues since the DPI is effectively double.  Most noticeable is fonts and line widths are scaled down to the point of obscurity or unreliability, and this has been especially bad in #1432.

This PR proposes going back to ``1024 x 768``, which displays quite well for our docs, and even improves documentation build times.
",1,1,[]
8,700932276,1554,92974124,2021-08-01 15:35:00,2021-08-01 17:53:52,closed,Convert scalar bar keys to list,"Reverts a minor change made in #1553 whereby the ``_scalar_bar_mappers`` dict keys can change during the iteration.  Response to https://github.com/pyvista/pyvista/pull/1553#discussion_r680499176
",2,1,[]
9,700774485,1553,92974124,2021-07-31 22:11:37,2021-08-01 14:14:14,closed,correctly remove scalar bar actor,"Resolve #1368 by removing the scalar bar slot when removing the scalar bar.
",5,1,[]
10,700769941,1552,92974124,2021-07-31 21:24:35,2021-08-02 04:23:54,closed,Add movie quality,"Resolve #1468 by adding a quality parameter to ``open_movie``.

Also adds examples to:
- ``write_frame``
- ``open_gif``
- ``open_movie``
- ``generate_orbital_path``
- ``orbit_on_path``
",1,7,[]
11,700761255,1551,92974124,2021-07-31 20:00:46,2021-08-03 21:49:35,closed,fix add/remove background layer bug,"Resolves #1548 by resetting the layer position of the active renderer when a background layer is removed.
",1,2,[]
12,700721426,1550,92974124,2021-07-31 14:53:44,2021-08-04 00:29:37,closed,Use plotter local theme of scalar bars,"Resolves #1492 by using the plotter local theme for scalar bars.
",1,1,[]
13,697818723,1544,92974124,2021-07-27 12:31:44,2021-07-28 09:15:27,closed,🎬 Add Create a GIF Movie with updating textures,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Add Create a GIF Movie with updating textures. Point is using `plotter.clear()` .

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->
resolves https://github.com/pyvista/pyvista/discussions/1528

### Details

```python
# Create a plotter object
plotter = pv.Plotter(notebook=False, off_screen=True)

# Open a gif
plotter.open_gif(""texture.gif"")

pts = curvsurf.points.copy()

# Update Z and write a frame for each updated position
nframe = 15
for phase in np.linspace(0, 2 * np.pi, nframe + 1)[:nframe]:

    # create an image using numpy,
    z = np.sin(r + phase)
    pts[:, -1] = z.ravel()

    # Creating a custom RGB image
    zz = A * np.exp(-0.5 * ((xx / b) ** 2.0 + (yy / b) ** 2.0))
    hue = norm(zz.ravel()) * 0.5 * (1.0 + np.sin(phase))
    colors = (cmap(hue)[:, 0:3] * 255.0).astype(np.uint8)
    image = colors.reshape((xx.shape[0], xx.shape[1], 3), order=""F"")

    # Convert 3D numpy array to texture
    tex = pv.numpy_to_texture(image)

    plotter.add_mesh(curvsurf, smooth_shading=True, texture=tex)
    plotter.update_coordinates(pts, render=False)

    # must update normals when smooth shading is enabled
    plotter.mesh.compute_normals(cell_normals=False, inplace=True)
    plotter.render()
    plotter.write_frame()
    plotter.clear()

# Closes and finalizes movie
plotter.close()
```
![texture](https://user-images.githubusercontent.com/7513610/127153889-cc5803f2-59bc-4b9b-b1e9-2435c50e2787.gif)
",1,2,['example']
14,696411788,1540,92974124,2021-07-24 22:13:57,2021-07-31 04:18:14,closed,Collision filter,"This PR adds support for [vtkCollisionDetectionFilter](https://vtk.org/doc/nightly/html/classvtkCollisionDetectionFilter.html#af310f9312cd84f971a8a7a77f1f2d1eb). Includes a docstring example and full example.

![collision_movie](https://user-images.githubusercontent.com/11981631/126882222-407e7361-ada7-49f6-a7cf-1e72df67964b.gif)
",8,11,[]
15,694696583,1538,92974124,2021-07-21 20:45:29,2021-07-27 04:11:42,closed,`clip_scalar` option to return both meshes,"Adds an optional argument to the `clip_scalar` filter to return both meshes. This corresponds to `GenerateClippedOutput` in VTK, a name I find a little confusing so it's just called `both` here.

",23,17,[]
16,694501666,1536,92974124,2021-07-21 15:54:13,,open,Add Reader classes,"### Overview

This PR adds Reader classes that provides more fine-grained control of reading data files.  Some classes include the ability to inspect and enable/disable the reading of point and cell arrays.

closes #1520 

### Details

Future enhancements will include inspecting and setting time points to read, and more specific details for specific readers like vtkOpenFOAMReader, for example the ability to turn on and off the cell data to point data during data read.

The provided example shows the usage of the new class.


TODO:

- [x] Implement all XMLReaders
- [x] Implement openFOAM Reader
- [x] Implement GenericEnsightReader
- [x] Add list of supported file types
- [x] Tests  <- OpenFOAM tested locally and the "".p*"" type files not tested
- [x] ~~Use observer functionality similar to `pyvista.read`~~ Not needed?",22,30,[]
17,692161407,1524,92974124,2021-07-18 22:53:40,2021-07-18 23:43:29,closed,fix binder link,"Resolve #1522 by updating the binder link.
",1,1,[]
18,692135084,1523,92974124,2021-07-18 19:07:59,2021-07-19 00:47:00,closed,add hidden line removal and misc doc cleanups,"### Miscellaneous Documentation cleanups
- Moves theme documentation to its own section within the API reference
- Fixes several plotting links
- Adds a template to reduce the full method name in the autodoc sections.  For example for many of the API sections of our current docs, many of the method names are completely obscured due to their length.  Since the module and classes are already listed, only the method name needs to be shown.  Here's an example of the problem:
![full](https://user-images.githubusercontent.com/11981631/126082115-76aa49b1-9951-4592-a577-f464c217bf32.png)

**This PR Fixes it with:**
![fixed](https://user-images.githubusercontent.com/11981631/126082186-5fb9d1d2-9d16-48dc-803d-5d1253779295.png)

### Add Hidden line removal

While going over some VTK examples, noticed that we're missing the ability to enable or disable hidden line removal.  It makes for much cleaner wireframe plots.

Since this is such a great option to have.  I've added it as a theme setting and enabled it by default for the documentation theme.  It really makes some of our docs look better.  For example:

```py
import pyvista
sphere_a = pyvista.Sphere()
sphere_b = pyvista.Sphere(center=(0.5, 0, 0))
result = sphere_a.boolean_intersection(sphere_b)
pl = pyvista.Plotter()
_ = pl.add_mesh(sphere_a, color='r', style='wireframe', line_width=3)
_ = pl.add_mesh(sphere_b, color='b', style='wireframe', line_width=3)
_ = pl.add_mesh(result, color='tan')
pl.camera_position = 'xz'
pl.show()
```

#### Without `hidden_line_removal`
![image](https://user-images.githubusercontent.com/11981631/126079404-40de873e-9a8d-415e-926c-43d94e8fd4f4.png)


#### With `hidden_line_removal`
![image](https://user-images.githubusercontent.com/11981631/126079388-83cbb51f-de7e-4a3b-b880-dd3b912d0d62.png)


---
Here's the offical example:

```py
Create a side-by-side plotter and render a sphere in wireframe
with hidden line removal enabled on the left and disabled on
the right.

>>> import pyvista
>>> sphere = pyvista.Sphere(theta_resolution=20, phi_resolution=20)
>>> pl = pyvista.Plotter(shape=(1, 2))
>>> pl.add_mesh(sphere, line_width=3, style='wireframe')
>>> pl.add_text(""With hidden line removal"")
>>> pl.enable_hidden_line_removal(all_renderers=False)
>>> pl.subplot(0, 1)
>>> pl.add_mesh(sphere, line_width=3, style='wireframe')
>>> pl.add_text(""Without hidden line removal"")
>>> pl.show()
```

![image](https://user-images.githubusercontent.com/11981631/126079513-ffdd3ec8-8595-46ae-ae65-e06d8cce3497.png)",1,4,[]
19,692017942,1521,92974124,2021-07-18 02:24:15,2021-07-18 16:52:40,closed,Remove panel for docs,"This PR removes `jupyter-execute` when rendering interactive plots using panel.  Sadly, support for this seems to be broken at this point (fortunately ``ipygany`` still works), so instead we should use the new directive ``pyvista-plot``.  It's been updated to support GIFs as well.

Additionally, this adds an example created by @adamgranthendry in https://github.com/pyvista/pyvista-support/issues/461, as well as an example within the user guide in https://github.com/pyvista/pyvista-support/issues/463
",1,6,[]
20,691976067,1519,92974124,2021-07-17 19:11:57,2021-07-18 09:07:17,closed,🚩 Add progress_bar to filters/algorithms,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Add progress_bar to filters/algorithms

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
relate to https://github.com/pyvista/pyvista/issues/1518

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->
resolves https://github.com/pyvista/pyvista/issues/1518

### Details

- None

",1,35,[]
21,690196429,1516,92974124,2021-07-14 20:16:05,2021-07-15 00:33:40,closed,"Updates for streamlines-evenly-spaced-2D: warnings, defaults, returns","### Overview

#1508 uncovered a bug in earlier versions of vtk, this is added as a warning to the docstring.  numpydoc style suggests a heading like this and discourages a `.. warning` directive.  I also see an example of this kind of heading in the library pointset module.

### Details

This PR also supplies a default parameter for `separating_distance_ratio`, which I took from the [vtk filter](https://github.com/Kitware/VTK/blob/6a9c565da01bcd6295d0bcbb66c0a9d0d2eaa69e/Filters/FlowPaths/vtkEvenlySpacedStreamlines2D.cxx#L65).   

The current choice for default for `separating_distance` , 10, is much larger than the vtk choice, 1.  A higher value is less likely to crash, so I still like this choice as a default.  I _think_ all the other choices are consistent.

Finally the return doesn't need a named value, just the type.",2,3,[]
22,690124735,1515,92974124,2021-07-14 18:16:42,2021-07-14 23:49:51,closed,fix colormaps on landing page,"Two of our landing page examples are broken for the vanilla plotter due to the colormaps we use.  This PR fixes it by using colormaps compatible between `ipygany` and `matplotlib`.

Resolves #1365 ",1,1,[]
23,689220968,1514,92974124,2021-07-13 16:32:55,2021-07-17 21:10:06,closed,Cleanup pointset documentation,This PR improves our pointset documentation.,1,3,[]
24,687595089,1512,92974124,2021-07-12 07:45:53,2021-07-12 18:31:06,closed,Remove almost all remaining doctest prints,"Some doctests still have a few prints that pollute logs. This removes 3 out of 4. The last one would be hard to remove, because I don't have docker, I don't have nvidia, and it's a multiline string which we'd need display without printing: https://github.com/pyvista/pyvista/blob/d4931b6cc3366b09f7d546baa85156f3c0163550/doc/extras/docker.rst#L95-L106

So I left this last one.",2,2,[]
25,687238888,1510,92974124,2021-07-10 21:14:38,2021-07-14 15:53:26,closed,Improve utilities docs,"This PR improves our utilities docs by providing examples for our various public utilities.  It also lists files supported by ``pyvista.read``.
",2,6,[]
26,687203716,1509,92974124,2021-07-10 16:02:41,2021-07-14 15:52:24,closed,Add save texture for PLY,"This PR adds the ability to save textures when writing PLY files.  Resolves #1503.

```py
Save a mesh as a PLY with a texture array.  Here we also
create a simple RGB array representing the texture.

>>> import pyvista
>>> sphere = pyvista.Sphere()
>>> texture = np.zeros((sphere.n_points, 3), np.uint8)
>>> texture[:, 1] = np.arange(sphere.n_points)[::-1]  # just blue channel
>>> sphere.point_arrays['my_texture'] = texture
>>> sphere.save('my_mesh.ply', texture='my_texture')

```
",2,5,[]
27,687083978,1506,92974124,2021-07-09 23:23:04,2021-07-10 15:34:08,closed,Refactor MultiBlock and slice_along_axis,"Some refactors that came up during https://github.com/pyvista/pyvista/pull/1482. Closes https://github.com/pyvista/pyvista/issues/1494.

- [x] https://github.com/pyvista/pyvista/pull/1482#discussion_r664015140 (refactor `MultiBlock.bounds`)
- [x] https://github.com/pyvista/pyvista/pull/1482#discussion_r664019043 (refactor `MultiBlock.volume`)
- [x] ~~https://github.com/pyvista/pyvista/pull/1482#discussion_r664022363 (refactor `MultiBlock.get_block_name`)~~ we can't actually refactor this because we'd need `.keys()` and `.keys()` is defined in terms of `get_block_name`...
- [x] https://github.com/pyvista/pyvista/pull/1482#discussion_r664094024 (refactor `DataSetFilters.slice_along_axis`)",1,4,[]
28,686104448,1502,92974124,2021-07-08 15:11:16,2021-07-09 16:31:55,closed,Add additional ray trace example,"One of the projects of mine uses the [Möller–Trumbore intersection algorithm](https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm
), and I needed to add an additional feature to convert to barycentric coordinates.  It was helpful to visualize this and I used (of course) pyvista.

Figured to place the example here since it's a neat algorithm and it's always cool to plot stuff.

![image](https://user-images.githubusercontent.com/11981631/124946312-29a60280-dfcc-11eb-9acc-dfdab59b0ecb.png)
",1,3,[]
29,684029338,1496,92974124,2021-07-06 03:18:30,2021-07-08 05:56:05,closed,Add legend face option,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Add legend face option.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->
resolves #1487

### Details

```python
import pyvista

pl = pyvista.Plotter()
legend_elements = [[str(i), (1, 1, 1)] for i in range(13)]
pl.add_legend(legend_elements, size = [1.0, 1.0], origin = [0.0, 0.0])
pl.show(screenshot=""legend_triangle_face.png"")
```
<img src=""https://user-images.githubusercontent.com/7513610/124536826-ad88af00-de53-11eb-85f6-6b32c9ee4c3d.png"" width=""320px"">

```python
pl = pyvista.Plotter()
legend_elements = [[str(i), (1, 1, 1)] for i in range(13)]
pl.add_legend(legend_elements, size = [1.0, 1.0], origin = [0.0, 0.0], face = ""circle"")
pl.show(screenshot=""legend_triangle_circle.png"")
```
<img src=""https://user-images.githubusercontent.com/7513610/124536820-a82b6480-de53-11eb-8700-6ef737b02634.png"" width=""320px"">

```python
pl = pyvista.Plotter()
legend_elements = [[str(i), (1, 1, 1)] for i in range(13)]
pl.add_legend(legend_elements, size = [1.0, 1.0], origin = [0.0, 0.0], face = ""rectangle"")
pl.show(screenshot=""legend_triangle_rectangle.png"")
```
<img src=""https://user-images.githubusercontent.com/7513610/124536833-b1b4cc80-de53-11eb-944b-580d906f876f.png"" width=""320px"">
",3,4,[]
30,683939917,1495,92974124,2021-07-05 21:23:34,2021-07-05 23:52:51,closed,narrow mac version testing,"### Narrow MacOS CI version testing to 3.7 and 3.8

MacOS concurrency limits are a quarter that of Windows and Linux [GitHub Actions Limits](https://docs.github.com/en/actions/reference/usage-limits-billing-and-administration), and our MacOS CI is sometimes quite backed up.  This PR limits MacOS testing to just the two most popular versions according to [PyPi Download Stats - PyVista](https://docs.github.com/en/actions/reference/usage-limits-billing-and-administration).



",1,1,[]
31,683593013,1490,92974124,2021-07-05 10:52:21,2021-07-05 15:52:33,closed,Minor post-PR cleanup,"A few mistakes left after https://github.com/pyvista/pyvista/pull/1485 and https://github.com/pyvista/pyvista/pull/1441, and a small improvement related to the former.",1,3,[]
32,683307252,1489,92974124,2021-07-05 02:40:33,2021-07-14 15:51:44,closed,Add support for glTF,"Resolve #1469 by adding support for gltf along with:
- Examples
- Export
- Import
- Documentation
",6,14,[]
33,683256846,1488,92974124,2021-07-04 23:50:59,2021-07-10 15:33:50,closed,Check all_scalars before assigning scalars by default,"The `threshold()` filter supports the `all_scalars` kwarg:
```
        all_scalars : bool, optional
            If using scalars from point data, all scalars for all
            points in a cell must satisfy the threshold when this
            value is ``True``.  When ``False``, any point of the cell
            with a scalar value satisfying the threshold criterion
            will extract the cell.
```

When enabling this keyword we get an error:
```py
>>> import pyvista as pv
>>> mesh = pv.Cube()
>>> mesh['scalars'] = mesh.points[:, -1]
>>> mesh.threshold(all_scalars=True)
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/home/adeak/pyvista/pyvista/core/filters/data_set.py"", line 598, in threshold
    raise ValueError('Setting `all_scalars=True` and designating `scalars` '
ValueError: Setting `all_scalars=True` and designating `scalars` is incompatible.  Set one or the other but not both
```

We didn't set any scalars! The check for this error came after a reassignment of `scalars` when it was `None`:
```py
        # set the scalaras to threshold on
        if scalars is None:
            field, scalars = dataset.active_scalars_info
        arr, field = get_array(dataset, scalars, preference=preference, info=True)

        if all_scalars and scalars is not None:
            raise ValueError('Setting `all_scalars=True` and designating `scalars` '
                             'is incompatible.  Set one or the other but not both')
```

Since we need scalars to threshold (we even get an error when there are no scalars), it seems the second check should just be moved before the first check.

I also don't see why `scalars='something'` and `all_scalars=True` are mutually exclusive. Is there really a good reason for this?",4,1,[]
34,683116464,1486,92974124,2021-07-04 05:12:11,2021-07-12 02:08:43,closed,Improve polydata filter examples,"This PR improves our polydata examples by adding plot examples for nearly each method.
",1,26,[]
35,683098112,1485,92974124,2021-07-04 01:12:37,2021-07-05 05:18:50,closed,Fix boolean behavior,"Current behavior of boolean cut uses ``SetOperationToIntersection``, which does not produce the desired behavior of actually cutting.  For example:

```py
>>> import pyvista
>>> cube = pyvista.Cube().triangulate().subdivide(2).clean()
>>> sphere = pyvista.Sphere(center=(0.5, 0.5, 0.5))
>>> sphere_cutting_cube = cube.boolean_cut(sphere)
>>> sphere_cutting_cube.plot(show_edges=True)
```

Produces the union of the two meshes:
![wrong](https://user-images.githubusercontent.com/11981631/124370237-5657c400-dc32-11eb-9461-a849be7261f6.png)

---

This PR corrects this behavior to instead use ``SetOperationToDifference``, which returns the correct mesh:
![right](https://user-images.githubusercontent.com/11981631/124370238-5bb50e80-dc32-11eb-8a7a-b8dd67c782a9.png)


### Fix ``boolean_difference``
Boolean difference is now ``boolean_cut``.  Needing a `intersection` operation, this PR also changes ``boolean_difference`` to ``boolean_intersection``, which ironically already has a docstring matching the behavior of `SetOperationToIntersection`.",9,23,[]
36,683086076,1482,92974124,2021-07-03 22:44:42,2021-07-06 01:28:01,closed,Improve dataset filter examples,"In order to match ``numpy`` and ``scipy`` documentation standards, this PR adds examples and links to individual methods for nearly all the methods in `pyvista.core.filters.data_set` and `pyvista.core.filters.composite`

Other changes include:
- Minor parameter docstring improvements
- Addition of references for examples
- Enlargement of font size for figures
- Additional method links for scalar_bar_args defaults.
- Remove comment regarding Python 3.9 in `setup.py`",10,20,[]
37,682373139,1479,92974124,2021-07-02 06:31:01,2021-07-02 22:34:33,closed,Add and improve examples,"With #1457, we can start to improve our documentation examples.  Combined with isolated documentation pages for each method, we can have examples match how `numpy`, `scipy`, and `pandas` create their examples.

![tmp](https://user-images.githubusercontent.com/11981631/124230817-bcc2d200-dacc-11eb-869e-c290c92c1e92.png)
",2,8,[]
38,682106157,1478,92974124,2021-07-01 19:16:05,2021-07-04 00:48:00,closed,Do not return cpos by default,"This PR resolves #1467 by addressing the discussion in #1457 by not returning the camera position by default.

Also, fixes an issue that has been bothering me for our docs.  The sidebar is offset and removing ``html_show_sourcelink = False`` fixes it.  This is important as we make our API documentation one method per page and the sidebar gets clobbered without this fix.
",10,22,[]
39,682076411,1477,92974124,2021-07-01 18:22:46,2021-07-01 19:16:24,closed,ignore debugleaks 'warning',"Resolves #1476
",3,1,[]
40,681975083,1475,92974124,2021-07-01 15:45:39,2021-07-27 11:21:13,closed,WIP: Fix clip scalars multiple usages,"### Overview

This PR is working towards resolving #1463.


### Details

First I will push failing tests to confirm that it indeed fails as expected with the whole CI suite as there is some subtle crosstalk in `vtk` somehow.  Interestingly, the test I added uncovered another bug in that the returned region is inverted.  When `invert=True`, the default, we should obtain the part of the mesh with the scalars below the value specified, but this is not the case here.  The second, which should be removed later, tests that the multiple calling of `clip_scalar` also fails when using `invert=False`.  This tests that calling it multiple times also causes a bug.

Second, I will push some changes to the `clip_scalar` filter to see if the test passes as expected.
",13,11,[]
41,680188300,1466,92974124,2021-06-29 16:30:22,2021-06-29 17:55:34,closed,Fix `Renderer.show_bounds()` docs,"The docs of `Renderer.show_bounds()` had a few kwargs that didn't exist, and it was missing a few kwargs that do exist. There was also an unnecessary import in the doctest.

In related news, I couldn't actually get the `fmt` kwarg to do anything using the VTK dev wheels. But if this is broken then that's probably not our fault. I know that it _could_ work in 2019: https://discourse.vtk.org/t/set-vtkcubeaxesactor-label-format-and-remove-exponent/457",1,1,[]
42,679166470,1462,92974124,2021-06-28 15:51:50,2021-06-28 16:54:14,closed,Add development installation notes,"When answering a question on pyvista-support, I realized we didn't have a clear explanation of how to install pyvista directly from our `main` branch.

This adds the explanation so we can reference it in the future.",1,1,[]
43,679164667,1461,92974124,2021-06-28 15:49:23,2021-06-29 01:31:47,closed,Deprecate `DataSet.vectors`,"### Overview

As discussed in #1430, this PR deprecates the usage of `DataSet.vectors` to set and retrieve vector data.  Today, pyvista does not explicitly distinguish between vector and scalar data other than `DataSet.active_vectors` and related methods.

The `DataSet.vectors` usage is a simple shorthand for 

```py
DataSet['_vectors'] = data
DataSet.active_vectors_name = ""_vectors""
```

This however leads to confusion as there is no special method for setting/retrieving scalars, tensors, etc.... (see https://github.com/pyvista/pyvista-support/issues/448). It is also unintuitive to have a key with a leading underscore, which suggest that this shouldn't be used by users.


### Details

Related to #1431, but not directly.

Closes #1430.

The warning message looks like:

```txt
pyvista/pyvista/core/dataset.py:256: PyvistaDeprecationWarning: Use of `DataSet.vectors` to add vector data is deprecated. Use `DataSet['vector_name'] = data` or `DataSet.point_arrays['vector_name'] = data` or `DataSet.cell_arrays['vector_name'] = data`. Use `DataSet.set_active_vectors('vector_name')` or `DataSet.active_vectors_name = 'vector_name' to make active.
```

I'm not sure why there is a hanging `warnings.warn(` at the end.  I think I followed the same logic as the other deprecations in the codebase.
",4,9,[]
44,678879628,1458,92974124,2021-06-28 09:36:18,2021-06-28 11:10:00,closed,📝 Fix typo,"### Overview
Small fix of typo

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",1,1,[]
45,678606073,1457,92974124,2021-06-28 00:17:28,2021-06-29 23:50:33,closed,Add pyvista plot directive,"##### tl;dr
Resolves #1426 by adding a new sphinx directive that automatically captures and renders any plots in our example sections. 

### Add plot directive and sphinx extension

Turns out there's an automated way of generating plots from our example sections, and it means that we can now automatically generating plots directly from our examples without having to skip them.  Since we're moving in the direction of one page from method/function, this is leading to some really clear examples:

![tmp](https://user-images.githubusercontent.com/11981631/123579614-7819fc80-d795-11eb-8ef7-19907e09c0f4.png)

We can also generate figures using the ``.. pyvista-plot::`` directive within our docs rather than using `jupyter-execute`.  This is multi-thread compatible and has none of the issues where the jupyter plots fail to come up in html.

### Notes
- This uses much of the code originally developed in https://github.com/matplotlib/matplotlib/raw/master/lib/matplotlib/sphinxext/plot_directive.py.  Without it, I would have never been able to figure this out.
- We directly monkey patch `sphinx.GoogleDocstring._parse_generic_section` in our `conf.py`.  There wasn't a way around this.  This is why `numpydoc` is the only plotter that actually allows you to automatically display `matplotlib` plots in their docs; they own the documentation tool.
- This PR disables outputting `cpos` when issuing `show`.  It's leading to messy code and the output from a `show` plot should be the plot when looking at examples.
- Have fun @adeak, this is a long one.",4,19,[]
46,678429009,1454,92974124,2021-06-26 23:37:10,2021-07-05 19:10:49,closed,Scalar preferences,"Resolves #1442

@kymok pointed out that in the edge case where `mesh.n_points == mesh.n_cells`, it's impossible to get cells to be prioritized when plotting rgb scalars (really, any scalars).

This PR adds an additional kwarg to `add_mesh` to allow the prioritization of cells rather than the default points.
",5,7,[]
47,678426136,1451,92974124,2021-06-26 23:01:29,2021-06-26 23:24:11,closed,only allow dataset types to be active,"Resolves #1450.

VTK issues warnings when attempting to set non vtkDataArtray subclasses to be active attributes.  This PR changes the default behavior of our `active_scalars` setter to only set numeric and boolean types to be active on the VTK side.
",1,1,[]
48,678367127,1449,92974124,2021-06-26 16:22:39,2021-06-26 22:17:16,closed,add ci for local namespace; fix two docstrings,"### Use Local Namespace for Doctests

This PR adds @adeak's recently added `tests/check_doctest_names.py` to our `Makefile` and CI testing.  This is a two part PR.  First part is straightforward as it's a simple modification of our CI.  Second part is fixing two docstring tests that had VTK errors that weren't swallowed by the doctest CI as we `exec` each docstring.

### Doctest VTK errors:

Calling:
```
python tests/check_doctest_names.py -v
```

#### PASSED: pyvista.core.filters.poly_data.PolyDataFilters.subdivide

```
2021-06-26 10:10:16.332 (   2.499s) [        9181C740]vtkLoopSubdivisionFilte:104    ERR| vtkLoopSubdivisionFilter (0x4567fe0): Dataset is non-manifold and cannot be subdivided. Edge shared by 3 cells
ERROR:root:Dataset is non-manifold and cannot be subdivided. Edge shared by 3 cells
2021-06-26 10:10:16.332 (   2.499s) [        9181C740]vtkApproximatingSubdivi:112    ERR| vtkLoopSubdivisionFilter (0x4567fe0): Subdivision failed.
ERROR:root:Subdivision failed.
2021-06-26 10:10:16.332 (   2.499s) [        9181C740]       vtkExecutive.cxx:753    ERR| vtkCompositeDataPipeline (0x454b2a0): Algorithm vtkLoopSubdivisionFilter(0x4567fe0) returned failure for request: vtkInformation (0x442fb30)
  Debug: Off
  Modified Time: 1286695
  Reference Count: 1
  Registered Events: (none)
  Request: REQUEST_DATA
  FROM_OUTPUT_PORT: 0
  ALGORITHM_AFTER_FORWARD: 1
  FORWARD_DIRECTION: 0


ERROR:root:Algorithm vtkLoopSubdivisionFilter(0x4567fe0) returned failure for request: vtkInformation (0x442fb30)
2021-06-26 10:10:16.334 (   2.501s) [        9181C740]vtkLoopSubdivisionFilte:104    ERR| vtkLoopSubdivisionFilter (0x4567fe0): Dataset is non-manifold and cannot be subdivided. Edge shared by 3 cells
ERROR:root:Dataset is non-manifold and cannot be subdivided. Edge shared by 3 cells
2021-06-26 10:10:16.334 (   2.501s) [        9181C740]vtkApproximatingSubdivi:112    ERR| vtkLoopSubdivisionFilter (0x4567fe0): Subdivision failed.
ERROR:root:Subdivision failed.
2021-06-26 10:10:16.334 (   2.501s) [        9181C740]       vtkExecutive.cxx:753    ERR| vtkCompositeDataPipeline (0x454b2a0): Algorithm vtkLoopSubdivisionFilter(0x4567fe0) returned failure for request: vtkInformation (0x4570120)
  Debug: Off
  Modified Time: 1293364
  Reference Count: 1
  Registered Events: (none)
  Request: REQUEST_DATA
  FROM_OUTPUT_PORT: 0
  ALGORITHM_AFTER_FORWARD: 1
  FORWARD_DIRECTION: 0


ERROR:root:Algorithm vtkLoopSubdivisionFilter(0x4567fe0) returned failure for request: vtkInformation (0x4570120)
```

Fixed by using a manifold mesh.


#### PASSED: pyvista.plotting.plotting.BasePlotter.add_background_image

```
WARNING:root:Encountered issue in callback (most recent call last):
  File ""/home/alex/python/pyvista/pyvista/plotting/background_renderer.py"", line 43, in resize
    if self._prior_window_size != self.parent.window_size:
  File ""/home/alex/python/pyvista/pyvista/plotting/plotting.py"", line 757, in window_size
    return list(self.ren_win.GetSize())
AttributeError: 'Plotter' object has no attribute 'ren_win'
```

Fixed by checking if plotter has th `ren_win` attribute when before attempting resize.
",3,1,[]
49,678251226,1446,92974124,2021-06-26 01:24:10,2021-06-26 15:36:56,closed,reset camera clipping range when changing position,"### Reset Camera Clipping Range when Changing Position
Normally the clipping range is setup when starting the scene render, but if the camera position is set after actors have been added to the scene, the mesh disappears.

This PR automatically resets the clipping range when changing the position.

Resolves #1445",1,3,[]
50,678247053,1444,92974124,2021-06-26 00:55:31,2021-06-26 01:52:55,closed,📝 Add VesselVio to external gallery,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Add VesselVio to external gallery
![vessel_vio](https://user-images.githubusercontent.com/7513610/123496820-ff1b8780-d664-11eb-9bb0-025fb351931c.png)

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->
resolves #1443 

### Details

- None

",1,2,[]
51,677399190,1441,92974124,2021-06-24 19:59:28,2021-07-04 03:11:23,closed,Add evenly spaced streamlines 2D filter,"### Overview

This PR enables usage of [vtkEvenlySpacedStreamlines2d](https://vtk.org/doc/nightly/html/classvtkEvenlySpacedStreamlines2D.html) as a filter `streamlines_evenly_spaced_2D`.  This only works on 2D datasets and provides a quick way to generate nice-ish streamline plots that cover the whole mesh.

This PR also adds an example of using streamlines on 2D datasets including the existing `streamlines` filter and the new  `streamlines_evenly_spaced_2D` filter.

Closes #1360 and related to https://github.com/pyvista/pyvista-support/issues/414


### Details

I couldn't find any good existing datasets to use for 2D streamlines.  There is one naca airfoil dataset, but it only includes density.  The antarctica dataset has 2D vectors, but the streamlines often follow the mesh edges instead of obtaining smooth curves.  I generated my own dataset, but it would have to be uploaded to vtk-data prior to fully testing this one.  I will paste the pictures from the added example here pending feedback on existing datasets or whether to add this dataset.

![image](https://user-images.githubusercontent.com/39341281/123324129-7b4a8980-d504-11eb-86d8-925dfa476a94.png)
![image](https://user-images.githubusercontent.com/39341281/123324295-a6cd7400-d504-11eb-8d34-bf60fe566247.png)
![image](https://user-images.githubusercontent.com/39341281/123324355-b9e04400-d504-11eb-94e3-0e213c0cc9d0.png)

TODO:

- [x] Add dataset to vtk-data/or use a different dataset
- [x] Clean up example to reuse arguments between examples, e.g. compute_vorticity
- [x] Add tests
- [x] Clean up `streamlines_from_source` filter docstring to match changes in this filter
- [x] Add example to docstring",7,20,[]
52,677385024,1440,92974124,2021-06-24 19:32:22,2021-06-25 01:47:17,closed,Fix four doctest NameErrors,"Fix four `NameErrors` in doctests found via https://github.com/pyvista/pyvista/pull/1439.

We might want to merge this only after that PR, so that if `main` ever gets merged back into that PR we'll still have the failing cases for testing.

Also, the `perlin_noise` example is missing half a doctest: https://github.com/pyvista/pyvista/blob/f383040c8fd71aef1d6d12bd07e3a0696df91452/pyvista/core/common_data.py#L52-L53

@akaszynski  do you remember what you wanted to write there?",1,1,[]
53,677377150,1439,92974124,2021-06-24 19:17:49,2021-06-26 15:39:03,closed,Add new script to catch doctest name errors,"### Overview

We have some history of struggling with the occasional doctest where names are inconsistent or missing, which leads to errors when users try to copy-paste examples. Some recent PRs fixing these on a case-by-case basis:
* https://github.com/pyvista/pyvista/pull/1342
* https://github.com/pyvista/pyvista/pull/1424
* https://github.com/pyvista/pyvista/pull/1425

It would be nice if CI could catch this, but it can't because doctests see the module global namespace where missing imports are usually hiding (due to [how stdlib `doctest` works](https://docs.python.org/3/library/doctest.html#what-s-the-execution-context)). It turns out that [pytest can't change this either](https://github.com/pytest-dev/pytest/discussions/8791).

So I'm trying to add a script of our own that gathers and executes doctests in isolated, clean namespaces to catch these kinds of mistakes.

### Details

There are still quite a few details to hammer out, but the rough idea is this:
1. Start from `pyvista` and explore all its submodues,
2. use `doctest` to gather the doctests for each class and function/method in a submodule,
3. run each module/class/function/method doctest ourselves with clean `globals`.

The design is largely up for debate. For now I've created a standalone script `tests/check_doctest_names.py`. This is executable as-is to run a test suite, but inside it has two functions (one of which could be called to do this work):

* `discover_modules()` returns a dict of submodules starting from an object (normally a module, and `pyvista` by default)
* `check_doctests()` takes said dict of submodules and runs the doctests for them.

In non-verbose mode the latter function prints this (ignoring VTK warnings and errors that might be due to my VTK dev wheels, and an error in `Plotter.add_background_image()` that's due to the default off-screen rendering):
```
1107 passes and 4 failures out of 1111 total doctests.

List of failures:
------------------------------------------------------------
pyvista.core.common_data.perlin_noise:
    import pyvista
    noise = perlin_noise(0.1, (1, 1, 1), (0, 0, 0))

NameError(""name 'perlin_noise' is not defined"")
------------------------------------------------------------
pyvista.core.pointset.UnstructuredGrid._from_arrays:
    import numpy
    import vtk
    import pyvista
    offset = np.array([0, 9])

NameError(""name 'np' is not defined"")
------------------------------------------------------------
pyvista.utilities.cells.create_mixed_cells:
    import vtk
    from pyvista.utilities.cells import create_mixed_cells
    cell_arrays = create_mixed_cells({vtk.VTK_TRIANGLE: np.array([[0, 1, 2], [3, 4, 5]])})

NameError(""name 'np' is not defined"")
------------------------------------------------------------
pyvista.utilities.helpers.make_tri_mesh:
    import numpy as np
    import pyvista as pv
    points = np.array([[0, 0, 0], [0.5, 0, 0], [1, 0, 0], [0, 0.5, 0],
                       [0.5, 0.5, 0], [1, 0.5, 0], [0, 1, 0], [0.5, 1, 0],
                       [1, 1, 0]])
    faces = np.array([[0, 1, 4], [4, 7, 6], [2, 5, 4], [4, 5, 8],
                      [0, 4, 3], [3, 4, 6], [1, 2, 4], [4, 8, 7]])
    tri_mesh = pyvista.make_tri_mesh(points, faces)

NameError(""name 'pyvista' is not defined"")
------------------------------------------------------------
```

With the default verbose mode every doctest's status gets printed:
<details>
  <summary>Click for lots of output</summary>
                                           
  ```
  $ python tests/check_doctest_names.py 
  FAILED: pyvista.core.common_data.perlin_noise -- NameError(""name 'perlin_noise' is not defined"")
  PASSED: pyvista.core.composite.MultiBlock
  PASSED: pyvista.core.composite.MultiBlock.__setitem__
  PASSED: pyvista.core.dataobject.DataObject.actual_memory_size
  PASSED: pyvista.core.dataobject.DataObject.copy_attributes
  PASSED: pyvista.core.dataobject.DataObject.copy_structure
  PASSED: pyvista.core.dataset.DataSet.cell_bounds
  PASSED: pyvista.core.dataset.DataSet.cell_n_points
  PASSED: pyvista.core.dataset.DataSet.cell_points
  PASSED: pyvista.core.dataset.DataSet.cell_type
  PASSED: pyvista.core.dataset.DataSet.find_closest_cell
  PASSED: pyvista.core.filters
  PASSED: pyvista.core.filters.data_set.DataSetFilters.clip
  PASSED: pyvista.core.filters.data_set.DataSetFilters.clip_box
  PASSED: pyvista.core.filters.data_set.DataSetFilters.clip_scalar
  PASSED: pyvista.core.filters.data_set.DataSetFilters.compute_implicit_distance
  PASSED: pyvista.core.filters.data_set.DataSetFilters.extract_surface
  PASSED: pyvista.core.filters.data_set.DataSetFilters.glyph
  PASSED: pyvista.core.filters.data_set.DataSetFilters.plot_over_circular_arc
  PASSED: pyvista.core.filters.data_set.DataSetFilters.plot_over_circular_arc_normal
  PASSED: pyvista.core.filters.data_set.DataSetFilters.probe
  PASSED: pyvista.core.filters.data_set.DataSetFilters.reflect
  PASSED: pyvista.core.filters.data_set.DataSetFilters.sample_over_circular_arc
  PASSED: pyvista.core.filters.data_set.DataSetFilters.sample_over_circular_arc_normal
  PASSED: pyvista.core.filters.data_set.DataSetFilters.shrink
  PASSED: pyvista.core.filters.data_set.DataSetFilters.texture_map_to_sphere
  PASSED: pyvista.core.filters.data_set.DataSetFilters.threshold
  PASSED: pyvista.core.filters.data_set.DataSetFilters.transform
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.clean
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.clip_closed_surface
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.compute_arc_length
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.compute_normals
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.decimate
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.delaunay_2d
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.extrude
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.extrude_rotate
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.fill_holes
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.flip_normals
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.geodesic
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.geodesic_distance
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.intersection
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.multi_ray_trace
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.plot_curvature
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.plot_normals
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.project_points_to_plane
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.ray_trace
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.remove_points
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.ribbon
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.smooth
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.strip
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.subdivide
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.subdivide_adaptive
  PASSED: pyvista.core.filters.poly_data.PolyDataFilters.tube
  PASSED: pyvista.core.filters.structured_grid.StructuredGridFilters.concatenate
  PASSED: pyvista.core.filters.structured_grid.StructuredGridFilters.extract_subset
  PASSED: pyvista.core.grid.RectilinearGrid
  PASSED: pyvista.core.grid.UniformGrid
  PASSED: pyvista.core.imaging.sample_function
  PASSED: pyvista.core.objects.Table
  PASSED: pyvista.core.pointset.ExplicitStructuredGrid
  PASSED: pyvista.core.pointset.ExplicitStructuredGrid.cast_to_unstructured_grid
  PASSED: pyvista.core.pointset.ExplicitStructuredGrid.cell_coords
  PASSED: pyvista.core.pointset.ExplicitStructuredGrid.cell_id
  PASSED: pyvista.core.pointset.ExplicitStructuredGrid.compute_connections
  PASSED: pyvista.core.pointset.ExplicitStructuredGrid.compute_connectivity
  PASSED: pyvista.core.pointset.ExplicitStructuredGrid.dimensions
  PASSED: pyvista.core.pointset.ExplicitStructuredGrid.hide_cells
  PASSED: pyvista.core.pointset.ExplicitStructuredGrid.neighbors
  PASSED: pyvista.core.pointset.ExplicitStructuredGrid.save
  PASSED: pyvista.core.pointset.ExplicitStructuredGrid.show_cells
  PASSED: pyvista.core.pointset.ExplicitStructuredGrid.visible_bounds
  PASSED: pyvista.core.pointset.PointSet.remove_cells
  PASSED: pyvista.core.pointset.PolyData
  PASSED: pyvista.core.pointset.StructuredGrid
  PASSED: pyvista.core.pointset.StructuredGrid.hide_cells
  PASSED: pyvista.core.pointset.UnstructuredGrid
  FAILED: pyvista.core.pointset.UnstructuredGrid._from_arrays -- NameError(""name 'np' is not defined"")
  PASSED: pyvista.core.pointset.UnstructuredGrid.cast_to_explicit_structured_grid
  PASSED: pyvista.jupyter.itkplotter.PlotterITK
  PASSED: pyvista.jupyter.itkplotter.PlotterITK.add_points
  PASSED: pyvista.jupyter.set_jupyter_backend
  PASSED: pyvista.plotting.axes.Axes
  PASSED: pyvista.plotting.axes.Axes.hide_actor
  PASSED: pyvista.plotting.axes.Axes.hide_symmetric
  PASSED: pyvista.plotting.axes.Axes.origin
  PASSED: pyvista.plotting.axes.Axes.show_actor
  PASSED: pyvista.plotting.axes.Axes.show_symmetric
  PASSED: pyvista.plotting.camera.Camera
  PASSED: pyvista.plotting.camera.Camera.azimuth
  PASSED: pyvista.plotting.camera.Camera.clipping_range
  PASSED: pyvista.plotting.camera.Camera.direction
  PASSED: pyvista.plotting.camera.Camera.distance
  PASSED: pyvista.plotting.camera.Camera.elevation
  PASSED: pyvista.plotting.camera.Camera.focal_point
  PASSED: pyvista.plotting.camera.Camera.model_transform_matrix
  PASSED: pyvista.plotting.camera.Camera.parallel_scale
  PASSED: pyvista.plotting.camera.Camera.position
  PASSED: pyvista.plotting.camera.Camera.roll
  PASSED: pyvista.plotting.camera.Camera.thickness
  PASSED: pyvista.plotting.camera.Camera.up
  PASSED: pyvista.plotting.camera.Camera.view_angle
  PASSED: pyvista.plotting.camera.Camera.view_frustum
  PASSED: pyvista.plotting.camera.Camera.zoom
  PASSED: pyvista.plotting.lights.Light
  PASSED: pyvista.plotting.lights.Light.ambient_color
  PASSED: pyvista.plotting.lights.Light.attenuation_values
  PASSED: pyvista.plotting.lights.Light.cone_angle
  PASSED: pyvista.plotting.lights.Light.copy
  PASSED: pyvista.plotting.lights.Light.diffuse_color
  PASSED: pyvista.plotting.lights.Light.exponent
  PASSED: pyvista.plotting.lights.Light.focal_point
  PASSED: pyvista.plotting.lights.Light.intensity
  PASSED: pyvista.plotting.lights.Light.is_camera_light
  PASSED: pyvista.plotting.lights.Light.is_headlight
  PASSED: pyvista.plotting.lights.Light.is_scene_light
  PASSED: pyvista.plotting.lights.Light.light_type
  PASSED: pyvista.plotting.lights.Light.on
  PASSED: pyvista.plotting.lights.Light.position
  PASSED: pyvista.plotting.lights.Light.positional
  PASSED: pyvista.plotting.lights.Light.set_direction_angle
  PASSED: pyvista.plotting.lights.Light.shadow_attenuation
  PASSED: pyvista.plotting.lights.Light.show_actor
  PASSED: pyvista.plotting.lights.Light.specular_color
  PASSED: pyvista.plotting.lights.Light.switch_off
  PASSED: pyvista.plotting.lights.Light.switch_on
  PASSED: pyvista.plotting.lights.Light.transform_matrix
  PASSED: pyvista.plotting.lights.Light.world_focal_point
  PASSED: pyvista.plotting.lights.Light.world_position
  PASSED: pyvista.plotting.plotting.BasePlotter.add_arrows
  PASSED: pyvista.plotting.plotting.BasePlotter.add_background_image
  PASSED: pyvista.plotting.plotting.BasePlotter.add_legend
  PASSED: pyvista.plotting.plotting.BasePlotter.add_light
  PASSED: pyvista.plotting.plotting.BasePlotter.add_mesh
  PASSED: pyvista.plotting.plotting.BasePlotter.get_image_depth
  PASSED: pyvista.plotting.plotting.BasePlotter.remove_all_lights
  PASSED: pyvista.plotting.plotting.BasePlotter.scalar_bars
  PASSED: pyvista.plotting.plotting.BasePlotter.screenshot
  PASSED: pyvista.plotting.plotting.BasePlotter.shape
  PASSED: pyvista.plotting.plotting.BasePlotter.theme
  PASSED: pyvista.plotting.plotting.BasePlotter.where_is
  PASSED: pyvista.plotting.plotting.Plotter
  PASSED: pyvista.plotting.plotting.Plotter.show
  PASSED: pyvista.plotting.render_window_interactor.RenderWindowInteractor.enable_image_style
  PASSED: pyvista.plotting.render_window_interactor.RenderWindowInteractor.enable_joystick_actor_style
  PASSED: pyvista.plotting.render_window_interactor.RenderWindowInteractor.enable_joystick_style
  PASSED: pyvista.plotting.render_window_interactor.RenderWindowInteractor.enable_rubber_band_2d_style
  PASSED: pyvista.plotting.render_window_interactor.RenderWindowInteractor.enable_rubber_band_style
  PASSED: pyvista.plotting.render_window_interactor.RenderWindowInteractor.enable_terrain_style
  PASSED: pyvista.plotting.render_window_interactor.RenderWindowInteractor.enable_trackball_actor_style
  PASSED: pyvista.plotting.render_window_interactor.RenderWindowInteractor.enable_trackball_style
  PASSED: pyvista.plotting.render_window_interactor.RenderWindowInteractor.enable_zoom_style
  PASSED: pyvista.plotting.renderer.Renderer.add_floor
  PASSED: pyvista.plotting.renderer.Renderer.show_bounds
  PASSED: pyvista.plotting.renderers.Renderers.set_background
  PASSED: pyvista.plotting.scalar_bars.ScalarBars.add_scalar_bar
  PASSED: pyvista.plotting.tools.opacity_transfer_function
  PASSED: pyvista.plotting.widgets.WidgetHelper.add_slider_widget
  PASSED: pyvista.themes
  PASSED: pyvista.themes.DarkTheme
  PASSED: pyvista.themes.DefaultTheme
  PASSED: pyvista.themes.DefaultTheme.auto_close
  PASSED: pyvista.themes.DefaultTheme.axes
  PASSED: pyvista.themes.DefaultTheme.background
  PASSED: pyvista.themes.DefaultTheme.camera
  PASSED: pyvista.themes.DefaultTheme.cmap
  PASSED: pyvista.themes.DefaultTheme.color
  PASSED: pyvista.themes.DefaultTheme.colorbar_horizontal
  PASSED: pyvista.themes.DefaultTheme.colorbar_orientation
  PASSED: pyvista.themes.DefaultTheme.colorbar_vertical
  PASSED: pyvista.themes.DefaultTheme.depth_peeling
  PASSED: pyvista.themes.DefaultTheme.edge_color
  PASSED: pyvista.themes.DefaultTheme.floor_color
  PASSED: pyvista.themes.DefaultTheme.font
  PASSED: pyvista.themes.DefaultTheme.full_screen
  PASSED: pyvista.themes.DefaultTheme.interactive
  PASSED: pyvista.themes.DefaultTheme.jupyter_backend
  PASSED: pyvista.themes.DefaultTheme.lighting
  PASSED: pyvista.themes.DefaultTheme.load_theme
  PASSED: pyvista.themes.DefaultTheme.multi_rendering_splitting_position
  PASSED: pyvista.themes.DefaultTheme.multi_samples
  PASSED: pyvista.themes.DefaultTheme.nan_color
  PASSED: pyvista.themes.DefaultTheme.notebook
  PASSED: pyvista.themes.DefaultTheme.outline_color
  PASSED: pyvista.themes.DefaultTheme.render_points_as_spheres
  PASSED: pyvista.themes.DefaultTheme.restore_defaults
  PASSED: pyvista.themes.DefaultTheme.save
  PASSED: pyvista.themes.DefaultTheme.show_edges
  PASSED: pyvista.themes.DefaultTheme.show_scalar_bar
  PASSED: pyvista.themes.DefaultTheme.silhouette
  PASSED: pyvista.themes.DefaultTheme.smooth_shading
  PASSED: pyvista.themes.DefaultTheme.title
  PASSED: pyvista.themes.DefaultTheme.transparent_background
  PASSED: pyvista.themes.DefaultTheme.volume_mapper
  PASSED: pyvista.themes.DefaultTheme.window_size
  PASSED: pyvista.themes.DocumentTheme
  PASSED: pyvista.themes.ParaViewTheme
  PASSED: pyvista.themes._AxesConfig
  PASSED: pyvista.themes._AxesConfig.box
  PASSED: pyvista.themes._AxesConfig.show
  PASSED: pyvista.themes._AxesConfig.x_color
  PASSED: pyvista.themes._AxesConfig.y_color
  PASSED: pyvista.themes._AxesConfig.z_color
  PASSED: pyvista.themes._ColorbarConfig
  PASSED: pyvista.themes._ColorbarConfig.height
  PASSED: pyvista.themes._ColorbarConfig.position_x
  PASSED: pyvista.themes._ColorbarConfig.position_y
  PASSED: pyvista.themes._ColorbarConfig.width
  PASSED: pyvista.themes._DepthPeelingConfig
  PASSED: pyvista.themes._DepthPeelingConfig.enabled
  PASSED: pyvista.themes._DepthPeelingConfig.number_of_peels
  PASSED: pyvista.themes._DepthPeelingConfig.occlusion_ratio
  PASSED: pyvista.themes._Font
  PASSED: pyvista.themes._Font.color
  PASSED: pyvista.themes._Font.family
  PASSED: pyvista.themes._Font.fmt
  PASSED: pyvista.themes._Font.label_size
  PASSED: pyvista.themes._Font.size
  PASSED: pyvista.themes._Font.title_size
  PASSED: pyvista.themes._SilhouetteConfig
  PASSED: pyvista.themes._SilhouetteConfig.color
  PASSED: pyvista.themes._SilhouetteConfig.decimate
  PASSED: pyvista.themes._SilhouetteConfig.feature_angle
  PASSED: pyvista.themes._SilhouetteConfig.line_width
  PASSED: pyvista.themes._SilhouetteConfig.opacity
  PASSED: pyvista.themes._SliderConfig
  PASSED: pyvista.themes._SliderStyleConfig.cap_length
  PASSED: pyvista.themes._SliderStyleConfig.cap_opacity
  PASSED: pyvista.themes._SliderStyleConfig.cap_width
  PASSED: pyvista.themes._SliderStyleConfig.slider_color
  PASSED: pyvista.themes._SliderStyleConfig.slider_length
  PASSED: pyvista.themes._SliderStyleConfig.slider_width
  PASSED: pyvista.themes._SliderStyleConfig.tube_color
  PASSED: pyvista.themes._SliderStyleConfig.tube_width
  PASSED: pyvista.themes.load_theme
  PASSED: pyvista.themes.set_plot_theme
  PASSED: pyvista.utilities.cells.CellArray
  FAILED: pyvista.utilities.cells.create_mixed_cells -- NameError(""name 'np' is not defined"")
  PASSED: pyvista.utilities.errors.VtkErrorCatcher
  PASSED: pyvista.utilities.features.voxelize
  PASSED: pyvista.utilities.fileio.read
  PASSED: pyvista.utilities.fileio.read_exodus
  PASSED: pyvista.utilities.geometric_objects.CircularArc
  PASSED: pyvista.utilities.geometric_objects.CircularArcFromNormal
  PASSED: pyvista.utilities.geometric_objects.Cylinder
  PASSED: pyvista.utilities.geometric_objects.Pyramid
  PASSED: pyvista.utilities.helpers.axis_rotation
  PASSED: pyvista.utilities.helpers.cubemap
  PASSED: pyvista.utilities.helpers.line_segments_from_points
  FAILED: pyvista.utilities.helpers.make_tri_mesh -- NameError(""name 'pyvista' is not defined"")
  PASSED: pyvista.utilities.helpers.wrap
  PASSED: pyvista.utilities.parametric_objects.ParametricBohemianDome
  PASSED: pyvista.utilities.parametric_objects.ParametricBour
  PASSED: pyvista.utilities.parametric_objects.ParametricBoy
  PASSED: pyvista.utilities.parametric_objects.ParametricCatalanMinimal
  PASSED: pyvista.utilities.parametric_objects.ParametricConicSpiral
  PASSED: pyvista.utilities.parametric_objects.ParametricCrossCap
  PASSED: pyvista.utilities.parametric_objects.ParametricDini
  PASSED: pyvista.utilities.parametric_objects.ParametricEllipsoid
  PASSED: pyvista.utilities.parametric_objects.ParametricEnneper
  PASSED: pyvista.utilities.parametric_objects.ParametricFigure8Klein
  PASSED: pyvista.utilities.parametric_objects.ParametricHenneberg
  PASSED: pyvista.utilities.parametric_objects.ParametricKlein
  PASSED: pyvista.utilities.parametric_objects.ParametricKuen
  PASSED: pyvista.utilities.parametric_objects.ParametricMobius
  PASSED: pyvista.utilities.parametric_objects.ParametricPluckerConoid
  PASSED: pyvista.utilities.parametric_objects.ParametricPseudosphere
  PASSED: pyvista.utilities.parametric_objects.ParametricRandomHills
  PASSED: pyvista.utilities.parametric_objects.ParametricRoman
  PASSED: pyvista.utilities.parametric_objects.ParametricSuperEllipsoid
  PASSED: pyvista.utilities.parametric_objects.ParametricSuperToroid
  PASSED: pyvista.utilities.parametric_objects.ParametricTorus
  PASSED: pyvista.utilities.parametric_objects.Spline
  PASSED: pyvista.utilities.regression.compare_images
  PASSED: pyvista.utilities.transformations.apply_transformation_to_points
  PASSED: pyvista.utilities.xvfb.start_xvfb
  
  1107 passes and 4 failures out of 1111 total doctests.
  
  List of failures:
  ------------------------------------------------------------
  pyvista.core.common_data.perlin_noise:
      import pyvista
      noise = perlin_noise(0.1, (1, 1, 1), (0, 0, 0))
  
  NameError(""name 'perlin_noise' is not defined"")
  ------------------------------------------------------------
  pyvista.core.pointset.UnstructuredGrid._from_arrays:
      import numpy
      import vtk
      import pyvista
      offset = np.array([0, 9])
  
  NameError(""name 'np' is not defined"")
  ------------------------------------------------------------
  pyvista.utilities.cells.create_mixed_cells:
      import vtk
      from pyvista.utilities.cells import create_mixed_cells
      cell_arrays = create_mixed_cells({vtk.VTK_TRIANGLE: np.array([[0, 1, 2], [3, 4, 5]])})
  
  NameError(""name 'np' is not defined"")
  ------------------------------------------------------------
  pyvista.utilities.helpers.make_tri_mesh:
      import numpy as np
      import pyvista as pv
      points = np.array([[0, 0, 0], [0.5, 0, 0], [1, 0, 0], [0, 0.5, 0],
                         [0.5, 0.5, 0], [1, 0.5, 0], [0, 1, 0], [0.5, 1, 0],
                         [1, 1, 0]])
      faces = np.array([[0, 1, 4], [4, 7, 6], [2, 5, 4], [4, 5, 8],
                        [0, 4, 3], [3, 4, 6], [1, 2, 4], [4, 8, 7]])
      tri_mesh = pyvista.make_tri_mesh(points, faces)
  
  NameError(""name 'pyvista' is not defined"")
  ------------------------------------------------------------
  ```                                      
</details>

As you can see it successfully finds a lot of doctests, and it catches 4 legitimate mistakes. (I'm going to fix these in a separate PR so that we can keep playing with these errors in this PR.)

There are still a lot of open questions, such as:
- [x] Does the general design even make sense? Is it robust enough? Is it a problem if it isn't, as long as it works for pyvista?
- [x] Is the script in the right place? Is it OK for it to be executable? I had CI in mind when I wrote it this way, but I guess nothing stops CI from doing `python -c 'from tests.check_doctest_names import check_doctests; check_doctests()'.`
- [x] If it stays executable we should consider adding argument parsing to be able to support `-v` and setting `OFF_SCREEN` and the like.
- [x] Can we do better reporting? Automatic tracebacks aren't really meaningful (at least I couldn't wrangle them to play ball in multiple failed attempts). I figured printing the offending doctests up to the point of the failure should be good enough.

---

After feedback from @akaszynski I've added some argument parsing:
```
$ python check_doctest_names.py -h
usage: check_doctest_names.py [-h] [-v] [--no-respect-skips]

Look for name errors in doctests.

optional arguments:
  -h, --help          show this help message and exit
  -v, --verbose       print passes and failures as tests progress
  --no-respect-skips  ignore doctest SKIP directives
```

Example options:
```sh
python check_doctest_names.py  # silent run
python check_doctest_names.py -v  # verbose run
python check_doctest_names.py --verbose  # verbose run
python check_doctest_names.py --no-respect-skips  # silent run executing SKIPped lines
```

If there are any failures, the script exits with status 1, which should trip CI. Otherwise the exit status is 0.",7,8,[]
54,676718726,1433,92974124,2021-06-24 01:18:41,2021-06-24 02:30:53,closed,master --> main,"This PR resolves #1389 by converting all mentions of the ``master`` branch to ``main``.

Noticed that our links on `pypi` are down at the moment.  Guess this is the price we pay to link to github. 
",2,1,[]
55,676518155,1432,92974124,2021-06-23 18:21:03,,open,WIP: Charts,"### Overview

Hi there pyvista devs,

I have been messing around with the vtk Charts API lately and thought it would make a great addition to pyvista.
This is most definitely a WIP, as I have not added any examples/tests/documentation and many plot & chart features of vtk can still be added. However I wanted to show you this prototype already to see whether you would like to see this added to pyvista or not. If so, I can further work on this in my free time. Of course some help/advice from your side would also be very much appreciated! :)


### Details

- Expose VTK Charts API using a pythonic, matplotlib-like interface
- Plotting module allows to easily combine 2D charts (as overlays) and 3D meshes/actors in the same renderer (viewport). Interaction with the charts or 3D scene can be toggled through a right click.
- Support to integrate matplotlib figures into a pyvista plotting window

### Prototype

Two chart overlays (left: matplotlib figure, right: vtkChartXY) on the same renderer --> see 'chart_overlays.py' example.

https://user-images.githubusercontent.com/15089458/123146422-1fc5c080-d45e-11eb-99a3-b73dc178766f.mp4


### Task list:

- [x] Chart2D: Implementation of scatter, line, area, bar & stacked plots
- [x] ChartPie & ChartBox: Implementation of pie & box plots
- [x] Chart3D: Implementation of Line, Scatter & Volume plots
- [x] ChartMPL: Matplotlib support
- [x] Examples
- [ ] Add tests [10%]
- [ ] Add documentation [15%]

### Known issues:

- ~~No support for vtk>=9.0 until [issue 18122](https://gitlab.kitware.com/vtk/vtk/-/issues/18122) is fixed (and included in pypi package)~~ OK for latest pypi wheels
- ~~Misplaced background color for vtk charts, see [issue 18238](https://gitlab.kitware.com/vtk/vtk/-/issues/18238)~~ Workaround available for vtk>=9.0

Note: Only tested on my local pc (Windows 10, python 3.7, vtk 9.0.3)",14,31,[]
56,676107209,1428,92974124,2021-06-23 09:21:23,2021-06-23 23:12:01,closed,Copy empty spacer lines in docs examples,"In a small follow-up to https://github.com/pyvista/pyvista/pull/1422/commits/c69c355200a5e104c5c5334cfbc4d3a62303e91d this allows empty prompt spacers to be copied too. This makes it such that a doctest of
```py
>>> import numpy as np
>>> import pyvista as pv
>>>
>>> # grid size: ni*nj*nk cells; si, sj, sk steps
>>> ni, nj, nk = 4, 5, 6
>>> si, sj, sk = 20, 10, 1
>>>
>>> # create raw coordinate grid
>>> grid_ijk = np.mgrid[:(ni+1)*si:si, :(nj+1)*sj:sj, :(nk+1)*sk:sk]
>>>
>>> # repeat array along each Cartesian axis for connectivity
>>> for axis in range(1, 4):
...     grid_ijk = grid_ijk.repeat(2, axis=axis)
>>>
>>> # slice off unnecessarily doubled edge coordinates
>>> grid_ijk = grid_ijk[:, 1:-1, 1:-1, 1:-1]
>>>
>>> # reorder and reshape to VTK order
>>> corners = grid_ijk.transpose().reshape(-1, 3)
>>>
>>> dims = np.array([ni, nj, nk]) + 1
>>> grid = pv.ExplicitStructuredGrid(dims, corners)
>>> _ = grid.compute_connectivity()
>>> grid.plot(show_edges=True)  # doctest: +SKIP
```
gets pasted correctly as
```py
import numpy as np
import pyvista as pv

# grid size: ni*nj*nk cells; si, sj, sk steps
ni, nj, nk = 4, 5, 6
si, sj, sk = 20, 10, 1

# create raw coordinate grid
grid_ijk = np.mgrid[:(ni+1)*si:si, :(nj+1)*sj:sj, :(nk+1)*sk:sk]

# repeat array along each Cartesian axis for connectivity
for axis in range(1, 4):
    grid_ijk = grid_ijk.repeat(2, axis=axis)

# slice off unnecessarily doubled edge coordinates
grid_ijk = grid_ijk[:, 1:-1, 1:-1, 1:-1]

# reorder and reshape to VTK order
corners = grid_ijk.transpose().reshape(-1, 3)

dims = np.array([ni, nj, nk]) + 1
grid = pv.ExplicitStructuredGrid(dims, corners)
_ = grid.compute_connectivity()
grid.plot(show_edges=True)  
```

Note that part of the issue is that the above doctest was originally missing the trailing whitespace on the spacer lines which would make the markup correct (this is also evident in vim's syntax highlighting, and in the highlighter of the code blocks in the online docs). But
1. it turns out that even if we add that trailing whitespace (done in this PR for every current instance) these don't seem to get rendered in the online docs, and
2. there could always be future doctests that add spacer prompts without a trailing whitespace.",1,2,[]
57,675905979,1425,92974124,2021-06-23 02:51:44,2021-06-23 03:59:37,closed, ➕ Extra import fix of example,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Extra import fix of example. I found this in the sphinx compiling in local. We could not find the error by `pytest --doctest-modules` . Is there any good way to find this error in CI?

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- Same with #1424

",10,2,[]
58,675806696,1424,92974124,2021-06-22 22:45:59,2021-06-22 23:17:14,closed,➕ Fix import of example,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
➕ Fix import of example

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",1,1,[]
59,675785478,1423,92974124,2021-06-22 21:55:18,2021-06-22 23:17:05,closed,Update master to main in README,"### Overview

Master to main fix in README

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- < feature1 or bug1 description >
- < feature2 or bug2 description >

",5,1,[]
60,675780760,1422,92974124,2021-06-22 21:44:54,2021-06-23 05:18:12,closed,Various minor (and less minor) docfixes,"A collection of small doc issues I've ran into these past few days. Most of them grammatical or style.

One notable exception is a rewrite of the `ExplicitStructuredGrid` construction example, from
```py
import numpy as np
import pyvista as pv

ni, nj, nk = 4, 5, 6
si, sj, sk = 20, 10, 1

xcorn = np.arange(0, (ni+1)*si, si)
xcorn = np.repeat(xcorn, 2)
xcorn = xcorn[1:-1]
xcorn = np.tile(xcorn, 4*nj*nk)

ycorn = np.arange(0, (nj+1)*sj, sj)
ycorn = np.repeat(ycorn, 2)
ycorn = ycorn[1:-1]
ycorn = np.tile(ycorn, (2*ni, 2*nk))
ycorn = np.transpose(ycorn)
ycorn = ycorn.flatten()

zcorn = np.arange(0, (nk+1)*sk, sk)
zcorn = np.repeat(zcorn, 2)
zcorn = zcorn[1:-1]
zcorn = np.repeat(zcorn, (4*ni*nj))

corners = np.stack((xcorn, ycorn, zcorn))
corners = corners.transpose()

dims = np.asarray((ni, nj, nk))+1
grid = pv.ExplicitStructuredGrid(dims, corners)  
grid.compute_connectivity()  
grid.plot(show_edges=True)  
```

to

```py
import numpy as np
import pyvista as pv

# grid size: ni*nj*nk cells; si, sj, sk steps
ni, nj, nk = 4, 5, 6
si, sj, sk = 20, 10, 1

# create raw coordinate grid
grid_ijk = np.mgrid[:(ni+1)*si:si, :(nj+1)*sj:sj, :(nk+1)*sk:sk]

# repeat array along each Cartesian axis for connectivity
for axis in range(1, 4):
    grid_ijk = grid_ijk.repeat(2, axis=axis)

# slice off unnecessarily doubled edge coordinates
grid_ijk = grid_ijk[:, 1:-1, 1:-1, 1:-1]

# reorder and reshape to VTK order
corners = grid_ijk.transpose().reshape(-1, 3)

dims = np.array([ni, nj, nk]) + 1
grid = pv.ExplicitStructuredGrid(dims, corners)  # doctest: +SKIP
grid.compute_connectivity()  # doctest: +SKIP
grid.plot(show_edges=True)  # doctest: +SKIP
```

The two `corners` arrays should be the exact same. The original didn't have any explanation, so I don't feel too bad about the more concise but potentially more obscure example.

Two questions regarding this:
1. Do we really need the SKIPs before the call to `plot()`?
2.  One related bug: if I press the ""copy"" icon in the top right corner of the code block in the generated docs, I get this:
```py
import numpy as np
import pyvista as pv
# grid size: ni*nj*nk cells; si, sj, sk steps
ni, nj, nk = 4, 5, 6
si, sj, sk = 20, 10, 1
# create raw coordinate grid
grid_ijk = np.mgrid[:(ni+1)*si:si, :(nj+1)*sj:sj, :(nk+1)*sk:sk]
# repeat array along each Cartesian axis for connectivity
for axis in range(1, 4):
# slice off unnecessarily doubled edge coordinates
grid_ijk = grid_ijk[:, 1:-1, 1:-1, 1:-1]
# reorder and reshape to VTK order
corners = grid_ijk.transpose().reshape(-1, 3)
dims = np.array([ni, nj, nk]) + 1
grid = pv.ExplicitStructuredGrid(dims, corners)  
grid.compute_connectivity()  
grid.plot(show_edges=True)  
```

For one, empty spacer lines are gone, but that's sort of understandable since the `>>>` is also coloured differently on those lines. However, notice that the copy-paste silently swallowed the contents of the `for` loop starting with `...`. This will lead to a `SyntaxError` if you paste it! And just selecting the code block with the mouse also won't work, because this will include the `>>>` on the spacer lines...

Can we fix this? I'd hate to type out the three `repeat` calls by hand.

---

And on a happier note: with the VTK dev wheels (both on Python 3.8 and 3.9) plotters are closing now again! Probably thanks to the fixes made by @akaszynski.",3,10,[]
61,675713525,1421,92974124,2021-06-22 19:47:49,2021-06-22 21:21:24,closed,"Revert ""Use vtk vector mapping from vtkScalarstoColors in add_mesh""","This PR reverts the behavior introduced in #1387 due to breaking mapping for cell based vector data.

This reverts commit 4f14a3d11f90e235d454d4c892244a97108098b7.

### Overview

Closes #1420.


### Details

",2,1,[]
62,675653037,1418,92974124,2021-06-22 18:09:30,2021-06-22 18:58:11,closed,Fix static checks,"This PR freezes the mypy version to avoid sudden failures due to changes in `mypy`'s latest release.  It also removes the install step from the static check in azure CI.
",2,3,[]
63,675096819,1411,92974124,2021-06-22 05:48:48,2021-06-22 21:19:41,closed,Enable testing of vtk dev wheels,"This was a huge pain, but dev wheels for VTK are now unoffically supported by pyvista with this PR.  Two issues are still being worked on:
- https://gitlab.kitware.com/vtk/vtk/-/issues/18239
- https://gitlab.kitware.com/vtk/vtk/-/issues/18242

We have workarounds for those two.  Final issue, and most annoying, is there are now issues with three of our tests with the latest dev vtk wheels when using mesa opengl on windows.  It took a solid 24 hours to `git bisect` issue 18242, and doing it on windows sounds even less fun.

I'd like to create a release by cherry picking this PR and #1394 to finally enable support of Python 3.9.  Stability issues will probably crop up, but I'd rather know now prior to release before waiting another year for a VTK release. 
",3,6,[]
64,674990670,1409,92974124,2021-06-22 00:55:18,2021-06-22 06:06:21,closed,🔗 Fix broken link of list of author,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
🔗 Fix broken link of list of author in README.rst

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",1,1,[]
65,674540516,1398,92974124,2021-06-21 13:11:18,2021-06-21 14:02:47,closed,FIX: Fix missing package,Fixes failures like https://app.circleci.com/pipelines/github/mne-tools/mne-python/8640/workflows/7467ce5c-f01b-42a3-b404-6ec86b2df2ae/jobs/29749 introduced by #1385,1,1,[]
66,673972724,1396,92974124,2021-06-20 04:32:55,2021-06-20 07:38:54,closed,Typo Fix of structured_grid.py,"Plurality fix... only 1 grid?

### Overview

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- < feature1 or bug1 description >
- < feature2 or bug2 description >

",1,1,[]
67,673966064,1395,92974124,2021-06-20 03:02:25,2021-06-22 00:29:25,closed,💬 Let's use GitHub Discussions,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
There are many reason [why we must not ask questions on Github issues](https://medium.com/@methane/why-you-must-not-ask-questions-on-github-issues-51d741d83fde). This PR is a addition of URL of Github discussion. It will contribute to triage of issues. Inspired by [this template](https://github.com/executablebooks/jupyter-book/issues/new/choose).

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",10,10,[]
68,673824762,1394,92974124,2021-06-19 05:23:02,2021-06-20 04:21:25,closed,vtk==9.0.20210612.dev0 fixes and patch leaks,"### Patches due to ``vtk==9.0.20210612.dev0``

In the first of likely many patches, this PR accounts for a nasty segfault on Linux and windows due to the usage of ``Start`` instead of ``ProcessEvents`` when using a repeating timer with ``vtk==9.0.20210612``.
",23,8,['VTK Version Compatibility']
69,673506181,1392,92974124,2021-06-18 14:07:36,2021-07-11 15:27:32,closed,Remove dependency on transforms3d,"This reimplements rotation around axis and reflection from transforms3d, see https://github.com/pyvista/pyvista/issues/1388.

I've added some additional input checks, even though the two functions are not documented. ~~There's a pair of tests that compare the old and new inputs using `hypothesis`.~~ With float32 inputs there might be numerical differences, so this is not necessarily the final state of the functions, just a baseline to compare against when deciding to remove the dependency on `trasnforms3d`.

<strike>I've kept the original implementations for now so we can test the new implementations against them. To compare the two versions:
```sh
pytest -v -k 'test_tmp_transforms3d_correct'
```
</strike>

Things to fix before finalizing this:

- [x] remove old implementations
- [x] remove sanity check test
- [x] remove transforms3d dependency
- [x] consider edge cases
- [x] explain math in docstrings",16,10,[]
70,671773655,1390,92974124,2021-06-16 18:39:06,2021-06-22 19:48:46,closed,rename docs/ --> doc/,"### Documentation directory rename

Our documentation directory has been named ``docs/`` since the creation of this project, and it's not inline with ``scipy``, ``numpy``, ``pandas``, ``scikit-learn``, ``matplotlib``, and many others that use simply ``doc``.

Should be a simple fix to rename the directory.  Any objections?
",8,14,[]
71,670545058,1387,92974124,2021-06-15 16:03:40,2021-06-17 21:35:14,closed,Use vtk vector mapping from vtkScalarstoColors in add_mesh,"### Overview

Instead of modifying vector arrays for plotting in add_mesh, this PR now uses the vtk functionality to map vectors through [vtkScalarstoColors](https://vtk.org/doc/nightly/html/classvtkScalarsToColors.html).  The use of this functionality has some beneifts:

1) Defers the logic of mapping to vtk
2) Plotting multiple components no longer requires copying the whole mesh

I tried to keep this PR as a non-breaking change.  I'm still not sure whether `scalars.ravel()` makes sense when we have data with more than 2 dimensions, but I left that functionality intact.

### Details

I'd like to implement this in another PR for `add_volume` in a shared helper routine, but this will be a breaking change as `add_volume` currently does `scalars.ravel()` for vector data. 

The image regression check was originally flawed in that the clim scale was reset for each component, but should now work properly.  I committed the new image.

Somewhat related to #1321, #1319, and https://github.com/pyvista/pyvista-support/issues/425.

In https://github.com/pyvista/pyvista/issues/1319#issuecomment-842724958, it was asked 

> Does pyvista even support non-3d vectors/tensors?

Using this PR, I tested 4D and 5D vectors, and they work using this functionality.  I suspect in other areas like streamlines, it wouldn't work, but I haven't tried.
",6,2,[]
72,670065729,1386,92974124,2021-06-15 05:25:48,2021-06-19 01:46:56,closed,Doc Autosummary,"### Documentation Autosummary Overhaul

This PR refactors several of our documentation pages using templates and autosummary directives to create API documentation pages that match ``pandas``'s and ``numpy``'s approach of one method/function per page.  We're not quite there, and not all classes needed to be atomized to this degree, but it looks much better to have a table of methods for a class rather than every method on a giganitic webpage.

Please let me know what your thoughts are.
",13,19,[]
73,669593629,1385,92974124,2021-06-14 14:01:38,2021-06-18 00:00:08,closed,Split up filters.py into one file per filter class,"I find PyCharm really chugs on filters.py, and there seemed to be support for the idea in general in #757, so I figured I'd take a stab at it.

This implementation does some import/export juggling to keep the exports from the filters module exactly the same, so it's a non-breaking change, but does this make the module structure a little more confusing than a breaking change would. Thoughts?",10,3,[]
74,669180765,1384,92974124,2021-06-14 03:28:02,2021-06-14 04:03:38,closed,Fix adaptive_subdivide example - set max_n_passes=2 to reduce time in CI,"### Overview

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->

The `adaptive_subdivide` example, merged with #1375, was taking an hour in CI. This makes it fast.
",2,1,[]
75,669154017,1383,92974124,2021-06-14 01:29:59,2021-06-14 21:23:43,closed,clarify line lengths,"Added a note regarding docstrings max lengths based on comments from @adeak in #1375.
",5,3,[]
76,669128824,1382,92974124,2021-06-13 23:06:59,2021-06-15 03:31:23,closed,Add context managers for handling VTK errors,"### Overview
We need a way to catch VTK errors, both in tests and production code. Inspired by discussion in #1374

It is possible to catch VTK errors with `Observer`, but:
1. it can be challenging to attach the Observer to a desired algorithm instance from the test side.
2. the Observer sometimes declares that no error has been raised, even though one has (see https://github.com/pyvista/pyvista/pull/1374#discussion_r650448650)


<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

This PR adds two context managers for handling VTK errors. These context managers redirect VTK output to a temporary file. Upon exit, they set the VTK output to whatever it was before, and clean up the temporary file.

The basic usage is as follows:
```python
# The VTK error appears on stderr
# A RuntimeError is raised
with pyvista.utilities.errors.raise_vtk_errors():
    generate_vtk_err()

# The VTK error appears on stderr
# No error is raised, but the output is logged
error_catcher = pyvista.utilities.errors.VtkErrorCatcher(raise_error=False)
with error_catcher:
    # this function generates a VTK error
    generate_vtk_err()
print('logged error is\n', error_catcher.log)
```

`raise_vtk_errors` will raise a RuntimeError for any VTK error raised within its context. This is a shorthand method using `VtkErrorCatcher` under the hood. If you'd like to parse VTK errors, you will need to use the `VtkErrorCatcher` directly, which makes the log string available outside of the context.
",9,17,[]
77,669114215,1381,92974124,2021-06-13 20:57:45,2021-06-19 20:38:25,closed,Allow reversing geodesic paths to the correct order,"Looking at https://github.com/pyvista/pyvista-support/issues/409 I realized that the path segments created by `enable_geodesic_picking` are each reversed within the given segment, which is the direct result of the `geodesic()` filter.

For example:
```py
>>> import pyvista as pv
>>> mesh = pv.Sphere()
>>> start, end = 100, 200
>>> geodesic = mesh.geodesic(start, end)
>>> geodesic.point_arrays['vtkOriginalPointIds']
pyvista_ndarray([200, 172, 144, 116,  88,  89,  90,  91,  92,  93,  94,
                  95,  96,  97,  98,  99, 100])
```
The path starting at point 100 and ending at point 200 is returned as `PolyData` whose first point is the end point and the last point is the start point:
```py
>>> import numpy as np
>>> np.array_equal(geodesic.points[0], mesh.points[start])
False
>>> np.array_equal(geodesic.points[0], mesh.points[end])
True
>>> np.array_equal(geodesic.points[-1], mesh.points[start])
True
```

This seems to be a direct consequence of the underlying VTK filter. Still, we can just (optionally) reverse the path, making it possible for geodesic point picking to give the correct path. And then we can enable the same behaviour for `Plotter.enable_geodesic_picking`. And when we enable to proper order for `enable_geodesic_picking` it also makes sense to clean the path, removing now-adjacent duplicate points.

I've also changed the code a bit so that the geodesic filter's `'vtkOriginalPointIds'` point array is preserved for the final geodesic path. This seems like something that can often be useful.

Since downstream users might have worked around the current behaviour of the geodesic filter I've decided to add this as opt-in. It would be nice if we could make it the default though.",16,12,[]
78,669037302,1380,92974124,2021-06-13 11:30:23,2021-06-13 14:08:35,closed,🗑️ Remove duplicate imports from _vtk.py.,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
🗑️ Deprecate code that needs to be cleaned up in import _vtk.py .

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None
",4,3,[]
79,669033527,1379,92974124,2021-06-13 11:02:18,2021-06-16 05:49:06,closed,🔄 Add rotate example and Axes class,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Rotations of a cow about her axes. In this model, the x axis is from the left
to right; the y axis is from bottom to top; and the z axis emerges from the
image. The camera location is the same in all four images.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
See #1363

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->

TODO:
- [x] Add tests.
- [x] Check that this issue resolves #1363

### Details

#### Define camera and axes

Define camera and axes. Setting axes origin to (1.0, 1.0, 1.0).

```python
mesh = examples.download_cow()

camera = pv.Camera()
camera.position = (30.0, 30.0, 30.0)
camera.focal_point = (5.0, 5.0, 5.0)

axes = pv.Axes(show_actor=True)
axes.origin = (3.0, 3.0, 3.0)
```

#### Original Mesh

Plot original mesh. Set axes actor to Plotter.

```python
p = pv.Plotter()

p.add_text(""Mesh"", font_size=24)
p.add_actor(axes.actor)
p.camera = camera
p.add_mesh(mesh)

p.show()
```
![mesh](https://user-images.githubusercontent.com/7513610/121804482-96560780-cc81-11eb-8027-5f7464bcc3bd.png)

#### Rotate about x axis

Plot meshs rotated about x axis. It is plotted every 60 degrees.
Set axes actor to Plotter and set axes origin to the point to rotate.

```python
p = pv.Plotter()

p.add_text(""X axis rotate"", font_size=24)
p.add_actor(axes.actor)
p.camera = camera

for i in range(6):
    rot = mesh.copy()
    rot.rotate_x(60*i, point=axes.origin)
    p.add_mesh(rot)

p.show()
```
![rotate_x](https://user-images.githubusercontent.com/7513610/121804497-af5eb880-cc81-11eb-88d0-5d7e2ca7741d.png)

#### Rotate about y axis

Plot meshs rotated about y axis. It is plotted every 60 degrees.
Set axes actor to Plotter and set axes origin to the point to rotate.

```python
p = pv.Plotter()

p.add_text(""Y axis rotate"", font_size=24)
p.camera = camera
p.add_actor(axes.actor)

for i in range(6):
    rot = mesh.copy()
    rot.rotate_y(60*i, point=axes.origin)
    p.add_mesh(rot)

p.show()
```
![rotate_y](https://user-images.githubusercontent.com/7513610/121804509-ba194d80-cc81-11eb-9b49-d3f352d42e90.png)

#### Rotate about z axis

Plot meshs rotated about z axis. It is plotted every 60 degrees.
Set axes actor to Plotter and set axes origin to the point to rotate.

```python
p = pv.Plotter()

p.add_text(""Z axis rotate"", font_size=24)
p.camera = camera
p.add_actor(axes.actor)

for i in range(6):
    rot = mesh.copy()
    rot.rotate_z(60*i, point=axes.origin)
    p.add_mesh(rot)

p.show()
```
![rotate_z](https://user-images.githubusercontent.com/7513610/121804595-1a0ff400-cc82-11eb-9ed7-d3000e1f3e1d.png)

#### Rotate about custom vector

Plot meshs rotated about custom vector. It is plotted every 60 degrees.
Set axes actor to Plotter and set axes origin to the point to rotate.

```python
p = pv.Plotter()

p.add_text(""Custom vector rotate"", font_size=24)
p.camera = camera
p.add_actor(axes.actor)
for i in range(6):
    rot = mesh.copy()
    rot.rotate_vector(vector=(1, 1, 1), angle=60*i, point=axes.origin)
    p.add_mesh(rot)

p.show()
```
![rotate_custom](https://user-images.githubusercontent.com/7513610/121804623-36ac2c00-cc82-11eb-9e3f-3401b4c8c2c8.png)
",7,22,[]
80,668921410,1378,92974124,2021-06-12 17:45:37,2021-06-12 19:58:07,closed,add backwards compat for parse_color,"This PR resolves #1377.  This is a critical fix as we've broken some downstream packages with the theme PR.
",1,1,[]
81,668535122,1376,92974124,2021-06-11 20:29:17,2021-06-16 18:10:03,closed,Add trackball-like options for terrain interaction mode,"It was raised in https://github.com/pyvista/pyvista/issues/1022 that zooming should be enabled using the mouse wheel for terrain interaction mode, and in general more customizability would be welcome.

This PR tackles the easy part of the feature request: by passing `mouse_wheel_zoom=True` we can request zooming with the mouse wheel:

```py
import pyvista as pv
from pyvista import examples

mesh = examples.download_st_helens().warp_by_scalar()

plotter = pv.Plotter()
plotter.add_mesh(mesh)
plotter.enable_terrain_style(mouse_wheel_zoom=True)
plotter.show()
```

As far as I can tell the default right-click drag zooming should keep working too even if mouse-wheel zooming is requested ~(although I haven't figured out how to make that work on my touchpad :laughing:)~. Yup, it still works (note to self: double-fingered touchscreen click for zoom, triple-fingered touchscreen click for pan).

I've decided to add this mode as non-default for backwards compatibility, but since the original zooming behaviour is still present then perhaps we can just always add the mouse wheel zoom as an additional feature. Not sure if this could be disruptive. I checked that [the VTK interactor style doesn't seem to define an event for mouse wheel movements](https://github.com/Kitware/VTK/blob/master/Interaction/Style/vtkInteractorStyleTerrain.cxx), so we'd probably not be stepping on any toes.

I'm thinking perhaps I should also add the option to pan the same way that the default trackball style does it with shift + mouse move...",9,7,[]
82,668492973,1375,92974124,2021-06-11 19:39:06,2021-06-14 01:29:03,closed,Add an adaptive subdivision filter,"Just a simple wrapper around vtkAdaptiveSubdivisionFilter.
",3,7,[]
83,668290473,1374,92974124,2021-06-11 15:48:12,2021-06-18 23:09:07,closed,Fix StructuredGrid in streamlines_from_source,"### Overview

Closes #1373

This PR checks if two `StructuredGrid` objects are passed into `streamlines_from_sources`.  If so, it casts the source to an unstructured grid.  This is not strictly necessary to produce a valid streamlines output, but vtk Errors are thrown otherwise.


### Details

A more elegant solution would be to fix whatever is causing the extents clashing issue, but I cannot tell if that is in pyvista, or upstream in vtk.

The test in this PR requires checking for vtk error in the log, so a new fixture was added to check this.  This is reusable for other tests, and we could consider making it apply to _all_ tests using `autouse=True`, but I suspect that there will be failing tests that need to be fixed.

I am first pushing the test that fails to show that it indeed fails the way it is supposed to.  Then I will push the changes to the filter itself that passes the test.
",14,10,[]
84,667725614,1372,92974124,2021-06-11 06:20:45,2021-06-13 15:55:57,closed,Disable warning on missing xserver also when using OSMesa,"Currently Pyvista prints a warning when there are no X server or display present, and if the underlying VTK library is not using EGL:
```
UserWarning: 
This system does not appear to be running an xserver.
PyVista will likely segfault when rendering.

Try starting a virtual frame buffer with xvfb, or using
  ``pyvista.start_xvfb()``
```
If the underlying VTK renderer is vtkEGLRenderWindow, there is no warning.

There is also a second option for using VTK rendering with pyvista, that is to have VTK compiled with OSMesa for offscreen software rendering purely on the CPU. However, pyvista still prints this annoying warning even if OSMesa, VTK and pyvista works perfectly well.

This very tiny patch disables the warning if the vtkRenderWindow is also vtkOSOpenGLRenderWindow, i.e. using OSMesa software rendering.

For reference, here is the different available vtkRenderWindow classes: https://vtk.org/doc/nightly/html/classvtkRenderWindow.html",2,1,[]
85,667577969,1371,92974124,2021-06-11 01:33:27,2021-06-13 15:57:08,closed,Add deploy section to doc Makefile,"### Overview

This PR adds a documentation deployment step to our documentation `Makefile`.  This makes deployment of our documentation easy as it can be deployed with simply `make doc deploy`, but quite dangerous as we're overwriting history.  We could git pull and then push as we do in our current CI, but it's not necessary to keep the history of `gh-pages`, only the releases.


To protect this branch a bit, I've generated a `release/0.31` branch for docs.  This way even if we overwrite the branch with garbage for some reason, we can always reselect a release branch from the ""Pages"" tab and simply display a different release.

The whole idea of this PR is to allow for local doc builds to avoid issues with the virtual framebuffer as pointed out by @adeak in https://github.com/pyvista/pyvista/issues/1355.
",5,2,[]
86,667499883,1370,92974124,2021-06-10 22:53:54,2021-06-18 00:01:29,closed,Unofficial Python 3.9 Wheels,"### Current Offical Wheel Support

Not sure if this is the best approach, but it's probably going to be some time until we have official wheels for Python 3.9+ from VTK, and even though there's work on getting development wheels on PyPi, I've run into a bunch of issues testing out their latest nightly wheels.  See:
https://gitlab.kitware.com/vtk/vtk/-/pipeline_schedules

I think part of the issue is simply bugs introduced past 9.0.1.


### Unofficial Wheels

I've been able to doctor some wheels in order to rename them as `pyvista-vtk` just to get them on PyPi.  For anyone from Kitware who's reading this, we kept the licencing, etc, and really just need a way of hosting wheels on PyPi.  I've written emails to Kitware asking to upload the very same wheels to your existing PyPi https://pypi.org/project/vtk/, but I've not gotten any responses.  Please email me at akascap@gmail.com and I'll gladly send you over the wheels I built by following https://docs.pyvista.org/extras/building_vtk.html.  Only other modifications was removing duplicate libraries from the wheel to reduce the size by 26 MB.

Please email me, would love to get wheels out in some way.

---

So far, I've uploaded just Python 3.9 for Linux to test PyPi.  Should we decide to support this, we can just upload it to the offical PyPi.

pip install -i https://test.pypi.org/simple/ pyvista-vtk==9.0.1

Plan is to add the wheels at https://github.com/pyvista/pyvista/releases/tag/0.31.0 to PyPi.  ARM64 architecture is supported by numpy and we should support it as well.

### Forseeable Issues

Since we're still fundamentally still installing `vtk` you could run into an issue where you try to install `pyvista-vtk` and then `pyvista-vtk-egl` to get EGL support and have your original install overwritten.  I can't see anyway around this, as we can't really rename the entire `import vtk` within pyvista just to support EGL.

---

Would really like any thoughts from @pyvista/developers.  It's really annoying not having Python 3.9 support.",8,1,[]
87,663901825,1361,92974124,2021-06-07 20:45:42,2021-06-13 15:56:48,closed,Remove user-facing-ish asserts,"Ideally assertions shouldn't be used to validate input, and they shouldn't normally be tripped by end-users. I've removed what I believe were the last few assertions that should have been something else. I've also snuck in some local style fixups.

I can also see a reason for leaving all these assertions in their place, because they probably aren't strictly user-facing for various reasons. So feel free to dispute any or all of these changes.

1. An assertion in the `spherical.py` plotting example: 
    * pro: this is defined in a helper function, and it would probably not hurt to follow best practices here
    * con: this is just an example so assertions should generally be OK (I did leave the rest alone)
  
2. A bunch of assertions in `renderers.Renderers`:
    * pro: these are actual cases of input validation that are probably better to change
    * con: this module and class seems undocumented, so perhaps users aren't expected to create them in the first place

3. An assertion in `SphericalArcFromNormal`: I'm on the fence about this one.
    * pro: Ideally this should go in a test (however the `pv.wrap` call discards the original source and we're only left with a `PolyData` outside, so we can't test this).
    * con: this is not input validation, but rather the kind of ""this should never happen"" check that assertions should be used for
    * pro again: it doesn't test pyvista, it tests VTK. If we prefer a wild (and non-guaranteed) `AssertionError` if the impossible happens in VTK, we should add this assertion back in.",4,5,[]
88,662980537,1359,92974124,2021-06-06 15:26:07,2021-06-07 20:23:05,closed,Release 0.31,"### Release 0.31

It's only three weeks since our last release, but we've added several features and bug fixes that would be great to get out as a release, including:

- Themes
- Patching scalar bar removal
- Improved streamline examples
- Patched screenshot generation
- Option to use cell data within glyph filter
- Perlin noise examples
- Improved testing
- Faster ray tracing
- Ensure modifying arrays updates the render pipeline
- Improve build notes

Additionally, with this release we're also going to add our own wheels in the release notes, including aarch64 build for with and without EGL, EGL wheels, and python 3.9 (all built correctly and around 100 MB).

#### Misc notes
As always, this release branch (when merged to master) will bump the version to the next minor version with the `dev0` tag.  We'll keep this release branch and bump to `0.31.0`.

This PR also adds a few badges to our [README.rst](https://github.com/pyvista/pyvista/blob/release/0.31/README.rst).

I'll be clearing out many of the older branches (release and otherwise) since there's no reason to maintain minor versions over 6 months old.  We've yet to backport a patch to an older release, but we'll still keep the past two or three around just in case.
",8,4,[]
89,662603264,1358,92974124,2021-06-05 21:07:05,2021-06-06 02:50:21,closed,Fix markup bug in show() docstring,"I missed a broken piece of markup in my recent PR. Since the change is trivial and the broken version wasn't caught by CI anyway, I'm pushing this as no-ci.",2,1,[]
90,662436822,1357,92974124,2021-06-05 13:14:36,2021-06-06 14:36:03,closed,Do not mutate `scalar_ bar_args`,"### Overview

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->

This PR copies `scalar_bar_args` to avoid mutating the passed in variable in `add_mesh` and `add_volume`.

Fixes #1353 

### Details

Tests added for future regression testing.

",2,6,[]
91,660470664,1354,92974124,2021-06-03 00:12:18,2021-06-04 22:28:31,closed,Fix screenshot things,"This started out as a trivial fix for https://github.com/pyvista/pyvista/pull/1342#issuecomment-851174143 but I've run into some weirdness surrounding screenshots.

Notable changes:
  1. `_save_image()` used to always return the image array. This was twice a bug, because there was a redundant `if` that had the logic backwards.
  2. `screenshot()` delegated the image array returning to `_save_image()`, so this also always returned the image array.

I kept the original intent of the `return_img` keyword and fixed its behaviour by returning from `_save_image()` only when requested, so this is now also mirrored in the actual behaviour of `screenshot()`.

  3. Some docstring extensions including the originally intended doctest fixes. There's also weirdness here: the docs claimed that `screenshot=True` in `show()` will take the last state of the plotter. This doesn't seem to be the case, going back in versions as far as 2019. I've kept the behaviour and changed the documentation, recommending an initial interactive call to `show()` with `auto_close=False`. It might be nicer to take the last image before closing, but I suspect that might be hard to do.
  4. I changed an error type for when the plotter was improperly closed.

As an additional point that I haven't touched yet: [this part](https://github.com/adeak/pyvista/blob/77722f23088ce79ff75249b9f8122a8ba3b80ffd/tests/plotting/test_plotting.py#L904-L911) of the original `test_screenshot` seems _very_ suspicious to me:
```py
    from weakref import proxy
    ...

    # checking if plotter closes
    ref = proxy(plotter)
    plotter.close()

    try:
        ref
    except:
        raise RuntimeError('Plotter did not close')
```
Accessing the `proxy`'s name would only raise if the referenced object were deallocated. But the plotter object is still bound to the `plotter` local name, so there's no way the object could be deallocated. Furthermore, the (bare...) `except` would raise exactly when the `plotter` is somehow gone, yet the custom error mesage mentions the plotter not closing. If the plotter didn't close I'd expect exactly that the object is still around, and there's even less of an error in the `try` block...

So I think we should just remove this part of the test. Is there a reason for its existence that I'm missing?",5,4,[]
92,660218762,1352,92974124,2021-06-02 16:28:27,2021-06-03 22:58:59,closed,Add missing parameters and clean up `add_scalar_bar` docstring,"### Overview

`fmt` and `vertical` were missing.  

A few defaults are still missing, because in those cases I wasn't sure what would be the accurate description.  For example, I'm not sure what not setting `n_colors` does; it depends on `vtk` behavior.

I opted to specifically call out when the default inherits from `pyvista.global_theme`, except for `position_x` and `position_y`, which are more complex.

I used the `numpydoc` style preference for when only a set of values is accepted for `font_family`.

See https://numpydoc.readthedocs.io/en/latest/format.html#parameters.

### Details



",6,4,[]
93,660148747,1351,92974124,2021-06-02 15:00:18,2021-06-03 22:55:17,closed,Add to streamlines Example for using `IntegrationTime`,"### Overview

This PR addresses https://github.com/pyvista/pyvista-support/issues/357, where it is unclear what information is provided by streamlines.


We could also consider adding these values into the docstring of `streamlines` and `streamlines_from_source`, but it depends on `vtk` so it would be a maintenance burden in case the list gets added to in the future.


### Details

The changed figure looks like:

![image](https://user-images.githubusercontent.com/39341281/120503629-770dcf00-c391-11eb-9ee4-0907af683053.png)


The added output is:

```txt
Added arrays from streamlines filter:
['IntegrationTime', 'Vorticity', 'Rotation', 'AngularVelocity', 'Normals', 'ReasonForTermination', 'SeedIds']
```

The `streamlines_from_source` is now linked correctly.

",9,2,[]
94,659352655,1349,92974124,2021-06-01 21:26:40,2021-06-02 15:23:34,closed,Clean up build vtk docs,"Implement the recomendations in #1344.
",3,7,[]
95,659257131,1348,92974124,2021-06-01 18:48:18,2021-06-02 09:36:54,closed,Add perlin noise example,"### Overview

This PR introduces ``sample_function`` and ``perlin_noise`` to generate natural looking landscapes or voxelized meshes like:
![image](https://user-images.githubusercontent.com/11981631/120375054-8af4fa80-c2d7-11eb-9110-17463e0a8fca.png)

![image](https://user-images.githubusercontent.com/11981631/120375064-921c0880-c2d7-11eb-82e5-e87845265c63.png)

### Example Usage
```py
freq = (1, 1, 1)
noise = pv.perlin_noise(1, freq, (0, 0, 0))
grid = pv.sample_function(noise, [0, 3.0, -0, 1.0, 0, 1.0], dim=(120, 40, 40))
```
",1,5,[]
96,659126578,1347,92974124,2021-06-01 15:46:08,2021-06-03 11:33:28,closed,Remove Scalarbar when removing Actor,"This PR resolves #1313 by removing the scalar bar actor when its linked actor is removed.
",3,5,[]
97,658878732,1346,92974124,2021-06-01 10:23:18,2021-06-01 11:33:58,closed,fix interpolation documentation,"### Overview

Change documentation of interpolation to correctly describe the method for getting points and the method for weighing those points.

Resolves Issue https://github.com/pyvista/pyvista/issues/1336

### Details
new description is 

        n_points : int, optional
            If given, specifies the number of the closest points used to form
            the interpolation basis. This will invalidate the radius argument
            in favor of an N closest points approach. This typically has poorer
            results.


",2,1,[]
98,658621517,1345,92974124,2021-06-01 03:49:00,2021-06-01 10:41:24,closed,add note about the f focus key,"### Overview

Resolves #1332 by adding a note about the ""f"" focus key.
",1,1,[]
99,658619791,1344,92974124,2021-06-01 03:42:28,2021-06-01 13:01:17,closed,improve build notes,"### Overview

This PR improves the build notes and prepares for the upload of vtk wheels to the upcoming release ``0.31.0``.

Resolves #1338 ",1,1,[]
100,657556278,1342,92974124,2021-05-29 23:59:58,2021-05-30 15:24:17,closed,Add missing examples import to texture_map_to_sphere docs,"There was a missing import of `examples` in the doctest of the `texture_map_to_sphere` filter (which didn't raise an error because doctests in the same file share a global namespace).

It would be great if we could somehow catch these automatically, but I couldn't find a way to force sphinx's doctests to use a clean environment for each function being tested.",6,1,[]
101,657554766,1341,92974124,2021-05-29 23:43:59,2021-06-01 13:01:36,closed,Fix streamlines_from_source doc markup and whitespace,"There were a few style issues left over in the docstring of the new `streamlines_from_source` filter, one of which led to a warning in the doctest build:
```bash
docstring of pyvista.core.filters.DataSetFilters.streamlines_from_source:10: WARNING: Unexpected section title.
```

The reason was the colon after `Parameters` which also broke the built documentation's markup.

Before:
![Screenshot 2021-05-30 at 01-39-20 Filters — PyVista 0 30 dev0 documentation](https://user-images.githubusercontent.com/17914410/120087447-4b1bf080-c0e8-11eb-8966-369d9cd4c20e.png)

After:
![Screenshot 2021-05-30 at 01-41-44 Filters — PyVista 0 30 dev0 documentation](https://user-images.githubusercontent.com/17914410/120087448-5242fe80-c0e8-11eb-8b18-eca8e93f2f45.png)
",1,1,[]
102,654369003,1339,92974124,2021-05-27 00:51:53,2021-05-27 14:23:01,closed,Release 0.30.2,"This PR merges `master` to `release/0.30` in preparation for releasing 0.30.2.

There are a few projects I'm working on where I'd like to be able to the new `global_theme` feature that was introduced in #1310.  Since that, and all other features added since 0.30.1 are backwards compatible, I feel a patch release is in order.

We're still doing ""trunk based development"", but given that there are no major API changes minus the global theme (which still provides support for `rcParams`, this release will bring `release/0.30` up-to-date to master.

Please let me know if there are any issues with this release.  Otherwise, I'd like to have it out soon.",3,16,[]
103,650300515,1334,92974124,2021-05-21 20:08:27,2021-06-01 13:02:35,closed,Add ability to use cell data with glyph filter,"### Overview
This PR adds the capability to use cell centered data with glyphs. 

If cell centered data is provided, by the scale and/or the orient data, the glyphs are positioned on the cells.  If point valued data is provided, by the scale and/or the orient data, the glyphs are positioned on the points.



### Details

When implementing this, some of the datasets used in the test were found to either have cell-centered vector data or not have vector data.  The default is to orient the glyphs, so I added in the vector data to account for this.

Also in the tests, I used several `assert` statements instead of using `result =` since `result` was not used oftentimes.

Closes #1327. 


### Future Directions

I'd like to add the option to control the coloring of the glyphs next, but it hits a bit of a snag with the way the parameters are currently specified.  Currently, we pass in a string to `scale` to set the active scalars.  But we cannot allow this for both `color` and `scale`.  It would be better if it were only allowed to pass in a `bool` for `scale` and a `bool` for `color` and a `scalars` argument for the active scalar.  Then we would mirror this for `orient` and add `vectors`.

The other snag is that the most useful use case, IMO, is to scale by vector magnitude and color by a scalar value.  This will require a `scale_mode` and a `color_mode`.  I suppose `index_mode` would also have to be added in this case.

I put this here in case it flags anything in the way this is PR is implemented.

Edit: I'm realizing that coloring can be done after generating the glyphs, allthough there are some use cases that require extra steps.  For example, the vector data does not get carried over to the generated glyphs, so it can't be colored according to the vector data unless there is preprocessing done to save the vector data as scalar data.  I believe that the `ColorMode` in `vtkGlyph3D` could potentially address this.",20,20,[]
104,647845156,1330,92974124,2021-05-19 16:29:30,2021-05-19 16:52:28,closed,Fix Returns in docstrings of streamlines and streamlines_from_source,"### Overview
I accidentally included a `:` after the `Returns` section in the docstrings.


",1,1,[]
105,647834888,1329,92974124,2021-05-19 16:16:42,2021-05-19 16:55:54,closed,Add schedule for GitHub Actions,"This PR follows https://github.com/pyvista/pyvistaqt/pull/83#issuecomment-778653533 and adds a schedule to run the CIs every day at 4:00 UTC.

I'm not 100% sure about the syntax but the [documentation](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#on) says:

> You must append a colon (:) to all events, including events without configuration.",1,1,[]
106,647196867,1328,92974124,2021-05-19 01:15:39,2021-07-05 21:29:44,closed,📸 Add copy method to camera object,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
📸 Add copy method to camera object

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

Referred to [pyvista.Light.copy](https://dev.pyvista.org/core/lights.html#pyvista.Light.copy).
",4,15,[]
107,646934178,1326,92974124,2021-05-18 17:02:08,2021-05-18 19:55:52,closed,Add local fixtures in test_polydata,"The `test_polydata.py` module had a handful of global meshes that were being copied all over the place. This PR replaces them with module-level fixtures.

One non-trivial change is that the now-local `sphere` fixture (coming from `pv.Sphere`) shadows the global `sphere` fixture (coming from `pv.examples.load_sphere`, ultimately reading a file with data arrays). This doesn't seem like an issue and the tests run fine.",4,1,['testing']
108,646920200,1325,92974124,2021-05-18 16:41:19,2021-05-19 14:18:44,closed,fix/backwards compat ipyvtk,"In keeping with maintaining backwards compatibility with the old rcParams interface, this PR adds back in ``use_ipyvtk``, which was removed when refactoring to use ``global_theme``.

This issues a `DeprecationWarning`, which we can change to `PyvistaDeprecationWarning` after a few minor releases.
",3,10,[]
109,646290029,1323,92974124,2021-05-18 01:15:04,2021-05-22 14:36:35,closed,Faster multi ray trace retry,"### Overview

The retry kwarg in the multi_ray_trace function triggers a retry of ray traces that returned no intersection points. Currently this is done by looping over all the rays and determining if they returned a result, which can be intolerably slow if the number of rays is very large and defeats the point of using embree for speed up in the first place. The new method uses a setdiff to determine which rays need to be retried and then only loops across those, significantly improving the performance of the function.


",12,12,[]
110,646277631,1322,92974124,2021-05-18 00:37:32,2021-05-18 13:50:01,closed,"Fix up and clarify plot, show docs",Fix a few style issues in the docs of `pyvista.plot()` and `Plotter.show()`.,2,1,[]
111,646254935,1321,92974124,2021-05-17 23:31:32,2021-07-01 16:31:42,closed,🚧 Fix error message for scalars of multiple dimensions,"### Overview

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->
This gives the error message to indicate that it is the first dimension size that must match.  All current usages of `raise_not_matching` seem to provide a `DataSet`.
 

### Details
Related to #1319 and https://github.com/pyvista/pyvista-support/issues/425

If we can get rid of, or split out, the `vtkTable` piece, we could also consider having this function also check whether the scalars should be applied to points or cells.  This would very minorly simplify the consuming functions.

This refactoring would also provide a central location to do reshaping like suggested in https://github.com/pyvista/pyvista/issues/1319#issuecomment-842699249. #",20,1,[]
112,645923285,1318,92974124,2021-05-17 14:39:43,2021-05-17 17:26:46,closed,add trivial module for backwards compatability,"This PR adds a trivial file to make our recent theme changes compatible with `pyvistaqt`.  I don't want our theme changes to be a breaking change as this needs to be out soon in support of another project https://github.com/pyansys/pymapdl.
",5,2,[]
113,645272235,1317,92974124,2021-05-16 06:39:50,2021-05-16 12:57:38,closed,Update filters.py,"geometry

### Overview

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

typo
",1,1,[]
114,645271175,1316,92974124,2021-05-16 06:26:46,2021-05-16 12:32:10,closed,Update compute-normals.py,"Just all

### Overview

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- < feature1 or bug1 description >
- < feature2 or bug2 description >

",2,1,[]
115,645261038,1315,92974124,2021-05-16 04:48:37,2021-05-17 16:05:59,closed,Modifying arrays calls Modified() on associated datasets.,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Addresses #1262.

Modifies `pyvista_ndarray` so that it calls `Modifed()` on any associated dataset (if there is one).

In my local testing with pyvistaqt's BackgroundPlotter, I can update the view without any interaction in the render window. It's not instantaneous, but it updates in < 1 s.

```python
import numpy as np
from pyvista import examples

mesh = examples.load_hexbeam()

from pyvistaqt import BackgroundPlotter
p = BackgroundPlotter()
p.add_mesh(mesh, show_edges=True)

#%% 
#execute this cell manually
mesh['sample_point_scalars'] = np.zeros(mesh.n_points)

#%%
# execute this cell manually
mesh.points *= 2.0

```

Seems related to:
- https://github.com/pyvista/pyvista/pull/1264
- https://github.com/Kitware/ipyvtklink/issues/29
",4,4,[]
116,645258274,1314,92974124,2021-05-16 04:12:31,2021-05-16 11:52:25,closed,Update dataset.rst,"referenced

### Overview

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

grammar fix
",1,1,[]
117,644089722,1312,92974124,2021-05-13 16:22:24,2021-05-13 16:50:35,closed,Fix typo for linking `clip_surface` in documentation examples,"### Overview

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->

`DataSet.Filters` used instead of `DataSetFilters`.  


",1,1,[]
118,642757414,1310,92974124,2021-05-12 05:02:39,2021-05-17 04:33:26,closed,Implement Theme Class,"``pyvista`` implements global themes using ``rcParams``, which is a reasonably good way for implementing a ""style sheet"" like approach for setting global plotting defaults.  It's very similar to ``matplotlib`` and is likely to be somewhat familiar.  However, there are a few limitations with this approach.

- Not self documenting
- User can set invalid parameters and not realize this until plotting.
- No code completion, has to actually load the dictionary and inspect it.

This PR proposes that instead, we implement a `Theme` class to control global defaults.  This was inspired by the discussion in https://github.com/pyansys/pymapdl/issues/425#issuecomment-839126581.  To summarize, a different user found it difficult to inspect and use the existing theme setter, and it's clear that a `Theme` class would be a better implementation.",59,50,[]
119,639364798,1308,92974124,2021-05-11 05:28:18,2021-05-11 14:01:58,closed,Hotfix for 0.30.1,"Add a hotfix for the scalar bar attribute and a quick ravel for center on ``CircularArc``.
",2,5,[]
120,636383150,1304,92974124,2021-05-09 22:04:01,2021-05-09 22:46:20,closed,build docs twice,"Our current doc build fails on VTK9 without the changes in this PR.
",1,1,[]
121,634042825,1303,92974124,2021-05-08 06:35:14,2021-05-09 16:04:16,closed,🎨 Change the warp figure so users know what we're doing,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
🎨 Change the figure so users know what we're doing

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

| master | PR |
----|---- 
| ![master](https://user-images.githubusercontent.com/7513610/117529512-ec94b280-b012-11eb-9cfa-8af6d5c8ff9f.png) | ![pr](https://user-images.githubusercontent.com/7513610/117529445-945db080-b012-11eb-9436-71c4469dc546.png) |

",1,1,[]
122,632148192,1302,92974124,2021-05-07 01:37:34,2021-05-07 13:10:06,closed,"Clean up docstrings of Cone, Disc and Polygon","### Overview

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->

Fixed references to wrong object type, `c_res` typo, and standardized always ending in a period.

### Details


",1,1,[]
123,630918481,1299,92974124,2021-05-05 21:24:13,2021-05-07 13:13:16,closed,Audit filters.py so that `inplace=True` always returns a mesh,"Closes #1296

I just did `filters.py` here. The same pattern occurs in `pointset.py` but I don't really interact with that module so I kept it same.

The only change in this PR I thought wasn't completely obvious was [lines 160-164](https://github.com/pyvista/pyvista/compare/master...darikg:return-inplace-mesh?expand=1#diff-ea7bae3b8ad57962f4b073c479a91c602ca358a48edcedcfd7c93ffccd572247R160) with the weird optional tuple return type.
",5,4,[]
124,630482886,1298,92974124,2021-05-05 10:35:33,2021-05-08 02:17:30,closed,🐛 Fix: sampling arc angle and resolution,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
🐛 Fix: sampling arc angle is always 90.0 degree even if degree arg is set another degree.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
#1218

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",1,2,['bug']
125,629473413,1294,92974124,2021-05-04 02:18:55,2021-05-09 19:13:58,closed,fix/get image after close,"### Bug Fix

This PR resolves #1293 by checking if the plotter has been rendered before getting the ``image_depth``.  Additionally, checks if the render window has been shown to avoid a nasty segfault with:

```py
p = pv.Plotter()
p.add_mesh(mesh, color=True)
p.get_image_depth()
```

### Bonus

I'm a bit impatient and I prefer minimizing the time it takes to run the unit tests.  Currently, unit testing takes ``1:52`` and that's too long in my opinion.

With the ``pytest-xdist`` package, you can run tests in parallel, and it's great for speeding up any testing that's capable of running in parallel.  Since we've done a great job writing our tests using ``fixtures`` so individual tests would be without side-effects, this was a fairly easy testing feature to add.

My laptop sports a ``Intel(R) Core(TM) i7-7820HQ CPU @ 2.90GHz`` and has four cores.  Speedup is 3.41x:

```
$ pytest -n 4
platform linux -- Python 3.8.5, pytest-6.2.2, py-1.10.0, pluggy-0.13.1
PyQt5 5.15.3 -- Qt runtime 5.15.2 -- Qt compiled 5.15.2
rootdir: /home/alex/python/pyvista, configfile: pytest.ini
plugins: forked-1.3.0, leaks-0.3.1, cov-2.11.1, anyio-2.2.0, qt-3.3.0, asyncio-0.14.0, memprof-0.2.0, sphinx-0.3.1, hypothesis-6.5.0, parallel-0.1.0, xdist-2.2.1
gw0 [957] / gw1 [957] / gw2 [957] / gw3 [957]
........................................................................ [  7%]
....................................................................... [ 14%]
....................................................................... [ 22%]
....................................................................... [ 29%]
....................................................................... [ 37%]
....................................................................... [ 44%]
....................................................................... [ 52%]
......................................................................s [ 59%]
.................................................s..................... [ 66%]
........................................................................ [ 74%]
......................................................................... [ 81%]
......................................................................... [ 89%]
....................................................................... [ 96%]
............................                                            [100%]
======================= 955 passed, 2 skipped in 32.81s =======================
```

",5,35,[]
126,628412939,1292,92974124,2021-05-01 11:04:53,2021-05-02 16:59:20,closed,DOC: Fix citation bibtex entry and spell out two authors,"The BibTex entry for the paper had some capitalized words (3D, Visualization Toolkit) that weren't protected with braces. These would be rendered in lowercase. And ""may"" for the month field was lowercase as it often is with autogenerated bib entries.

I also changed *""Sullivan et al.""* to *""Sullivan and Kaszynski""* in the docs; it's customary to spell out two authors (and technically ""et al."", short for ""et alii/aliae/alia"", means ""and others"").",1,1,['documentation']
127,624863268,1289,92974124,2021-04-28 05:36:45,2021-04-28 06:09:25,closed,Fix Window Closing,"Resolves #1260, again, but for `vtk==8.1.2`",1,2,[]
128,623669257,1287,92974124,2021-04-26 19:48:08,2021-05-17 16:13:34,closed,Allow dataset source for streamlines,"### Overview

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->

It would be nice to be able to specify a custom source for streamlines based on any dataset type.  ~~This PR adds an optional `source` parameter that overrides the sphere or line functionality of streamlines, if provided.  Otherwise, the behavior is unchanged.~~

This PR adds a new `streamlines_from_source` filter and restructures `streamlines` to call this new filter.

This was inspired by https://github.com/pyvista/pyvista-support/issues/414


### Details

One use case is to use a surface of an inlet to the domain as the source seed for the streamlines.  Or a uniform grid, etc.

This PR fixes #1291 by explicitly creating a single point at `start_position` instead of setting it directly on `vtkStreamTracer`.


",15,14,[]
129,622871613,1286,92974124,2021-04-26 00:24:26,2021-04-27 00:03:31,closed,♻️ Refactor code.,"### Overview
♻️ Refactor code.

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- Minor refactor of calling camera object's method.

",1,1,[]
130,622194280,1284,92974124,2021-04-23 16:34:32,2021-05-04 02:30:22,closed,Documentation - Use pydata-sphinx-theme,"Resolve #1138 

My first pass... still needs work/cleanup



https://user-images.githubusercontent.com/22067021/115902204-69266f00-a41f-11eb-8971-3f935663bbb2.mov

",17,10,[]
131,620945978,1283,92974124,2021-04-22 10:03:53,2021-05-04 08:18:55,closed,📷 Add camera rotate methods,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Add camera rotate methods
- `roll`
- `vertical_rotate`
- `horizontal_rotate`

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
https://github.com/pyvista/pyvista-support/issues/412

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->

### Details

This is a wrapper of `Roll`, `Elevation` and `Azumith` of [`vtkCamera` class](https://vtk.org/doc/nightly/html/classvtkCamera.html).

![camera](https://raw.githubusercontent.com/Kitware/vtk-examples/gh-pages/src/Testing/Baseline/Python/Visualization/TestCameraModel1.png)

",2,13,[]
132,617732807,1280,92974124,2021-04-19 07:21:21,2021-04-19 08:39:17,closed,Fix typo of filters.py,"given

### Overview

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- < feature1 or bug1 description >
- < feature2 or bug2 description >

",2,1,[]
133,617511410,1279,92974124,2021-04-18 16:16:50,2021-04-18 17:02:53,closed,use twine token,"For additional security we're moving to use pypi tokens rather than the username password for uploading (and only uploading) packages to PyPi.

For further details see:
https://pypi.org/help/#apitoken
",1,1,[]
134,616531041,1276,92974124,2021-04-16 04:51:36,2021-04-16 05:21:25,closed,Fix typo in ipygany.rst,"Minor edits.

### Overview

<!-- Please insert a high-level description of this pull request here. -->
Small text corrections.
",1,1,[]
135,616149727,1273,92974124,2021-04-15 15:29:22,2021-04-18 16:13:34,closed,Use Token for Twine,"For additional security we're moving to use pypi tokens rather than the username password for uploading (and only uploading) packages to PyPi.

For further details see:
https://pypi.org/help/#apitoken
",0,7,[]
136,615601700,1271,92974124,2021-04-14 23:06:33,2021-04-29 02:57:29,closed,A thank you to all those who've contributed to PyVista's success!,"Thank you all for contributing to PyVista!! We are so grateful for contributors who have added new features, squashed bugs, fixed documentation typos, shared new examples, and so much more -- all of these efforts go a long way in making PyVista what it is. To show our appreciation, we want to put your name on the collective work, adding many of you to The PyVista Developers list in no particular order:

- @adeak
- @tkoyama010
- @rodrigomologni
- @whophil
- @thomgrand
- @larsoner

I hope it is safe to assume consent to add your name here - please let us know otherwise (either in a comment here or privately on Slack or [email](mailto:info@pyvista.org))

@pyvista/developers, if there is anyone else you feel I forgot to add here, please let me know or add them directly to this PR",4,2,[]
137,614907204,1267,92974124,2021-04-14 04:00:29,2021-04-15 03:20:11,closed,Update to newly renamed ipyvtklink,Use the newly renamed `ipyvtklink`: https://pypi.org/project/ipyvtklink/,4,11,[]
138,614906252,1266,92974124,2021-04-14 03:57:05,2021-04-14 04:35:41,closed,fix/windows plotter closing,"### Stop MS Windows Render Window from Closing

For some reason, unbeknownst to man or beast, the render window on windows closes out on the second show.  This can be duplicated easily with:

```py
import pyvista as pv
pv.Sphere().plot(color='blue')
pv.Sphere().plot(color='red')
```

Where only the blue sphere shows.

See #186, #1018 and #1078 for other issues related to this one. This is a reoccurring issue and is cited in `plotter.py` and was an absolute pain to fix.

Turns out the trick is to `ProcessEvents`.  I have no idea why we have to call it, and there's likely something left around in VTK memory, some object not collected, but it appears that there's something left over and needs to be flushed out.",2,4,[]
139,614857732,1265,92974124,2021-04-14 01:23:31,2021-04-19 17:12:31,closed,Fix Points Setter,"### Overview

When setting points inplace, we perform a shallow copy operation:
https://github.com/pyvista/pyvista/blob/6e61f8abff5f883bdc28234c39bb33c0b99ae12d/pyvista/core/dataset.py#L202-L214

Turns out, when the input array is a `pyvista_ndarray`, we keep around an extra reference, which was discovered in #1248 and #1247.  This PR resolves #1248 by simply setting the data directly from the pyvista_ndarray since it contains a reference to the original VTKObject.
",11,3,[]
140,614811233,1264,92974124,2021-04-13 22:58:41,2021-04-14 03:41:46,closed,Add ModifiedEvent listener for ipyvtk plotter,"Resolves https://github.com/Kitware/ipyvtk-simple/issues/29 to track `ModifiedEvent`s on the renderers.

For full interactivity, we still need to address #1262 so that the mesh can be altered and immediately shown in the ipyvtk canvas",3,1,[]
141,613809011,1263,92974124,2021-04-12 17:26:13,2021-04-13 01:17:21,closed,Add create the Spring example,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Add create the Spring example from https://kitware.github.io/vtk-examples/site/Python/Modelling/Spring/ .
![spring_example](https://user-images.githubusercontent.com/7513610/114435776-86796300-9bff-11eb-8472-4b6841388ada.png)

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",1,7,[]
142,613679800,1261,92974124,2021-04-12 14:27:57,2021-04-12 23:01:00,closed,Use composition in RenderWindowInteractor,"This is a draft for https://github.com/pyvista/pyvista/pull/1257#issuecomment-817781133, I use it in https://github.com/pyvista/pyvistaqt/pull/95 to test the integration with PyVistaQt.",6,8,[]
143,613218325,1259,92974124,2021-04-12 02:52:37,2021-04-12 23:01:26,closed,Fix Image Segfault,"### Resolves #1140

Gives the user a helpful message when the attribute ``Plotter.image`` is accessed before the render window has been rendered by adding `_rendered`.

",1,2,[]
144,613107384,1257,92974124,2021-04-11 16:44:23,2021-05-10 00:13:49,closed,release/0.30,"### Release 0.30

We've added several features and master has diverged enough from 0.29 that it's time for a release.  Support for `jupyterlab` is a growing concern, and I think we can expand our user base with features like:
https://dev.pyvista.org/jupyter/index.html

There's a release candidate out on pypi, which can be installed with:
```
pip install pyvista==0.30.0rc1
```

This was created to allow early testing, but also in support of #1256.

---
### Remaining Issues

We still have a ton of issues to work on, and I'm like to setup a milestone so we can fix a few of these before finalizing the release.  Please post here if there are any issues here the @pyvista/collaborators or @pyvista/developers feel we need to work on.  Please add to the 0.30 milestone or post it here.
",8,8,[]
145,611211693,1255,92974124,2021-04-08 05:03:52,2021-04-08 06:08:32,closed,fix floor coloring,"### Fix floor coloring

Resolve #1230 by clearing the arrays when creating the floors.  Also does some misc doc cleanup.
",1,1,[]
146,611206460,1254,92974124,2021-04-08 04:50:42,2021-04-09 04:19:26,closed,Fix Cell Picking,"### Fix Cell Picking

Fixing #1250 ended up turing into a refactor/testing PR.  First, #1250 arose from refactoring from #1242, which wasn't discovered until manual testing because we have minimal testing coverage for our picking methods.  Rather than just fixing the one line bug and moving on, this PR sets out to improve our testing coverage by adding more tests and creating a basic ``RenderWindowInteractor`` class that moves some ``vtkRenderWindowInteractor`` specific code outside of the ``Plotter`` class.  This was done to improve coverage, readability, and add some testing specific methods to the interactor.

Testing coverage should improve a bit.  Please note if more methods need to be tested now that I've (sorta) figured out non-interactive ""interactive"" testing through vtk events.
",2,7,[]
147,610824531,1253,92974124,2021-04-07 16:52:49,2021-04-08 05:49:02,closed,Add pyvista.Camera class documentation,"### Overview
<!-- Please insert a high-level description of this pull request here. -->
This Pull Request add pyvista.Camera class documentation.

```python
import pyvista as pv
import numpy as np
from pyvista import examples

pv.set_plot_theme(""document"")

camera = pv.Camera()
near_range = 0.3
far_range = 0.8
camera.clipping_range = (near_range, far_range)
unit_vector = np.array(camera.direction) / np.linalg.norm(
    np.array([camera.focal_point]) - np.array([camera.position])
)

frustum = camera.view_frustum(1.0)

position = camera.position
focal_point = camera.focal_point
line = pv.Line(position, focal_point)

bunny = examples.download_bunny()
xyz = camera.position + unit_vector * 0.6 - np.mean(bunny.points, axis=0)
bunny.translate(xyz)

p = pv.Plotter(shape=(2, 1))
p.subplot(0, 0)
p.add_text(""Camera Position"")
p.add_mesh(bunny)
p.add_mesh(frustum, style=""wireframe"")
p.add_mesh(bunny)
p.add_mesh(line, color=""b"")
p.add_point_labels(
    [
        position,
        camera.position + unit_vector * near_range,
        camera.position + unit_vector * far_range,
        focal_point,
    ],
    [""Camera Position"", ""Near Clipping Plane"", ""Far Clipping Plane"", ""Focal Point""],
    margin=0,
    fill_shape=False,
    font_size=14,
    shape_color=""white"",
    point_color=""red"",
    text_color=""black"",
)
p.camera.position = (1.1, 1.5, 0.0)
p.camera.focal_point = (0.2, 0.3, 0.3)
p.camera.up = (0.0, 1.0, 0.0)
p.camera.zoom(1.4)

p.subplot(1, 0)
p.add_text(""Camera View"")
p.add_mesh(bunny)
p.camera = camera
p.show()
```
![camera_0_0](https://user-images.githubusercontent.com/7513610/113904006-8bf43900-980c-11eb-84f4-ce93b7889fe8.png)

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
Relate to #945

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- Add `pyvista.Camera` class and API documentation.
- Add `view_frustum` method to `pyvista.Camera` class.

",4,7,[]
148,610680095,1251,92974124,2021-04-07 13:44:11,2021-04-07 18:27:20,closed,add dataset_adapter to hidden imports,"#### Update Hidden Imports

#1244 pointed out that our hidden imports with `pyinstaller` is missing ``vtkmodules.numpy_interface.dataset_adapter``.
",1,1,[]
149,609063485,1247,92974124,2021-04-05 16:47:37,2021-04-07 02:44:36,closed,Add Shadows,"### Shadows

Thanks to work done by @adeak, shadows can now be added to extend lighting within `pyvista`:

![sc2](https://user-images.githubusercontent.com/11981631/113599705-38130580-95fc-11eb-8c95-5491dbfe4e44.png)

```py
import pyvista as pv

plotter = pv.Plotter(lighting=None, window_size=(800, 800))

# create a top down light
light = pv.Light(position=(0, 0, 3), show_actor=True, positional=True, cone_angle=30,
                 exponent=20, intensity=1.5)
plotter.add_light(light)

# add a sphere to the plotter
sphere = pv.Sphere(radius=0.3, center=(0, 0, 1))
plotter.add_mesh(sphere, ambient=0.2, diffuse=0.5, specular=0.8, specular_power=30,
                 smooth_shading=True, color='dodgerblue')

# add the grid
grid = pv.Plane(i_size=4, j_size=4)
plotter.add_mesh(grid, ambient=0, diffuse=0.5, specular=0.8, color='white')

# setup and show the plotter
plotter.enable_shadows()
plotter.set_background('darkgrey')
plotter.show()
```

---

#### More cool figures from new examples

![sc0](https://user-images.githubusercontent.com/11981631/113599746-47924e80-95fc-11eb-91b0-e88a44114485.png)

![sc1](https://user-images.githubusercontent.com/11981631/113599757-4bbe6c00-95fc-11eb-83e3-e5b1fabb8129.png)


---

PR Notes:

- Updated the `Light` class to make it a little easier to use when creating the objects.  Not sure how you feel about this @adeak, but I really prefer setting attributes when instantiating an object.  Getting/setting is critical as well, and it made it really easy to add the additional kwargs to `__init__`.

- Noted weird behavior from VTK, inline with observations from https://stackoverflow.com/questions/66580372/pyvista-error-trying-to-cast-a-shadow-onto-a-gridded-plane.  I made some notes regarding this in the docs.  Honestly, shadows are so cool that I'm fine with putting up with this provided that it's noted in the documentation.
",14,30,[]
150,608509463,1246,92974124,2021-04-04 08:29:17,2021-04-05 07:02:38,closed,Add fname option to plot_over methods,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Add fname option to plot_over methods

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- We can save figure like follwing.
```python
import pyvista as pv
from pyvista import examples

mesh = examples.download_kitchen()

a = [mesh.bounds[0], mesh.bounds[2], mesh.bounds[4]]
b = [mesh.bounds[1], mesh.bounds[3], mesh.bounds[5]]

mesh.plot_over_line(a, b, resolution=100, fname=""kitchen.png"")
```
![kitchen](https://user-images.githubusercontent.com/7513610/113503197-3e0cd600-956b-11eb-8496-3e0661d457c4.png)
",1,4,[]
151,608378448,1245,92974124,2021-04-03 12:22:54,2021-04-03 15:48:59,closed,✨ Add document of CircularArcFromNormal,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Add document of CircularArcFromNormal

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- Relate to #1218 .

",1,1,[]
152,608177616,1243,92974124,2021-04-02 18:37:52,2021-04-03 00:36:06,closed,Move Anaconda CI to github actions,"This PR moves the anaconda build step to GitHub actions and cleans up the CI.

The CI seems a bit more stable on GitHub Actions.
",1,28,[]
153,606417049,1242,92974124,2021-03-31 21:50:23,2021-04-02 23:05:09,closed,Renderers Class,"### Clean Up Plotter

We have a ton of code in our Plotting module and this PR removes Renderer specific code out of the ``Plotter`` class by creating a new ``Renderers`` class.

``plotting.py`` is still around 4100 LOC, but I hope starts to clean things up by moving some logic and methods that we don't need exposed at the `Plotter` level out to a less accessible level (e.g. ``loc_to__index``, ``loc_to_group``, etc.)

",1,8,[]
154,604071707,1240,92974124,2021-03-30 16:46:52,2021-03-30 21:26:43,closed,Small fix: Do not create a directory if PYVISTA_USERDATA_PATH is defined,"### Overview

When importing `pyvista` with the environment variable `PYVISTA_USERDATA_PATH` defined, it still creates a `pyvista` folder in the user's home directory


### Details

- Switched the ordering of how `USER_DATA_PATH` is defined: we first check the environment variable and if that is not defined, then create the `pyvista` folder in the user's home directory, if it doesn't exist.

",1,1,[]
155,602134888,1239,92974124,2021-03-27 20:18:02,2021-04-01 00:02:27,closed,Add Jupyter Backends,"tl;dr
Jupyter + `pyvista` = Awesome

- Interactive webpages with `sphinx-jupyter`
- Great plots without `xvfb` using `ipygany`
- Use `pyvista.Plotter` class rather than learning a new interface for each backend.
- Improve documentation for jupyter

#### Details

Propose that we support a variety of backends when plotting within a Jupyter notebook:

- Server-side rendering with PyVista streaming to the notebook through
  [ipyvtk-simple](https://github.com/Kitware/ipyvtk-simple)
- Client-side rendering with [ipygany](https://github.com/QuantStack/ipygany) using ``threejs``.
- Client-side rendering using [panel](https://github.com/holoviz/panel) using ``vtk.js``.
- Client-side rendering with [itkwidgets](https://github.com/InsightSoftwareConsortium/itkwidgets) using ``itk.js`` and ``vtk.js``.
- Static images.

https://user-images.githubusercontent.com/11981631/112939384-9ade3b80-90e8-11eb-82f2-ba7008ba5270.mp4

Sample Code:
```py
import pyvista as pv
from pyvista import examples

mesh = examples.download_bunny()
    
pl = pv.Plotter()
pl.add_mesh(mesh, color='lightgrey')
pl.background_color = 'white'
pl.camera_position = 'xy'
pl.show(jupyter_backend='ipygany')
```

#### Bonus
Move Mac OS unit testing into GitHub actions.  Reduces unit test times as we can run parallel tests spread out over Azure and GitHub Actions. Plus, Mac OS seems to have better support on GitHub actions (e.g. Python is easier to install).",4,35,[]
156,601986321,1238,92974124,2021-03-27 02:35:51,2021-04-19 23:38:29,closed,📝 Add Turn warnings into errors in Build documentation,"### Overview
Add Turn warnings into errors in Build documentation

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- This CI step will check that Sphinx documentation has no WARNING.

https://www.sphinx-doc.org/en/master/man/sphinx-build.html#cmdoption-sphinx-build-W
",3,22,[]
157,601883891,1237,92974124,2021-03-26 20:23:48,2021-03-31 13:01:03,closed,Add component plotting for add_mesh,"### Overview

Fixes #524 

This PR implements the ability to plot multicomponent vectors according to a single component rather than the magnitude.  This follows on previous attempts in #543 and #598.

### Details
This PR does not touch the logic of the scalar bar titling.  It is currently broken for this use case, which I propose is a separate issue from this PR.

The added example looks like this.

![image](https://user-images.githubusercontent.com/39341281/112686961-20de5600-8e4d-11eb-97e8-d1d5a708c237.png)

It would be great to use a more interesting dataset for the example, but I cannot find one to use.  The example in #598 used the carotid artery dataset, but it does not make a compelling or understandable image due to the fact that the surface of the thresholded domain has vectors with a value of [0, 0, 0].  Furthermore, the gradient components are nearly all identical to 0 as well.

I see a [backward facing step](https://github.com/pyvista/pyvista/blob/45fe8b1c38712776f9b628a60a8662d0716dd52b/pyvista/examples/downloads.py#L642) dataset, but it gives me an error when trying to load it.


### Preserving History from prior PRs
Due to many reverted commits and some issues I had with mistakenly commiting with an unintended email address. I was unable to easily preserve the history of the commits by banesullivan, which dealt primarily with scalar bar titling issues.  There was one commit dealing with the example, and it does survive in some form here.  It was substantially rewritten.  @banesullivan if you want to preserve your history on this PR, I will look into how to fix this.

### Tests

I removed the existing multicomponent array test, as to my eyes, it did not actually have a multi-component scalar, it was a regular scalar-valued scalar on the points of the dataset.  Based on the docstring not matching, I suspect that this test may have been written for a different purpose, but I cannot tell what for. It seems to make a basic plot.

The added test includes an image regression test very similar to the example image. Is the convention to upload the image version that I create locally, or does the CI somehow add it?


### Other

I added a few lines to the `.gitignore` to make my life a lot easier.  IMO these are standard types of folders to ignore.",8,12,[]
158,600725980,1236,92974124,2021-03-25 13:12:07,2021-03-25 17:14:23,closed,Improve Logo,"## Better Logo

This is one of those relatively minor things that ends up taking forever to do right.

Our logo doesn't include the ""Py"", which seems a bit confusing, and is partially why our logo isn't that promoted.  This PR adds the ""Py"", and makes it possible to generate it programmatically as a demo with:

```py

from pyvista import demos

demos.plot_logo()

```
#### New Logo
![pyvista_logo](https://user-images.githubusercontent.com/11981631/112478047-31051100-8d39-11eb-9eea-4f899426dab2.png)

#### Old Logo
![pyvista_logo_old](https://user-images.githubusercontent.com/11981631/112477897-0ca93480-8d39-11eb-81c6-79dec347d461.png)

@pyvista/developers, please let me know what you'd change to make the logo better.  I'm not a graphics designer, so multiple opinions would be nice here.",5,5,[]
159,599332403,1233,92974124,2021-03-24 02:57:34,2021-03-25 17:29:33,closed,Remove stitle,"### Overview

Issue #1231 pointed out that if you supply `stitle` and `scalar_bar_args`, you'll get:

```
TypeError: add_scalar_bar() got multiple values for argument 'title'
```

Issue arises from having two ways of setting the scalar bar title: Either using `'stitle` or using the `'title'` key within `scalar_bar_args`.  Since we have two ways of setting the scalar bar, someone else reporting this as an issue was an eventuality.

### Case for Removing `stitle`

The `stitle` kwarg is a holdover from many releases back, prior to adding in `scalar_bar_args`.  We should have removed it then, but I think we kept it for backwards compatibility.  Here's why we should remove it:

- The `stitle` kwarg isn't clear about what it does.  It's implicit, or at worse, obscure.
- `scalar_bar_args` provides an explicit interface for setting the scalar bar.  While this is duplicated with ``add_scalar_bar``, I think it's ok to leave it in here at this time.
- Removing it cleans up a ton of code as we had to handle either approach.
",6,8,[]
160,592640940,1229,92974124,2021-03-14 23:28:58,2021-04-04 15:24:51,closed,"Allow for an extension to be specified in pyvista.read(), rework reading","### Overview

Resolves #1227, enabling user to specify a specific reader via `pyvista.read(my_file, force_ext='.vts')`. Reworks the reader logic a bit to do so. This is entirely open for discussion.

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details
The mapping for file extension to reader type was partially duplicated in `pyvista.read()` and in the individual data structure class definitions (using `_READERS` dict). In addition, `DataObject._load_file()` was basically doing the same thing as `_standard_reader_routine()`.

In this PR, `_READERS` is removed entirely. `DataObject._load_file()` delegates to `pyvista.read()`, and all determination of the appropriate file type for a given extension is handled by that method.

One side effect is that the file extension for any particular data object cannot be validated directly. In the current version of PyVista, the following would throw an error by noting that `.vtm` is not an appropriate extension for UnstructuredGrid.
```python
pv.UnstructuredGrid('my.vtm')
```
On this branch, a data object has no awareness of its ""appropriate"" file extensions, and will instead load `my.vtm` using `pyvista.read()`, note that the data output is incorrect (MultiBlock instead of UnstructuredGrid), and then raise ValueError.

This PR also adds an error observer into the reader class used by `standard_reader_routine()`. If the VTK reader throws a VTK error, then a Python warning is raised. ~~This is more strict than previous behavior, which would permit read errors and likely return empty datasets.~~
",14,23,[]
161,592392414,1228,92974124,2021-03-13 16:56:47,2021-03-14 02:35:23,closed,improve performance of is_all_triangles,"### Improve performance of ``is_all_triangles``.

Our ``is_all_triangles`` checks the ``faces`` array to determine if each face in ``PolyData`` is indeed a triangle.  However, when we check this, we rebuild the ``faces`` array each time, which in ``vtk>=9.0`` is rebuit within each time ``GetPolys`` is called.

To improve performance, we simply cache `faces` and then verify the shape and content:

### Test code:

```py
import pyvista as pv
from pyvista import examples
mesh = examples.download_nefertiti()
```

#### This branch

```py
>>> mesh.is_all_triangles()
# 18.5 ms ± 555 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
```

#### Master

```py
>>> mesh.is_all_triangles()
# 46.6 ms ± 103 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)
```
",2,2,[]
162,587451679,1226,92974124,2021-03-09 05:17:08,2021-03-09 17:48:00,closed,Fix 3dgallery.gks.com Examples,"## Remote Gallery is Down

http://3dgallery.gks.com is down, probably for good since the domain is for sale.  That's bad because a bunch of our examples require those files.  We're going to have a tough time tracking down those files, and if any of you happen to have downloaded some of those examples, please upload them here.

Check your ``pyvista.EXAMPLES_PATH`` for the following files:
- [x] 'carburator.ply'
- [x] 'woman.stl'
- [x] 'lobster.ply'
- [x] 'man_face.stl'
- [x] 'urn.stl'
- [x] 'pepper.ply'
- [x] 'pepper.obj'
- [x] 'tigerfighter.obj'
- [x] 'turbine_blade.stl'

This PR should be merged before releasing pyvista==0.29.0 as 9 of our examples are otherwise broken.

@banesullivan, I'm hoping that you have a bunch of these since you prototyped many of the downloads.
",5,2,[]
163,587319447,1225,92974124,2021-03-09 02:43:08,2021-03-09 15:16:23,closed,Flask Example,This Flask example demonstrates how to create a basic webpage while using `pyvista` as a simple backend to generate rendered images.,2,3,[]
164,586360218,1224,92974124,2021-03-08 00:22:38,2021-03-09 19:52:12,closed,Release 0.29,"### Release 0.29

We keep adding features and it's time for another minor release, with about 50 PRs merged since the 0.28.  Thanks again to all who contributed!

The idea behind these (sorta) monthly releases is to balance keeping a stable API and PyPi package with adding new features and bug-fixes.  We're likely to break something with each release, but since we're following [Trunk Based Development](https://trunkbaseddevelopment.com/), we can always apply a hotfix to that release branch without having to create a complete new release including all the features added to master.

Having a 4-6 week cadence to these releases keeps things fresh without introuducing signifiant instability in our ""stable"" packages.  Let me know on slack if the release tempo nees to be sped up or slowed down.

---


### Release Candidate Testing
@pyvista/developers and any willing testers, the latest release candidate package can be downloaded from pypi with:

```
pip install pyvista==0.29.0rc1
```

See:

https://pypi.org/project/pyvista/0.29.0rc1/


### Proposed Release Notes:

Please propose changes if anything here needs to be updated:

---

# Release 0.29: Under the hood changes for VTK9

This minor release of ``pyvista==0.29.0`` includes a variety of changes and new features.  The most major is improving our load-time by only loading in the VTK libraries used through lazy loading or selective imports using `vtkmodules``.  It was quite an overhaul and should improve load time, reduce memory usage, and potentially the size of the frozen package.

Other new features and bug-fixes include:


#### New Features
- add subdivision option to extract_surface (#1174)
- Add a silhouette parameter to add_mesh (#1211)
- add new colors (#1173)
- Add pickle support to DataObject (#1143)
- Add where_is in BasePlotter (#1175)
- Create an explicit structured grid (#1133)

#### Documentation
- Fix and update some sphinx docs (#1149)
- :memo: Add new function to geometric.rst (#1170)
- Update what-is-a-mesh.rst (#1176)
- Fix docstring in add_point_labels (#1188)

#### API Changes
- Improve PolyData Import (#1213)
- Use vtkTransformFilter in DataSet.transform() (#1166)
- Improve Exodus Reader (#1191)
- Add bounds in reset_camera (#1161)
- Add option to hide plane widget vector (#1150)
- add origin kwarg to plotter.add_legend (#1153)
- Expose start_xvfb (#1151)
- Add render=True in add_point_labels (#1152)
- add transforms3d (#1142)

#### Bug Fixes
- Fix the ""reset camera"" effect when parallel projection is enabled/disabled (#1221)
- Wrap pyvista_ndarray (#1222)
- Fix vtk not defined (#1217)
- plot_over_line should fail if scalar name does not exist (#1214)
- Fix labels (#1201)
- remove faulthandler (#1187)
- Fix log scale in scalar bar (#1183)
- Fix bugs in enable_cell_picking (#1158)
- fix add_actor (#1182)
- Fix Binary Writer (#1148)
- Reimplement Light.copy to get around VTK8.1 bug (#1137)
- Update enable_cell_picking (#1157)
- Update the active scalar bar when cmap is changed (#1169)
- Fix scalar bar moving upward (#1171)

#### Miscellaneous/Testing
- Minor fix of plot_over_line's test #525 (#1216)
- common --> dataset (#1209)
- :art: Minor fix of format of the code. (#1199)
- Fix doctest failure in BasePlotter.where_is (#1192)
- Use vtkmodules (#1163)
- Move Common, DataObject to dataset.py, dataobject.py (#1160)
- Partially add type hints to /core/ (#1145)
- improve import speed (#1156)

#### Contributors (alphabetical)

- @adeak
- @akaszynski
- @banesullivan
- @d-chambers
- @GuillaumeFavelier
- @JevinJ
- @Keou0007
- @RichardScottOZ
- @rodrigomologni
- @tkoyama010
- @whophil
- @yienyien
",5,3,[]
165,586188157,1223,92974124,2021-03-07 05:08:54,2021-03-07 21:48:14,closed,support subtype when in transform,"A closed source project subclasses `pyvista.PolyData`, and I noticed that `transform` now produces the following error:

```
        if inplace:
            if not isinstance(res, type(dataset)):
>               raise ValueError('Unable to perform in-place transformation. '
                                 f'Input was `{dataset.GetClassName()}` '
                                 f'but output is `{res.GetClassName()}`.')
E               ValueError: Unable to perform in-place transformation. Input was `vtkPolyData` but output is `vtkPolyData`.
```

Turns out that the issue is because we're testing against the type of `dataset` instead of the type of `res`.  Or, in other words, `isinstance` supports inheritance, but only in one direction (it seems).  For example:

```py
>>> isinstance(<class>, <subclass>)
False

>>> isinstance(<subclass>, <class>)
True
```

Simple fix for this is to simply reverse the order in our code.
",1,2,[]
166,586146422,1222,92974124,2021-03-06 22:21:36,2021-03-07 03:30:03,closed,Wrap pyvista_ndarray,"Resolves #1210 by properly wrapping a `pyvista_ndarray`.  The wrapping method needs some more work, but this is sufficient for this release.  The major issue was that we first tested if our input `dataset` had a vtk property, and our `pyvista_ndarray` is basically both (a numpy array that's also a wrapping of a VTK object).  I think it makes sense to treat it identical to a `numpy` array.

Inputs welcome, but this fixes a common problem:
```py
import pyvista
pyvista.plot(pyvista.Sphere().points)
```

Also fixes semi-flaky `hypothesis` test where VTK returns INF and we return NAN.",1,3,[]
167,586101962,1221,92974124,2021-03-06 17:18:05,2021-03-07 01:58:50,closed,"Fix the ""reset camera"" effect when parallel projection is enabled/disabled","### Overview

This PR resolves the 'reset camera' effect produced by the VTK when parallel projection is enabled/disabled.

### Details

| Before | After |
| --- | --- |
| ![before](https://user-images.githubusercontent.com/1608652/110214618-2e26a700-7e84-11eb-8f13-95ab3bc6c02c.gif) | ![after](https://user-images.githubusercontent.com/1608652/110214622-32eb5b00-7e84-11eb-9821-306670848a4d.gif) |

### Acknowledgments

I thank @dgobbi for helping with equation:
https://discourse.vtk.org/t/enable-parallel-projection-without-resetting-the-camera/5289/8
",7,6,[]
168,585971823,1219,92974124,2021-03-06 01:32:15,2021-03-06 02:35:10,closed,Minor fix of docstring,"### Overview

Remove doctest:+SKIP
<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",1,1,[]
169,585965124,1218,92974124,2021-03-06 00:58:49,2021-04-02 01:12:45,closed,✨ Add plot_over_circular_arc,"### Overview

Adding method `plot_over_circular_arc` .

#### Example
Plot the height of a dataset over a circular arc through that dataset
```python
import pyvista as pv
from pyvista import examples

###############################################################################
# Volumetric Mesh
# +++++++++++++++
#
# Add the height scalars to a uniform 3D mesh
mesh = examples.load_uniform()
mesh['height'] = mesh.points[:, 2]

# Make two points at the bounds of the mesh and one at the center to
# construct a circular arc.
a = [mesh.bounds[0], mesh.bounds[2], mesh.bounds[5]]
b = [mesh.bounds[1], mesh.bounds[2], mesh.bounds[4]]
center = [mesh.bounds[0], mesh.bounds[2], mesh.bounds[4]]

# Preview how this circular arc intersects this mesh
arc = pv.CircularArc(a, b, center)

p = pv.Plotter()
p.add_mesh(mesh, style=""wireframe"", color=""w"")
p.add_mesh(arc, color=""b"")
p.add_point_labels(
    [a, b], [""A"", ""B""], font_size=48, point_color=""red"", text_color=""red""
)
p.show()
```
![sphx_glr_plot-over-circular-arc_001](https://user-images.githubusercontent.com/7513610/110189341-1d653980-7e62-11eb-92e9-44b8072f40b0.png)
Run the filter and produce a line plot
```python
###############################################################################
# Run the filter and produce a line plot
mesh.plot_over_circular_arc(a, b, center, resolution=100, scalars='height')
```
![sphx_glr_plot-over-circular-arc_002](https://user-images.githubusercontent.com/7513610/110189414-58676d00-7e62-11eb-9ffb-d1ec51bb91ef.png)

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",10,21,[]
170,585790857,1217,92974124,2021-03-05 18:13:58,2021-03-06 19:46:05,closed,Fix vtk not defined,"This RP fix a simple bug: `""NameError: name 'vtk' is not defined""`.",1,1,[]
171,585504812,1216,92974124,2021-03-05 10:48:08,2021-03-06 03:02:49,closed,Minor fix of plot_over_line's test #525,"### Overview

sampled_line should be checked.
<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
#525

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",2,1,[]
172,583427485,1214,92974124,2021-03-03 00:02:42,2021-03-03 14:07:32,closed,🩹 plot_over_line should fail if scalar name does not exist,"### Overview
When I select a invalid array name in `plot_over_line` , pyvista occures the following error.

```
line 2144, in plot_over_line
    if values.ndim > 1:
AttributeError: 'NoneType' object has no attribute 'ndim'
```

It is better to raise KeyError in `get_array`.

````
KeyError: 'Data array (invalid_array_name) not present in this dataset.'
````

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",2,2,[]
173,583415653,1213,92974124,2021-03-02 23:31:38,2021-03-06 03:59:20,closed,Improve PolyData Import,"### Cleanup `PolyData.__init__`
There are a variety of issues that could be addressed via a refactor and better documentation of our ``pyvista.PolyData`` class.  Additionally, there's a significant performance bottleneck when creating meshes without specifying the number of faces.  For example:

```py
>>> import numpy as np
>>> import pyvista as pv
>>> n = 1000000
>>> points = np.random.random((n, 3))
>>> faces = np.empty((n, 4), dtype=np.int64)
>>> faces[:, 0] = 3
>>> faces[:, 1:] = np.random.randint(n, size=(n, 3))
>>> faces = faces.ravel()
>>> timeit pv.PolyData(points, faces))
397 ms ± 2.23 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
```

Of course, this can be addressed by not using ``faces.ravel``, but if your array is already flat and cannot be reshaped, but you know the number of faces in the array, we need to implement an option for that:

```
>>> timeit pv.PolyData(points, faces, n_faces=n)
7.16 ms ± 73 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
```

Bottleneck can be traced to:
https://github.com/pyvista/pyvista/blob/4eeb7992df03937b3f5c478f78ed072ad86b3d1c/pyvista/utilities/cells.py#L55-L66

There's no way to get around this except for using something like ``Cython``.

---

This PR also provides the ability to create a lines PolyData directly on init with:

```py
>>> lines = np.hstack([[2, 0, 1], [2, 1, 2]])
>>> mesh = pyvista.PolyData(vertices, lines=lines)
```

This seems a bit cleaner than our existing:
```py
>>> lines = np.hstack([[2, 0, 1], [2, 1, 2]])
>>> mesh = pyvista.PolyData(vertices)
>>> mesh.lines = lines
```",19,18,[]
174,582228089,1211,92974124,2021-03-01 17:02:52,2021-03-03 18:28:52,closed,ENH: Add a silhouette parameter to add_mesh,"### Overview

![image](https://user-images.githubusercontent.com/18143289/109530579-28614800-7ab7-11eb-966f-bdfba92bc10f.png)

https://user-images.githubusercontent.com/18143289/109531048-b3dad900-7ab7-11eb-8968-032802918312.mp4

<details>
<summary>Code snippet</summary>

```py
import pyvista
from pyvista import examples

line_width = 4

p = pyvista.Plotter()
p.set_background(""black"", ""blue"")

dragon = examples.download_dragon()
p.add_mesh(dragon, color=""green"", specular=1, smooth_shading=True)
_, prop = p.add_actor(dragon.silhouette(p.camera))
prop.SetLineWidth(line_width)

cylinder = pyvista.Cylinder(center=(0, 0.04, 0), direction=(0, 1, 0),
                            radius=0.15, height=0.03).triangulate()
p.add_mesh(cylinder, color=""tan"", smooth_shading=True)
_, prop = p.add_actor(cylinder.silhouette(p.camera, decimate=None,
                      feature_angle=True))
prop.SetLineWidth(line_width)

p.camera_position = [
    (-0.2936731887752889, 0.2389060430625446, 0.35138839367034236),
    (-0.005878899246454239, 0.12495124898850918, -0.004603400826454163),
    (0.34348225747312017, 0.8567703221182346, -0.38466160965007384)
]
p.show()
```

</details>

### Details

I'm not sure how to add this so my first idea is to add a `silhouette` filter in the `PolyDataFilters` list that returns a ""mapper"".

It's still work in progress:
- [x] docstring
- [x] testing/coverage

Any feedback is of course welcome!",19,23,['feature-request']
175,581378475,1209,92974124,2021-02-27 18:10:00,2021-02-28 09:41:53,closed,Fix core/index,"### Fix Core/index

During the refactor of common --> dataset, core/index.rst wasn't changed.  There's an old reference to `common` and no reference to `dataset`.  This PR corrects that.",1,1,[]
176,581314065,1207,92974124,2021-02-27 11:27:51,2021-02-27 16:25:13,closed,🐛 Resolve #1206,"### Overview
Resolve #1206

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",2,1,[]
177,579325682,1201,92974124,2021-02-24 14:03:20,2021-02-24 16:30:08,closed,Fix labels in add_point_labels,"### Overview

This PR fix a visual problem when `labels` in `add_point_labels` is a vector array.

| Before | After |
| - | - |
| ![image](https://user-images.githubusercontent.com/1608652/109007936-76c3b080-768b-11eb-8318-cb944211514f.png) | ![image](https://user-images.githubusercontent.com/1608652/109007953-7cb99180-768b-11eb-8042-82a05897dc4b.png) |

### Details

I only removed `.astype(str)` on line 3282:

```python
3277        if isinstance(points, np.ndarray):
3278            vtkpoints = pyvista.PolyData(points) # Cast to poly data
3279        elif is_pyvista_dataset(points):
3280            vtkpoints = pyvista.PolyData(points.points)
3281            if isinstance(labels, str):
3282                labels = points.point_arrays[labels].astype(str)
```

The label items are already converted to string on line 3295:

```python
3292        vtklabels = _vtk.vtkStringArray()
3293        vtklabels.SetName('labels')
3294        for item in labels:
3295            vtklabels.InsertNextValue(str(item))
3296        vtkpoints.GetPointData().AddArray(vtklabels)
```
",3,1,[]
178,578207735,1199,92974124,2021-02-23 07:01:28,2021-02-23 15:32:52,closed,🎨 Minor fix of format of the code.,"### Overview
Minor fix of format of the code.

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None
",1,1,[]
179,578153737,1198,92974124,2021-02-23 05:18:00,2021-03-21 23:52:06,closed,🐛 Fix unremovable interactive scalar bar,"### Overview
Resolve #1055

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details
```python
import pyvista
pyvista.set_plot_theme(""document"")

plotter = pyvista.Plotter()
sphere = pyvista.Sphere()
plotter.add_mesh(sphere)
plotter.add_scalar_bar(interactive=True)
# scalar bar should also removed when interactive is True.
plotter.remove_scalar_bar()
plotter.show(screenshot=""test.png"")
```
|  master | PR |
|--------|--------|
|![before](https://user-images.githubusercontent.com/7513610/108804873-d82f4500-75e1-11eb-983c-0e50df1ba956.png)|![after](https://user-images.githubusercontent.com/7513610/108804883-dfeee980-75e1-11eb-94fc-bd330ce8f28f.png)|
",10,8,[]
180,577345380,1196,92974124,2021-02-22 06:01:33,2021-02-23 15:34:44,closed,Add Flask Example,"This PR adds a basic flask example to resolve #1195.

It's nothing fancy, and we could even consider one day embedding a VTKjs plot, but at the moment this will work to show static plots.

![flask_example](https://user-images.githubusercontent.com/11981631/108668621-b1b1c280-7498-11eb-989f-c4f1ec70d535.png)

",1,3,[]
181,576838700,1194,92974124,2021-02-20 01:53:58,2021-02-21 01:01:24,closed,Resolve #1052,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Resolve #1052

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

As far as I see, all we have to fix is only `DataObject` (https://github.com/pyvista/pyvista/issues/1052#issuecomment-775566180).
",2,3,[]
182,576723727,1192,92974124,2021-02-19 20:55:07,2021-02-19 22:45:17,closed,Fix doctest failure in BasePlotter.where_is,"Doctests for the new `BasePlotter.where_is()` method were failing, as per https://github.com/pyvista/pyvista/issues/1181.

The issue seems to be that the doctest SKIPs for the `add_mesh()` calls are skipped entirely (i.e. not even executed, rather than merely ignoring their output). Removing the skips and discarding their return value seems to fix the doctest.

Resolves https://github.com/pyvista/pyvista/issues/1181
",2,1,[]
183,576644299,1191,92974124,2021-02-19 18:38:23,2021-02-21 15:24:21,closed,Improve Exodus Reader,"This PR resolves support issue https://github.com/pyvista/pyvista-support/issues/165 by adding in the option to read nodal and element data when loading an exodus file.  It also improves the docstring.
",1,2,[]
184,575404519,1190,92974124,2021-02-18 05:23:37,2021-02-18 05:57:44,closed,📝 Fix URL of discretize,"
### Overview

Missing of #1189

### Details

None
",1,1,[]
185,575350298,1189,92974124,2021-02-18 02:44:27,2021-02-18 05:19:42,closed,📝 Fix URL of discretize,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
URL of discretize in document is broken. I updated the URL of it.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

| branch | url |
| ------------- | ------------- |
| master  | http://discretize.simpeg.xyz/en/master/api/generated/discretize.mixins.vtkModule.html  |
| PR  | https://discretize.simpeg.xyz/en/master/api/generated/discretize.mixins.vtk_mod.InterfaceVTK.html  |
",2,1,[]
186,575275488,1188,92974124,2021-02-17 23:23:11,2021-02-17 23:42:16,closed,Fix docstring in add_point_labels,"### Overview

This PR fix a simple problem with `docstring` in `add_point_labels`:

![image](https://user-images.githubusercontent.com/1608652/108280608-37620500-715d-11eb-85ea-ac7fd97c5473.png)

",1,1,[]
187,575068385,1187,92974124,2021-02-17 17:00:22,2021-02-17 18:48:07,closed,Remove faulthandler,"This PR removes loading the `faulthandler` to avoid side effects and warnings.  As it's primarily a developer tool, we should simply import and enable it when needed with:
```py
import faulthandler
faulthandler.enable()
```

Resolves #1186 ",1,1,[]
188,574541296,1184,92974124,2021-02-16 23:37:56,2021-02-17 01:33:07,closed,"Revert ""Add only_one in add_scalar_bar""","I detected a problem with the PR #1167 when `only_one=False` and `add_mesh` is called multiple times to update a same mesh. Only one of the scalar bars with same name is removed, producing the undesired effect below. Reverse the merge, please. I'm sorry for my mistake.

![image](https://user-images.githubusercontent.com/1608652/108135362-c2c49300-7096-11eb-81a2-0faf76f59a10.png)
",3,1,[]
189,574206308,1183,92974124,2021-02-16 13:44:23,2021-02-16 18:49:39,closed,Fix log scale in scalar bar,"### Overview

This PR solves problem with scalar bar when `log_scale=True`. This problem origins from VTK, when the scalars have values < 1.

### Details

```python
plotter.add_mesh(grid, show_edges=True, scalars='BLOCK_I')
```
![image](https://user-images.githubusercontent.com/1608652/108070676-8ca9f380-7043-11eb-9f81-1ddbf45570de.png)

```python
plotter.add_mesh(grid, show_edges=True, scalars='BLOCK_I', log_scale=True)
```
![image](https://user-images.githubusercontent.com/1608652/108070503-5bc9be80-7043-11eb-8960-cb8262293c12.png)

```python
plotter.add_mesh(grid, show_edges=True, scalars='BLOCK_I', log_scale=True)
```
![image](https://user-images.githubusercontent.com/1608652/108070512-5ec4af00-7043-11eb-8236-e8a0d420953b.png)


",6,4,[]
190,573880023,1182,92974124,2021-02-16 02:09:43,2021-02-16 15:50:15,closed,"Fix ""blinking"" effect in add_actor","### Overview

This PR fix the ""blinking"" effect caused by `renderer.add_actor` when the dataset in large.

### Details

#### Before:

![bug](https://user-images.githubusercontent.com/1608652/108009398-5fc4f480-6fe1-11eb-8075-90c552b03879.gif)

#### After:

![bugfix](https://user-images.githubusercontent.com/1608652/108009405-62bfe500-6fe1-11eb-922c-03719e62d6a4.gif)

",1,1,[]
191,573099697,1178,92974124,2021-02-14 14:37:15,,open,Create enable_mesh_picking,"### Overview

This RP introduces the `enable_mesh_picking` to return a mesh picked when the ""P"" key is pressioned.

### Details
",1,1,[]
192,573084405,1177,92974124,2021-02-14 12:32:33,2021-02-15 03:52:52,closed,🚩 Resolve #1047,"### Overview

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->
We can plot following (resolve #1047):
```python
import pyvista as pv

p = pv.Plotter()


def create_mesh(value):
    res = int(value)
    sphere = pv.Sphere(phi_resolution=res, theta_resolution=res)
    p.add_mesh(sphere, name=""sphere"", show_edges=True)
    return


slider = p.add_slider_widget(
    create_mesh,
    [5, 100],
    title=""Resolution"",
    title_opacity=0.5,
    title_color=""red"",
    fmt=""%0.9f"",
    title_height=0.08,
)

p.show()
```
![slider_widget](https://user-images.githubusercontent.com/7513610/107876862-0f2f9780-6f0c-11eb-8fd2-1d4eb53af6ff.png)

### Details

- None

",2,5,[]
193,573053586,1176,92974124,2021-02-14 07:48:54,2021-02-14 16:42:48,closed,Update what-is-a-mesh.rst,"Minor edits

### Overview

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- < feature1 or bug1 description >
- < feature2 or bug2 description >

",1,8,[]
194,573025300,1175,92974124,2021-02-14 02:12:11,2021-02-15 03:28:56,closed,Add where_is in BasePlotter,"### Overview

This PR introduces the `where_is` method in the `BasePlotter` class. This method returns the subplot coordinates that have a given actor. This is useful, for example, when the user needs to update a mesh in subplots.

### Details

```python
>>> import pyvista as pv
>>> plotter = pv.Plotter(shape=(2, 2))
>>> plotter.subplot(0, 0)
>>> plotter.add_mesh(pv.Box(), name='box')
>>> plotter.subplot(0, 1)
>>> plotter.add_mesh(pv.Sphere(), name='sphere')
>>> plotter.subplot(1, 0)
>>> plotter.add_mesh(pv.Box(), name='box')
>>> plotter.subplot(1, 1)
>>> plotter.add_mesh(pv.Cone(), name='cone')
>>> plotter.where_is('box')
[(0, 0), (1, 0)]
```


",7,6,[]
195,573006881,1174,92974124,2021-02-13 23:03:23,2021-03-06 22:52:09,closed,add subdivision option to extract_surface,"### Add subdivision

This PR adds in the missing ``SetNonlinearSubdivisionLevel`` option to ``extract_surface``.  It also adds in an additional example for the `extract_surface` filter.

```py
import pyvista as pv
import numpy as np

lin_pts = np.array([[-1, -1, -1],  # point 0
                    [ 1, -1, -1],  # point 1
                    [ 1,  1, -1],  # point 2
                    [-1,  1, -1],  # point 3
                    [-1, -1,  1],  # point 4
                    [ 1, -1,  1],  # point 5
                    [ 1,  1,  1],  # point 6
                    [-1,  1,  1]], np.double)  # point 7

# these are the ""midside"" points of a quad cell
quad_pts = np.array([
    (lin_pts[1] + lin_pts[0])/2.0,
    (lin_pts[1] + lin_pts[2])/2.0,
    (lin_pts[2] + lin_pts[3])/2.0,
    (lin_pts[3] + lin_pts[0])/2.0,
    (lin_pts[4] + lin_pts[5])/2.0,
    (lin_pts[5] + lin_pts[6])/2.0,
    (lin_pts[6] + lin_pts[7])/2.0,
    (lin_pts[7] + lin_pts[4])/2.0,
    (lin_pts[0] + lin_pts[4])/2.0,
    (lin_pts[1] + lin_pts[5])/2.0,
    (lin_pts[2] + lin_pts[6])/2.0,
    (lin_pts[3] + lin_pts[7])/2.0], np.double)

# introduce a minor variation to the location of the mid-side points
quad_pts += np.random.random(quad_pts.shape)*0.3
pts = np.vstack((lin_pts, quad_pts))

# create the grid

# If you are using vtk>=9, you do not need the offset array
offset = np.array([0])
cells = np.asarray(np.hstack((20, np.arange(20))), dtype=np.int64)
celltypes = np.array([VTK_QUADRATIC_HEXAHEDRON])
grid = pv.UnstructuredGrid(offset, cells, celltypes, pts)

surf_subdivided = grid.extract_surface(subdivision=5)
surf_subdivided.plot(show_scalar_bar=False)
```

![image](https://user-images.githubusercontent.com/11981631/109395115-f2219e00-78e7-11eb-94cf-8d355f2fc204.png)
",5,8,['enhancement']
196,573001566,1173,92974124,2021-02-13 22:11:46,2021-02-13 23:05:13,closed,Add the Tableau Palette colors,"### Overview

This PR adds the **Tableau Palette** colors avaliable in the [matplotlib](https://matplotlib.org/stable/gallery/color/named_colors.html) package.

![image](https://user-images.githubusercontent.com/1608652/107862910-f1d8cb80-6e2e-11eb-9774-f0396364384a.png)

",2,1,[]
197,572956556,1171,92974124,2021-02-13 16:10:41,2021-02-13 17:52:39,closed,Fix scalar bar moving upward,"### Overview

This PR fixes the bug #1054

### Details

![fixbug](https://user-images.githubusercontent.com/1608652/107854726-aa394c00-6dfc-11eb-95b4-f5f539452111.gif)
",1,1,[]
198,572884868,1170,92974124,2021-02-13 05:03:02,2021-02-15 04:53:09,closed,📝 Add new function to geometric.rst,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Add new functions to geometric.rst from geometric.py

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

None
",1,1,[]
199,572836486,1169,92974124,2021-02-12 23:43:57,2021-02-13 02:45:46,closed,Update the active scalar bar when cmap is changed,"### Overview

This PR force the updating the active scalar bar when `cmap` in `add_mesh` is changed.

### Details

#### Before:

![antes](https://user-images.githubusercontent.com/1608652/107833535-55e98a00-6d72-11eb-996f-f8f9a1a71c28.gif)

#### Now:

![depois](https://user-images.githubusercontent.com/1608652/107833538-584be400-6d72-11eb-87dd-cdba39acd39c.gif)

",1,1,[]
200,572619884,1167,92974124,2021-02-12 16:10:38,2021-02-13 18:04:18,closed,Add only_one in add_scalar_bar,"### Overview

Scalar bars with same name are removed from the second renderer upwards. There are situations where the user may not want this to happen. This PR add the `only_one` parameter in `add_scalar_bar` to let the user choose.

### Details

```python
 1   import pyvista as pv
 2
 3   coarse = pv.UnstructuredGrid('coarse.vtu')
 4   fine = pv.UnstructuredGrid('fine.vtu')
 5
 6   plotter = pv.Plotter(shape=(1, 2))
 7   plotter.subplot(0, 0)
 8   plotter.add_axes()
 9   plotter.add_mesh(coarse, show_edges=True)
10   plotter.subplot(0, 1)
11   plotter.add_axes()
12   plotter.add_mesh(fine, show_edges=True)
13   plotter.show()
```

![image](https://user-images.githubusercontent.com/1608652/107771941-476f8400-6d1a-11eb-86d7-c70669c18a46.png)

```python
12   plotter.add_mesh(fine, show_edges=True, scalar_bar_args={'only_one': False})
13   plotter.show()
```

![image](https://user-images.githubusercontent.com/1608652/107772089-7c7bd680-6d1a-11eb-8a64-61a6ee9aafe1.png)
",1,1,[]
201,572604064,1166,92974124,2021-02-12 15:44:51,2021-03-01 00:47:25,closed,Use vtkTransformFilter in DataSet.transform(),"### Overview

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->

In trying to actually use some of the features added in #1127, I realized that the transformations in PyVista are for geometry only, and don't handle transformations of any vector/tensor arrays. This is true of `DataSet.rotate_x()`, `DataSet.rotate_y()`, `DataSet.rotate_z()`, and `DataSet.transform()`, all of which just transform points.

While we could transform vector fields manually, [`vtkTransformFilter`](https://vtk.org/doc/nightly/html/classvtkTransformFilter.html) also does. Is there a good reason not to use it?

This PR shows that might look like for `DataSet.transform()`. Some logic could be cleaned up a bit by creating a helper class to manage the various 4x4 `ndarray`/`vtkMatrix`/`vtkTransform` types that might be passed in. There's also work to do in implementing this across the other transform methods, but I wanted to get some of your thoughts before proceeding (@akaszynski ?).

",9,15,[]
202,572176327,1165,92974124,2021-02-11 23:16:49,2021-04-04 02:08:42,closed,Split filters.py,"### Overview

Preserves history.

Split filters.py into algorithm.py, compositefilters.py, polydatafilters.py, structuredgridfilters.py, uniformgridfilters.py, unstructuredgrid.py

Moves the above into /core/filters/

TODO: Docstring changes for the separated files.
",10,58,[]
203,571999748,1163,92974124,2021-02-11 17:49:21,2021-02-19 06:29:37,closed,Use vtkmodules,"### Use `vtkmodules`

This PR proposes that we use `vtkmodules` instead of importing everything from vtk.  I didn't want to break backwards compatibility with VTK 8.x and earlier, so I implemented this such that all the commonly used imports are in a new module named `_vtk.py`.  This accomplishes a few things:

- Deals with the annoying lint errors complaining about how `vtk` doesn't contain attribute x.
- Allows us to selectively load only the libraries that are needed within `pyvista`.  The vast majority (98%) are loaded on init since the load times aren't too bad, but a few are imported lazily (like the rarely used `vtkGL2PSExporter`).  We can always improve this down the line, but for now I think this is a good start.
- Improves load time and memory usage


### Load times
#### pyvista/master

```
time python -c ""import pyvista""

real	0m0.327s
user	0m0.564s
sys	0m0.410s
```

#### This branch:

```
time python -c ""import pyvista""

real	0m0.283s
user	0m0.542s
sys	0m0.385s
```

Load time variation is even better on Windows:

```py
timeit os.system('python -c ""import pyvista""')
```

#### master
```
595 ms ± 1.43 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
```

#### this branch

```
485 ms ± 1.72 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
```

---
### Memory Usage
Memory usage also shows some significant improvements:

```
valgrind python -c ""import pyvista""
```


#### master
```
 total heap usage: 47,253 allocs, 41,158 frees, 79,869,570 bytes allocated
```

#### this branch
```
total heap usage: 27,436 allocs, 23,009 frees, 50,234,867 bytes allocated
```
",7,39,[]
204,571837350,1161,92974124,2021-02-11 13:57:46,2021-02-16 15:57:56,closed,Add bounds in reset_camera,"### Overview

This PR updates `reset_camera` to set up the camera based on a specified bounding box (`bounds`).
",3,4,[]
205,571620025,1160,92974124,2021-02-11 07:17:08,2021-02-11 22:17:35,closed,"Move Common, DataObject to dataset.py, dataobject.py","### Overview

Preserves history.

Split Common, DataObject into their own files. dataset.py, dataobject.py.

Rename Common->DataSet

",4,9,[]
206,571522270,1158,92974124,2021-02-11 02:01:23,2021-02-16 18:48:29,closed,Fix bugs in enable_cell_picking,"### Overview

This PR fixes the followings problems in `enable_cell_picking`:

1. The interactive selection is shown in the renderer where the `mesh` is not present.
2. `OverflowError` occurs when the user first clicks on the second renderer.

### Details

Given the following code:

```python
self.plotter = QtInteractor(self, shape=(1, 2))
self.plotter.subplot(0, 0)
self.plotter.add_axes()
self.plotter.add_mesh(self.coarse, color='w', show_edges=True, lighting=False)
self.plotter.enable_cell_picking(self.coarse, callback=self.coarse_cell_picking, through=False, show_message=False)
self.plotter.subplot(0, 1)
self.plotter.add_axes()
self.plotter.show()
```

#### Bugfix 1

The `mesh` is in the left renderer, but the interactive selection is rendered in the right renderer.

![image](https://user-images.githubusercontent.com/1608652/107594058-c4520f00-6bef-11eb-9bcd-7be4c70a25cf.png)

The user must call `self.plotter.subplot(0, 0)` to overcome this problem.

![image](https://user-images.githubusercontent.com/1608652/107594577-029bfe00-6bf1-11eb-83ec-2e6ab2a706c5.png)

The commit `bbc49df` fix this problem. The interactive selection is rendered on the `mesh` regardless of the active renderer.

#### Bugfix 2

The following error occurs when the user first clicks on the right renderer:

```
Traceback (most recent call last):
  File ""c:\users\rodrigo mologni\github\pyvista\pyvista\plotting\picking.py"", line 149, in visible_pick_call_back
    selector.SetArea(x0,y0,x1,y1)
OverflowError: SetArea argument %Id: %V
```

Reason: `x0 = y0 = x1 = y1 = -1` (default pick position of `vtkRenderer`). The commit `64fdfc4` fix this problem.
",2,2,[]
207,571302731,1157,92974124,2021-02-10 18:15:36,2021-02-10 19:21:58,closed,Update enable_cell_picking,"### Overview

This PR updates `PickingHelper.enable_cell_picking` to:

1. set `picked_cells` as `None` (default value) if no cell is selected.
2. call `callback` even when no cell is selected.

### Details

1. `picked_cells` returns `None` before `enable_cell_picking` is called, and an empty `MultiBlock` after.
2. `callback` should be called even when no cell is selected to update the `callback`. An practical example:

This screenshot shown an software where the grid cells selected by an user in the left renderer are shown in the right renderer. The right renderer needs to be cleaned when no cells are selected. Otherwise, the last selected cell is always shown.

![image](https://user-images.githubusercontent.com/1608652/107550427-c98f6980-6baf-11eb-8f14-e1af02d94813.png)

",1,1,[]
208,571292524,1156,92974124,2021-02-10 17:58:08,2021-02-10 18:47:25,closed,improve import speed,"### Improve Import Speed

Locally, my import times for `pyvista` are quite long:
```
time python -c ""import pyvista""

real	0m1.747s
user	0m2.048s
sys	0m0.825s
```

There's a ton of profiling and debugging tools to fix this, namely `importtime`:
```py
importtime-output-wrapper pyvista --format waterfall
```
<details>
  <summary>importtime Summary</summary>
  
```
module name                                                          | import time (us)
-------------------------------------------------------------------------------
zipimport                                                              (91)
_frozen_importlib_external                                             (438)
encodings                                                              (455)
.codecs                                                                (366)
.._codecs                                                              (49)
.encodings.aliases                                                     (306)
encodings.utf_8                                                        (183)
_signal                                                                (109)
encodings.latin_1                                                      (258)
io                                                                     (295)
.abc                                                                   (202)
.._abc                                                                 (34)
_bootlocale                                                            (115)
._locale                                                               (63)
site                                                                   (10808)
.os                                                                    (439)
..stat                                                                 (202)
..._stat                                                               (48)
.._collections_abc                                                     (823)
..posixpath                                                            (192)
...genericpath                                                         (106)
._sitebuiltins                                                         (169)
.types                                                                 (304)
.importlib.util                                                        (277)
..importlib                                                            (156)
...warnings                                                            (182)
..importlib.abc                                                        (387)
...importlib.machinery                                                 (116)
..contextlib                                                           (570)
...collections                                                         (696)
....operator                                                           (577)
....._operator                                                         (64)
....keyword                                                            (148)
....heapq                                                              (170)
....._heapq                                                            (41)
....itertools                                                          (88)
....reprlib                                                            (163)
...._collections                                                       (84)
...functools                                                           (466)
...._functools                                                         (46)
.sitecustomize                                                         (98)
.usercustomize                                                         (332)
pyvista                                                                (966)
.appdirs                                                               (197)
.pyvista._version                                                      (133)
.pyvista.plotting                                                      (247)
..pyvista.plotting.colors                                              (196)
..pyvista.plotting.export_vtkjs                                        (229)
...errno                                                               (67)
...gzip                                                                (385)
....struct                                                             (126)
....._struct                                                           (62)
....time                                                               (77)
....zlib                                                               (58)
...._compression                                                       (183)
...hashlib                                                             (231)
...._hashlib                                                           (455)
...._blake2                                                            (45)
...._sha3                                                              (57)
...json                                                                (175)
....json.decoder                                                       (402)
.....re                                                                (504)
......enum                                                             (685)
......sre_compile                                                      (243)
......._sre                                                            (63)
.......sre_parse                                                       (338)
........sre_constants                                                  (253)
......copyreg                                                          (153)
.....json.scanner                                                      (450)
......_json                                                            (180)
....json.encoder                                                       (411)
...shutil                                                              (499)
....fnmatch                                                            (130)
....bz2                                                                (202)
.....threading                                                         (482)
......traceback                                                        (225)
.......linecache                                                       (127)
........tokenize                                                       (736)
.........token                                                         (146)
......_weakrefset                                                      (248)
....._bz2                                                              (212)
....lzma                                                               (422)
....._lzma                                                             (215)
....pwd                                                                (61)
....grp                                                                (48)
...zipfile                                                             (641)
....binascii                                                           (63)
...vtk                                                                 (3082)
....__future__                                                         (122)
....vtkmodules.vtkCommonCore                                           (6759)
....vtkmodules.vtkCommonMath                                           (489)
....vtkmodules.vtkCommonTransforms                                     (499)
....vtkmodules.vtkCommonDataModel                                      (6916)
....vtkmodules.vtkCommonExecutionModel                                 (1641)
....vtkmodules.vtkCommonMisc                                           (261)
....vtkmodules.vtkFiltersCore                                          (2972)
....vtkmodules.vtkRenderingCore                                        (6242)
....vtkmodules.vtkInteractionStyle                                     (4547)
....vtkmodules.vtkRenderingContext2D                                   (1130)
....vtkmodules.vtkFiltersGeneral                                       (1915)
....vtkmodules.vtkFiltersSources                                       (1073)
....vtkmodules.vtkInteractionWidgets                                   (8730)
....vtkmodules.vtkViewsCore                                            (1408)
....vtkmodules.vtkViewsInfovis                                         (4490)
....vtkmodules.vtkCommonColor                                          (261)
....vtkmodules.vtkViewsContext2D                                       (642)
....vtkmodules.vtkTestingRendering                                     (463)
....vtkmodules.vtkPythonContext2D                                      (361)
....vtkmodules.vtkImagingCore                                          (1035)
....vtkmodules.vtkImagingMath                                          (418)
....vtkmodules.vtkRenderingUI                                          (270)
....vtkmodules.vtkRenderingOpenGL2                                     (4234)
....vtkmodules.vtkRenderingVolume                                      (1070)
....vtkmodules.vtkRenderingVolumeOpenGL2                               (780)
....vtkmodules.vtkRenderingFreeType                                    (372)
....vtkmodules.vtkRenderingLabel                                       (582)
....vtkmodules.vtkRenderingLOD                                         (360)
....vtkmodules.vtkRenderingImage                                       (448)
....vtkmodules.vtkIOVeraOut                                            (1316)
....vtkmodules.vtkIOTecplotTable                                       (317)
....vtkmodules.vtkIOImage                                              (870)
....vtkmodules.vtkIOSegY                                               (368)
....vtkmodules.vtkIOXMLParser                                          (258)
....vtkmodules.vtkIOXML                                                (950)
....vtkmodules.vtkIOParallelXML                                        (599)
....vtkmodules.vtkIOCore                                               (507)
....vtkmodules.vtkIOPLY                                                (394)
....vtkmodules.vtkIOMovie                                              (270)
....vtkmodules.vtkIOOggTheora                                          (374)
....vtkmodules.vtkIONetCDF                                             (895)
....vtkmodules.vtkIOMotionFX                                           (1294)
....vtkmodules.vtkIOLegacy                                             (614)
....vtkmodules.vtkIOGeometry                                           (787)
....vtkmodules.vtkIOParallel                                           (1696)
....vtkmodules.vtkIOMINC                                               (814)
....vtkmodules.vtkIOLSDyna                                             (501)
....vtkmodules.vtkIOInfovis                                            (2252)
....vtkmodules.vtkIOImport                                             (639)
....vtkmodules.vtkIOVideo                                              (336)
....vtkmodules.vtkRenderingSceneGraph                                  (460)
....vtkmodules.vtkRenderingVtkJS                                       (478)
....vtkmodules.vtkIOExport                                             (1686)
....vtkmodules.vtkIOExportPDF                                          (935)
....vtkmodules.vtkRenderingGL2PSOpenGL2                                (571)
....vtkmodules.vtkIOExportGL2PS                                        (776)
....vtkmodules.vtkIOExodus                                             (1046)
....vtkmodules.vtkIOEnSight                                            (483)
....vtkmodules.vtkIOCityGML                                            (386)
....vtkmodules.vtkIOAsynchronous                                       (400)
....vtkmodules.vtkIOAMR                                                (820)
....vtkmodules.vtkInteractionImage                                     (714)
....vtkmodules.vtkImagingStencil                                       (495)
....vtkmodules.vtkImagingStatistics                                    (355)
....vtkmodules.vtkImagingGeneral                                       (741)
....vtkmodules.vtkImagingMorphological                                 (544)
....vtkmodules.vtkIOSQL                                                (800)
....vtkmodules.vtkImagingSources                                       (345)
....vtkmodules.vtkInfovisCore                                          (983)
....vtkmodules.vtkGeovisCore                                           (1039)
....vtkmodules.vtkInfovisLayout                                        (1206)
....vtkmodules.vtkRenderingAnnotation                                  (1451)
....vtkmodules.vtkImagingHybrid                                        (476)
....vtkmodules.vtkImagingColor                                         (288)
....vtkmodules.vtkFiltersTopology                                      (291)
....vtkmodules.vtkFiltersSelection                                     (373)
....vtkmodules.vtkFiltersSMP                                           (486)
....vtkmodules.vtkFiltersPython                                        (277)
....vtkmodules.vtkFiltersProgrammable                                  (324)
....vtkmodules.vtkFiltersModeling                                      (1072)
....vtkmodules.vtkFiltersPoints                                        (1097)
....vtkmodules.vtkFiltersVerdict                                       (569)
....vtkmodules.vtkFiltersStatistics                                    (502)
....vtkmodules.vtkFiltersImaging                                       (313)
....vtkmodules.vtkFiltersExtraction                                    (779)
....vtkmodules.vtkFiltersGeometry                                      (539)
....vtkmodules.vtkFiltersHybrid                                        (690)
....vtkmodules.vtkFiltersTexture                                       (341)
....vtkmodules.vtkFiltersParallel                                      (918)
....vtkmodules.vtkFiltersParallelImaging                               (685)
....vtkmodules.vtkFiltersHyperTree                                     (636)
....vtkmodules.vtkFiltersGeneric                                       (619)
....vtkmodules.vtkCommonComputationalGeometry                          (515)
....vtkmodules.vtkFiltersFlowPaths                                     (1284)
....vtkmodules.vtkFiltersAMR                                           (410)
....vtkmodules.vtkDomainsChemistry                                     (6668)
....vtkmodules.vtkCommonPython                                         (344)
....vtkmodules.vtkChartsCore                                           (1403)
....vtkmodules.vtkParallelCore                                         (525)
....vtkmodules.vtkImagingFourier                                       (298)
....vtkmodules.vtkCommonSystem                                         (307)
....vtkmodules.util.vtkConstants                                       (234)
.....vtkmodules.util                                                   (135)
....vtkmodules.util.misc                                               (137)
....vtkmodules.util.vtkVariant                                         (174)
..pyvista.plotting.helpers                                             (187)
...numpy                                                               (1750)
....numpy._globals                                                     (196)
....numpy.__config__                                                   (143)
....numpy.version                                                      (117)
....numpy._distributor_init                                            (78)
....numpy.core                                                         (980)
.....numpy.core.multiarray                                             (4966)
......numpy.core.overrides                                             (498)
.......textwrap                                                        (1170)
.......numpy.core._multiarray_umath                                    (4252)
........datetime                                                       (1280)
.........math                                                          (121)
........._datetime                                                     (169)
.......numpy.compat._inspect                                           (42)
........numpy.compat                                                   (307)
.........numpy.compat._inspect                                         (308)
.........numpy.compat.py3k                                             (301)
..........pathlib                                                      (1183)
...........ntpath                                                      (398)
............nt                                                         (803)
............nt                                                         (730)
............nt                                                         (721)
...........urllib.parse                                                (1683)
............urllib                                                     (211)
..........pickle5                                                      (340)
...........pickle5.pickle                                              (1608)
............_compat_pickle                                             (439)
............pickle5._pickle                                            (481)
............org.python.core                                            (34)
.............org.python                                                (33)
..............org                                                      (760)
.....numpy.core.umath                                                  (323)
.....numpy.core.numerictypes                                           (704)
......numbers                                                          (594)
......numpy.core._string_helpers                                       (286)
......numpy.core._type_aliases                                         (639)
.......numpy.core._dtype                                               (278)
.....numpy.core.numeric                                                (3470)
......numpy.core.shape_base                                            (1099)
.......numpy.core._asarray                                             (843)
.......numpy.core.fromnumeric                                          (4966)
........numpy.core._methods                                            (392)
.........numpy.core._exceptions                                        (536)
......numpy.core._ufunc_config                                         (347)
.......collections.abc                                                 (257)
......numpy.core.arrayprint                                            (1192)
.....numpy.core.defchararray                                           (5324)
.....numpy.core.records                                                (560)
.....numpy.core.memmap                                                 (311)
.....numpy.core.function_base                                          (662)
.....numpy.core.machar                                                 (274)
.....numpy.core.getlimits                                              (442)
.....numpy.core.einsumfunc                                             (776)
.....numpy.core._add_newdocs                                           (2107)
......numpy.core._multiarray_tests                                     (524)
.....numpy.core._add_newdocs_scalars                                   (709)
.....numpy.core._dtype_ctypes                                          (219)
.....numpy.core._internal                                              (1439)
......ast                                                              (421)
......._ast                                                            (135)
......platform                                                         (5406)
.......subprocess                                                      (806)
........signal                                                         (1769)
........_posixsubprocess                                               (65)
........select                                                         (99)
........selectors                                                      (923)
......ctypes                                                           (1827)
......._ctypes                                                         (743)
.......ctypes._endian                                                  (397)
.....numpy._pytesttester                                               (265)
....numpy.lib                                                          (676)
.....numpy.lib.mixins                                                  (435)
.....numpy.lib.scimath                                                 (1169)
......numpy.lib.type_check                                             (1426)
.......numpy.lib.ufunclike                                             (1488)
.....numpy.lib.index_tricks                                            (1043)
......numpy.matrixlib                                                  (194)
.......numpy.matrixlib.defmatrix                                       (511)
........numpy.linalg                                                   (232)
.........numpy.linalg.linalg                                           (3158)
..........numpy.lib.twodim_base                                        (1597)
..........numpy.linalg.lapack_lite                                     (428)
..........numpy.linalg._umath_linalg                                   (474)
......numpy.lib.function_base                                          (3877)
.......numpy.lib.histograms                                            (741)
......numpy.lib.stride_tricks                                          (740)
.....numpy.lib.nanfunctions                                            (1911)
.....numpy.lib.shape_base                                              (1777)
.....numpy.lib.polynomial                                              (1719)
.....numpy.lib.utils                                                   (1177)
.....numpy.lib.arraysetops                                             (1151)
.....numpy.lib.npyio                                                   (1531)
......weakref                                                          (735)
......numpy.lib.format                                                 (362)
......numpy.lib._datasource                                            (382)
......numpy.lib._iotools                                               (654)
.....numpy.lib.arrayterator                                            (264)
.....numpy.lib.arraypad                                                (448)
.....numpy.lib._version                                                (272)
....numpy.fft                                                          (145)
.....numpy.fft._pocketfft                                              (927)
......numpy.fft._pocketfft_internal                                    (151)
.....numpy.fft.helper                                                  (258)
....numpy.polynomial                                                   (187)
.....numpy.polynomial.polynomial                                       (372)
......numpy.polynomial.polyutils                                       (212)
......numpy.polynomial._polybase                                       (293)
.....numpy.polynomial.chebyshev                                        (325)
.....numpy.polynomial.legendre                                         (244)
.....numpy.polynomial.hermite                                          (244)
.....numpy.polynomial.hermite_e                                        (250)
.....numpy.polynomial.laguerre                                         (237)
....numpy.random                                                       (187)
.....numpy.random._pickle                                              (261)
......numpy.random.mtrand                                              (755)
.......numpy.random.bit_generator                                      (440)
........numpy.random._common                                           (458)
.........backports_abc                                                 (341)
........secrets                                                        (237)
.........base64                                                        (176)
.........hmac                                                          (210)
.........random                                                        (489)
..........bisect                                                       (129)
..........._bisect                                                     (36)
.........._random                                                      (42)
.......numpy.random._bounded_integers                                  (219)
.......numpy.random._mt19937                                           (191)
......numpy.random._philox                                             (219)
......numpy.random._pcg64                                              (229)
......numpy.random._sfc64                                              (267)
......numpy.random._generator                                          (522)
....numpy.ctypeslib                                                    (370)
....numpy.ma                                                           (251)
.....numpy.ma.core                                                     (2458)
......inspect                                                          (1391)
.......dis                                                             (373)
........opcode                                                         (236)
........._opcode                                                       (141)
.....numpy.ma.extras                                                   (886)
...scooby                                                              (353)
....scooby.report                                                      (264)
.....multiprocessing                                                   (167)
......multiprocessing.context                                          (424)
.......multiprocessing.process                                         (231)
.......multiprocessing.reduction                                       (361)
........pickle                                                         (574)
.........org.python.core                                               (14)
..........org.python                                                   (14)
...........org                                                         (414)
........._pickle                                                       (95)
........socket                                                         (1669)
........._socket                                                       (163)
........array                                                          (64)
.....scooby.knowledge                                                  (304)
......distutils.sysconfig                                              (649)
.......distutils                                                       (109)
.......distutils.errors                                                (314)
......psutil                                                           (923)
.......psutil._common                                                  (1792)
.......psutil._compat                                                  (163)
.......psutil._pslinux                                                 (2972)
........glob                                                           (376)
........psutil._psposix                                                (146)
........psutil._psutil_linux                                           (197)
........psutil._psutil_posix                                           (134)
......mkl                                                              (367)
......numexpr                                                          (439)
....scooby.tracker                                                     (341)
...pyvista.utilities                                                   (257)
....pyvista.utilities.errors                                           (266)
.....logging                                                           (644)
......string                                                           (694)
......._string                                                         (38)
......atexit                                                           (36)
....pyvista.utilities.features                                         (161)
....pyvista.utilities.fileio                                           (278)
....pyvista.utilities.geometric_objects                                (243)
....pyvista.utilities.helpers                                          (3413)
.....vtk.util.numpy_support                                            (203)
......vtk.util                                                         (137)
......vtk.util.vtkConstants                                            (168)
.....pyvista.utilities.transformations                                 (109)
......transforms3d                                                     (307)
.......transforms3d.taitbryan                                          (220)
........transforms3d.axangles                                          (92)
.......transforms3d.affines                                            (133)
........transforms3d.shears                                            (423)
.........transforms3d.utils                                            (88)
.......transforms3d.quaternions                                        (163)
.......transforms3d.euler                                              (315)
.......transforms3d.reflections                                        (128)
.......transforms3d.zooms                                              (108)
.......transforms3d._version                                           (110)
....pyvista.utilities.parametric_objects                               (171)
....pyvista.utilities.sphinx_gallery                                   (141)
....pyvista.utilities.regression                                       (142)
...pyvista.plotting.plotting                                           (16324)
....imageio                                                            (243)
.....imageio.core                                                      (212)
......imageio.core.util                                                (308)
......imageio.core.findlib                                             (155)
......imageio.core.fetching                                            (241)
......imageio.core.request                                             (240)
.......tempfile                                                        (260)
......imageio.core.format                                              (356)
.....imageio.core.functions                                            (351)
.....imageio.plugins                                                   (714)
......imageio.plugins.tifffile                                         (237)
......imageio.plugins.pillow                                           (828)
.......imageio.plugins.pillow_info                                     (231)
.......imageio.plugins.pillowmulti                                     (282)
......imageio.plugins.grab                                             (206)
......imageio.plugins.freeimage                                        (848)
.......imageio.plugins._freeimage                                      (370)
......imageio.plugins.freeimagemulti                                   (319)
......imageio.plugins.ffmpeg                                           (264)
......imageio.plugins.bsdf                                             (230)
......imageio.plugins.dicom                                            (198)
......imageio.plugins.npz                                              (198)
......imageio.plugins.swf                                              (230)
......imageio.plugins.feisem                                           (187)
......imageio.plugins.fits                                             (227)
......imageio.plugins.simpleitk                                        (326)
......imageio.plugins.gdal                                             (164)
......imageio.plugins.lytro                                            (477)
......imageio.plugins.spe                                              (316)
......imageio.plugins.example                                          (187)
....typing                                                             (1568)
....pyvista.plotting.background_renderer                               (172)
.....pyvista.plotting.renderer                                         (384)
......pyvista.plotting.theme                                           (136)
......pyvista.plotting.tools                                           (174)
......pyvista.plotting.camera                                          (162)
....pyvista.plotting.mapper                                            (125)
....pyvista.plotting.picking                                           (211)
....pyvista.plotting.widgets                                           (358)
....matplotlib                                                         (5444)
.....distutils.version                                                 (479)
.....locale                                                            (693)
.....pprint                                                            (255)
.....matplotlib.cbook                                                  (948)
......shlex                                                            (290)
......matplotlib.cbook.deprecation                                     (253)
.....matplotlib.rcsetup                                                (864)
......matplotlib.animation                                             (903)
.......uuid                                                            (479)
........_uuid                                                          (341)
.......matplotlib._animation_data                                      (128)
......matplotlib.fontconfig_pattern                                    (1255)
.......pyparsing                                                       (10297)
........copy                                                           (268)
.........org.python.core                                               (19)
..........org.python                                                   (20)
...........org                                                         (427)
......matplotlib.colors                                                (831)
.......matplotlib.docstring                                            (153)
.......matplotlib._color_data                                          (550)
......cycler                                                           (283)
.......six                                                             (860)
.......six.moves                                                       (51)
.....matplotlib._version                                               (112)
.....matplotlib.ft2font                                                (389)
.....dateutil._version                                                 (121)
..pyvista.plotting.itkplotter                                          (1145)
...itkwidgets                                                          (452)
....itkwidgets._version                                                (125)
....itkwidgets.widget_viewer                                           (803)
.....itkwidgets.cm                                                     (94)
.....colorcet                                                          (327161)
......matplotlib.cm                                                    (4506)
.......matplotlib._cm                                                  (373)
.......matplotlib._cm_listed                                           (569)
.....itk                                                               (9826)
......itkBase                                                          (62959)
.......pkg_resources                                                   (277907)
........pkgutil                                                        (335)
........plistlib                                                       (990)
.........xml.parsers.expat                                             (180)
..........xml.parsers                                                  (164)
...........xml                                                         (149)
..........pyexpat                                                      (104)
........email.parser                                                   (284)
.........email                                                         (161)
.........email.feedparser                                              (600)
..........email.errors                                                 (362)
..........email._policybase                                            (305)
...........email.header                                                (678)
............email.quoprimime                                           (199)
............email.base64mime                                           (137)
............email.charset                                              (199)
.............email.encoders                                            (97)
..............quopri                                                   (128)
...........email.utils                                                 (486)
............email._parseaddr                                           (198)
.............calendar                                                  (411)
........pkg_resources.extern                                           (202)
........pkg_resources.extern.six                                       (135)
.........pkg_resources._vendor.six                                     (727)
..........pkg_resources._vendor                                        (91)
........pkg_resources.extern.six.moves                                 (64)
.........pkg_resources._vendor.six.moves                               (63)
..........pkg_resources._vendor.six                                    (604)
........pkg_resources._vendor.six.moves.urllib                         (50)
.........pkg_resources._vendor.six.moves                               (37)
........pkg_resources.py31compat                                       (130)
........pkg_resources.extern.appdirs                                   (99)
.........pkg_resources._vendor.appdirs                                 (152)
........pkg_resources.extern.packaging                                 (79)
.........pkg_resources._vendor.packaging                               (117)
..........pkg_resources._vendor.packaging.__about__                    (158)
........pkg_resources.extern.packaging.version                         (1982)
.........pkg_resources.extern.packaging._structures                    (119)
........pkg_resources.extern.packaging.specifiers                      (4163)
.........pkg_resources.extern.packaging._compat                        (99)
........pkg_resources.extern.packaging.requirements                    (5017)
.........pkg_resources.extern.pyparsing                                (113)
..........pkg_resources._vendor.pyparsing                              (6311)
.........pkg_resources.extern.six.moves.urllib                         (50)
.........pkg_resources.extern.packaging.markers                        (931)
........pkg_resources.py2_warn                                         (163)
........sysconfig                                                      (281)
.......itkConfig                                                       (304)
.......itkTemplate                                                     (349)
........itkLazy                                                        (143)
........itkTypes                                                       (193)
......itkExtras                                                        (691)
.......IPython                                                         (241)
........IPython.core.getipython                                        (179)
.........IPython.core                                                  (135)
........IPython.core.release                                           (131)
........IPython.core.application                                       (643)
.........traitlets.config.application                                  (16)
..........traitlets.config                                             (151)
...........traitlets                                                   (169)
............traitlets.traitlets                                        (1348)
.............traitlets.utils.getargspec                                (173)
..............traitlets.utils                                          (96)
.............traitlets.utils.importstring                              (141)
..............ipython_genutils.py3compat                               (310)
...............ipython_genutils                                        (120)
................ipython_genutils._version                              (107)
...............ipython_genutils.encoding                               (87)
.............traitlets.utils.sentinel                                  (119)
.............traitlets.utils.bunch                                     (129)
............traitlets._version                                         (109)
...........traitlets.config.application                                (961)
............decorator                                                  (483)
............traitlets.config.configurable                              (364)
.............traitlets.config.loader                                   (780)
..............argparse                                                 (709)
...............gettext                                                 (741)
..............ipython_genutils.path                                    (150)
.............ipython_genutils.text                                     (205)
............ipython_genutils.importstring                              (126)
.........IPython.core.crashhandler                                     (202)
..........IPython.core.ultratb                                         (539)
...........pydoc                                                       (1132)
............_sysconfigdata_m_linux_x86_64-linux-gnu                    (269)
...........IPython.core.debugger                                       (406)
............bdb                                                        (233)
............IPython.utils                                              (131)
............IPython.utils.PyColorize                                   (300)
.............IPython.utils.coloransi                                   (216)
..............IPython.utils.ipstruct                                   (117)
.............IPython.utils.colorable                                   (185)
..............pygments                                                 (224)
...............pygments.util                                           (899)
............IPython.utils.py3compat                                    (193)
.............IPython.utils.encoding                                    (90)
............IPython.core.excolors                                      (149)
............IPython.testing.skipdoctest                                (171)
.............IPython.testing                                           (116)
............pdb                                                        (430)
.............cmd                                                       (156)
.............code                                                      (202)
..............codeop                                                   (128)
...........IPython.core.display_trap                                   (240)
...........IPython.utils.path                                          (206)
............IPython.utils.process                                      (139)
.............IPython.utils._process_posix                              (155)
..............pexpect                                                  (192)
...............pexpect.exceptions                                      (163)
...............pexpect.utils                                           (154)
...............pexpect.expect                                          (236)
...............pexpect.pty_spawn                                       (290)
................pty                                                    (116)
.................tty                                                   (175)
..................termios                                              (265)
................ptyprocess                                             (178)
.................ptyprocess.ptyprocess                                 (279)
..................fcntl                                                (56)
..................resource                                             (202)
..................ptyprocess.util                                      (146)
................pexpect.spawnbase                                      (282)
...............pexpect.run                                             (135)
..............IPython.utils._process_common                            (117)
............IPython.utils.decorators                                   (91)
...........IPython.utils.data                                          (89)
...........IPython.utils.terminal                                      (111)
..........IPython.utils.sysinfo                                        (154)
...........IPython.utils._sysinfo                                      (80)
.........IPython.core.profiledir                                       (232)
..........IPython.paths                                                (129)
...........IPython.utils.importstring                                  (79)
........IPython.terminal.embed                                         (1024)
.........IPython.terminal                                              (111)
.........IPython.core.compilerop                                       (142)
.........IPython.core.magic_arguments                                  (388)
..........IPython.core.error                                           (605)
..........IPython.utils.text                                           (528)
.........IPython.core.magic                                            (484)
..........getopt                                                       (142)
..........IPython.core.oinspect                                        (537)
...........IPython.core.page                                           (264)
............IPython.core.display                                       (523)
.............mimetypes                                                 (210)
..............winreg                                                   (1142)
...........IPython.lib.pretty                                          (402)
............IPython.lib                                                (117)
.............IPython.lib.security                                      (156)
..............getpass                                                  (138)
...........IPython.utils.openpy                                        (392)
...........IPython.utils.dir2                                          (124)
...........IPython.utils.wildcard                                      (156)
...........pygments.lexers                                             (403)
............pygments.lexers._mapping                                   (782)
............pygments.modeline                                          (363)
............pygments.plugin                                            (114)
...........pygments.lexers.python                                      (931)
............pygments.lexer                                             (462)
.............pygments.filter                                           (127)
.............pygments.filters                                          (302)
..............pygments.token                                           (250)
.............pygments.regexopt                                         (268)
............pygments.unistring                                         (255)
...........pygments.formatters                                         (196)
............pygments.formatters._mapping                               (158)
...........pygments.formatters.html                                    (289)
............pygments.formatter                                         (138)
.............pygments.styles                                           (121)
............ctags                                                      (399)
..........IPython.core.inputtransformer2                               (911)
.........IPython.core.interactiveshell                                 (1725)
..........runpy                                                        (221)
..........pickleshare                                                  (362)
...........cPickle                                                     (352)
..........IPython.core.prefilter                                       (858)
...........IPython.core.autocall                                       (130)
...........IPython.core.macro                                          (266)
...........IPython.core.splitinput                                     (550)
..........IPython.core.alias                                           (382)
..........IPython.core.builtin_trap                                    (251)
..........IPython.core.events                                          (255)
...........backcall                                                    (131)
............backcall.backcall                                          (138)
..........IPython.core.displayhook                                     (233)
..........IPython.core.displaypub                                      (206)
..........IPython.core.extensions                                      (187)
..........IPython.core.formatters                                      (1291)
...........IPython.utils.sentinel                                      (98)
..........IPython.core.history                                         (1926)
...........sqlite3                                                     (154)
............sqlite3.dbapi2                                             (294)
............._sqlite3                                                  (612)
..........IPython.core.logger                                          (175)
..........IPython.core.payload                                         (166)
..........IPython.core.usage                                           (137)
..........IPython.display                                              (144)
...........IPython.lib.display                                         (309)
............html                                                       (410)
.............html.entities                                             (768)
..........IPython.utils.io                                             (388)
...........IPython.utils.capture                                       (154)
..........IPython.utils.strdispatch                                    (164)
...........IPython.core.hooks                                          (755)
..........IPython.utils.syspathcontext                                 (163)
..........IPython.utils.tempdir                                        (156)
..........IPython.utils.contexts                                       (127)
..........docrepr.sphinxify                                            (27)
...........docrepr                                                     (371)
..........IPython.core.async_helpers                                   (226)
.........IPython.terminal.interactiveshell                             (880)
..........asyncio                                                      (250)
...........asyncio.base_events                                         (623)
............concurrent.futures                                         (183)
.............concurrent                                                (106)
.............concurrent.futures._base                                  (491)
............ssl                                                        (1947)
............._ssl                                                      (835)
............asyncio.constants                                          (195)
............asyncio.coroutines                                         (242)
.............asyncio.base_futures                                      (145)
..............asyncio.format_helpers                                   (105)
.............asyncio.log                                               (114)
............asyncio.events                                             (455)
.............contextvars                                               (102)
.............._contextvars                                             (133)
............._asyncio                                                  (246)
..............asyncio.base_tasks                                       (145)
............asyncio.futures                                            (189)
............asyncio.protocols                                          (186)
............asyncio.sslproto                                           (303)
.............asyncio.transports                                        (213)
............asyncio.tasks                                              (400)
...........asyncio.locks                                               (261)
...........asyncio.runners                                             (152)
...........asyncio.queues                                              (214)
...........asyncio.streams                                             (367)
...........asyncio.subprocess                                          (215)
...........asyncio.unix_events                                         (558)
............asyncio.base_subprocess                                    (329)
............asyncio.selector_events                                    (350)
..........prompt_toolkit.enums                                         (27)
...........prompt_toolkit                                              (153)
............prompt_toolkit.application                                 (177)
.............prompt_toolkit.application.application                    (470)
..............prompt_toolkit.buffer                                    (613)
...............prompt_toolkit.application.current                      (205)
................prompt_toolkit.eventloop.context                       (21)
.................prompt_toolkit.eventloop                              (157)
..................prompt_toolkit.eventloop.base                        (274)
...................prompt_toolkit.log                                  (100)
..................prompt_toolkit.eventloop.coroutine                   (169)
...................prompt_toolkit.eventloop.defaults                   (119)
....................prompt_toolkit.utils                               (233)
.....................wcwidth                                           (140)
......................wcwidth.wcwidth                                  (139)
.......................wcwidth.table_wide                              (94)
.......................wcwidth.table_zero                              (169)
.....................prompt_toolkit.cache                              (172)
...................prompt_toolkit.eventloop.future                     (195)
....................prompt_toolkit.eventloop.context                   (133)
..................prompt_toolkit.eventloop.async_generator             (163)
...................six.moves.queue                                     (53)
....................queue                                              (232)
....................._queue                                            (173)
..................prompt_toolkit.eventloop.event                       (116)
...............prompt_toolkit.application.run_in_terminal              (135)
...............prompt_toolkit.auto_suggest                             (288)
................prompt_toolkit.filters                                 (598)
.................prompt_toolkit.filters.base                           (367)
.................prompt_toolkit.filters.app                            (579)
..................prompt_toolkit.enums                                 (96)
.................prompt_toolkit.filters.utils                          (127)
.................prompt_toolkit.filters.cli                            (138)
...............prompt_toolkit.clipboard                                (160)
................prompt_toolkit.clipboard.base                          (246)
.................prompt_toolkit.selection                              (115)
................prompt_toolkit.clipboard.in_memory                     (141)
...............prompt_toolkit.completion                               (250)
................prompt_toolkit.completion.base                         (298)
................prompt_toolkit.completion.filesystem                   (176)
................prompt_toolkit.completion.word_completer               (150)
................prompt_toolkit.completion.fuzzy_completer              (305)
.................prompt_toolkit.document                               (1179)
...............prompt_toolkit.history                                  (261)
...............prompt_toolkit.search                                   (178)
................prompt_toolkit.key_binding.vi_state                    (171)
.................prompt_toolkit.key_binding                            (99)
..................prompt_toolkit.key_binding.key_bindings              (415)
...................prompt_toolkit.keys                                 (199)
...............prompt_toolkit.validation                               (266)
..............prompt_toolkit.input.base                                (30)
...............prompt_toolkit.input                                    (130)
................prompt_toolkit.input.base                              (218)
................prompt_toolkit.input.defaults                          (136)
..............prompt_toolkit.input.typeahead                           (133)
..............prompt_toolkit.key_binding.bindings.page_navigation      (192)
...............prompt_toolkit.key_binding.bindings                     (115)
...............prompt_toolkit.key_binding.bindings.scroll              (168)
..............prompt_toolkit.key_binding.defaults                      (144)
...............prompt_toolkit.key_binding.bindings.basic               (148)
................prompt_toolkit.key_binding.key_processor               (211)
................prompt_toolkit.key_binding.bindings.named_commands     (355)
.................prompt_toolkit.key_binding.bindings.completion        (149)
...............prompt_toolkit.key_binding.bindings.emacs               (171)
...............prompt_toolkit.key_binding.bindings.vi                  (485)
................prompt_toolkit.input.vt100_parser                      (602)
.................prompt_toolkit.input.ansi_escape_sequences            (152)
................prompt_toolkit.key_binding.digraphs                    (378)
...............prompt_toolkit.key_binding.bindings.mouse               (163)
................prompt_toolkit.layout.screen                           (18)
.................prompt_toolkit.layout                                 (188)
..................prompt_toolkit.layout.containers                     (879)
...................prompt_toolkit.layout.controls                      (464)
....................prompt_toolkit.formatted_text                      (142)
.....................prompt_toolkit.formatted_text.base                (166)
.....................prompt_toolkit.formatted_text.html                (170)
......................xml.dom.minidom                                  (1048)
.......................xml.dom                                         (280)
........................xml.dom.domreg                                 (269)
.......................xml.dom.minicompat                              (181)
.......................xml.dom.xmlbuilder                              (300)
........................xml.dom.NodeFilter                             (106)
.....................prompt_toolkit.formatted_text.ansi                (340)
......................prompt_toolkit.output.vt100                      (424)
.......................prompt_toolkit.output                           (116)
........................prompt_toolkit.output.base                     (285)
.........................prompt_toolkit.layout.screen                  (311)
........................prompt_toolkit.output.defaults                 (196)
........................prompt_toolkit.output.color_depth              (140)
.......................prompt_toolkit.styles.base                      (18)
........................prompt_toolkit.styles                          (157)
.........................prompt_toolkit.styles.base                    (315)
.........................prompt_toolkit.styles.defaults                (360)
..........................prompt_toolkit.styles.style                  (433)
...........................prompt_toolkit.styles.named_colors          (136)
.........................prompt_toolkit.styles.pygments                (162)
.........................prompt_toolkit.styles.style_transformation    (353)
..........................colorsys                                     (110)
.....................prompt_toolkit.formatted_text.pygments            (145)
.....................prompt_toolkit.formatted_text.utils               (125)
....................prompt_toolkit.lexers                              (137)
.....................prompt_toolkit.lexers.base                        (201)
.....................prompt_toolkit.lexers.pygments                    (256)
....................prompt_toolkit.mouse_events                        (129)
....................prompt_toolkit.layout.processors                   (584)
.....................prompt_toolkit.layout.utils                       (119)
...................prompt_toolkit.layout.dimension                     (166)
...................prompt_toolkit.layout.margins                       (291)
..................prompt_toolkit.layout.layout                         (193)
..................prompt_toolkit.layout.menus                          (395)
................prompt_toolkit.renderer                                (304)
.................prompt_toolkit.layout.mouse_handlers                  (108)
...............prompt_toolkit.key_binding.bindings.cpr                 (112)
..............prompt_toolkit.key_binding.emacs_state                   (116)
..............prompt_toolkit.layout.dummy                              (126)
.............prompt_toolkit.application.dummy                          (144)
............prompt_toolkit.shortcuts                                   (140)
.............prompt_toolkit.shortcuts.dialogs                          (275)
..............prompt_toolkit.key_binding.bindings.focus                (127)
..............prompt_toolkit.widgets                                   (176)
...............prompt_toolkit.widgets.base                             (453)
................prompt_toolkit.widgets.toolbars                        (251)
...............prompt_toolkit.widgets.dialogs                          (150)
...............prompt_toolkit.widgets.menus                            (199)
.............prompt_toolkit.shortcuts.prompt                           (489)
..............prompt_toolkit.key_binding.bindings.auto_suggest         (109)
..............prompt_toolkit.key_binding.bindings.open_in_editor       (122)
.............prompt_toolkit.shortcuts.utils                            (153)
.............prompt_toolkit.shortcuts.progress_bar                     (149)
..............prompt_toolkit.shortcuts.progress_bar.base               (269)
...............prompt_toolkit.shortcuts.progress_bar.formatters        (478)
..........prompt_toolkit.patch_stdout                                  (170)
..........pygments.style                                               (352)
..........IPython.terminal.debugger                                    (287)
...........IPython.core.completer                                      (984)
............unicodedata                                                (46)
............IPython.core.latex_symbols                                 (665)
............IPython.utils.generics                                     (209)
............jedi                                                       (222)
.............jedi.api                                                  (745)
..............parso                                                    (186)
...............parso.parser                                            (275)
................parso.tree                                             (285)
.................parso.utils                                           (441)
................parso.pgen2.generator                                  (20)
.................parso.pgen2                                           (144)
..................parso.pgen2.generator                                (391)
...................parso.pgen2.grammar_parser                          (223)
....................parso.python.tokenize                              (1394)
.....................parso.python                                      (106)
.....................parso.python.token                                (274)
...............parso.grammar                                           (617)
................parso._compatibility                                   (95)
................parso.python.diff                                      (433)
.................difflib                                               (959)
.................parso.python.parser                                   (231)
..................parso.python.tree                                    (1043)
...................parso.python.prefix                                 (368)
................parso.cache                                            (5109)
.................gc                                                    (73)
................parso.python.errors                                    (1174)
.................parso.normalizer                                      (307)
................parso.python.pep8                                      (387)
................parso.file_io                                          (198)
..............jedi._compatibility                                      (132)
..............jedi.parser_utils                                        (241)
..............jedi.debug                                               (270)
...............colorama                                                (208)
................colorama.initialise                                    (209)
.................colorama.ansitowin32                                  (594)
..................colorama.ansi                                        (318)
..................colorama.winterm                                     (243)
...................colorama.win32                                      (139)
..............jedi.settings                                            (151)
..............jedi.cache                                               (215)
..............jedi.file_io                                             (214)
..............jedi.api.classes                                         (520)
...............jedi.inference.utils                                    (18)
................jedi.inference                                         (273)
.................jedi.inference.imports                                (385)
..................jedi.inference.sys_path                              (192)
...................jedi.inference.cache                                (131)
...................jedi.inference.base_value                           (507)
....................jedi.inference.helpers                             (164)
....................jedi.inference.utils                               (357)
..................jedi.inference.compiled                              (191)
...................jedi.inference.compiled.value                       (582)
....................jedi.inference.filters                             (664)
.....................jedi.inference.flow_analysis                      (227)
......................jedi.inference.recursion                         (144)
.....................jedi.inference.names                              (731)
......................jedi.inference.docstrings                        (473)
.......................jedi.common                                     (100)
.......................jedi.inference.lazy_value                       (193)
......................jedi.plugins                                     (145)
....................jedi.inference.compiled.access                     (423)
.....................jedi.inference.compiled.getattr_static            (115)
....................jedi.inference.signature                           (363)
....................jedi.inference.context                             (429)
..................jedi.inference.analysis                              (224)
..................jedi.inference.gradual.typeshed                      (423)
...................jedi.inference.gradual                              (110)
...................jedi.inference.gradual.stub_value                   (240)
....................jedi.inference.value.module                        (71)
.....................jedi.inference.value                              (135)
......................jedi.inference.value.module                      (260)
......................jedi.inference.value.klass                       (343)
.......................jedi.inference.arguments                        (272)
........................jedi.inference.value.iterable                  (1125)
.........................jedi.inference.value.dynamic_arrays           (228)
.......................jedi.inference.value.function                   (546)
........................jedi.inference.parser_cache                    (95)
........................jedi.inference.gradual.generics                (199)
......................jedi.inference.value.instance                    (604)
....................jedi.inference.gradual.typing                      (543)
.....................jedi.inference.gradual.base                       (380)
.....................jedi.inference.gradual.type_var                   (205)
..................jedi.inference.compiled.subprocess.functions         (32)
...................jedi.inference.compiled.subprocess                  (416)
....................jedi.inference.compiled.subprocess.functions       (192)
....................jedi.api.exceptions                                (165)
.................jedi.inference.syntax_tree                            (438)
..................jedi.inference.gradual.annotation                    (254)
...................jedi.inference.param                                (200)
..................jedi.inference.value.decorator                       (126)
...............jedi.inference.compiled.mixed                           (289)
................jedi.inference.gradual.conversion                      (204)
...............jedi.api.keywords                                       (234)
................pydoc_data                                             (109)
................pydoc_data.topics                                      (677)
...............jedi.api.completion_cache                               (200)
...............jedi.api.helpers                                        (345)
..............jedi.api.interpreter                                     (190)
..............jedi.api.completion                                      (535)
...............jedi.api.strings                                        (136)
...............jedi.api.file_name                                      (212)
..............jedi.api.environment                                     (402)
...............filecmp                                                 (207)
..............jedi.api.project                                         (253)
...............jedi.inference.references                               (211)
..............jedi.api.errors                                          (140)
..............jedi.api.refactoring                                     (248)
..............jedi.api.refactoring.extract                             (228)
..............jedi.inference.gradual.utils                             (110)
.............jedi.plugins.registry                                     (279)
..............jedi.plugins.stdlib                                      (686)
..............jedi.plugins.flask                                       (110)
..............jedi.plugins.pytest                                      (165)
..............jedi.plugins.django                                      (457)
...........IPython.terminal.ptutils                                    (281)
...........IPython.terminal.shortcuts                                  (316)
..........IPython.terminal.magics                                      (526)
...........IPython.lib.clipboard                                       (144)
..........IPython.terminal.pt_inputhooks                               (165)
..........IPython.terminal.prompts                                     (286)
.........IPython.terminal.ipapp                                        (552)
..........IPython.core.magics                                          (324)
...........IPython.core.magics.auto                                    (345)
...........IPython.core.magics.basic                                   (2778)
...........IPython.core.magics.code                                    (1124)
............urllib.request                                             (1813)
.............http.client                                               (1097)
..............http                                                     (1092)
..............email.message                                            (539)
...............uu                                                      (162)
...............email._encoded_words                                    (305)
...............email.iterators                                         (114)
.............urllib.error                                              (242)
..............urllib.response                                          (160)
...........IPython.core.magics.config                                  (457)
...........IPython.core.magics.display                                 (1180)
...........IPython.core.magics.execution                               (2158)
............timeit                                                     (173)
............cProfile                                                   (207)
............._lsprof                                                   (238)
.............profile                                                   (299)
............pstats                                                     (553)
............IPython.utils.module_paths                                 (115)
............IPython.utils.timing                                       (105)
...........IPython.core.magics.extension                               (377)
...........IPython.core.magics.history                                 (1852)
...........IPython.core.magics.logging                                 (525)
...........IPython.core.magics.namespace                               (1159)
...........IPython.core.magics.osm                                     (1945)
...........IPython.core.magics.packaging                               (331)
...........IPython.core.magics.pylab                                   (1371)
............IPython.core.pylabtools                                    (346)
...........IPython.core.magics.script                                  (1211)
............IPython.lib.backgroundjobs                                 (238)
..........IPython.core.shellapp                                        (479)
..........IPython.extensions.storemagic                                (280)
...........IPython.extensions                                          (111)
........IPython.utils.frame                                            (116)
.....ipywidgets                                                        (252)
......ipywidgets._version                                              (133)
......ipywidgets.widgets                                               (388)
.......ipywidgets.widgets.widget                                       (496)
........ipykernel.comm                                                 (171)
.........ipykernel                                                     (143)
..........ipykernel._version                                           (134)
..........ipykernel.connect                                            (168)
...........jupyter_client                                              (184)
............jupyter_client._version                                    (126)
............jupyter_client.connect                                     (389)
.............zmq                                                       (308)
..............zmq.libzmq                                               (166)
..............zmq.backend                                              (186)
...............zmq.backend.select                                      (225)
...............zmq.backend.cython                                      (324)
................zmq.backend.cython.constants                           (640)
................zmq.backend.cython.error                               (214)
................zmq.backend.cython.message                             (424)
.................zmq.backend.cython.time                               (128)
.................zmq.backend.cython.threading                          (52)
.................zmq.backend.cython.threading                          (57)
.................zmq.backend.cython.zmq                                (55)
.................zmq.backend.cython.zmq.error                          (42)
..................zmq.backend.cython.zmq                               (29)
.................zmq.error                                             (276)
................zmq.backend.cython.context                             (270)
.................zmq.backend.cython.zmq.error                          (17)
..................zmq.backend.cython.zmq                               (38)
................zmq.backend.cython.socket                              (334)
.................zmq.backend.cython.copy                               (41)
.................zmq.backend.cython.time                               (50)
.................zmq.backend.cython.sys                                (47)
.................zmq.backend.cython.random                             (59)
.................zmq.backend.cython.struct                             (59)
.................zmq.backend.cython.codecs                             (40)
.................zmq.backend.cython.cPickle                            (40)
.................cPickle                                               (421)
.................zmq.backend.cython.pickle                             (30)
.................zmq.backend.cython.zmq                                (32)
.................zmq.backend.cython.zmq.backend.cython                 (10)
..................zmq.backend.cython.zmq.backend                       (11)
...................zmq.backend.cython.zmq                              (31)
.................zmq.backend.cython.zmq.error                          (11)
..................zmq.backend.cython.zmq                               (28)
................zmq.backend.cython.utils                               (181)
.................zmq.backend.cython.zmq.error                          (16)
..................zmq.backend.cython.zmq                               (36)
................zmq.backend.cython._poll                               (211)
.................zmq.backend.cython.sys                                (38)
.................zmq.backend.cython.time                               (31)
.................zmq.backend.cython.warnings                           (29)
.................zmq.backend.cython.zmq.error                          (12)
..................zmq.backend.cython.zmq                               (31)
................zmq.backend.cython._version                            (156)
................zmq.backend.cython._device                             (183)
.................zmq.backend.cython.zmq.error                          (15)
..................zmq.backend.cython.zmq                               (64)
................zmq.backend.cython._proxy_steerable                    (198)
.................zmq.backend.cython.zmq.error                          (15)
..................zmq.backend.cython.zmq                               (45)
..............zmq.sugar                                                (272)
...............zmq.sugar.constants                                     (299)
................zmq.utils.constant_names                               (261)
.................zmq.utils                                             (95)
...............zmq.sugar.context                                       (219)
................zmq.sugar.attrsettr                                    (104)
................zmq.sugar.socket                                       (346)
.................zmq.sugar.poll                                        (121)
.................zmq.utils.jsonapi                                     (111)
..................zmq.utils.strtypes                                   (92)
..................simplejson                                           (328)
...................decimal                                             (137)
...................._decimal                                           (684)
...................simplejson.errors                                   (199)
...................simplejson.raw_json                                 (130)
...................simplejson.decoder                                  (242)
....................simplejson.compat                                  (97)
....................simplejson.scanner                                 (160)
.....................simplejson._speedups                              (144)
...................simplejson.encoder                                  (458)
.................cPickle                                               (423)
...............zmq.sugar.frame                                         (148)
...............zmq.sugar.tracker                                       (141)
...............zmq.sugar.version                                       (116)
...............zmq.sugar.stopwatch                                     (99)
.............jupyter_client.localinterfaces                            (453)
.............jupyter_core.paths                                        (161)
..............jupyter_core                                             (146)
...............jupyter_core.version                                    (120)
............jupyter_client.launcher                                    (145)
.............traitlets.log                                             (97)
............jupyter_client.client                                      (300)
.............jupyter_client.channels                                   (194)
..............jupyter_client.channelsabc                               (141)
.............jupyter_client.clientabc                                  (163)
............jupyter_client.manager                                     (450)
.............jupyter_client.kernelspec                                 (583)
.............jupyter_client.managerabc                                 (169)
............jupyter_client.blocking                                    (135)
.............jupyter_client.blocking.client                            (276)
..............jupyter_client.blocking.channels                         (118)
............jupyter_client.multikernelmanager                          (307)
.........ipykernel.comm.manager                                        (223)
..........ipykernel.comm.comm                                          (276)
...........ipykernel.kernelbase                                        (503)
............jupyter_client.session                                     (546)
.............cPickle                                                   (365)
.............zmq.eventloop.ioloop                                      (31)
..............zmq.eventloop                                            (132)
...............zmq.eventloop.ioloop                                    (328)
................tornado                                                (167)
................tornado.log                                            (396)
.................logging.handlers                                      (660)
.................tornado.escape                                        (1396)
..................tornado.util                                         (477)
...................tornado.speedups                                    (153)
.................curses                                                (256)
.................._curses                                              (603)
................tornado.ioloop                                         (542)
.................tornado.concurrent                                    (329)
................tornado.platform.asyncio                               (396)
.................tornado.platform                                      (110)
.................tornado.gen                                           (30873)
.............zmq.eventloop.zmqstream                                   (239)
..............cPickle                                                  (370)
..............tornado.stack_context                                    (52)
.............jupyter_client.jsonutil                                   (706)
..............dateutil.parser                                          (224)
...............dateutil.parser._parser                                 (783)
................dateutil.relativedelta                                 (207)
.................dateutil._common                                      (110)
................dateutil.tz                                            (299)
.................dateutil.tz.tz                                        (705)
..................dateutil.tz._common                                  (189)
..................dateutil.tz._factories                               (184)
..................dateutil.tz.win                                      (210)
...................six.moves.winreg                                    (29)
..................contextmanager                                       (355)
...............dateutil.parser.isoparser                               (297)
.............._strptime                                                (642)
.............jupyter_client.adapter                                    (685)
............tornado.queues                                             (400)
.............tornado.locks                                             (379)
............ipykernel.jsonutil                                         (402)
.......ipywidgets.widgets.domwidget                                    (281)
........ipywidgets.widgets.trait_types                                 (2119)
.........ipywidgets.widgets.util                                       (89)
........ipywidgets.widgets.widget_layout                               (459)
........ipywidgets.widgets.widget_style                                (210)
.......ipywidgets.widgets.valuewidget                                  (161)
.......ipywidgets.widgets.widget_core                                  (157)
.......ipywidgets.widgets.widget_bool                                  (816)
........ipywidgets.widgets.widget_description                          (324)
.......ipywidgets.widgets.widget_button                                (564)
.......ipywidgets.widgets.widget_box                                   (806)
........ipywidgets.widgets.docutils                                    (140)
.......ipywidgets.widgets.widget_float                                 (1548)
........ipywidgets.widgets.widget_int                                  (1705)
.......ipywidgets.widgets.widget_color                                 (297)
.......ipywidgets.widgets.widget_date                                  (291)
.......ipywidgets.widgets.widget_output                                (316)
.......ipywidgets.widgets.widget_selection                             (1902)
.......ipywidgets.widgets.widget_selectioncontainer                    (467)
.......ipywidgets.widgets.widget_string                                (1239)
.......ipywidgets.widgets.widget_controller                            (633)
.......ipywidgets.widgets.interaction                                  (309)
.......ipywidgets.widgets.widget_link                                  (466)
.......ipywidgets.widgets.widget_media                                 (808)
.......ipywidgets.widgets.widget_templates                             (430)
.......ipywidgets.widgets.widget_upload                                (450)
.....ipydatawidgets                                                    (191)
......ipydatawidgets.ndarray                                           (168)
.......ipydatawidgets.ndarray.media                                    (253)
........ipydatawidgets._frontend                                       (76)
........ipydatawidgets.widgets                                         (154)
........ipydatawidgets.ndarray.union                                   (199)
.........ipydatawidgets.ndarray.serializers                            (107)
.........ipydatawidgets.ndarray.traits                                 (163)
..........traittypes                                                   (157)
...........traittypes.traittypes                                       (287)
...........traittypes._version                                         (103)
.........ipydatawidgets.ndarray.widgets                                (484)
......ipydatawidgets._version                                          (105)
......ipydatawidgets.nbextension                                       (125)
.....itkwidgets.trait_types                                            (310)
......zstandard                                                        (197)
.......zstd                                                            (454)
......itkwidgets._transform_types                                      (266)
.......imagej                                                          (389)
.......dask.array                                                      (32)
........dask                                                           (419)
.......SimpleITK                                                       (488)
.......skan                                                            (335)
.....ipywebrtc                                                         (212)
......ipywebrtc._version                                               (119)
......ipywebrtc.webrtc                                                 (3995)
.......urllib.urlopen                                                  (42)
.....mayavi.modules                                                    (16)
......mayavi                                                           (374)
....itkwidgets.widget_compare                                          (153)
....itkwidgets.widget_checkerboard                                     (164)
....itkwidgets.widget_line_profiler                                    (540)
.....scipy.ndimage                                                     (264)
......scipy                                                            (2854)
.......scipy._lib.deprecation                                          (139)
........scipy._lib                                                     (160)
.........scipy._lib._testutils                                         (189)
.......scipy.__config__                                                (122)
.......scipy.version                                                   (118)
.......scipy._distributor_init                                         (109)
.......scipy._lib._pep440                                              (643)
.......scipy._lib._ccallback                                           (215)
........scipy._lib._ccallback_c                                        (327)
.......scipy.fft                                                       (240)
........scipy.fft._basic                                               (750)
.........scipy._lib.uarray                                             (102)
..........uarray                                                       (339)
..........scipy._lib._uarray                                           (149)
...........scipy._lib._uarray._backend                                 (364)
............scipy._lib._uarray._uarray                                 (188)
........scipy.fft._realtransforms                                      (518)
........scipy.fft._helper                                              (148)
.........scipy.fft._pocketfft                                          (180)
..........scipy.fft._pocketfft.basic                                   (256)
...........scipy.fft._pocketfft.pypocketfft                            (369)
...........scipy.fft._pocketfft.helper                                 (187)
..........scipy.fft._pocketfft.realtransforms                          (162)
........scipy.fft._backend                                             (151)
......scipy.ndimage.filters                                            (1399)
.......scipy.ndimage._ni_support                                       (97)
.......scipy.ndimage._nd_image                                         (142)
.......scipy.ndimage._ni_docstrings                                    (192)
........scipy._lib.doccer                                              (275)
......scipy.ndimage.fourier                                            (150)
......scipy.ndimage.interpolation                                      (1556)
.......scipy.special                                                   (566)
........scipy.special.sf_error                                         (208)
........scipy.special._ufuncs                                          (2564)
.........scipy.special._ufuncs_cxx                                     (206)
........scipy.special._basic                                           (782)
.........scipy.special.specfun                                         (390)
.........scipy.special.orthogonal                                      (691)
..........scipy.linalg                                                 (663)
...........scipy.linalg.misc                                           (409)
............scipy.linalg.blas                                          (439)
.............scipy.linalg._fblas                                       (691)
.............scipy.linalg._cblas                                       (92)
............scipy.linalg.lapack                                        (2001)
.............scipy.linalg._flapack                                     (1220)
.............scipy.linalg._clapack                                     (89)
.............scipy._lib._util                                          (629)
...........scipy.linalg.basic                                          (549)
............scipy.linalg.flinalg                                       (236)
.............scipy.linalg._flinalg                                     (373)
............scipy.linalg.decomp                                        (488)
............scipy.linalg.decomp_svd                                    (261)
............scipy.linalg._solve_toeplitz                               (609)
...........scipy.linalg.decomp_lu                                      (233)
...........scipy.linalg._decomp_ldl                                    (252)
...........scipy.linalg.decomp_cholesky                                (222)
...........scipy.linalg.decomp_qr                                      (241)
...........scipy.linalg._decomp_qz                                     (250)
...........scipy.linalg.decomp_schur                                   (344)
...........scipy.linalg._decomp_polar                                  (201)
...........scipy.linalg.matfuncs                                       (386)
............scipy.linalg.special_matrices                              (345)
............scipy.linalg._expm_frechet                                 (260)
............scipy.linalg._matfuncs_sqrtm                               (266)
...........scipy.linalg._solvers                                       (1262)
...........scipy.linalg._procrustes                                    (203)
...........scipy.linalg._decomp_update                                 (527)
............scipy.linalg.cython_blas                                   (722)
............scipy.linalg.cython_lapack                                 (2185)
...........scipy.linalg._sketches                                      (227)
............scipy.sparse                                               (822)
.............scipy.sparse.base                                         (748)
..............scipy.sparse.sputils                                     (396)
.............scipy.sparse.csr                                          (364)
..............scipy.sparse._sparsetools                                (344)
..............scipy.sparse.compressed                                  (805)
...............scipy.sparse.data                                       (533)
...............scipy.sparse.dia                                        (356)
...............scipy.sparse._index                                     (315)
.............scipy.sparse.csc                                          (306)
.............scipy.sparse.lil                                          (540)
..............scipy.sparse._csparsetools                               (1684)
.............scipy.sparse.dok                                          (442)
.............scipy.sparse.coo                                          (491)
.............scipy.sparse.bsr                                          (469)
.............scipy.sparse.construct                                    (347)
.............scipy.sparse.extract                                      (201)
.............scipy.sparse._matrix_io                                   (204)
.............scipy.sparse.csgraph                                      (399)
..............scipy.sparse.csgraph._laplacian                          (291)
..............scipy.sparse.csgraph._shortest_path                      (574)
...............scipy.sparse.csgraph._validation                        (254)
................scipy.sparse.csgraph._tools                            (388)
..............scipy.sparse.csgraph._traversal                          (353)
..............scipy.sparse.csgraph._min_spanning_tree                  (547)
..............scipy.sparse.csgraph._flow                               (489)
..............scipy.sparse.csgraph._matching                           (431)
..............scipy.sparse.csgraph._reordering                         (493)
...........scipy.linalg._decomp_cossin                                 (299)
.........scipy.special._comb                                           (248)
........scipy.special._logsumexp                                       (220)
........scipy.special.spfun_stats                                      (197)
........scipy.special._ellip_harm                                      (246)
.........scipy.special._ellip_harm_2                                   (391)
........scipy.special._lambertw                                        (256)
........scipy.special._spherical_bessel                                (192)
......scipy.ndimage.measurements                                       (530)
.......scipy.ndimage._ni_label                                         (626)
.......scipy.ndimage.morphology                                        (433)
.....matplotlib.pyplot                                                 (4481)
......matplotlib.colorbar                                              (1113)
.......matplotlib.artist                                               (6686)
........matplotlib.path                                                (733)
.........matplotlib._path                                              (455)
.........matplotlib.bezier                                             (635)
........matplotlib.transforms                                          (2090)
.......matplotlib.collections                                          (14120)
........matplotlib.lines                                               (9444)
.........matplotlib.markers                                            (1036)
.......matplotlib.contour                                              (971)
........matplotlib.ticker                                              (1940)
........matplotlib.font_manager                                        (9561)
.........matplotlib.afm                                                (717)
..........matplotlib._mathtext_data                                    (974)
........matplotlib.text                                                (4234)
.........matplotlib.patches                                            (5807)
.........matplotlib.textpath                                           (382)
..........matplotlib._text_layout                                      (147)
..........matplotlib.dviread                                           (1438)
..........matplotlib.mathtext                                          (3257)
...........PIL                                                         (222)
............PIL._version                                               (172)
...........PIL.Image                                                   (791)
............PIL.ImageMode                                              (115)
............PIL.TiffTags                                               (445)
............PIL._binary                                                (142)
............PIL._util                                                  (138)
............PIL._imaging                                               (837)
............cffi                                                       (193)
.............cffi.api                                                  (368)
..............cffi.lock                                                (154)
..............cffi.error                                               (174)
..............cffi.model                                               (516)
........matplotlib.texmanager                                          (632)
........matplotlib.blocking_input                                      (331)
.........matplotlib.backend_bases                                      (1499)
..........matplotlib.backend_tools                                     (808)
...........matplotlib._pylab_helpers                                   (138)
..........matplotlib.tight_bbox                                        (148)
..........matplotlib.widgets                                           (899)
..........matplotlib.backend_managers                                  (392)
.......matplotlib.gridspec                                             (986)
........matplotlib.tight_layout                                        (163)
........matplotlib._layoutbox                                          (268)
.......matplotlib._constrained_layout                                  (216)
......matplotlib.image                                                 (728)
.......PIL.PngImagePlugin                                              (611)
........PIL.ImageFile                                                  (348)
........PIL.ImagePalette                                               (294)
.........PIL.GimpGradientFile                                          (156)
.........PIL.GimpPaletteFile                                           (145)
.........PIL.ImageColor                                                (205)
.........PIL.PaletteFile                                               (118)
.......matplotlib._image                                               (338)
......matplotlib.style                                                 (157)
.......matplotlib.style.core                                           (7556)
......matplotlib.figure                                                (2843)
.......matplotlib.projections                                          (255)
........matplotlib.axes                                                (142)
.........matplotlib.axes._subplots                                     (7695)
..........matplotlib.axes._axes                                        (6644)
...........matplotlib.category                                         (325)
............matplotlib.units                                           (195)
...........matplotlib.dates                                            (693)
............dateutil.rrule                                             (705)
...........matplotlib.legend                                           (454)
............matplotlib.offsetbox                                       (743)
............matplotlib.container                                       (192)
............matplotlib.legend_handler                                  (499)
...........matplotlib.mlab                                             (397)
...........matplotlib.quiver                                           (381)
...........matplotlib.stackplot                                        (116)
...........matplotlib.streamplot                                       (349)
...........matplotlib.table                                            (1551)
...........matplotlib.tri                                              (188)
............matplotlib.tri.triangulation                               (164)
............matplotlib.tri.tricontour                                  (193)
............matplotlib.tri.tritools                                    (148)
............matplotlib.tri.trifinder                                   (141)
............matplotlib.tri.triinterpolate                              (539)
............matplotlib.tri.trirefine                                   (160)
............matplotlib.tri.tripcolor                                   (116)
............matplotlib.tri.triplot                                     (96)
...........matplotlib.axes._base                                       (1800)
............matplotlib.axis                                            (2414)
.............matplotlib.scale                                          (879)
............matplotlib.spines                                          (306)
...........matplotlib.axes._secondary_axes                             (244)
........matplotlib.projections.geo                                     (540)
........matplotlib.projections.polar                                   (3332)
........mpl_toolkits.mplot3d                                           (606)
.........mpl_toolkits.mplot3d.axes3d                                   (5511)
..........mpl_toolkits.mplot3d.art3d                                   (461)
...........mpl_toolkits.mplot3d.proj3d                                 (119)
..........mpl_toolkits.mplot3d.axis3d                                  (308)
......matplotlib.backends                                              (142)
......matplotlib.backends._macosx                                      (49)
......matplotlib.backends.backend_agg                                  (569)
.......matplotlib.backends._backend_agg                                (299)
......matplotlib.backends.backend_qt5                                  (1578)
.......matplotlib.backends.qt_editor.figureoptions                     (249)
........matplotlib.backends.qt_editor                                  (100)
........matplotlib.backends.qt_compat                                  (429)
.........PyQt5                                                         (680)
.........PyQt5.QtCore                                                  (8153)
..........PyQt5.sip                                                    (211)
.........PyQt5.QtGui                                                   (6925)
.........PyQt5.QtWidgets                                               (9727)
........matplotlib.backends.qt_editor._formlayout                      (543)
.......matplotlib.backends.qt_editor._formsubplottool                  (159)
..pyvista.plotting.lights                                              (362)
.pyvista.core                                                          (172)
..pyvista.core.common                                                  (881)
...pyvista.core.pyvista_ndarray                                        (209)
....vtk.numpy_interface.dataset_adapter                                (817)
.....vtk.numpy_interface                                               (95)
.....vtk.vtkCommonCore                                                 (433)
.....vtk.vtkCommonDataModel                                            (495)
....vtk.vtkCommonKitPython                                             (81)
...pyvista.core.datasetattributes                                      (317)
....vtkmodules.numpy_interface.dataset_adapter                         (761)
.....vtkmodules.numpy_interface                                        (98)
.....vtkmodules.util.numpy_support                                     (150)
...pyvista.core.filters                                                (810)
....pyvista.utilities.cells                                            (174)
....pyvista.core.errors                                                (234)
..pyvista.core.composite                                               (280)
..pyvista.core.grid                                                    (438)
..pyvista.core.objects                                                 (1950)
..pyvista.core.pointset                                                (696)
.pyvista.utilities.misc                                                (150)
.faulthandler                                                          (61)
```
</details>

Turns out that it's mainly due to importing `itkwidgets` and a little bit to the premature import of `matplotlib`.  By moving the imports of these two into the classes that actually use them, we can get the import time down to:
```
time python -c ""import pyvista""

real	0m0.379s
user	0m0.571s
sys	0m0.454s
```

### Future Steps
Half of the remaining time is with `numpy`, and we won't be able to remove that without a substancial rewrite of the entire module, nor would it be worth it as we use `numpy` everywhere and invariably the user would need to import it.

The other half is importing `vtk`.  While we won't be able to fix this in `vtk<9`, we could refactor the way we import vtk and use the new `vtkmodules` such that we only import what we need.  For example, in `vtk=8.x`, importing `vtk` always loads all the modules, but in `vtk=9.x`, you can import individual modules using `vtkmodules.`.  Meaning if you never intend to use `vtkmodules.vtkDomainsChemistry`, there's no reason to ever load it.

This will be proposed in a future PR as I think it could be useful for more than just import times.  For anyone who freezes `pyvista`, we end up copying all the vtk libraries, which is quite unnecessary if they are never used in the program/script.",1,1,[]
209,570651498,1154,92974124,2021-02-09 22:09:02,2021-02-09 23:58:04,closed,fix typo,"### Overview

Just fixed a typo and improved word choice on contribution document.
",1,1,[]
210,570560330,1153,92974124,2021-02-09 19:38:59,2021-02-12 04:04:21,closed,add origin kwarg to plotter.add_legend,"### Overview

This simple PR adds a kwarg to `BasePlotter.add_legend` 
It was recommend in #1067, resolves #1067 
",3,2,[]
211,570322905,1152,92974124,2021-02-09 14:02:14,2021-02-10 18:13:25,closed,Add render=True in add_point_labels,"### Overview

This PR only adds the `render` parameter in the `add_point_labels` method.
",1,1,[]
212,569938848,1151,92974124,2021-02-09 01:41:13,2021-02-10 18:14:28,closed,Expose start_xvfb,Resolve #1125,1,1,[]
213,569922535,1150,92974124,2021-02-09 00:55:06,2021-02-15 05:29:57,closed,Add option to hide plane widget vector,Resolve #908 ,14,6,[]
214,569782174,1149,92974124,2021-02-08 20:39:10,2021-02-16 18:51:43,closed,Fix and update some sphinx docs,"A few sphinx references and links were broken. Along the way I also touched up the glyph table example a bit.

Changes:
  * Fix the syntax of two links in https://github.com/adeak/pyvista/blob/17f6d5921cbc45c59dc6bd69f681efdfe303b299/docs/plotting/notebook_plotting/itk_plotting.rst, changing to named links. These were broken: https://docs.pyvista.org/plotting/notebook_plotting/itk_plotting.html 
  * In the same file change ""thanks to thewtex"" to ""thanks to `@thewtex`"" (code markdown only here to break a possible ping in this PR) to make it more obvious that this is a github handle
  * There was a duplicate ref in https://github.com/adeak/pyvista/blob/17f6d5921cbc45c59dc6bd69f681efdfe303b299/examples/01-filter/glyphs_table.py which I renamed to resolve
  * There was also some text in that example duplicating the main glyph example. I've removed it and rephrased the example's text a bit, along with fixing the explanation of how the ``indices`` keyword behaves.
  
Questions:
  * perhaps ""`@thewtex`"" in `docs/plotting/notebook_plotting/itk_plotting.rst` should be spelled out with a full name instead?
  * the binder link in the same file seems to be broken, but I couldn't figure out if we have an appropriate replacement. Either the link should be updated or the whole sentence removed.",3,3,[]
215,568559119,1148,92974124,2021-02-05 19:17:15,2021-02-06 19:50:20,closed,Fix Binary Writer,"### Add additional tests for binary writer

We've been adding binary writer checks in a piecemeal manner.  This PR adds support for writing STL and *.vtp files along with checking if the files written are binary or ASCII.

I tried pushing to #1147, but there was a problem with the `gh` client and I ended up just making a new branch.  I've been able to include your commit, so you'll be a partial author of this PR as well.

Resolves #1146 ",2,3,[]
216,568169670,1147,92974124,2021-02-05 07:52:44,2021-02-05 21:31:23,closed,Enable saving mesh in binary stl files.,"### Overview
Enable saving mesh in binary stl file.

resolves #1146 




",3,1,[]
217,567968760,1145,92974124,2021-02-04 22:58:20,2021-02-10 22:12:56,closed,Partially add type hints to /core/,"Add type hints to common.py, composite.py, datasetattributes.py, pointset.py

Add VectorArray, Number, Color type aliases

Add mypy/typing extensions to requirements_docs.txt

",6,64,[]
218,567073569,1144,92974124,2021-02-03 19:09:58,2021-02-04 05:22:27,closed,fix/conda dep,"PR to update our `release/0.28` branch with:
- add transforms3d (#1142)
- version bump to 0.28.1

",1,2,[]
219,567006258,1143,92974124,2021-02-03 17:23:55,2021-02-04 06:37:24,closed,Add pickle support to DataObject,"### Overview

Adds simple pickle support to DataObject via `__getstate__` and `__setstate__`.

```python
import pyvista
from pyvista import examples

grid = pyvista.UnstructuredGrid(examples.hexbeamfile)
grid_2 = pickle.loads(pickle.dumps(grid))
```

It also enables DataObjects to be used in parallel workflows, for example, in this workflow which clips a dataset three ways in parallel using `concurrent.futures`. All of the deserialized objects are copies, so this requires N-times memory.

```python
import concurrent.futures as cf
import numpy as np

import pyvista
from pyvista import examples

m = examples.load_airplane()
m.cell_arrays['cell'] = np.ones((m.n_cells, 1))

def clip_mesh(mesh, normal):
    return mesh.clip(normal=normal)

p = cf.ProcessPoolExecutor()
futures = [p.submit(clip_mesh, m, normal) for normal in ('x', 'y', 'z')]
results = [f.result() for f in futures]

p = pyvista.Plotter(shape=(1, 3))
for i in range(3):
    p.subplot(0, i)
    p.add_mesh(results[i])
p.show()

```
![image](https://user-images.githubusercontent.com/2186528/106773312-c87d9b80-65f5-11eb-8666-9f2fe9a31869.png)

### Details

The implementation is similar to the one described in https://github.com/pyvista/pyvista-support/issues/59. As @banesullivan , I also encountered the issue when trying to serialize to binary; in this PR the serialization medium is still unfortunately an ASCII string. At least one other person (see https://stackoverflow.com/questions/38747801/) has run into this binary issue, so perhaps this is something which needs to be fixed on the VTK side.

ActiveArrayInfo, formerly a `namedtuple`, is rewritten as a class to support serialization because the FieldAssociation class (stored in attributes of ActiveArrayInfo) uses VTK enums which are not serializable. `namedtuple` cannot be inherited in a normal way, so legacy support for `__getitem__`, `__setitem__`, `__repr__`, `__iter__` is added by means of a `namedtuple` built on-the-fly. Perhaps there's a better way to do this...
",4,9,[]
220,566938769,1142,92974124,2021-02-03 15:50:08,2021-02-03 19:06:03,closed,add dep to environment.yml,"### Missing hard requirement in `environment.yml`

Forgot to add in the `transforms3d` requirement in our conda enviornment yml.  This PR patches that and will be merged to `release/0.28` as well.

See:
https://github.com/conda-forge/pyvista-feedstock/pull/38

Resolves #1141
",1,1,['deployment']
221,566077489,1137,92974124,2021-02-02 16:23:52,2021-02-03 15:51:24,closed,Reimplement Light.copy to get around VTK8.1 bug,"### Overview

The original `Light.copy()` implementation relied on `vtkLight.DeepCopy()` and `vtkLight.ShallowClone()`. Since the former was buggy in VTK < 8.2 we now reimplement it from scratch.

I changed so that we always copy manually. I figured it might not be worth the complexity to branch based on VTK version (especially considering testability).",7,3,[]
222,565363607,1134,92974124,2021-02-01 17:42:07,2021-02-01 17:57:06,closed,fix image regression,"### Fix image regression

Image regression has been broken for quite some time, probably since the last minor patch.  This PR patches the regression testing, adds additional tests to ensure the testing works, and fixes `add_background_image`, which was broken due to the `pyvista.Camera` class.

Resolves #1132
",5,1,[]
223,565284081,1133,92974124,2021-02-01 15:44:56,2021-03-07 23:17:22,closed,Create an explicit structured grid,"### Overview

This pull request introduces the Explicit Structured Grid, available in VTK 9:
https://blog.kitware.com/introducing-explicit-structured-grids-in-vtk-and-paraview/

### Details

- Add `ExplicitStructuredGrid` to `pointset.py`
- Add `UnstructuredGrid.cast_to_explicit_structured_grid` to `pointset.py`
- Add `load_explicit_structured` to `examples.py`
- Add `create-explicit-structured-grid.py`
- Update `Common.cell_points` in `common.py`

### Examples

[examples.zip](https://github.com/pyvista/pyvista/files/5904754/examples.zip)

#### 1. Load an explicit structured grid:

```python
import pyvista as pv

grid = pv.ExplicitStructuredGrid('unisim.vtu')
grid.plot(color='w', show_edges=True, show_bounds=True)
```

![image](https://user-images.githubusercontent.com/1608652/106474492-bd0a6300-6483-11eb-8f8a-c11871af259c.png)

#### 2. Show the hidden cells:

```python
import pyvista as pv

grid = pv.ExplicitStructuredGrid('unisim.vtu')
grid.show_cells()
grid.plot(color='w', show_edges=True, show_bounds=True)
```

![image](https://user-images.githubusercontent.com/1608652/106473484-939d0780-6482-11eb-89ce-4172e4feb0ce.png)

#### 3. Compute the faces connectivity flags array:

```python
import pyvista as pv

grid = pv.ExplicitStructuredGrid('unisim.vtu')
grid.compute_connectivity()
grid.plot(scalars='ConnectivityFlags', show_edges=True)
```

![image](https://user-images.githubusercontent.com/1608652/106475076-4fab0200-6484-11eb-9c3a-19b996da35b6.png)

#### 4. Compute an array with the number of connected cell faces:

```python
import pyvista as pv

grid = pv.ExplicitStructuredGrid('unisim.vtu')
grid.compute_connections()
grid.plot(scalars='number_of_connections', show_edges=True)
```

![image](https://user-images.githubusercontent.com/1608652/106475645-ed9ecc80-6484-11eb-9582-af1b62e8226e.png)

#### 5. Get the neighbors of a cell:

```python
import pyvista as pv

ind = 1824
grid = pv.ExplicitStructuredGrid('unisim.vtu')

plotter = pv.Plotter()
plotter.add_axes()

cell = grid.extract_cells(ind)
plotter.add_mesh(cell, color='lightcoral', show_edges=True, render=False)

ind = grid.neighbors(ind, rel='geometric')
cells = grid.extract_cells(ind)
plotter.add_mesh(cells, color='white', show_edges=True, render=False)

cells = cells.merge(cell)
cells = cells.cell_centers()
ind = cells.cell_arrays['vtkOriginalCellIds']
coords = grid.cell_coords(ind)
plotter.add_point_labels(cells.points, coords, always_visible=True)

plotter.show()
```
![image](https://user-images.githubusercontent.com/1608652/106477974-80d90180-6487-11eb-96a9-a93d0e0fe444.png)



",16,12,[]
224,565244146,1131,92974124,2021-02-01 14:52:43,2021-02-01 19:59:21,closed,Clean up after Light PR merge,"There were a few things left needing cleanup after https://github.com/pyvista/pyvista/pull/1040/:

* typo fixes
* removal of lighting.png cached image (obsolete)
* removal of lighting_disable_3_lights.png cached image (obsolete)
* addition of a mesh to `test_lighting_init_none`
* some rearranging and constraining of Plotter tests",5,3,[]
225,564879133,1129,92974124,2021-02-01 05:57:15,2021-02-01 06:45:45,closed,Allow conda CI failure,"### Allow failure on conda build

Conda CI runs have always been flaky.  I'm not sure if this is due to the specific VTK binaries packaged with the build or the conda enviornment, but I sometimes see flaky failures with conda that are not reproduceable on my local linux env.

For the time being, I'm allowing failures on conda for the main unit tests.  These will still result in notifications within Azure devops, but won't fail the build 
",2,1,[]
226,564580599,1127,92974124,2021-01-31 04:28:31,2021-02-01 01:59:05,closed,Transforms via transform3d,"### Overview

`DataSetFilters.transform(tf)` takes a 4x4 transformation matrix, but there wasn't a nice way inside PyVista to generate such matrices. A method for generating rotation matrices lived in `utilties.helpers.axis_rotation`, but only about x/y/z axes.

This PR adds code to generate transformation matrices via https://github.com/matthew-brett/transforms3d, (new dependency). This library has methods to generate a variety of 3x3 and 4x4 transformations (axis-angle/Euler/Tait-Bryan rotations) as well as reflections, shears, zooms, and more.

In this PR I have wrapped only axis/angle rotations and reflections in PyVista-friendly form (see `utilities.transformations`).

In addition, this totally refactors `DataSetFilters.reflection()` which was added very recently in #1122. I wanted to open this PR ASAP since I don't think the official 0.28 has been cut yet. The new version of the reflection filter takes in a normal and (optional) point which define the reflection plane. The input object is either modified in place, or a reflected object of the same class as the input is returned. Given this behavior, the `copy` option of the previous filter is gone, as it doesn't make sense to try to combine two disconnected structured grids into one.

This is not a knock on the previous implementation, but rather on `vtkReflectionFilter` itself. It just doesn't make a whole lot of sense to me. Why only return unstructured grids? What about structured, rectilinear, etc.?

@rodrigomologni what are your thoughts on this?

### Details

Other notes:
- The matrix multiplication that previously lived in `Common.transform()` is moved to `utilties.transformations.apply_transformation_to_points()`. A single call to `matmul` is used. @akaszynski 
- I don't know how deep the documentation for public methods needs to go. Are utilities documented?

",5,16,[]
227,564565912,1126,92974124,2021-01-31 01:46:36,2021-02-01 05:08:50,closed,✨ Add extrude_rotate filter,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
This method extrude rotate PolyData

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->
![poly](https://user-images.githubusercontent.com/7513610/106372270-66345900-63b1-11eb-8f26-01ebb08e8a9a.png)

### Details

- Script of pyvista is following.

```Python
import pyvista

pyvista.set_plot_theme(""document"")
resolution = 4
line = pyvista.Line(pointa=(0, 0, 0), pointb=(1, 0, 0))
poly = line.extrude_rotate(resolution=resolution)
plotter = pyvista.Plotter(shape=(2, 1))
plotter.subplot(0, 0)
plotter.add_text(""Before"", font_size=30)
plotter.add_mesh(line, color=""tan"", show_edges=True)
plotter.add_mesh(
    pyvista.PolyData(line.points),
    color=""red"",
    point_size=10,
    render_points_as_spheres=True,
)
plotter.subplot(1, 0)
plotter.add_text(""After"", font_size=30)
plotter.add_mesh(poly, color=""tan"", show_edges=True)
plotter.add_mesh(
    pyvista.PolyData(poly.points),
    color=""red"",
    point_size=10,
    render_points_as_spheres=True,
)
plotter.show(screenshot=""poly.png"", cpos=""xy"")
```
Reference from https://lorensen.github.io/VTKExamples/site/Python/Modelling/Bottle/",3,4,[]
228,563773211,1124,92974124,2021-01-29 06:37:27,2021-01-30 02:51:55,closed,Fix PLYWriter only writing binary regardless of use_binary argument,"### Overview

Saving a mesh to a ply file and setting use_binary to False will still write a binary file.
`mesh.save(""file.ply"", use_binary=False)`

### Details

- `set_vtkwriter_mode` function only looks for `vtk.vtkXMLWriter` and `vtk.vtkDataWriter` and does not set the mode if the writer is not either of these types. vtkPLYWriter does not inherit from vtkDataWriter, despite have the same methods for setting the write mode.
- This adds vtkPLYWriter as a type to look for and sets the mode as per a vtkDataWriter.
- It is possible other writers also experience this bug, but I have only checked/tested vtkPLYWriter here.

",4,6,['bug-fix']
229,563560414,1122,92974124,2021-01-28 21:01:27,2021-01-29 06:24:19,closed,Add reflect filter and other methods,"### Overview

This pull request includes methods to:

- reflect a dataset object across a plane
- return the actual size of a dataset object
- copy the structure (geometry and topology) or the data attributes of a dataset object
- return the number of points, the points, the bounding box or the type of a cell

### Details

This pull request includes the following methods:

- `DataSetFilters.reflect` to reflect a dataset object across a plane
- `DataObject.actual_memory_size` to return the actual size of a dataset object
- `DataObject.copy_structure` to copy the structure (geometry and topology) of a dataset object
- `DataObject.copy_attributes` to copy the data attributes of a dataset object
- `Common.cell_n_points` to return the number of points in a cell
- `Common.cell_points` to return the points of a cell
- `Common.cell_bounds` to return the bounding box of a cell
- `Common.cell_type` to return the type of a cell

Also includes:

- tests for these methods (see `tests/test_common.py`)
- an example for the reflect method (see `examples/01-filter/reflect.py`)

",6,6,[]
230,563425884,1121,92974124,2021-01-28 17:32:36,2021-01-28 18:21:48,closed,"New PR for ""Add reflect filter and other methods""",See #1107 ,2,14,[]
231,563020491,1118,92974124,2021-01-28 06:38:23,2021-02-03 08:03:38,closed,Release 0.28,"### Release 0.28

The last release of `pyvista` was 0.27.0 back in 8 November.  While work was somewhat light over the holidays, it's picked up recently and I think it's time for a minor release given the recent bug-fixes and features.  There's still room for additional features, but I'd like it out soon, ideally this Sunday, but I'm fine with pushing it back further.

As for the current pending PRs, I've moved some milestone items to 0.29, which I've set tentatively to ~28 Feb~ 12 Mar.

For all who contributed, thank you!  I'm always amazed at the number of stars we've accumulated and the number of people who contribute.  While I'm not sure about the accuracy of the statistics, [pypistats](https://pypistats.org/packages/pyvista) reports around 7k downloads for last month.

---


### Release Candidate Testing
@pyvista/developers and any willing testers, the latest release candidate package can be downloaded from pypi with:

```
pip install pyvista==0.28.0rc3
```

See:

https://pypi.org/project/pyvista/0.28.0rc3/

I really like how ``numpy`` is putting out pre-release wheels, and it's a something we should implement as well.


### Proposed release notes:

Please let me know if anything here needs to be updated.

---

# Release 0.28: Minor API Changes and Various Bug-fixes

This release, ``pyvista==0.28.0``, is a minor release that captures a variety of bug-fixes and API additions.

#### Contributors (alphabetical)

- @adeak
- @akaszynski
- @banesullivan
- @Boorhin
- @dcbr
- @GuillaumeFavelier
- @JevinJ
- @Keou0007
- @larsoner
- @mglesser
- @nickvazz
- @rodrigomologni
- @sampotter
- @shakasaki
- @Sinaxist
- @Spectre5
- @tkoyama010
- @whophil
- @yngvem

#### New Features

- Add table of glyphs option to DataSetFilters.glyph (#776)
- Allow picking in notebook with ipyvtk (#996)
- Rename trans_from_matrix to array_from_vtkmatrix, implement inverse (#1110)
- Add slicing, concatenation to StructuredGrid (#1106)
- 🚩 Add option level and quads to function Box (#1103)
- ✨ Add Pyramid function (#1102)
- Add make_tri_mesh helper (#1101)
- Add PolyData intersection filter (#1091)
- Add read_plot3d, other minor reader improvements (#1081)
- Add parallel projection and parallel scale properties to Renderer and BasePlotter (#1021)
- Add Light class pythonizing vtkLight (#1040)
- Add reflect filter and other methods (#1122)
- Transforms via transform3d (#1127)

#### Documentation

- use pypandoc for better jupyter notebooks from the gallery (#1017)
- Doc/move around (#1000)
- improve camera docs and implementation (#1111)
- :pencil2: Fix typo of docstring (#1104)
- add tuple as type hint for vectors (#1094)
- fix copy button (#1063)
- feat/pyinstaller docs (#1037)

#### API Changes

- Use render window size (#995)
- Add variable length density to voxelize (#1100)
- 📷 Add camera object (#945)
- Add style parameter in text slider widgets (#1093)

#### Bug Fixes

- fix/threshold args (#1014)
- Fix small notation shaking (#1008)
- Fix subplotting with ipyvtk_simple (#994)
- Update hypothesis requirement 5.8.0->6.0.3 (#1115)
- Replace ""is 0"" comparison with ""== 0"" in filters.py (#1114)
- Release graphics resources (#1113)
- Ensure that views of pyvista_ndarray remain associated (#1108)
- Fixed disk geometry to rotate and translate properly (#1061)
- Fix double blocking of `plotter.show` in script mode on Windows (#1105)
- Fix ""Hide points in add_point_labels is not working"" (#1092)
- Fix window closing immediately (#1048)
- Fix/extract points (#1043)
- Fix UnstructuredGrid init from arrays for VTK 8.90 (#1039)
- Fix Cell Types Helper (#1028)
- Add missing no_itk skip to itk polydata point plotting test (#1032)
- Fix `add_arrows` (#1011)
- Bugfix for #1053: `Plotter.update` fails with `interactive_update=True` if `auto_close=False` is not specified (#1056)
- patched edge case for empty mesh (#1030)
- force rewrite faces when flipping normals (#1034)
- fix/default rcParams (#1015)

#### Miscellaneous/Testing

- ENH: Reduce size (#1019)
- Remove Alpha Channel on Image Regression (#1006)
- Clean up example downloads (#1005)
- removing py3.9 check (#1003)
- Image Regression (#998)
- Disable conda 8.1 testing and update agents (#1109)
- write frame needs update (#1099)
- do not import pandas on __init__ (#1029)
",6,7,['release']
232,562997781,1117,92974124,2021-01-28 05:48:19,2021-01-28 05:48:49,closed,"Revert ""Add reflect filter and other methods""",Tests weren't being reported right and I jumped the gun on the merge of #1107.,0,1,[]
233,562703209,1115,92974124,2021-01-27 18:23:10,2021-01-27 23:31:33,closed,Update hypothesis requirement 5.8.0->6.0.3,"### Overview

#1080 uses HealthCheck.function_scoped_fixture but this does not exist in the requirements.txt hypothesis version. This updates the requirement to latest 6.0.3.

",1,1,[]
234,562172830,1114,92974124,2021-01-27 01:58:29,2021-01-27 03:44:58,closed,"Minor fix: replace ""is 0"" comparison with ""== 0"" in filters.py","There was a buggy comparison in the docstring of `filters.PolyDataFilters.fill_holes()` that was raising a warning in doctests:
```py
assert edges.n_cells is 0
```

This works in CPython as an implementation detail (not that it's likely that alternative Python implementations don't cache 0). The warning is [new in Python 3.8](https://docs.python.org/3.8/whatsnew/3.8.html#changes-in-python-behavior) (see also https://bugs.python.org/issue34850):
```
SyntaxWarning: ""is"" with a literal. Did you mean ""==""?
```",4,1,[]
235,561897673,1113,92974124,2021-01-26 16:21:07,2021-01-26 18:07:25,closed,Release graphics resources in EDL,"This PR fixes a bug reported in https://github.com/pyvista/pyvistaqt/issues/71

So with this, it's possible to enable and disable EDL without the following:

```
2020-11-09 14:18:38.460 (  18.067s) [                ]      vtkEDLShading.cxx:97     ERR| vtkEDLShading (0000021B60885D80): FrameBufferObject should have been deleted in ReleaseGraphicsResources().
2020-11-09 14:18:38.461 (  18.067s) [                ]      vtkEDLShading.cxx:102    ERR| vtkEDLShading (0000021B60885D80): ColorTexture should have been deleted in ReleaseGraphicsResources().
2020-11-09 14:18:38.461 (  18.068s) [                ]      vtkEDLShading.cxx:107    ERR| vtkEDLShading (0000021B60885D80): DepthTexture should have been deleted in ReleaseGraphicsResources().
2020-11-09 14:18:38.462 (  18.069s) [                ]      vtkEDLShading.cxx:112    ERR| vtkEDLShading (0000021B60885D80): FrameBufferObject should have been deleted in ReleaseGraphicsResources().
2020-11-09 14:18:38.463 (  18.070s) [                ]      vtkEDLShading.cxx:117    ERR| vtkEDLShading (0000021B60885D80): ColorTexture should have been deleted in ReleaseGraphicsResources().
2020-11-09 14:18:38.463 (  18.070s) [                ]      vtkEDLShading.cxx:122    ERR| vtkEDLShading (0000021B60885D80): FrameBufferObject should have been deleted in ReleaseGraphicsResources().
2020-11-09 14:18:38.464 (  18.071s) [                ]      vtkEDLShading.cxx:127    ERR| vtkEDLShading (0000021B60885D80): ColorTexture should have been deleted in ReleaseGraphicsResources().
2020-11-09 14:18:38.465 (  18.072s) [                ]      vtkEDLShading.cxx:132    ERR| vtkEDLShading (0000021B60885D80): ColorTexture should have been deleted in ReleaseGraphicsResources().
```

With `pyvista.Plottter`:

https://user-images.githubusercontent.com/18143289/105871902-11cc5a80-5ffa-11eb-87ad-43c708d7e4d7.mp4

<details>

```py
import pyvista
from pyvista import examples

nefertiti = examples.download_nefertiti()
point_cloud = examples.download_lidar()

plotter = pyvista.Plotter(window_size=(800, 600))
plotter.add_mesh(nefertiti, color=True)


def toggle_edl(state):
    if state:
        plotter.enable_eye_dome_lighting()
    else:
        plotter.disable_eye_dome_lighting()


plotter.add_checkbox_button_widget(toggle_edl, value=False, color_on='green')
plotter.show()
```
</details>

With `pyvistaqt.MultiPlotter`:

https://user-images.githubusercontent.com/18143289/105871889-0d07a680-5ffa-11eb-9d71-e8e39bf2baf7.mp4

<details>

```py
from functools import partial
import pyvistaqt as pvqt
from pyvista import examples

nefertiti = examples.download_nefertiti()
point_cloud = examples.download_lidar()

mp = pvqt.MultiPlotter(shape=(1, 2), window_size=(800, 600))


def toggle_edl(state, idx):
    if state:
        mp._plotters[idx].enable_eye_dome_lighting()
    else:
        mp._plotters[idx].disable_eye_dome_lighting()


plotter = mp.select((0, 0))
plotter.add_mesh(nefertiti, color=True)
plotter.add_checkbox_button_widget(partial(toggle_edl, idx=0), value=False)

plotter = mp.select((0, 1))
plotter.add_mesh(point_cloud, color=True)
plotter.add_checkbox_button_widget(partial(toggle_edl, idx=1), value=False)

mp.show()
```

</details>

Closes pyvista/pyvistaqt#71",3,1,['bug-fix']
236,561362742,1112,92974124,2021-01-25 21:02:46,2021-02-01 21:07:59,closed,"Add mypy, type hints to common.py","

TODO: 

- [x] Fix the cause of CI/tests failing, I think it's a circular dependency or something like that.
- [x] Fix style errors.
- [x] Choose a type checker pytype, mypy, etc. @akaszynski @banesullivan?
- [x] Resolve marked TODO's(in code) and verify correct types were chosen.
- [x] ~~I started this PR using typing for my types, but these are depreciated after 3.9. These should be replaced with collections versions.~~ Collections types aren't usable previous to 3.9",12,27,[]
237,560867235,1111,92974124,2021-01-25 07:45:07,2021-01-25 16:04:26,closed,improve camera docs and implementation,"### Improve Camera Docs

When running the doc build from scratch, I found that the `orbit.py` example was failing as we don't fully test all the methods in `renderer.py` and we were attempting to call rather than use the setter in:
```py
self.camera.position = scale_point(self.camera, point, invert=False)
```

This PR also:
- Adds examples to the documentation strings.
- Implements ``up`` as a property/setter.
- Breaks up the unit tests to individual tests.

",2,2,[]
238,560715422,1110,92974124,2021-01-25 00:52:19,2021-01-25 18:21:46,closed,"Rename trans_from_matrix to array_from_vtkmatrix, implement inverse","### Overview

There's a helper function `trans_from_matrix` which converts vtk matrices to numpy arrays. I need the inverse functionality for a pull request, which this PR is meant to address, along with some clean-up attempts and a deprecation.

### Details

The status quo is that we have `trans_from_matrix` in `pyvista/utilities/helpers.py`. There are a few things I noted about this:

  * The function doesn't have an inverse (array to vtk matrix).
  * The function is listed under [""General Utilities""](https://docs.pyvista.org/utilities/utilities.html#module-pyvista.utilities) in the docs.
  * The function is open to bugs, because it assumes 4x4 vtk matrices but will run with 3x3 vtk matrices as well. This is a problem, because vtk will happily access out-of-bounds memory with `vtkMatrix3x3.GetElement()`. (A quick way to segfault an interpreter is `import vtk; vtk.vtkMatrix3x3().SetElement(1000_000, 1000_000, 1)`.).
  * The function doesn't have any direct tests. This might be because this function is probably meant for internal use, but the previous bullet suggests that tests would be helpful. (The function _is_ covered by tests written for other functions.)
  * The function has a suboptimal name especially if we want to implement its inverse.

Considering all of the above my suggestion (this PR's initial state) is the following:

  * Rename `trans_from_matrix` to `array_from_vtkmatrix`. I think just ""matrix"" would be insufficient, because numpy matrices are still a thing. I considered being pedantic and using `ndarray_from_vtkmatrix`, but the inverse `vtkmatrix_from_ndarray` would actually accept any array-likes (for instance lists of lists), in which case the more pedantic name would be more misleading. Even though there are other kinds of arrays, even in vtk, but to me they seem to be semantically distant from this use case, which is why I suggested just `array` and not `ndarray`.
  * Deprecate the old name so that it raises a `DeprecationError`.
  * Implement `vtkmatrix_from_array` as an inverse which accepts any array-like as input.
  * Make both functions automatically convert between `(3, 3)`-shaped arrays <-> `vtkMatrix3x3` and `(4, 4)`-shaped arrays <-> `vtkMatrix4x4`.
  * Move both functions from under ""General Utilities"" to [""Object Conversions""](https://docs.pyvista.org/utilities/utilities.html#object-conversions). It seems to me that these functions are very similar to, say, `pyvista.numpy_to_texture()` which is already there.
  * Write tests for both functions.

What might be a further improvement but I haven't done it yet:
  * Move the functions from `pyvista/utilities/helpers.py` to `pyvista/utilities/features.py`. The former's module docstring says ""_Supporting functions for polydata and grid objects_"", the latter's ""_Module containing geometry helper functions_"". The former is technically correct for now, but my use case for the inverse function does not concern polydata nor grids. The `features.py`, on the other hand, already contains `transform_vectors_sph_to_cart` which is slightly similar (it doesn't convert between two coding representations, but rather between two mathematical representations).",4,3,[]
239,560645260,1109,92974124,2021-01-24 17:50:28,2021-01-24 20:25:48,closed,Disable conda 8.1 testing and update agents,"### Overview

This PR disables the LinuxConda 8.1 testing step.  It keeps hanging on Azure and it's an older version of VTK.  We still cover vtk 8.* with 8.2
",1,4,[]
240,560541162,1108,92974124,2021-01-24 04:06:03,2021-01-24 17:12:09,closed,Ensure that views of pyvista_ndarray remain associated,"### Overview

Views of `pyvista_ndarray` were not remaining associated with the VTKObject of their parents, so setting elements of the views did not call `Modified()` on the parent VTKObject, even though the data in the array was being modified. This PR fixes the issue by modifying `pyvista_ndarray.__array_finalize__`.

Annoyingly, a single element slice does not return an array, so `my_array[1, 1] = 5`) will _not_ call the `Modified()` method of the associated VTK object of `my_array`. I added a skipped test to demonstrate this.

I don't fully understand the design choices for `pyvista_ndarray`, so somebody with more expertise in this please feel free to chime in.


",3,4,[]
241,560516476,1107,92974124,2021-01-24 00:07:25,2021-01-28 05:28:39,closed,Add reflect filter and other methods,"### Overview

This pull request includes methods to:

- reflect a dataset object across a plane
- return the actual size of a dataset object
- copy the structure (geometry and topology) or the data attributes of a dataset object
- return the number of points, the points, the bounding box or the type of a cell

### Details

This pull request includes the following methods:

- `DataSetFilters.reflect` to reflect a dataset object across a plane
- `DataObject.actual_memory_size` to return the actual size of a dataset object
- `DataObject.copy_structure` to copy the structure (geometry and topology) of a dataset object
- `DataObject.copy_attributes` to copy the data attributes of a dataset object
- `Common.cell_n_points` to return the number of points in a cell
- `Common.cell_points` to return the points of a cell
- `Common.cell_bounds` to return the bounding box of a cell
- `Common.cell_type` to return the type of a cell

Also includes:

- tests for these methods (see `tests/test_common.py`)
- an example for the `reflect` method (see `examples/01-filter/reflect.py`)",7,14,[]
242,560491523,1106,92974124,2021-01-23 21:22:43,2021-01-25 07:48:15,closed,"Add slicing, concatenation to StructuredGrid","### Overview

Make working with `StructuredGrid` more natural.
- Add slicing via by implementing `StructuredGridFilters.extract_subset()`, calling vtkExtractGrid. Make this accessible from `StructuredGrid.__getitem__` (also retains legacy behavior)
    - Note that subsets are not views to the original data, which may be confusing if you expect everything to behave NumPy-like.
- Add concatenation by implementing `StructuredGridFilters.concatenate()`, ~~calling vtkStructuredGridAppend~~.

### Details

Demonstration of new features

```python
from pyvista import examples

structured = examples.load_structured()

# add some point data
structured.point_arrays.update({'my_field': structured.z.ravel(order='F')})

# this still works
structured['my_field']

# but you can also specify a numpy-like slice, ""basic"" indexing only
# here we split the grid into two
voi_1 = structured[:40, :40, :]
voi_2 = structured[40:, 40:, :]

# rejoin it
joined = voi_1.concatenate(voi_2)

print(structured)
print(joined)
```

Outputs:
```
StructuredGrid (0x14268e050)
  N Cells:	6241
  N Points:	6400
  X Bounds:	-1.000e+01, 9.750e+00
  Y Bounds:	-1.000e+01, 9.750e+00
  Z Bounds:	-1.000e+00, 1.000e+00
  Dimensions:	80, 80, 1
  N Arrays:	1

StructuredGrid (0x1426a1a60)
  N Cells:	6241
  N Points:	6400
  X Bounds:	-1.000e+01, 9.750e+00
  Y Bounds:	-1.000e+01, 9.750e+00
  Z Bounds:	-1.000e+00, 1.000e+00
  Dimensions:	80, 80, 1
  N Arrays:	1
```


",10,10,[]
243,560436017,1105,92974124,2021-01-23 15:08:04,2021-01-23 16:57:18,closed,Fix double blocking of `plotter.show` in script mode on Windows,"### Overview

Resolves #1078.
After closer investigation I was able to reproduce #1018 while in an interactive (native) python shell, an IPython shell or a Jupyter notebook on Windows 10. However the fix in #1049 resulted in a double blocking of the plotter window while executed from a script (see example code in #1078).


### Details

This PR adds an extra check to see whether we are running on Windows in interactive mode. In that case the fix in #1049 is applied. Otherwise (e.g. in script mode on Windows) the old behaviour is retained, solving the double blocking.

",2,1,[]
244,560376832,1104,92974124,2021-01-23 08:42:12,2021-01-23 17:35:41,closed,✏️ Fix typo of docstring,"Return to Returns

### Overview

<!-- Please insert a high-level description of this pull request here. -->
:pencil2: Fix typo of docstring

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- Found in #1102 .
",1,1,[]
245,560338462,1103,92974124,2021-01-23 07:14:07,2021-01-23 18:25:55,closed,🚩 Add option level and quads to function Box,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
:triangular_flag_on_post: Add option level and quads to function Box. This also replace the Cube to vtkTessellatedBoxSource in Box function.
```python
>>> import pyvista
>>> bounds = [-10.0, 10.0, 10.0, 20.0, -5.0, 5.0]
>>> level = 3
>>> quads = True
>>> mesh1 = pyvista.Box(bounds, level, quads)
>>> mesh1.plot()
```
![mesh2](https://user-images.githubusercontent.com/7513610/105571747-df222800-5d95-11eb-91bb-405f0de8b11e.png)

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

This Pull Request is reproduce the example. 
https://lorensen.github.io/VTKExamples/site/Python/GeometricObjects/TessellatedBoxSource/

",2,2,[]
246,560299630,1102,92974124,2021-01-23 02:19:55,2021-01-23 17:03:38,closed,✨ Add Pyramid function,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
:sparkles: Add Pyramid function

```python
    >>> import pyvista
    >>> pointa = [1.0, 1.0, 0.0]
    >>> pointb = [-1.0, 1.0, 0.0]
    >>> pointc = [-1.0, -1.0, 0.0]
    >>> pointd = [1.0, -1.0, 0.0]
    >>> pointe = [0.0, 0.0, 1.0]
    >>> pyramid = pyvista.Pyramid([pointa, pointb, pointc, pointd, pointe])
    >>> pyramid.plot()
```
![pyramid](https://user-images.githubusercontent.com/7513610/105572525-fe6f8400-5d9a-11eb-8f49-2910c6972cc0.png)

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->

### Details

This Pull Request is reproduce the example. 
https://lorensen.github.io/VTKExamples/site/Python/GeometricObjects/Pyramid/

",3,6,[]
247,559952424,1101,92974124,2021-01-22 13:07:21,2021-01-23 03:51:51,closed,Add make_tri_mesh helper,"### Overview

Add a helper method for the common use case of building a `pyvista.PolyData` from an `Nx3` point array and `Mx3` face array. This is mentioned in https://github.com/pyvista/pyvista/issues/1097.

### Details

Pretty simple: take some pain out of manually putting together the vtk-style cell array when we know that our mesh consists only of triangles, since doing this kind of thing is so common.",2,4,[]
248,559800211,1100,92974124,2021-01-22 08:24:58,2021-01-24 16:41:59,closed,Add variable length density to voxelize,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Add non-uniform density to `pyvista.voxelize`.



<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
Mentioned potentially implementing in in this issue: https://github.com/pyvista/pyvista-support/issues/338#issuecomment-764265944

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- Allows for `density` in `pyvista.voxelize` to be `float/int` or `list/set/tuple` of `float/int` for non uniform density.

Example similar to [test](https://github.com/pyvista/pyvista/pull/1100/files#diff-b259521308ad9b898000f4fea3040c6196bee7fd89e8608a85606e86c8c2c70bR172-R175)
```python
import pyvista
import pyvista.examples as ex

mesh = pyvista.PolyData(ex.load_uniform().points)
vox = pyvista.voxelize(mesh, density=[0.5, 0.3, 0.2])
```

",4,3,[]
249,559690811,1099,92974124,2021-01-22 03:40:36,2021-01-22 04:08:37,closed,write frame needs update,"#1098 pointed out that our `movie.py` example is broken.  Turns out my changes to improve the render speed introduced a side effect in our `write_frame` method.  This PR patches it with a simple fix.
",1,1,[]
250,557132592,1094,92974124,2021-01-19 02:55:26,2021-01-19 03:46:54,closed,add tuple as type hint for vectors,"### Overview

Where vectors are specified as function arguments in the docstrings, it provides only list and ndarray as type hints.
Even though the typing library is not used in pyvista, I find in Pycharm I still get type warnings, which suggests it is pulling the type hints directly from the docstrings.

Given the default values of vectors are usually tuples (which makes sense), it's a no-brainer for tuples to also be a hinted type, which removes the warnings in my IDE and probably others also.


### Details

Project wide find and replace ""list or np.ndarray"" -> ""list or tuple or np.ndarray""

",2,2,[]
251,556646725,1093,92974124,2021-01-18 09:04:06,2021-01-19 09:39:57,closed,Add style parameter in text slider widgets,"This PR exposes the `style` parameter for text slider widgets:

```py
import pyvista as pv

data = ['red', 'green', 'blue', 'purple', 'orange']
cone = pv.Cone()


def set_color(color):
    color = pv.parse_color(color)
    cone.point_arrays['color'] = [color] * cone.n_points


p = pv.Plotter()
p.add_text_slider_widget(set_color, data=data, event_type='always', style='modern')
p.add_mesh(cone, scalars='color', rgba=True)
p.show()
```

![image](https://user-images.githubusercontent.com/18143289/104893822-311d1500-5974-11eb-8dc6-ca0052e6d306.png)

https://user-images.githubusercontent.com/18143289/104893980-66c1fe00-5974-11eb-818e-d941893e9979.mp4

Closes https://github.com/pyvista/pyvista/issues/1059",6,2,['enhancement']
252,556463804,1092,92974124,2021-01-18 02:09:29,2021-01-19 02:14:54,closed,"Fix ""Hide points in add_point_labels is not working""","### Overview

Resolves #1077 

### Details

- Fix to not show points if `show_points=False` in `add_point_labels`
- Update `test_point_labels` to verify the fix

Before:

![image](https://user-images.githubusercontent.com/1608652/104864310-5fb8d280-5917-11eb-9140-879d50fce349.png)

After:

![image](https://user-images.githubusercontent.com/1608652/104864341-73643900-5917-11eb-8757-5ac78e74a4a1.png)
",5,3,[]
253,556414914,1091,92974124,2021-01-17 21:19:56,2021-01-19 01:44:45,closed,Add PolyData intersection filter,"### Overview

Add `PolyData.intersection` filter ([vtkIntersectionPolyData](https://vtk.org/doc/nightly/html/classvtkIntersectionPolyDataFilter.html)).

### Details

I think this is a useful capability to wrap, and I also need it for my own uses (https://discourse.vtk.org/t/splitting-cells-on-a-polydata/5021/7)

<details>
<summary>code for demo</summary>

```python
import pyvista as pv

s1 = pv.Sphere(center=(0, 0, 0), radius=10)
s2 = pv.Sphere(center=(5, 0, 0), radius=10)

intersection, s1_new, s2_new = s1.intersection(s2)

p = pv.Plotter()
p.add_mesh(intersection, color='r')
p.add_mesh(s1, opacity=0.5)
p.add_mesh(s2, opacity=0.5)
p.show()
```
</details>

![image](https://user-images.githubusercontent.com/2186528/104856264-f90fc680-58ce-11eb-8ff1-a20dfec8eaf3.png)
",3,6,[]
254,556196120,1090,92974124,2021-01-16 16:10:25,2021-01-17 01:02:46,closed,📝 Fix indent of docstring,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
:memo: Fix indent and others of docstring. I found the error of documentation in
https://docs.pyvista.org/core/points.html#pyvista.PolyData.save
![image](https://user-images.githubusercontent.com/7513610/104816790-9bdd2c00-5860-11eb-9e37-39ea18cb9db3.png)

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",1,1,[]
255,556097003,1089,92974124,2021-01-16 08:12:40,2021-01-17 01:04:04,closed,🐛 fix #1087,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
:bug: fix #1087

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",1,1,[]
256,556062378,1088,92974124,2021-01-16 02:27:58,2021-01-20 00:47:53,closed,Expose GetClippedOutput from vtkClipPolyData,"### Overview

Expose GetClippedOutput() from vtkClipPolyData, which returns the ""other side"" of the clip. This is a bit faster than calling `clip` twice, once with `invert=False` and once with `invert=True`. The performance difference is greater for small meshes. This probably won't affect a lot of people, but it will help me.

### Details
Some simple benchmarking is shown below.

<details>
<summary>code to generate plot</summary>

```
from pyvista import examples
import time

n_cells = []
t_orig = []
t_new = []
for i in range(9):
    print(i)
    dataset = examples.load_hexbeam().extract_surface().triangulate().subdivide(i)
    n_cells.append(dataset.number_of_cells)

    # do two clips with invert
    t0 = time.time()
    c1 = dataset.clip(invert=False)
    c2 = dataset.clip(invert=True)
    t_orig.append(time.time() - t0)

    # do one clip with return_clipped=True
    t0 = time.time()
    c1, c2 = dataset.clip(invert=False, return_clipped=True)
    t_new.append(time.time() - t0)

import matplotlib.pyplot as plt
plt.figure()
plt.loglog(n_cells, t_orig, '-o', label='two clips')
plt.loglog(n_cells, t_new, '-o', label='one clip w/ clipped')
plt.legend()
plt.grid(True)
plt.xlabel('number of cells')
plt.ylabel('execution time [s]')
plt.show()
```
</details>

![image](https://user-images.githubusercontent.com/2186528/104794824-715b7800-5767-11eb-8d6b-e47d0a66b544.png)
",3,2,[]
257,554381866,1084,92974124,2021-01-13 18:32:55,2021-01-13 22:06:28,closed,fix typos in example code,"### Overview
When browsing the examples online, I found some typos.  This is a simple PR to fix some typos in the examples.

### Details

- all changes are in comments",4,2,[]
258,554375643,1083,92974124,2021-01-13 18:21:52,2021-01-13 18:27:52,closed,fix typos in examples and tests,"### Overview
When browsing the examples online, I found some typos.  This is a simple PR to fix typos in the examples and a few in the testing files.

### Details

- all changes are in comments, except for `tests/plotting/test_plotting.py` changing a variable name from `old_rcParms` to `old_rcParams` within 1 test function.",1,2,[]
259,554364162,1082,92974124,2021-01-13 17:59:56,2021-01-13 18:20:13,closed,fix typos in example/test comments,"### Overview
When browsing the examples online, I found some typos.  This is a simple PR to fix typos in the examples and a few in the testing files.

### Details

- all changes are in comments, except for `tests/plotting/test_plotting.py` changing a variable name from `old_rcParms` to `old_rcParams` within 1 test function.

",2,2,[]
260,553791644,1081,92974124,2021-01-12 22:11:23,2021-01-14 04:39:12,closed,"Add read_plot3d, other minor reader improvements","### Overview

Add `read_plot3d()` method, another non-standard reader in the same vein as `read_exodus`.

Other minor changes:
- Use `standard_reader_routine()` where possible to avoid repetition.
    - Allow `standard_reader_routine()` to take in `None` for the filename to make it work for non-standard readers which were initialized ahead of time.
- Pass options through when reading multiple files with `pv.read()`
- ~~Add `override_ext` to `pv.read()` to manually specify which reader should be used (useful when you want to use a reader which doesn't match the file extension)~~ _Tried this but ran into issues with things like `UnstructuredGrid._from_file()` checking for appropriate file extensions._

### Details

Adds simple tests for `read_plot3d()` and `read_legacy()` by mocking `standard_reader_routine`.",2,14,[]
261,552471238,1080,92974124,2021-01-11 04:16:57,2021-01-11 15:17:20,closed,🩹 Fix error of Hypothesis version 5.49.0,"
### Overview

<!-- Please insert a high-level description of this pull request here. -->
I found error when I run the CI in #1079. This is the error of check which is added in [new version of Hypothesis](https://github.com/HypothesisWorks/hypothesis/releases/tag/hypothesis-python-5.49.0). I disable the check in this Pull Request.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- https://github.com/HypothesisWorks/hypothesis/releases/tag/hypothesis-python-5.49.0
",1,1,[]
262,552391988,1079,92974124,2021-01-11 01:23:24,2021-01-13 22:20:38,closed,🌐 Add Options for gettext output,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Add Options for gettext output. This option is need for translate the raw contents in sphinx document.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
relate to: https://github.com/enthought/mayavi/pull/841

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details
This is where I want to translate.
https://pyvista-doc.readthedocs.io/ja/latest/

![image](https://user-images.githubusercontent.com/7513610/104140970-a8442d80-53f7-11eb-988a-d8d277293a13.png)


",4,2,[]
263,547529109,1076,92974124,2021-01-01 00:21:17,2021-01-01 21:52:21,closed,🎉 HAPPY NEW YEAR 2021 🎉,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
🎉 HAPPY NEW YEAR 2021 🎉

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
relate to https://github.com/pyvista/pyvista/pull/520

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- Updated the year of LICENSE to 2021.

",1,1,[]
264,546519984,1075,92974124,2020-12-29 15:00:39,2020-12-29 16:58:44,closed,Update movie.py,"

### Overview

add text to the example showing how to iterate a text and modifying it in place thanks to the name= parameter
There is no example in the doc of this. It is very important when you model to visualise where you are in time.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- < feature1 or bug1 description >
- < feature2 or bug2 description >

",1,1,[]
265,545722141,1070,92974124,2020-12-26 18:25:38,2021-01-16 02:28:34,closed,[WIP] Add cut_like_bread() filter and expose additional clip options,"_For evaluation/discussion. If there is interest I can add tests/examples._

### Overview

<!-- Please insert a high-level description of this pull request here. -->
Add a DataSet filter `cut_like_bread()` which cuts data into many bread-like slices using the `clip` filter. Compared to a naive clip-in-a-loop approach, performance is significantly improved by:
1. Exposing options in the clip algs to get the ""both sides"" of a clip operation
2. Using a recursive splitting strategy so that the domain being split continually gets smaller and smaller.

The filter returns a MultiBlock whose blocks are the slices of the original data.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details
On my machine, performance is significantly improved over the naive approach, especially for big grids from which many slices will be taken.

```python
import pyvista as pv
import numpy as np
import time

cyl = pv.Cylinder(height=100).extract_surface().triangulate()
cyl.subdivide(6, inplace=True)

print('cyl has %d cells' % cyl.number_of_cells)

num_slices = 101
normal = (1, 0, 0)
origins = [(x, 0, 0) for x in np.linspace(-50, 50, num_slices)]

def _cut_a_slice_with_clip(data, normal, origin_1, origin_2):
    data = data.clip(normal=normal, origin=origin_1, invert=False)
    data = data.clip(normal=normal, origin=origin_2, invert=True)
    return data

t0 = time.time()
sections = []
for origin_1, origin_2 in zip(origins[:-1], origins[1:]):
    sections.append(_cut_a_slice_with_clip(cyl, normal, origin_1, origin_2))
print('Took %f s with naive clip.' % (time.time() - t0))

t0 = time.time()
sections = pv.filters.DataSetFilters.cut_like_bread(cyl, normal=normal, origins=origins)
print('Took %f s with recursive clip.' % (time.time() - t0))
```

Output:
```
cyl has 1622016 cells
Took 66.880561 s with naive clip.
Took 10.506016 s with recursive clip.
```

",2,2,[]
266,545418932,1068,92974124,2020-12-24 16:20:02,2021-01-17 02:30:25,closed,Creating an explicit structured grid,"### Overview

See https://github.com/pyvista/pyvista-support/issues/319

### Details

This pull request includes:

- A class to create an explicit structured grid (`ExplicitStructuredGrid`)
- A class to apply explicit structured grid filters (`ExplicitStructuredGridFilters`)
- A example for creating an explicit structured grid (`create-explicit-structured-grid.py`)
- A method to convert an explicit structured grid into an unstructured grid (`UnstructuredGridFilters.explicit_structured_grid`)
- A method to copy the data attributes of a dataset (`Common.copy_attributes`)
- A method to copy the geometric and topological structure of a dataset (`Common.copy_structure`)
- A method to return the actual size of a dataset (`DataObject.actual_memory_size`)
- A method to reflect a dataset across a plane (`DataSetFilters.reflect`)
",4,16,[]
267,542841785,1063,92974124,2020-12-19 00:17:25,2020-12-19 03:04:34,closed,Fix Docs Copy Button,"## Fix Documentation Copy Button

This PR resolves #1062 by modifying the copy button `sphinx_copybutton` behavior by removing leading `"">>> ""`.
",1,1,[]
268,541716990,1061,92974124,2020-12-17 09:09:09,2021-01-23 17:04:07,closed,Fixed disk geometry to rotate and translate properly,"### Overview
A simple change to the Disk object creation (in geometric_objects.py) following the notation used for a sphere. The issue is explained in #315

### Details
The disk object is created and sent directly to `translate()` with the `center` and `normal` inputs. The rotation_y argument seems to be necessary to align the object along the x axis, as needed by the translate function.

",3,3,[]
269,538866058,1056,92974124,2020-12-13 06:58:54,2020-12-22 01:11:49,closed,Bugfix for #1053: `Plotter.update` fails with `interactive_update=True` if `auto_close=False` is not specified,"### Bugfix for #1053: *`Plotter.update` fails with `interactive_update=True` if `auto_close=False` is not specified*

Added branching behaviour to `Plotter.show` that sets `auto_close=False` if `auto_close=None` and `interactive_update=True`. The code now warns if `auto_close=True` and `interactive_update=True`. I also added a little regression test. I was unsure where to put it, so I placed it in a new module, but I can easily move it elsewhere.

I was not able to run the plotting tests, as `test_ipyvtk` froze and `test_plotting` segfaulted. I will submit separate issue for this later. I therefore recommend to run the full test suite before merging this pull request with master.

The fix was simple, in `pyvista/plotting.py`, I changed the lines

```py
        if auto_close is None:
            auto_close = rcParams['auto_close']
```

to 

```py
        if interactive_update and auto_close is None:
            auto_close = False
        elif interactive_update and auto_close:
            warnings.warn(textwrap.dedent(""""""\
                The plotter will close immediately automatically since ``auto_close=True``.
                Either, do not specify ``auto_close``, or set it to ``False`` if you want to
                interact with the plotter interactively.\
                """""")
            )
        elif auto_close is None:
            auto_close = rcParams['auto_close']
```

",1,6,[]
270,535545816,1049,92974124,2020-12-10 00:08:05,2020-12-10 01:21:50,closed,Patch/windows window closing,"Resolves #1018 by re-enabling the update on Windows. Linux and Mac seem unaffected by this bug.

Bump version to `0.27.4`.",1,3,[]
271,534771074,1048,92974124,2020-12-08 22:35:17,2020-12-09 19:19:21,closed,Fix window closing immediately,"### Patch Windows NT Windows Closing Behavior

Resolves #1018 by re-enabling the `update` on Windows.  Linux and Mac seem unaffected by this bug.
",1,10,[]
272,530512928,1044,92974124,2020-12-01 19:08:12,2020-12-01 21:39:27,closed,Update background_image.py,"### Overview

Fixed the example code in the documentation. The code was supposed to add a background to the plot, but it didn't because that particular line was commented. 

`resolves`  #1041

",2,1,[]
273,530461631,1043,92974124,2020-12-01 17:29:34,2020-12-01 19:06:06,closed,Fix/extract points,"### Overview

An input parameter (""include_cells"") is added to the ""extract_points"" method. For backward compatibility it is set to ""True"" by default. In this case, the output includes the cells. When it is set to False, the output does not includes the cells.

A test_filters.py function is updated to check the behavior of this new feature.

resolves #1042",1,3,[]
274,529035762,1040,92974124,2020-11-29 01:57:51,2021-02-01 07:21:25,closed,Add Light class pythonizing vtkLight,"### Overview

This PR adds a `pyvista.Light` class which is a pythonic subclass of `vtk.vtkLight`. Originally suggested in https://github.com/pyvista/pyvista/issues/974.

### Details

Main features:

  1. `Light` is a `vtk.vtkLight` subclass, pyvista objects return `pyvista.Light`s now. A `pyvista.Light.from_vtk` classmethod facilitates converting from base class instances (by copying).
  2. New `LightType` enum (class ""constants"") with pretty printing.
  3. `add_light()`, `remove_all_lights()` on `Plotter`s and `Renderer`s. For the former class a new kwarg specifies if each renderer should be affected or only the active one. Also new `lighting` `__init__` kwarg for `Plotter`s, in order to enable starting a plotter without any lights.

My example in https://github.com/pyvista/pyvista/issues/974#issuecomment-725972305 now looks like this:
```py
import pyvista as pv
from pyvista.examples import download_nefertiti

data = download_nefertiti()

plotter = pv.Plotter(lighting=None)
plotter.add_mesh(data, color='white', smooth_shading=True)
plotter.set_background('black')

light_positions = [(-2, 2, 0), (2, -2, 0)]
light_colors = [(1, 0, 0), (0, 0, 1)]

for light_pos, light_color in zip(light_positions, light_colors):
    light = pv.Light(position=light_pos, color=light_color)
    light.focal_point = (0, 0, 0)
    
    plotter.add_light(light)

plotter.show(cpos=[(-600, -850, 200), (0, 0, 0), (0, 0, 1)], screenshot='nefertiti_lit_upgrade.png')
```
(although to be fair the cone angle setting was redundant in my original snippet).

---

The lights and the light types have pretty `repr`s:
```py
>>> import pyvista as pv
>>> plotter = pv.Plotter()  # default: `vtkLightKit` with 5 lights, converted to `pyvista.Light`s
>>> plotter.renderer.lights
[<pyvista.Light (Headlight) at 0x7ffa114f96a0>, <pyvista.Light (Camera Light) at 0x7ffa114f98e0>, <pyvista.Light (Camera Light) at 0x7ffa114f9940>, <pyvista.Light (Camera Light) at 0x7ffa114f99a0>, <pyvista.Light (Camera Light) at 0x7ffa114f9a00>]
>>> light = plotter.renderer.lights[0]
>>> light.light_type
<LightType.HEADLIGHT: 1>
>>> light.light_type == light.HEADLIGHT == 1
True
>>> print(f'This light is a {light.light_type}.')
This light is a Headlight.
```

---

`Plotters` have a new `__init__` kwarg `lighting` which offers some customization:
   1. `lighting='light kit'`: what used to be the default. In order to ensure that every light we create is a `pyvista.Light`, a `vtkLightKit` is temporarily created, then converted to individual `pyvista.Lights` using the renderer as a parser. (This is the only point where wrapping `vtkLight` with composition would be superior to inheriting from it.)
   2. `lighting='three lights'`: calls an updated version of `plotter.enable_3_lights()`, which now only spawns the 3 necessary lights that would stay turned on. (In the original implementation the `vtkLightKit`'s five component lights are repurposed for 3-lights illumination.)
   3. `lighting='none'` (or `None`): does not add any lights to the renderer, anticipating manual lights to be added later (see my above example).

`Plotter.add_light` and `Plotter_remove_all_lights` delegate the work to their respective renderer, either to the active renderer or their every existing renderer.

### TODOs

  - [x] finalize the API
  - [x] clean up dozens of TODOs
  - [x] add a lot more input validation and corresponding tests
  - [x] add doc section and examples


Resolves https://github.com/pyvista/pyvista/issues/974.",21,52,[]
275,529032187,1039,92974124,2020-11-29 01:12:40,2020-11-29 03:36:15,closed,Fix UnstructuredGrid init from arrays for VTK 8.90,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Resolves #1036 for VTK 8.90, an unofficial version of VTK which comes bundled with ParaView 5.8.1

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details
Rather than using `hasattr` to effectively detect `VTK9` within `UnstructuredGrid.cell_connectivity` and `UnstructuredGrid.offset`, just use top level `VTK9` variable. Also adds a test for building initializing `UnstructuredGrid` from arrays.
",1,2,[]
276,529017389,1038,92974124,2020-11-28 22:25:42,2020-11-29 07:24:18,closed,Fix/release 0.27.3 patch,"### Hotfix for `pyinstaller`
This PR proposes we cherrypick the following commits into the release branch
- 2e379950f50197f3bac84e3792b8b91832bc6c52
- 978d8097bac1550fb5d310d008be5ca1f09eb3c3
- 5ee02e2f295f667e33f11e71946e774cca40256c

### Details
PR #1028 fixes a `pyinstaller` bug that stops `pyvista` from being frozen by `pyinstaller`.",1,4,[]
277,529009066,1037,92974124,2020-11-28 21:05:00,2020-12-11 18:45:06,closed,feat/pyinstaller docs,"### ``pyinstaller`` Documentation

This PR adds basic `pyinstaller` documentation and fixes a hidden import.  After trying to freeze an application on my own and relying on various discussions on github, I thought it would be helpful if we had a section detailing how to add the `hiddenimports` and to modify our imports slightly to make it a bit easier to freeze a pyvista app.
",1,3,[]
278,528792520,1034,92974124,2020-11-27 21:29:51,2020-12-11 18:45:41,closed,force rewrite faces when flipping normals,"### Overview

While testing `pyvista` on `vtk==9.0.1` on linux, it became apparent that `flip_normals` wasn't functioning as in ``vtk==8.1.2``.  The problem is that the face array isn't a view but a copy of the underlying array and attempting to update it in-place doesn't work.  Simple test to deomonstrate on ``vtk==9.0.1``:

```py
>>> import pyvista
>>> mesh = pyvista.Sphere()
>>> orig_value = mesh.faces[1]
>>> mesh.faces[1] += 1
>>> print(orig_value, mesh.faces[1])
2 2
```

In this example, attempting to update `mesh.faces` does nothing because the array `mesh.faces` is a copy of the underlying array from `mesh.GetPolys().GetData()`.

Interesting enough, we detected this problem some time ago but failed to correct it on Windows and Mac OS.  This PR corrects this flaw.


",1,1,[]
279,527771851,1032,92974124,2020-11-26 01:38:24,2020-11-26 03:17:57,closed,Add missing no_itk skip to itk polydata point plotting test,"One of the itk plotting tests is missing the `@no_itk` decorator. The test will fail on an install without `itk` (that's how I've found this), but it should be skipped instead.",1,1,[]
280,527730897,1031,92974124,2020-11-25 23:00:20,2021-01-25 06:12:03,closed,🚧 Force Close Render Window on VTK9,"This is a redo of #1007, but tested on Python 3.9 to with the VTK wheel provided by @larsoner at https://osf.io/kej3v/

Trivial example now runs, along with the full testing suite on Python 3.9

```
Python 3.9.0 (default, Oct  6 2020, 02:47:17) 
[GCC 7.5.0] on linux
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import pyvista as pv
>>> pv.Report()

--------------------------------------------------------------------------------
  Date: Wed Nov 25 15:59:40 2020 MST

                OS : Linux
            CPU(s) : 8
           Machine : x86_64
      Architecture : 64bit
       Environment : Python
        GPU Vendor : NVIDIA Corporation
      GPU Renderer : Quadro M620/PCIe/SSE2
       GPU Version : 4.5.0 NVIDIA 390.138

  Python 3.9.0 (default, Oct  6 2020, 02:47:17)  [GCC 7.5.0]

           pyvista : 0.27.0
               vtk : Version unknown
             numpy : 1.19.4
           imageio : 2.9.0
           appdirs : 1.4.4
            scooby : 0.5.6
            meshio : 4.3.4
--------------------------------------------------------------------------------
```

### Original PR
----
Many thanks to @adeak, we've figured out how to close the render windows on VTK9.

Rather than wait for the next wheel to come out (which might take another year), this PR proposes closing the render window using a ctypes interface to libX11 with:

```py
X11 = ctypes.CDLL(""libX11.so"")
```

Turns out you can handily close the display with ``XCloseDisplay`` provided that you have the DisplayID from the VTK render window.  Fortunately, VTK provides this in ``vtkRenderWindow.GetGenericDisplayId``.  @adeak was able to discover that you have to pass this as a ``ctypes.c_size_t``.  There's even an embrassing [SO question](https://stackoverflow.com/questions/64811503/python-memory-addresses-variation-across-python-3-5-3-9-on-linux/64814361#64814361) where I get schooled on python memory management.

This is only implemented for linux and VTK>=9.0, and docs/tests build just fine.  I'd really like this out for a 0.27.3 patch release.
",10,6,[]
281,527655361,1030,92974124,2020-11-25 19:35:45,2020-12-19 00:24:49,closed,patched edge case for empty mesh,"This PR patches an edge case where empty meshes from ``extract_cells`` raise a key error rather than simply returning an empty mesh.
",2,1,[]
282,527027781,1029,92974124,2020-11-25 03:11:36,2020-11-25 06:21:05,closed,do not import pandas on __init__,"Simple PR to avoid importing pandas unless needed.  Shaves off 300 ms when importing the module.

A relatively small change, but considering how long `pyvista` takes to import, any little bit counts.  We'll eventually tackle importing vtk one library at a time from vtkmodules, but I'll wait until we can close render windows on VTK9 on linux or VTK releases the next minor version.
",1,1,[]
283,526820653,1028,92974124,2020-11-24 22:20:10,2020-11-28 19:55:05,closed,Fix Cell Types Helper,"### Overview

PR #976 wasn't throughly reviewed and I missed a few issues:
- Inconsistent spacing
- Dynamically parsing a text file when a list of strings would do.
- Unnecessary dynamic evaluation of the cell type mapper

This PR cleans it up and addresses #1026

@larsoner, could you please review this?  We should add this for a patch release.

### Details

When importing `pyvista`, the module currently parses a text file containing several cell types and then determines the number of points per cell by creating the cell on the fly and running ``GetNumberOfPoints()``.  Aside from leaving a file open, this is also unnecessary to run unless building an UnstructuredGrid based on this method.  Additionally, it's quite unnecessary to read in a text file to determine cell names when these can simply be hardcoded in.

This PR simplifies and improves the `enum_cell_type_nr_points_map` and only evaluates it when using the ``create_mixed_cells`` function.


",2,2,[]
284,524818398,1026,92974124,2020-11-20 16:35:24,2020-11-20 17:25:04,closed,BUG: Close file,"Takes care of warnings of the form:
```
mne/viz/tests/test_3d.py::test_plot_sparse_source_estimates[pyvista]
  /home/larsoner/python/pyvista/pyvista/utilities/cell_type_helpers/cell_selector.py:106: ResourceWarning: unclosed file <_io.TextIOWrapper name='/home/larsoner/python/pyvista/pyvista/utilities/cell_type_helpers/vtk_cell_types.txt' mode='r' encoding='UTF-8'>
    generate_all_cell_types()
```
",4,1,[]
285,523454944,1023,92974124,2020-11-18 20:35:05,2020-11-18 22:10:35,closed,"Revert ""Force Close Window on VTK9""","Reverts pyvista/pyvista#1007 due to some exciting segmentation faults.

In response to comments from @larsoner:
https://github.com/pyvista/pyvista/pull/1007#issuecomment-729933336

Would be awesome if we could get a patch for this that works without murdering the x server.",1,1,[]
286,523171577,1021,92974124,2020-11-18 13:05:41,2020-11-18 15:22:56,closed,Add parallel projection and parallel scale properties to Renderer and BasePlotter,"### Overview

Currently, there are functions to enable/disable parallel projection, but there is no native interface to view the current state or to view/set the parallel scale. These can be accessed using VTK functions through the camera object, but that is not documented.

This adds parallel_projection and parallel_scale as properties that can be accessed and edited similarly to the camera_position property.

With this change, the existing enable/disable functions become redundant, but there is no harm in leaving them in place for backward compatibility.

will resolve https://github.com/pyvista/pyvista-support/issues/207",1,2,[]
287,522520063,1019,92974124,2020-11-17 16:00:15,2020-11-17 19:49:47,closed,ENH: Reduce VTK wheel size,"These extra options reduce the size from 522 MB to 108 MB. For reference the 9.0.1 PyPi manylinux wheels are 103 MB.

We could update the second, off-screen command but it gets a bit wordy. I think it's enough to have these in one place and people can copy-paste the parts they need from each.",2,1,[]
288,522049071,1017,92974124,2020-11-17 00:03:16,2020-11-17 16:33:31,closed,use pypandoc for better jupyter notebooks from the gallery,"## Use ``pypandoc``

The sphinx gallery within ``pyvista``'s doc build generates notebooks from the rst formatted python scripts within ``examples/``, but these notebooks must have the original rst formatted sections converted to markdown.  As it turns out, sphinx gallery only has limited support for converting rst to markdown, as noted [here](https://sphinx-gallery.github.io/stable/configuration.html#using-pypandoc-to-convert-rst-to-markdown).  It's recommended to use ``pypandoc`` for better conversions.

This PR adds `pypandoc` support within the documentation builds.  It's not a huge improvement, but it's signifiant and removes a bunch of ugly formatting issues.


### This Branch
![image](https://user-images.githubusercontent.com/11981631/99322693-bfb6ce00-282d-11eb-8a79-92096f518e36.png)

---

### Current docs 
![image](https://user-images.githubusercontent.com/11981631/99322730-d65d2500-282d-11eb-9f06-e7bcf2dd5714.png)
",1,1,[]
289,521274019,1015,92974124,2020-11-15 22:55:43,2020-11-18 15:25:58,closed,fix/default rcParams,"For some situations, it's necessary to disable (or enable) notebook plotting, or set `smooth_shading`  and other plotting parameters.  This PR adds the following kwargs to `rcParams`:
-  `'notebook'`
- `'smooth_shading'`
- `'full_screen'`",1,5,[]
290,521259975,1014,92974124,2020-11-15 21:09:20,2020-11-16 21:08:48,closed,fix/threshold args,"### Overview
Set the default threshold filter parameter `all_scalars` to `False` to resolve #1013.  This PR also adds a helpful error message when attempting to set incompatible parameters.

NOTE: Include this in the 0.27.3 release.
",1,2,[]
291,520972149,1011,92974124,2020-11-14 07:13:45,2020-11-18 15:23:46,closed,Fix `add_arrows`,"### Overview

Magnitude adjustment for arrows shouldn't be in-place in the `add_arrows` method for two reasons.  First, as noted in #1010, if we multiply an int array by a float `numpy` raises an error.  Second, it's a bad side effect to have the direction array modified in-place.

Resolves #1010
",1,2,[]
292,520457909,1008,92974124,2020-11-13 09:19:43,2020-11-13 15:18:26,closed,Small Capitalization Fix,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Fix small notation shaking 3d to 3D.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",1,1,[]
293,520288592,1007,92974124,2020-11-13 03:03:35,2020-11-18 15:24:18,closed,Force Close Window on VTK9,"Many thanks to @adeak, we've figured out how to close the render windows on VTK9.

Rather than wait for the next wheel to come out (which might take another year), this PR proposes closing the render window using a ctypes interface to libX11 with:

```py
X11 = ctypes.CDLL(""libX11.so"")
```

Turns out you can handily close the display with ``XCloseDisplay`` provided that you have the DisplayID from the VTK render window.  Fortunately, VTK provides this in ``vtkRenderWindow.GetGenericDisplayId``.  @adeak was able to discover that you have to pass this as a ``ctypes.c_size_t``.  There's even an embrassing [SO question](https://stackoverflow.com/questions/64811503/python-memory-addresses-variation-across-python-3-5-3-9-on-linux/64814361#64814361) where I get schooled on python memory management.

This is only implemented for linux and VTK>=9.0, and docs/tests build just fine.  I'd really like this out for a 0.27.3 patch release.
",7,3,[]
294,520209276,1006,92974124,2020-11-12 22:59:58,2020-11-15 20:48:57,closed,Remove Alpha Channel on Image Regression,"In some cases, images being compared in ``pyvista`` contain alpha channels.  This PR corrects ``compare_images`` by always removing alpha channels as they are incompatible with `vtkImageDifference`.
",1,5,[]
295,519877623,1005,92974124,2020-11-12 13:15:42,2020-11-12 19:20:44,closed,Clean up example downloads,"### Overview

I bumped into a few issues with the downloaded examples. Almost all of them are docstring bugs, but there's also a change in the name of one of the examples.

### Details

  1. Some functions had docstrings copied over from other examples; I've updated these to something more meaningful.
  2. I replaced the mix of single- and double-empty-lines between example functions to uniform single ones (this is a separate commit, should it be deemed harmful or unnecessary).
  3. I noticed that there was an example called `download_iron_pot` the docstring of which referred to an iron pot. Suspiciously the data file is called `ironProt.vtk`. Upon closer inspection the vtk file bears the comment ""Iron protein"". I've replaced the function with `download_iron_protein` and wrote a ""DEPRECATED"" note in the docstring of the old, misnamed function (there are no internal uses of this example except for a dummy test, which I've also changed accordingly).

---

This last one brings me to a further note: it would be nice if we could show a minimal reasonable use for each of the example datasets, unless these are meant for internal use only. A lot of the datasets ""work"" with just loading the data and calling `.plot()` on them, but some (such as the ""iron pot"" example) are trickier. I think the new ""demo"" section could have an overlap with this, but not entirely: there are just too many examples.

For instance for the iron protein this could be something like
```
import pyvista as pv
import pyvista.examples

dat = pv.examples.download_iron_protein()

plotter = pyvista.Plotter()
plotter.add_volume(dat)
plotter.add_bounding_box()
plotter.show()
```
resulting in
![tmp](https://user-images.githubusercontent.com/17914410/98944538-7bf05b80-24f1-11eb-9497-45b8a64c6018.png)
",9,8,[]
296,519575311,1004,92974124,2020-11-12 02:46:40,2020-11-12 02:46:57,closed,Fix/conda build vtk9,Allow Python 3.9 to attempt to install `pyvista`,0,2,[]
297,519558211,1003,92974124,2020-11-12 01:46:35,2020-11-12 02:45:48,closed,removing py3.9 check,"This removes any python 3.9 checks.  While it makes install failures on Python 3.9 more cryptic, people will be able to still install it via anaconda.
",1,2,[]
298,519538121,1002,92974124,2020-11-12 00:34:22,2020-11-24 05:36:33,closed,Add Title,"### Overview
This PR fixes the image regression testing and adds a ``add_title`` method to the plotter.

",2,3,[]
299,518660443,1000,92974124,2020-11-10 17:49:30,2020-11-10 18:54:44,closed,Doc/move around,minor docs adjustments to ship with 0.27.1,2,3,[]
300,518616090,999,92974124,2020-11-10 16:36:26,2020-11-10 17:00:06,closed,Revert #995,"As @akaszynski pointed out in https://github.com/pyvista/pyvista/pull/995#issuecomment-724086473, `window_size` is an existing property, making the change irrelevant for `Plotter`. So I moved the original issue to https://github.com/pyvista/pyvistaqt/issues/70

Sorry for the noise.",2,1,[]
301,518186287,998,92974124,2020-11-10 03:43:18,2020-11-10 17:13:40,closed,Image Regression,"### Image Regression Testing

Since ``pyvista`` is primarily a plotting module, it's imperative we actually check the images that we generate in some sort of regression testing.  In practice, this ends up being quite a bit of work because:

- OpenGL software vs. hardware rending causes slightly different images to be rendered.
- We want our CI (which uses a virtual frame buffer) to match our desktop images (uses hardware acceleration).
- Different OSes render different images.

As each platform and environment renders different slightly images relative to Linux (which these images were built from), so running these tests across all OSes isn't optimal.  We could generate different images for each OS, but it's overkill in my opinion; we need to know if something fundamental changed with our plotting without actually looking at the plots (like the docs at dev.pyvista.com)

Based on these points, image regression testing only occurs on Linux CI, and multi-sampling is disabled as that seems to be one of the biggest difference between software and hardware based rendering.

Image cache is stored here as ./image_cache

Image resolution is kept low at 400x400 as we don't want to pollute git with large images.  Small variations between versions and environments are to be expected, so error < ``IMAGE_REGRESSION_ERROR`` is allowable (and will be logged as a warning) while values over that amount will trigger an error.

There are two mechanisms within ``pytest`` to control image regression testing, ``--reset_image_cache`` and ``--ignore_image_cache``.  For example:

```
pytest tests/plotting --reset_image_cache
```

Running ``--reset_image_cache`` creates a new image for each test in ``tests/plotting/test_plotting.py`` and is not recommended except for testing or for potentially a major or minor release.  You can use ``--ignore_image_cache`` if you're running on Linux and want to temporarily ignore regression testing.  Realize that regression testing will still occur on our CI testing.

If you need to add a new test to ``tests/plotting/test_plotting.py`` and wish to include image regression testing, be sure to add ``verify_cache_image`` to ``show``.  For example:

```py
@skip_no_plotting
def test_add_background_image_not_global():
    plotter = pyvista.Plotter()
    plotter.add_mesh(sphere)
    plotter.show(before_close_callback=verify_cache_image)
```

This ensures that immediately before the plotter is closed, the current render window will be verified against the image in CI.  If no image exists, be sure to add the resulting image with ``git add tests/plotting/image_cache/*``.

```

### Details

- Cleaned up plotting testing.
- Fixed docs/extras and index.rst
- Conda CI testing needed to split tests/plotting and core API tests.

",2,11,[]
302,517962503,996,92974124,2020-11-09 18:42:03,2020-11-09 20:04:09,closed,Allow picking in notebook with ipyvtk,Needs to go on 0.27.1,3,2,[]
303,517818346,995,92974124,2020-11-09 14:51:27,2020-11-09 15:44:00,closed,FIX: Use render window dimensions,"This PR uses the render window to fetch the window dimensions.

Related to https://github.com/mne-tools/mne-python/pull/8495#issuecomment-724058805",6,1,[]
304,517458178,994,92974124,2020-11-09 04:28:14,2020-11-09 16:45:13,closed,Fix subplotting with ipyvtk_simple,"### Overview

Subplotting with ipyvtk totally works! I'd like to get this out on 0.27.1 soon if we can... might as well wait a momennt to see if anything else comes to light

```py
import pyvista as pv
p = pv.Plotter(shape=(2,1))
p.add_mesh(pv.ParametricBohemianDome())
p.subplot(1,0)
p.add_mesh(pv.Cube())
p.show(use_ipyvtk=True)
```

![2020-11-08 21 27 35](https://user-images.githubusercontent.com/22067021/98500268-473a8680-2209-11eb-8294-14cc9bf32ac1.gif)


",2,2,[]
305,517265131,993,92974124,2020-11-08 07:20:02,2020-11-08 17:10:11,closed,Release 0.27.0,"## Release 0.27.0

It's been almost two months since our last release, and I'm really quite impressed with what we've accomplished since then.  Here's a draft of the release notes should we approve this release.

I'd like to note that with @banesullivan's work on `ipyvtk-simple`, I've been able to finally get streaming working on a remote GPU within jupyterlab.  It's awesome, and it's going to really help enable a closed-source project I've been working on for quite some time.  My new notes on docker in the dev docs detail how this works.

@pyvista-developers, I'd really appreciate any inputs you have on this release or the release notes.


---

# Release Notes Draft: 0.27.0

### Jupyterlab Streaming and New Features

This release, ``pyvista==0.27.0``, is a major release that includes an important new feature for jupyterlab: real-time streaming leveraging `ipyvtk-simple`.  Using either software or hardware rendering (as supported by VTK), you can visualize geometry on a remote machine through a jupyterlab environment!

Several other new features were added, along with many bug fixes and optimizations by both new and existing contributors.  Thanks all for your contributions!  ``pyvista`` would not be possible were it not for the community of developers behind all these PRs.

#### Contributors (in no order)

- @tkoyama010
- @JevinJ
- @darikg
- @larsoner
- @GuillaumeFavelier
- @imsodin
- @banesullivan
- @akaszynski
- @math-artist
- @mkondratyev85
- @Keou0007
- @yetisir
- @mglesser
- @thomgrand
- @dstansby


#### New Features

- Add shrink filter (#913)
- Add find_closest_cell filter (#923)
- Add texture map to sphere filter (#938)
- Vectorized ray tracing using trimesh and pyembree (#949)
- Active tensors (#969)
- Wrap Trimesh (#970)
- Cell based unstructured grid generator (#976)
- ipyvtk plotting (#983)

#### Documentation

- More examples to the gallery (#940)
- Add new banner to homepage and README (#941)
- Docker documentation (#992)
- Add widgets to the examples gallery (#988)

#### API Changes

- Dropping support for Python 3.5 (#912 & #905)
- Fix Opacity Array (#906)
- Add checking if the number_of_cells corresponds offset ... (#932)
- Make rendering optional when adding meshes and actors (#935)
- Faster Screenshot (#957)
- Include or not adjacent cells when using extract_points (#960)
- Add additional methods to PlotterITK (#980)

#### Bug Fixes

- Memory Leak and References (#894)
- Fix render layers (#893)
- Delete obbTree to avoid memory leak (#922)
- Remove blue color on meshes when using add_mesh (#929)
- Fix area property (#933)
- Fix axis problem on parametric geometry (#948)
- Fix geometric disc
- Fix and test for memory leaks (#958)
- Fix scalar bar colors (#971)

#### Miscellaneous

- Improve coverage and testing (#891, #889, #888, #887, #886)
- Use f-strings (#911)
- Raise exceptions instead of producing empty screenshots (#915)
",1,1,[]
306,517221532,992,92974124,2020-11-08 02:45:26,2020-11-08 07:08:41,closed,Add Docker Documentation,"## Docker!!!

I was never really impressed with `pyvista`'s support of dockerized environments, but with `ipyvtk-simple`, native performance within a docker image is actually quite good, so I think it's high time we have a docker image for pyvista as well.  Given it's the weekend, I went ahead and released a docker image at https://github.com/pyvista/pyvista/packages/493403

Turns out support for docker images hosted by github is really great!  I've updated the docs, but if you want to play around with the image, setup your docker credentials with GitHub and then run:
```
docker run -p 8888:8888 docker.pkg.github.com/pyvista/pyvista/pyvista-jupyterlab:v0.27.0
```

### Additional Notes

This PR adds additional documentation for ``ipyvtk-simple`` usage and installation.  Installing it on jupyterlab isn't that simple, so it's a good idea for us to provide detailed documentation for it.

This PR also adds some documentation for starting ``Xvfb`` from `pyvista` using `start_xvfb`.  For testing on my own docker containers, it's always nice to start a virtual framebuffer right from Python.
",2,8,[]
307,517220096,991,92974124,2020-11-08 02:26:33,2020-11-08 05:27:51,closed,Allow Python 3.9 and Explain Building,"### Allow Python 3.9

Thanks to instructions from @banesullivan, I've build a wheel for VTK for Python 3.9.  I couldn't install it because we're a bit heavy-handed about supporting ``pyvista`` on Python 3.9.  This PR fixes it by providing a helpful error and additional docs for building a wheel for VTK.

",1,6,[]
308,517200434,990,92974124,2020-11-07 22:33:28,2020-11-08 05:28:09,closed,Reorg Plotting Testing,"### Minor Refactor of Testing

With the introduction of ``ipyvtk-simple``, this PR has created a new directory ``plotting`` within the ``tests`` directory to facilitate garbage collection.  Turns out we can have a ``conftest.py`` that applies to all the testing modules within each directory, so I've moved ``check_gc`` out of the root `conftest.py` and into ``tests/plotting/conftest.py`.
",1,5,[]
309,517151161,989,92974124,2020-11-07 15:18:54,2020-11-07 20:16:02,closed,Clean docs cache onn Azure during release,"@akaszynski, is this necessary and is it right?",2,2,[]
310,516927096,988,92974124,2020-11-06 19:06:30,2020-11-07 20:18:22,closed,Add widgets to examples gallery,"### Overview

Now that an interactor is added to all plots, we can show off the widgets in the examples gallery. This moves existing examples there and adds some new ones

### Details

- Requires #983 
- Resolve https://github.com/pyvista/pyvista-support/issues/269

| Gallery |
|---|
| <img width=""864"" alt=""Screen Shot 2020-11-06 at 3 12 47 PM"" src=""https://user-images.githubusercontent.com/22067021/98419562-8ec2e600-2042-11eb-8021-23494786a5fc.png""> |

",2,9,[]
311,515490546,984,92974124,2020-11-04 16:16:28,2020-11-07 20:19:05,closed,remove viz of last picked cell after clicking outside the mesh,"Resolve https://github.com/pyvista/pyvista-support/issues/268

This is needed. The pointer to the picked cells is empty and thus this could be misleading if the viz remains after a user selects nothing. They might close the plotter thinking their selection is there but it isn't.

This will ensure the `.picked_cells` pointer matches what is displayed


cc @rodrigomologni
",1,1,[]
312,515190689,983,92974124,2020-11-04 07:24:28,2020-11-07 15:22:27,closed,Implement ipyvtk ,"### Overview

This PR implements #824 without changing much.  I tried to clean up #824, but ended up needing a fresh start since our tests were consistently failing.  Instead, this PR just adds in an interactor and adds an option for `ipyvtk-simple` rather than replacing `panel` (which is still useful).  At this point, there's still no clear winner, but with some performance improvements in [ipyvtk-simple Pull 13](https://github.com/Kitware/ipyvtk-simple/pull/13), I think it's up there.  Plus, now users can write one set of code for my applications that use both jupyterlab and a standard python console.

We can move some of the other doc changes over once people have played around with this, but I was hoping on keeping this a ""beta"" feature for a bit until we work out the bugs/implementation rather than going all out and replacing anything.

@banesullivan, feel free to add back in some/all of your work in #824.  I wanted to keep this change light and then consider greenlighting it in a minor release or two, so I figured keeping it fairly undocumented was reasonable.

Resolve #285, resolve #364

### Additional Notes
There are some API changes, the largest being that we're always starting the interactive renderer (off or on screen).  This has some big implications:
- Off screen renders on VTK 9.0 on Linux do not close, meaning that building docs results in a segfault on 9.0.X.  You can get around this on doc building by simply building the docs twice; the first will encounter the segfault, the second will complete.  On CI, I'm just limiting the max version to 8.1.2 until the next VTK release which includes a fix for this.
- Our documentation examples can finally include widgets, and it looks great, especially with the axes.
- No more checking if the interactive render has been created.  Simplifies code.
- Unit testing on VTK 8.1.2 on Linux with the interactive render results in a plotter being rapidly flashed for each plotter unit test.  It's annoying.

Overall, the changes result in a better plotter for the average/power user, so I think we should move forward with this.  Flashing/doc building woes are something I can deal with until the next release of VTK.",8,22,[]
313,515115133,981,92974124,2020-11-04 03:46:45,2020-11-04 06:49:45,closed,remove binding to our fly_to_mouse_position,"This PR removes our broken customized ``fly_to_mouse_position`` keybinding and relies on the built-in behavior instead.
",1,1,[]
314,514537074,980,92974124,2020-11-03 07:16:14,2020-11-07 14:28:20,closed,Add additional methods to PlotterITK,"### PlotterITK Improvements

This PR adds a few methods and UI improvements to the `PlotterITK` class:

- Specify point sizes
- Specify camera position
- UI collapsed by default
- Added rotate (orbit) keyword arg.
- Added bounds arg when showing.
- Specify background color
",1,3,[]
315,514533382,979,92974124,2020-11-03 07:06:55,2020-11-07 14:27:11,closed,get pop to behave like pop,"This is a quick fix to a quirk I found recently where `pop` in `DataSetAttributes` wasn't behaving like the built-in dictionary pop.  See:

https://docs.python.org/3/library/stdtypes.html#dict.pop

We just need to add the `default` argument such that if the key isn't present in the `DataSetAttributes` instance, we return the default arg.
",2,4,[]
316,514435166,978,92974124,2020-11-03 02:03:39,2020-11-03 16:38:10,closed,Remove Depreciated Features,"### Overview

This PR removes several depreciated features that we've had warnings for months.  I think it's high time with the next release to have these removed.  This PR also removes a few mentions of the depreciated features (`plot` vs `show`) in some of our examples.
",1,1,[]
317,513791801,977,92974124,2020-11-02 05:17:34,2020-11-02 18:51:49,closed,Add .case reader to other _READERS directly.,"### Overview
Small change.

In #725 I mentioned that the .case reader should be added to the dictionary definition instead of another statement. This just makes that change. https://github.com/pyvista/pyvista/pull/725#discussion_r445833196",1,1,[]
318,513326156,976,92974124,2020-10-30 23:14:18,2020-11-03 02:11:12,closed,Feat/unstr grid cell dict,"Overview
------------
This feature branch adds a cell dictionary to the unstructured grid class, as already proposed in #961 and auto-generates the cell offsets in VTK versions < 9.0. 

Details
--------------
Currently building an unstructured grid is based on the VTK API, potentially difficult and error-prone for VTK beginners:

```python
offset = np.array([0, 4])
cells = np.array([3, 0, 1, 2, 3, 3, 4, 5])
cell_type = np.array([vtk.VTK_TRIANGLE, vtk.VTK_TRIANGLE])

grid = pv.UnstructuredGrid(offset, cells, cell_type, points)
```

As a first change, the feature branch allows the offset array to be optional, computing it internally if omitted.

```python
grid = pv.UnstructuredGrid(cells, cell_type, points) #Will generate the offset for VTK versions < 9.0
```

Also, a second method for the unstructured grid creation is introduced: A cell dictionary which holds mappings of vtk-types to np.ndarrays of type int. This should provide easier means to construct many different meshes with fixed size cells. The above example becomes:

```python
grid = pv.UnstructuredGrid({vtk.VTK_TRIANGLE: np.array([[0, 1, 2], [3, 4, 5]])}, points)
grid.cells_dict #Returns {vtk.VTK_TRIANGLE: np.array([[0, 1, 2], [3, 4, 5]])}
```

From this information all the relevant cell arrays are built internally. We can also query the cells dictionary (which will be create on-the-fly), for unstructured grids that only contain fixed size cells. Potentially, this method is not limited to unstructured grids, but currently calling the methods with any other object will raise an error.

The examples gallery was updated to show the new possibility of creating the unstructured grid for the given example.

How it works
------------
Upon importing utilities/cell_type_helpers/cell_selector.py, the file vtk_cell_types.txt is parsed and potential cell types are created by their names to query their cell size. This information is stored in a map, later used in create_mixed_cells and get_mixed_cells. With this information, the given cells dictionary can be quickly generated by reading the cell types from a VTK object. From the dictionary, the three necessary VTK cell arrays can be generated, which is used for the generation of an unstructured grid with the new method.
",3,6,[]
319,512889111,975,92974124,2020-10-30 10:07:18,2020-10-30 19:23:45,closed,Fix collections import deprecation warning,"This fixes a deprecation warning that looks like
```python
E   DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working
```",1,1,[]
320,511994350,973,92974124,2020-10-29 03:57:46,2020-10-30 19:53:12,closed,fix texture plotting with active scalars,"This PR resolves #950 and ~~brings the puppy back to his former glory~~ fixes texture plotting.

![image](https://user-images.githubusercontent.com/11981631/97523707-94486e00-1968-11eb-978e-c9770580c281.png)

It also skips the clip by scalars test as MacOS Python 3.8 fails intermittently with a segfault.",3,2,[]
321,511979389,972,92974124,2020-10-29 03:11:38,2020-10-29 05:03:28,closed,Fix Hill Example Rotations,"### Hill Example Rotations

This PR addresses @banesullivan's issue #967 regarding the rotation of the `ParametricRandomHills`.  I've also reduced the resolution of the ray tracing and added smooth shading into the plotting to reduce the documentation build time as well as improve the look of the `distance-between-surfaces.py` example.

### Current Docs
![image](https://user-images.githubusercontent.com/11981631/97520801-aa066500-1961-11eb-8975-05e2c52f4be2.png)


### fix/hills_examples
![image](https://user-images.githubusercontent.com/11981631/97520778-9e1aa300-1961-11eb-9814-f45edf7cccee.png)

Build time for `distance-between-surfaces.py` drops from 21 to 4.4 seconds locally.

Resolves #967 ",1,1,[]
322,511970981,971,92974124,2020-10-29 02:42:55,2020-11-03 02:07:02,closed,Fix Scalar Bar Colors,"### Overview

This minor bug has been bothing me for a while.  The maximum number of colors on the scalar bar does not match the number of colors in our mapper.  For example:

```py
import pyvista
import numpy as np
points = np.random.random((100000, 3))
pyvista.plot(points, scalars=points[:, 2], n_colors=256, stitle='Scalars')
```

### `master`
![PyVista_248](https://user-images.githubusercontent.com/11981631/97519073-36af2400-195e-11eb-998c-f0af97bff24f.png)

Zoomed into scalar bar:
![Selection_249](https://user-images.githubusercontent.com/11981631/97519210-7d048300-195e-11eb-8d23-537b1a0ad769.png)


### `fix/scalar_bar_n_colors`
![PyVista_247](https://user-images.githubusercontent.com/11981631/97519084-3adb4180-195e-11eb-8e14-9f6560ae064b.png)

Zoomed into scalar bar:
![Selection_250](https://user-images.githubusercontent.com/11981631/97519216-80980a00-195e-11eb-8c4a-b0a53fd2e737.png)


It's slight, but it's there.
",2,1,[]
323,511962130,970,92974124,2020-10-29 02:12:11,2020-10-29 05:03:14,closed,Wrap Trimesh,"## Wrap Trimesh

Given a few issues that have demonstrated the use of (or mentioned problems with) ``trimesh``, I thought it was time that we wrapped `trimesh.Trimesh` instances.  See issue #966.  For example:

```py
import trimesh
points = [[0, 0, 0], [0, 0, 1], [0, 1, 0]]
faces = [[0, 1, 2]]
tmesh = trimesh.Trimesh(points, faces=faces, process=False)
mesh = pv.wrap(tmesh)
```

I did some tests and the wrap is quite fast as it only generates a new faces array, which you can do fairly quickly.  For those users used to ``trimesh``, this means that we can now plot those mesh types with ``pyvista.plot(tmesh)``.


I've also taken the liberty to update ``codespell`` and ``pydocstyle`` since our versions are old and updating them didn't introduce any additional spelling or style changes.
",3,4,[]
324,511669275,969,92974124,2020-10-28 16:14:56,2020-10-29 02:14:49,closed,Feat/active tensors,"### Overview

This branch fixes bugs related to #968 and additionally adds the possibility to set active tensors.
<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

Methods in pyvista/core/common.py were added and modified to check for return values of the SetActive* methods. Additional tests were added to test for correctness of the new methods and the former bugs of setting active vectors.
",1,2,[]
325,510148804,965,92974124,2020-10-26 16:22:32,2020-10-26 17:07:59,closed,ENH: Use dev0 for dev version,"PyPi shows latest release to be 0.26.2, yet `master` shows version 0.26.0. This is strange behavior -- NumPy, SciPy, matplotlib, etc. do not work this way -- and prevents [proper testing of unreleased versions](https://github.com/mne-tools/mne-python/pull/8427#issuecomment-716659491).

This PR proposes changing the version in between releases to be `0.next.dev0`, which is currently `0.27.dev0`.",2,1,[]
326,509066052,963,92974124,2020-10-23 16:07:21,2020-10-25 02:47:09,closed,TST: Make CIs happy,"This PR follows https://github.com/pyvista/pyvista/pull/942#issuecomment-715430901, let's see how the CIs react",7,2,[]
327,508168110,960,92974124,2020-10-22 09:59:21,2020-10-22 16:56:17,closed,Include or not adjacent cells when using extract_points method,"### Overview

An input parameter (""adjacent_cells"") is added to the ""extract_points"" method. For backward compatibility it is set to ""True"" by default. In this case, the output includes the cells that contain at least one of the extracted points. When it set to False, the output includes the cells that contain exclusively points from the extracted points list.
Please note that when using quadratic mesh, the list of nodes shall include the corner nodes AND the middle nodes for the adjacent_cells = False case.

A test function is provided to check the behavior of the ""extract_points"" method on a simple mesh.

resolves #953 

",2,1,[]
328,507729057,959,92974124,2020-10-21 17:25:20,2020-10-23 15:03:58,closed,MAINT: Remove ref on close,"It seems strange to me that `Plotter.__init__` adds a ref to this global `_ALL_PLOTTERS` but calling `Plotter.close` does not remove the reference. It really seems like it should. Otherwise you get memory accumulation even when closing your plotters, unless you call `pyvista.close_all()` (not a good solution because it closes all plotters, not just the one you might be trying to close) or modify `pyvista._ALL_PLOTTERS` (not a good solution -- private var).

This PR suggests that instead, let `plotter.close` take care of both keeping track of whether or not it's closed (by short-circuiting the `.close` operation if it has been done already) and keeping itself in `_ALL_PLOTTERS`.",5,2,[]
329,507706347,958,92974124,2020-10-21 16:44:02,2020-10-23 15:03:36,closed,TST: Test for GC,"Add a test that all objects can be garbage collected properly. Currently there are some failures for example with `vtkLightKit` suggesting that the `deep_clean` (or similar) functions need to be updated to remove VTK refs.

This is brought about by accumulating-memory issues @GuillaumeFavelier and I are hitting in our MNE doc builds with tens of PyVistaQt plots not releasing all memory. Some of the bugs are in PyVistaQt and some in MNE, but this should at least expose the ones in PyVista.

Note that this does not ensure that VTK can actually GC its own vtkSmartPointer objects, we'll probably need a separate case for that, too, somehow. But at least this will allow us to rule out Python GC keeping things alive and increasing memory usage.",18,20,[]
330,507150695,957,92974124,2020-10-20 23:21:01,2020-10-22 16:37:42,closed,Faster Screenshot,"### Overview
Simple fix to speedup screenshots (at least on Linux).  Discovered this while working on potentially automating tests using screenshots.

### Details
Here's the screenshot speed on Linux and Windows

```py
import pyvista as pv

plotter = pv.Plotter(off_screen=True)
plotter.add_mesh(pv.Sphere(), smooth_shading=True)
timeit plotter.screenshot('/tmp/tmp.png')
```

#### `feat/faster_screenshot` (this branch)

```
# LINUX:   70.9 ms ± 212 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)
# WINDOWS: 70 ms ± 145 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)
```

#### `master`
```
# LINUX:   324 ms ± 564 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)
# WINDOWS: 312 ms ± 462 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)
```

### MISC
I've also made a minor change in the tests to make sure we test all file types.",2,3,[]
331,505358268,956,92974124,2020-10-17 22:49:54,2020-10-18 02:01:20,closed,Fix/geometric disc,"### Overview

The pyvista.Disc() function currently ignores the 'normal' argument and always produces a disk with a normal of (0, 0, 1). This PR rotates the disc to align with the specified normal.


### Details

- Fixes disc orientation when normal argument is supplied.
- Adds test to ensure resultant disc orientation is consistent with the supplied normal.

",1,3,[]
332,505068548,954,92974124,2020-10-16 19:45:54,2020-10-16 20:03:59,closed,Removed py2.7 support and add py3.9 notice,"### Overview

This PR adds a error message when the user tries to install `pyvista` from Python 3.9.  I think it's important to add this notice here and not just in the `python_requires` notice as we need to give a specific message to the user regarding why Python 3.9 isn't supported at the moment.

This PR also goes ahead and removes any support for Python 2.7 within the setup file.  This is no longer needed since we explicitly do not support 2.7 in `python_requires='>=3.6.*'`

Applicable issues: Resolve https://github.com/pyvista/pyvista-support/issues/263",1,1,[]
333,504479208,951,92974124,2020-10-16 00:58:20,2020-10-16 14:15:05,closed,add requirements_style.txt to CONTRIBUTING.md,"Otherwise testing fails when codespell and pydocstyle aren't installed.

",1,1,[]
334,503383749,949,92974124,2020-10-14 13:42:18,2020-10-23 15:01:42,closed,vectorised ray tracing using trimesh and pyembree,"### Overview

Adds a multi_ray_trace function to PolyData filters that uses the embree library via trimesh to do vectorised ray tracing.
In my testing, uses ~50% more memory, but can be 25000x faster or more for a large number of traces.

### Questions/Comments

- this requires trimesh, rtree and pyembree as dependencies, which I have not added to the pyvista dependencies (yet). Is it acceptable to add dependencies or should they be handled as optional in some way? The trimesh ray tracing functions will work without pyembree installed but are much slower (4-5x faster than OBBTree in a loop). If trimesh is installed but not rtree, it will fail with a ModuleNotFoundError.
- I have implemented only one variation of the ray trace functions available in trimesh (which suits my purposes), is there an argument to implement more?
- I've not added a test because there doesn't appear to be a test for the existing ray_trace function that I could use as a template. Perhaps that also needs to be added?
- In my testing I found embree returns a slightly different result to using the OBBTree in a loop, especially around the edges of the mesh. For me this is acceptable because it reduces days of computation to seconds, so some error is worth it, but possibly it could be a problem for others? The biggest issue I've found is that embree in some places returns no intersections for vectors that OBBTree does. My solution is to loop over all the vectors that returned no location using the OBBTree and add those locations to the results from embree. This could easily be added here as an optional final step using a boolean function argument, ""repair"" perhaps.
- the implementation doesn’t quite match the ray_trace function because embree requires a point and a vector rather than two points. It would be possible to match the implementation by calculating the vectors from the two points, at some extra cost.

Resolves [this support issue](https://github.com/pyvista/pyvista-support/issues/173) 


",18,18,['Hacktoberfest-accepted']
335,501605575,948,92974124,2020-10-12 14:13:04,2020-10-22 18:03:31,closed,🐛 Fix axis problem on ParametricEllipsoid,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
resolve #800

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

![test](https://user-images.githubusercontent.com/7513610/95756451-c313e280-0ce0-11eb-9f5d-b6a9cc9e330d.png)
",3,1,['Hacktoberfest-accepted']
336,501090383,946,92974124,2020-10-11 06:51:02,2020-10-22 17:30:54,closed,🐛 improve Renderer wrappings on BasePlotter,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
resolve #858

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",1,1,['Hacktoberfest-accepted']
337,500995453,945,92974124,2020-10-10 15:40:52,2021-01-22 05:06:41,closed,📷 Add camera object,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Add camera zoom and up

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
resolve #863

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details
```Python
import pyvista as pv
from pyvista import examples

mesh = examples.load_airplane()
p = pv.Plotter()
p.add_mesh(mesh)
```
![p](https://user-images.githubusercontent.com/7513610/95670676-50641380-0bc9-11eb-96ab-e9b18e84a247.png)

```Python
p.camera.zoom(5)
```
![p2](https://user-images.githubusercontent.com/7513610/95670679-58bc4e80-0bc9-11eb-97c4-810702c42c3e.png)

```Python
p.camera.up([0, 1, 0])
```
![p3](https://user-images.githubusercontent.com/7513610/95671226-36c5ca80-0bcf-11eb-8313-5d1ed62c481a.png)
",7,21,[]
338,500578840,944,92974124,2020-10-09 13:09:41,2020-10-12 09:23:26,closed,Make the QtDeprecationError message clearer,"Follow https://github.com/pyvista/pyvista/issues/826#issuecomment-656718445 to make the `QtDeprecationError` message clearer.

Closes https://github.com/pyvista/pyvista/issues/826 ",1,1,['maintenance']
339,500381706,943,92974124,2020-10-09 06:39:19,2020-10-13 03:28:01,closed,Add missing f for f-string.,"### Overview

A string in DataSetAttributes was not marked as an fstring when it should be, this adds it.
",1,1,[]
340,500381381,942,92974124,2020-10-09 06:38:38,2020-10-23 15:06:42,closed,Remove private array appending helpers.,"### Overview

This would remove the helper methods for appending arrays in common.py, they don't really do much as private methods and removing them would remove 100 lines.
",9,2,['Hacktoberfest-accepted']
341,500339524,941,92974124,2020-10-09 04:39:19,2020-10-09 15:24:54,closed,Add new banner to homepage and README,"Now its a bit more clear to newcomers what all PyVista is capable of when they land on the docs homepage

<img width=""1396"" alt=""Screen Shot 2020-10-08 at 10 35 47 PM"" src=""https://user-images.githubusercontent.com/22067021/95543907-f8ee5980-09b6-11eb-8df2-f9d7a42dc712.png"">


",1,1,['documentation']
342,500329940,940,92974124,2020-10-09 04:04:35,2020-10-23 15:25:01,closed,A few more examples for the gallery,This adds 6 new examples to the gallery,6,7,['documentation']
343,500285063,939,92974124,2020-10-09 01:35:32,2021-01-25 05:42:10,closed,💚 Update CI environment,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
[Python3.9 is realeased](https://docs.python.org/3.9/whatsnew/3.9.html) and the support of [ubuntu16.04 will end in 2021 April](https://wiki.ubuntu.com/Releases). This Pull Request is the update of CI.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",4,3,[]
344,500256740,938,92974124,2020-10-08 23:59:29,2020-10-09 03:30:29,closed,Add texture map to sphere filter,"Inspired by https://github.com/pyvista/pyvista-support/issues/257

Though this is useless to that issue as the approach given there is what is needed for that exmaple


",1,3,[]
345,500106946,936,92974124,2020-10-08 18:27:00,2020-10-13 14:57:26,closed,Normalize by scale when computing 4x4 transform,"### Overview

It is convention that a when using a 4x4 homogeneous transformation matrix, the last element represents an inverse scale. This is described briefly in the third item of section Using homogeneous coordinates on [Wikipedia](https://en.wikipedia.org/wiki/Scaling_(geometry)). This change has been tested locally and it mimics the behavior of other libraries. If the last coordinate is 0, it could induce a division by zero error. 

### Details

- Add scaling to the `transform` method. 
",5,2,['Hacktoberfest-accepted']
346,500086898,935,92974124,2020-10-08 17:47:11,2020-10-08 20:41:18,closed,Make rendering optional when adding meshes and actors,"There are 2 main reasons for this:

- Huge speed gain when hiding and displaying meshes.

- It looks much more professionnal when clicking a button to see all the changes at once.

This was executed in my app, but just to show the speed difference:

```
@timeit
def test_render(render=True):
    for i in range(20):
        actor = self.vtk_widget.add_mesh(s.mesh, None, scalars=scalars, clim=clim, cmap=cmap,
                                         label=None, reset_camera=reset_camera, scalar_bar_args=settings,
                                         show_scalar_bar=True, name=""{0}"".format(i), annotations=annotations,
                                         stitle=scale.title, pickable=s.pickable, render=render)
    if not render:
        self.vtk_widget.render()
```

```
test_render(False)
'test_render'  180.01 ms
test_render(True)
'test_render'  2520.14 ms
test_render(False)
'test_render'  185.01 ms
test_render(False)
'test_render'  178.01 ms
test_render(True)
'test_render'  2518.14 ms
```

That's a nice 14X increase in speed.",5,4,[]
347,500042078,934,92974124,2020-10-08 16:22:24,2020-10-09 02:51:36,closed,Enforce retention of field_arrays for all filters,"This adds a condition that will detect when the data/output has empty field_arrays but its original input has field_arrays, and update the field_arrays when this happens.

Resolves #930 ",1,5,[]
348,499902839,933,92974124,2020-10-08 12:57:09,2020-10-08 14:22:32,closed,🐛 BUG: Fix area property #926,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
See #926

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",2,2,[]
349,499698035,932,92974124,2020-10-08 06:40:21,2020-10-08 22:18:41,closed,Add checking if the number_of_cells corresponds to the offset and cel…,"### Overview

When creating UnstructuredGrid from my own set of points I found out that `pyvista` created an invalid mesh
from wrong input arrays without any info to a user. It happens even if it's obvious that the mesh is invalid just looking on the shapes of input arrays. It took me a while to figure out that the problem was in the way I prepared those arrays.

I believe this PR would improve user experience when constructing UnstructuredGrid in complicated situations.

### Details

An actual case this PR could help with in the future:
https://github.com/pyvista/pyvista-support/issues/256

",5,2,[]
350,499627091,931,92974124,2020-10-08 03:12:11,2020-10-08 14:21:24,closed,Skip flaky clip fliter tests,"### Overview

This PR disables two tests on Windows as this fails under Python 3.6.  We can consider enabling this later, but at the moment it seems like it's worthwhile to have this test simply skipped as it segfaults and doesn't occur locally on Windows.

There's no indication that this is is due to `pyvista` either, and might simply be a VTK bug.
",1,1,['testing']
351,498762903,929,92974124,2020-10-06 18:49:05,2020-10-07 18:46:22,closed,Remove the temporary blue color on meshes when using add_mesh on large datasets,"This resolves issue #927 by changing the order in which the actor is created. To do that, `add_actor` is receiving an actor instead of the mapper.
",3,2,[]
352,498612816,928,92974124,2020-10-06 14:58:08,2020-10-07 23:08:24,closed,BUG: Fix get_image_depth,Closes #920,3,1,[]
353,497238486,925,92974124,2020-10-03 08:18:04,2020-10-30 06:47:32,closed,"Refactor Texture, add ability to load from file.","### Overview

Various docstring and readability changes in Texture.

Added the ability for Texture to read load from file. This involves a change to DataObject._load_file to return the vtkObject it read. I've added DataObject._from_file() which seems to match the other methods used to create objects. 

It's not necessary to import and use read_texture(), image_to_texture() or numpy_to_texture(), so they could be removed but they're referenced in the docs.",7,16,"['enhancement', 'Hacktoberfest-accepted']"
354,497211721,923,92974124,2020-10-03 04:18:44,2020-10-08 03:17:58,closed,add find_closest_cell filter,"### Overview

For https://github.com/pyvista/pyvista-support/issues/228

This can only find one cell at a time. From a few trials, I am finding that trying to parallelize this with a thread pool taks just as long.



",10,7,[]
355,497205483,922,92974124,2020-10-03 03:16:04,2020-10-07 03:06:32,closed,Delete obbTree to avoid memory leak,"### Overview

This should resolve #914. @Keou0007, would you please confirm?


### Details

```py
import pyvista as pv

start = [0, 0, 0]
stop = [-0.5, -0.5, 0.5]

for i in range(10000):
    mesh = pv.Sphere()
    point, cell = mesh.ray_trace(start, stop, first_point=True)
```

| master | this branch |
|---|---|
| ![master](https://user-images.githubusercontent.com/22067021/94981989-44ef5900-04f4-11eb-8acd-51f48313b77e.png) |  ![fix](https://user-images.githubusercontent.com/22067021/94981992-491b7680-04f4-11eb-8694-0d20bd562264.png) |


@pyvista/developers, should we more broadly implement `__del__` on the `Common` and clean up other objects?


",2,2,['bug-fix']
356,497198097,921,92974124,2020-10-03 02:02:58,2020-10-03 03:29:27,closed,Refactor various common.py methods.,"### Overview

Move axis_rotation to helpers.py

Remove Common._remove_array, marked as internal helper, no longer necessary and outdated.

Initialize _textures  in \_\_init\_\_ instead of creating when accessed.

Use pathlib in save(), _load_file and allow them to take a pathlib.Path.

Various small changes/renaming.
",0,8,[]
357,497095840,919,92974124,2020-10-02 19:30:10,2020-10-02 22:43:12,closed,Render Prior to Callback on Picking,"### Overview

This PR forces a render prior to running the callback when picking cells.  This fixes undesired behavior as noted by #916 for long callbacks.
",1,1,[]
358,496804581,917,92974124,2020-10-02 09:53:23,2020-10-02 21:55:24,closed,Refactor Common.find_closest_point(),"### Overview

Clean up find_closest_point a bit.
",1,2,[]
359,496572255,915,92974124,2020-10-01 22:05:59,2020-10-07 18:50:44,closed,Raise exception instead of producing empty screenshots,"Screenshotting through `.show` produces the desired images, but calling `.screenshot` just produces empty files. That's because of the `._first_time` variable preventing actual rendering. In show it is set to `False`, thus it works -> do it here too.",10,2,[]
360,496081995,913,92974124,2020-10-01 08:47:15,2020-10-04 00:45:50,closed,✨ Add shrink filter,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Shrinking mesh by using [`vtk.vtkShrinkFilter`](https://lorensen.github.io/VTKExamples/site/Python/GeometricObjects/ShrinkCube/) .

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->

![shrink](https://user-images.githubusercontent.com/7513610/94830356-73aef600-0446-11eb-9a26-2c3c3e6aecdb.png)

### Details

- Script of pyvista is following. Thanks @banesullivan @akaszynski for idea.

```Python
import pyvista 

mesh = pyvista.Sphere()
shrunk_mesh = mesh.shrink(shrink_factor=0.8)
```
",8,19,['enhancement']
361,495229994,912,92974124,2020-09-30 03:35:58,2020-09-30 16:31:54,closed,🌇 Sunset of Python3.5,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Additional modification of #905

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None
",0,1,[]
362,495193136,911,92974124,2020-09-30 01:01:54,2020-09-30 23:43:49,closed,Use f-strings where possible.,"### Overview

With #905, f-strings can be used.

Converts .format and % syntax to f-strings where possible, including docs.

Some of the conversion was automated so have some caution reviewing.


",5,5,[]
363,495042152,910,92974124,2020-09-29 19:06:47,2020-10-01 17:00:07,closed,Make optional the visibility filter in add_point_labels,"Adds a new kwarg `always_visible` to `BasePlotter.add_point_labels`, default `False` (the previous default behavior.) When `True`, skip the `vtkSelectVisiblePoints` stage.
",11,1,[]
364,494511880,909,92974124,2020-09-29 03:02:19,2020-09-29 14:07:22,closed,🚚 Update video path,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Small fix of video path which is split and organized.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
#883

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",2,1,[]
365,493784484,907,92974124,2020-09-27 22:08:48,2021-01-25 06:06:18,closed,💚 Add isort in CI,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Let's add [isort](https://github.com/timothycrosley/isort) in CI !
![image](https://user-images.githubusercontent.com/7513610/88816904-df32d800-d1f7-11ea-84ac-116f543ef881.png)

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
https://github.com/pyvista/pyvistaqt/pull/43

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->
#288

### Details

- None

",6,11,['maintenance']
366,493633329,906,92974124,2020-09-26 21:57:54,2020-10-09 02:50:17,closed,Fix Plot Opacity Array,"### Fix Plot Opacity by Array

Opacity plotting when ``n_colors`` is specified is broken as reported by https://github.com/pyvista/pyvista-support/issues/251.  This fixes the ``n_colors`` argument.

The first issue as noted by that issue is that opacity is normalized internally, which I feel is non-idea as it's not possible to have part of the mesh with an opacity of 0.5 and the rest as 1, as normalizing the opacity scalars will cause half the mesh to be hidden and half to be fully visible.  Instead, this PR proposes that the opacity scalars not be normalized and a warning be issued when the scalars are outside the range ``[0, 1]``.

@banesullivan, since you're the one who implemented the opacity by scalars, I'd like your input before overwriting this.

Example Code:
```py
import numpy as np
import pyvista as pv

ellipsoid = pv.ParametricEllipsoid(10, 5, 5)
ellipsoid.point_arrays[""color""] = np.linspace(0,10,len(ellipsoid.points))
ellipsoid.point_arrays[""opacity""] = np.where(ellipsoid.points[:, 0] > 0, 0.5, 1)

ellipsoid.plot(scalars=""color"", n_colors=5, opacity=""opacity"")
```

Before Fix:
![image](https://user-images.githubusercontent.com/11981631/94350941-eb2cf180-0010-11eb-84a5-8b1f05e4d90a.png)

After Fix:
![image](https://user-images.githubusercontent.com/11981631/94350943-f1bb6900-0010-11eb-9ab2-99716a40d1a5.png)",4,2,[]
367,493572999,905,92974124,2020-09-26 12:49:10,2020-09-28 17:35:26,closed,🌇 Sunset of Python3.5,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
🌇 Python3.5 security support Ended 1 week and 3 days ago (13 Sep 2020). Let's finish support for it.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- https://endoflife.date/python
- See https://github.com/pyvista/pyvistaqt/pull/47
- See https://github.com/pyvista/pyvistaqt/pull/60",4,3,[]
368,491940798,902,92974124,2020-09-23 17:48:19,2020-09-24 00:04:58,closed,Patch to 0.26.1,"### Overview
This PR proposes a patch release to 0.26.1 to fix three major bugs:

- Fix renderer layers (#893)
- BUG: Fix ref cycle problem (#894)
- fixed edge case where scalar bar did not contain key (#899)

Feature PRs will not be included as this will just be a bug-fix release.  Upon merge with `release/0.26`, I'll push a `0.26.1` tag from the branch.

Please let me know if there are any bugs that should be patched in this release.",2,4,[]
369,491869765,900,92974124,2020-09-23 15:37:21,2020-09-23 15:39:59,closed,Patch Release 0.26.1,"## Release 0.26.1
This release patches the eye dome rending issue and an edge case where it is impossible to remove an actor when the scalar bar is missing the actor key.


Commits:
- fixed edge case where scalar bar did not contain key (#899)
- Fix renderer layers (#893)
- version bump to 0.26.1

",0,5,[]
370,491863962,899,92974124,2020-09-23 15:28:10,2020-09-23 17:31:17,closed,Fix scalar bar slot lookup edge case,"### Overview

This PR patches an edge case where its impossible to remove an actor when the scalar bar does not actually have an actors mapper from `_scalar_bar_mappers`.  Bug discovered in #897.

Code reposted for clarity:

```python
import numpy as np 
import pyvista as pv
# Volume rendering is not supported with Panel yet
pv.rcParams[""use_panel""] = False
pv.rcParams[""volume_mapper""] = 'gpu'

''' plot '''
values = np.linspace(0, 10, 1000).reshape((20, 5, 10))
grid = pv.UniformGrid()
grid.dimensions = np.array(values.shape) + 1
grid.origin = (100, 33, 55.6)  # The bottom left corner of the data set
grid.spacing = (1, 5, 2)  # These are the cell sizes along each axis
grid.cell_arrays[""values""] = values.flatten(order=""F"")  # Flatten the array!
values_flat =  values.flatten(order=""F"")

scargs=dict(
    position_x=0.5,
    position_y=0.1
)

name='foo'
cmin=values.min()
cmax=values.max()
p = pv.Plotter(notebook=False)
p.add_mesh(grid,show_edges=True, name=name, clim=[cmin,cmax], scalar_bar_args=scargs)
p.add_mesh(grid.outline(),show_edges=True) 

def func(value): 
    ''' callback function '''
    thresh = grid.threshold(value, scalars='values')

    if thresh.n_points < 1:
        p.remove_actor(name)
    else:
        p.add_mesh(thresh,show_edges=True, name=name, clim=[cmin,cmax])
    return

p.add_slider_widget(callback=func,rng=(cmin,cmax))
p.show()
```

Error occurs at ``p.remove_actor(name)`` without this PR.
",2,1,[]
371,489890061,896,92974124,2020-09-20 11:12:01,2020-09-23 14:46:13,closed,"✏️ Add ""Getting Started as a Translator""","### Overview

<!-- Please insert a high-level description of this pull request here. -->
Same with https://github.com/sphinx-doc/sphinx/pull/8223

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",1,2,[]
372,489279195,894,92974124,2020-09-18 12:18:01,2020-09-23 15:59:07,closed,BUG: Fix ref cycle problem,"This code:
```
import gc
import time
import pyvista as pv
from pyvistaqt import BackgroundPlotter
from pyvista import examples
vol = examples.download_knee_full()

for _ in range(10):
    plotter = BackgroundPlotter()
    plotter.add_volume(vol)
    plotter.show()
    plotter.close()
    plotter.deep_clean()
gc.collect()
time.sleep(2)
```
Run with:
```
mprof run mem.py; mprof plot
```
Produces this on `master`:
![Screenshot from 2020-09-18 07-49-28](https://user-images.githubusercontent.com/2365790/93596448-56c6ed00-f987-11ea-8453-5d1c0c8f89a1.png)

And this on this PR:

![Screenshot from 2020-09-18 07-49-51](https://user-images.githubusercontent.com/2365790/93596469-5d556480-f987-11ea-9e42-82eef3f48d9f.png)

Getting rid of `volume` was enough to fix it, but I figure getting rid of `textactor` is also a good idea.",1,1,[]
373,484900123,893,92974124,2020-09-11 10:12:12,2020-09-23 15:23:09,closed,Fix renderer layers,"This PR fixes the issue with renderer layers. From https://github.com/pyvista/pyvista/issues/892#issue-698760869 I tracked down the issue to https://github.com/pyvista/pyvista/pull/854 and fixed it by incrementing the layer index in a more generic way.

In my experiments, this fixes the [edl example](https://docs.pyvista.org/examples/02-plot/edl.html) and still keeps the benefits of #854.

Closes #892",3,1,['bug-fix']
374,484119284,891,92974124,2020-09-10 17:16:02,2020-09-11 19:13:56,closed,Improve coverage of pyvista/utilities,This PR adds some tests for `pyvista/utilities`.,2,2,"['enhancement', 'testing']"
375,483678748,889,92974124,2020-09-10 10:58:36,2020-09-11 08:38:33,closed,Add test_picking,This PR adds some tests for picking.,7,8,"['enhancement', 'testing']"
376,482964867,888,92974124,2020-09-09 16:24:22,2020-09-09 16:44:54,closed,Fix coverage result,"Now the coverage stats are uploaded but not correct:

![image](https://user-images.githubusercontent.com/18143289/92625760-5ebcc800-f2c9-11ea-8cd9-4203787517d9.png)

This PR fixes the tests path in Azure config file.",3,1,['enhancement']
377,482863137,887,92974124,2020-09-09 13:55:21,2020-09-09 16:05:51,closed,Fix uploaded coverage stats,This PR follows https://github.com/pyvista/pyvista/pull/886 and (hopefully) fixes Codecov coverage badge ~and improves overall coverage stats.~,3,1,['enhancement']
378,482848493,886,92974124,2020-09-09 13:33:20,2020-09-09 14:52:16,closed,Add Makefile targets for coverage,"This small PR brings some convenience targets to the `Makefile` similarly to https://github.com/pyvista/pyvistaqt/pull/36.

I plan to work on fixing the codecov badge and improving the overall stats in a follow-up PR.",1,1,['enhancement']
379,481786115,885,92974124,2020-09-08 05:35:03,2020-09-10 16:01:41,closed,Release 0.26.0,"It's been some time since we've had a release, and I feel that it's time considering some of our recent changes and additions.  Thanks to all who contributed to make this release ready.

@pyvista/developers, please checkout this branch and let me know if you have any issues, and we can then move forward with the release.

### New Features
- 3-lights illumination (#882)
- added clip_scalar (#877)
- Enable smooth shading for textures (#865)
- Add pathlib Support (#836)
- Enable status bars for the glyph filter (#779)
- clip closed surface for PolyData (#797)
- Add PolyData strip filter (#807)
- Add RubberBand2D interactor style (#872)

### Various documentation, spelling, and code cleanups:
- Add documentation on how to set up sphinx gallery (#783)
- Misc. documentation fixes (#829)
- Clarify clip filter docstring (#840)
- Add better Unstructured Grid Documentation (#845)
- Minor Examples Fixes (#852)
- typo fix (#864)
- Internationalization and localization of document. (#878)
- Add Filter Examples (#873)
- add section videos (#883)

### Bug fixes:
- Fix visible cell picking (#799)
- Fix get_data_range for nested MultiBlock (#793)
- Fix is_all_triangles (#832)",5,2,[]
380,480507396,884,92974124,2020-09-05 11:53:17,2020-09-05 15:59:40,closed,✏️ fix format of python code,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Python code format is broken in pyvista.Spline document. We need 1 blank line before python code. Thank you for reading.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- #866

",1,2,[]
381,479551260,883,92974124,2020-09-04 10:26:49,2020-09-07 22:28:21,closed,📝 add section videos,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
:pencil: add section videos

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- I created a section where we can share videos and materials when talking or doing tutorials at conferences about pyvista.
- I am referring to the mayavi's [this page](https://mayavi.readthedocs.io/en/latest/misc.html#tutorial-videos).

[![ReadTheDocs](https://avatars1.githubusercontent.com/oa/121738?s=40&u=0f2d91b048b026e3aa31b4c8cf49f90900a2fb0d&v=4)](https://pyvista-doc--40.org.readthedocs.build/en/40/#videos) :point_left: check RTD html build on this branch
",4,7,[]
382,478727603,882,92974124,2020-09-03 15:52:14,2020-09-07 07:11:00,closed,3-lights illumination,"This PR offers an alternative 'raymond' lighting system based on [Raymond Maple](https://github.com/enthought/mayavi/blob/master/tvtk/pyface/light_manager.py#L293-L295) [work in Mayavi](https://github.com/enthought/mayavi/blob/master/tvtk/pyface/light_manager.py#L432-L448).

I don't know what is the best way to integrate this in PyVista so I started with `BasePlotter.__init__()` with an `illumination` parameter. This is still a work in progress.

master | PR
-------|-------
![image](https://user-images.githubusercontent.com/18143289/92138312-80700800-ee0e-11ea-8ad3-2a7c08c20e66.png) | ![image](https://user-images.githubusercontent.com/18143289/92138491-b7461e00-ee0e-11ea-99f7-4671fe74f68a.png)
![image](https://user-images.githubusercontent.com/18143289/92138671-f4aaab80-ee0e-11ea-8a96-b497c2d6db3f.png) | ![image](https://user-images.githubusercontent.com/18143289/92138594-db096400-ee0e-11ea-9802-231708a05efd.png)
",2,5,['enhancement']
383,477871134,881,92974124,2020-09-02 14:44:35,2020-09-02 17:02:36,closed,🚚 fix path of Transifex,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
:truck: fix path of Transifex

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
#878

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- This is a fix of mistake in #878 :bow:

",0,1,[]
384,476961414,878,92974124,2020-09-01 09:51:21,2020-09-02 12:11:59,closed,🌐 Internationalization and localization of document.,"Hi all. I translate the pyvista document to my native language Japanese and release it in [read the docs](https://pyvista-doc.readthedocs.io/ja/latest/why.html). Easiest way to translate sphinx document is to make [CI repository](https://github.com/tkoyama010/pyvista-doc-translations) and translate document in Transifex. [sphinx](https://github.com/sphinx-doc/sphinx) project translate their document in this way by this [CI](https://github.com/sphinx-doc/sphinx-doc-translations.git) and I follow [this way](https://sphinx.readthedocs.io/).

I know that there is no resource to translate all language. But I want to give a framework to translate document to other translator.

### Overview

<!-- Please insert a high-level description of this pull request here. -->
:globe_with_meridians: Internationalization and localization of document.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
I did the same thing in mayavi project.
https://github.com/enthought/mayavi/pull/841

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->

### Details

Here is the [contributing to sphinx document translation section](https://www.sphinx-doc.org/en/master/usage/advanced/intl.html#contributing-to-sphinx-reference-translation) of sphinx.

I use Read the Docs because they have a function to [project with multiple translations function](https://docs.readthedocs.io/en/stable/localization.html#project-with-multiple-translations).

Feel free to discuss :+1:
",2,6,[]
385,476705028,877,92974124,2020-09-01 00:03:29,2020-09-03 15:01:01,closed,Add Clip by Scalar,"### Add Clip by Scalar

This PR adds clip by scalar as requested and written by @Aquan1412.

```python
import pyvista as pv
from pyvista import examples
dataset = examples.load_hexbeam()
clipped = dataset.clip_scalar(scalars=""sample_point_scalars"", value=100, invert=True)
clipped.plot()
```

![image](https://user-images.githubusercontent.com/11981631/91780236-312e9b00-ebb4-11ea-927c-4748f7b0b3cd.png)

Resolves #874 
",0,1,['feature-request']
386,476417129,876,92974124,2020-08-31 16:58:14,2020-08-31 18:51:11,closed,✏️ Fix typos.,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
:pencil2: Fix typos.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- None

",1,2,[]
387,475802985,875,92974124,2020-08-29 17:05:15,2020-08-29 20:22:44,closed,✏️ Fix typos.,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
:pencil2: Fix typos.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- Fix typos.

",0,1,[]
388,472177261,873,92974124,2020-08-23 21:01:23,2020-09-03 15:01:20,closed,Add Filter Examples,"### Add Examples to ``filters.py``

Our doc examples within `filters.py` are somewhat lacking, and this PR starts to chip away at them.",1,3,"['enhancement', 'documentation']"
389,470034479,872,92974124,2020-08-19 09:21:26,2020-08-20 08:39:16,closed,Add RubberBand2D interactor style,"This PR adds the 'RubberBand2D' interactor style.

- [x] Update testing

Closes #871 ",2,3,['enhancement']
390,468721713,870,92974124,2020-08-17 09:49:28,2020-08-18 23:12:05,closed,Control points merging in the glyph filter,"This PR adds a `clean` parameter to control the preprocessing in the glyph filter.

It is now possible to do:

```py
import numpy as np
import pyvista as pv

cells = np.array([[1, 0], [1, 1], [1, 2]])
cell_type = np.array([1, 1, 1])
points = np.array([[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]])
vectors = np.array([[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]])
grid = pv.UnstructuredGrid(cells, cell_type, points)
grid.point_arrays['vec'] = vectors

p = pv.Plotter()
p.add_mesh(grid.glyph(orient='vec', clean=False))
p.show()
```

to obtain:

![image](https://user-images.githubusercontent.com/18143289/90381165-45837b80-e07d-11ea-9603-540e998f73da.png)

Closes #869 ",4,3,['enhancement']
391,467684595,866,92974124,2020-08-13 23:39:34,2020-08-14 16:45:15,closed,✏️ fix format of python code,"### Overview

Python code format is broken in pyvista.Spline document. We need 1 blank line before python code. Thank you for reading.

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details
Please see [here](https://docs.pyvista.org/utilities/geometric.html#pyvista.Spline).

![image](https://user-images.githubusercontent.com/7513610/90197379-76f41100-de09-11ea-8dea-a5a152204830.png)

",2,5,[]
392,467683046,865,92974124,2020-08-13 23:33:48,2020-08-20 15:26:10,closed,Enable smooth shading for textures,"While working on https://github.com/pyvista/pyvista-support/issues/230, I noticed that the active `t_coords` would get wiped when doing the `smooth_shading` option. This fixes that",0,1,['enhancement']
393,467387801,864,92974124,2020-08-13 13:32:06,2020-08-13 22:14:48,closed,typo fix,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Small typo fix of docstring.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
None

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->
None


### Details

- None
",0,1,[]
394,463411271,859,92974124,2020-08-05 14:12:56,2020-08-05 19:31:09,closed,"Revert ""ENH: Capture click-and-drag events""","I'm a moron and just merged #854 without reading @banesullivan's latest comments.

We can either revert this, or fix the eye-dome lighting issue in a separate PR.

Sorry @banesullivan!",3,1,[]
395,461740692,855,92974124,2020-08-02 05:30:12,2020-08-02 14:57:45,closed,Fixed _custom_opac flag,"If we specify opacity for every point, then pyvista fails with expection:
```
File "".../pyvista/plotting/plotting.py"", line 1601, in add_mesh 
ctable[:,-1] = opacity 
ValueError: could not broadcast input array from shape (500) into shape (256)
```
Looks like it was just missed this line.",0,1,[]
396,460417229,854,92974124,2020-07-31 19:11:45,2020-08-05 14:12:19,closed,ENH: Capture click-and-drag events,"Closes #116.

![Peek 2020-07-31 15-04](https://user-images.githubusercontent.com/2365790/89068403-22e42980-d33f-11ea-8686-8260e1effba8.gif)

<details>
<summary>Code</summary>

```
import pyvista as pv
from pyvista import examples
mesh = examples.download_cow()
decimated = mesh.decimate_boundary(target_reduction=0.75)
p = pv.Plotter(notebook=0, shape=(1, 2), border=False)
p.subplot(0, 0)
p.add_text(""Original mesh"", font_size=24)
p.add_mesh(mesh, show_edges=True, color=True)
p.subplot(0, 1)
p.add_text(""Decimated version"", font_size=24)
p.add_mesh(decimated, color=True, show_edges=True)
p.show()
```

</details>

EDIT: To produce the animation above, I just used screen-capture software with actual manual click-and-drag interactions.

1. In `_add_observer`, wrap all `call` within a `try_callback`. Should make the tracebacks a bit nicer. Remove related `try/except` elsewhere
2. To get the release event we [must](http://vtk.1045678.n5.nabble.com/Mouse-button-release-event-is-still-broken-in-VTK-6-0-0-td5724762.html) subclass the InteractorStyle. Hence I reworked `_style` and `update_style` and all functions that use these (e.g., `enable_trackball_style`).
3. Use an [extra layer](https://vtk.org/pipermail/vtkusers/2018-June/102030.html) approach to actually fix the issue by disabling and re-enabling interactivity with press/release. Not 100% sure the background stuff is correct but hopefully it is.",7,2,['enhancement']
397,458845275,853,92974124,2020-07-30 03:29:01,,open,[WIP] attempt fix texture array,"There are some issues with the `Texture` class. See the bad results in docs built from `master` https://dev.pyvista.org/examples/02-plot/topo-map.html

The last release is a little better as far as the texture mapping goes. But something is awfully wrong with the array conversion.

https://docs.pyvista.org/examples/02-plot/topo-map.html

I implemented a test to resolve this but apparently the behavior changes per image

",1,1,['help-wanted']
398,458833879,852,92974124,2020-07-30 02:53:24,2020-08-04 17:41:30,closed,Minor Examples Fixes,I went perusing the examples gallery to make sure things were looking okay and made a few updates/fixes,0,2,[]
399,457359616,849,92974124,2020-07-27 19:33:24,2020-07-28 01:07:08,closed,ENH: Give traceback,"### Overview

<!-- Please insert a high-level description of this pull request here. -->

Add traceback information to callbacks.

### Details

Gives this output on a failed callback:
```
WARNING:root:Encountered issue in callback (most recent call last):
  File ""/home/larsoner/python/mne-python/mne/viz/_brain/_timeviewer.py"", line 170, in __call__
    self.brain.set_time_point(value)
  File ""/home/larsoner/python/mne-python/mne/viz/_brain/_brain.py"", line 1168, in set_time_point
    if hemi_data['mesh'] is not None:
KeyError: 'mesh'
```
Instead of just a logged warning that there was some failure. Makes debugging and blaming much easier, and is also more similar to what matplotlib gives when a callback has an error.",0,1,[]
400,456869569,848,92974124,2020-07-27 03:06:34,2020-11-08 06:13:47,closed,📺 PYVISTA_VIRTUAL_DISPLAY,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
I define a new exvironment variable PYVISTA_VIRTUAL_DISPLAY. This change makes to create a virtual display for each Plotter class instance.

```
#!/bin/bash
export PYVISTA_OFF_SCREEN=true
export PYVISTA_USE_PANEL=true
export PYVISTA_VIRTUAL_DISPLAY=true
```

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
None

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->
None


### Details

- This is to avoid bothering the user with the use of xvfb.
- This Pull Request use [pyvirtualdisplay](https://github.com/ponty/PyVirtualDisplay)
",11,23,"['enhancement', 'headless-display', 'review-critical']"
401,456669307,847,92974124,2020-07-25 21:10:20,2020-07-26 03:42:29,closed,:wrench: Fix unused variables,"bcpos is defined but is not used

### Overview

<!-- Please insert a high-level description of this pull request here. -->
bcpos is defined but is not used

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
None

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->
None

### Details

- None

",1,1,[]
402,456059927,846,92974124,2020-07-24 03:50:03,2020-07-24 12:30:32,closed,Fix typo in plotting.py,"Single typo

### Overview

<!-- Please insert a high-level description of this pull request here. -->

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- < feature1 or bug1 description >
- < feature2 or bug2 description >

",0,1,[]
403,455965840,845,92974124,2020-07-23 21:39:20,2020-07-24 14:33:49,closed,Add better Unstructured Grid Documentation,"This PR adds a new example to `create-unstructured-grid.py` as the current example is probably too basic given feedback in https://github.com/pyvista/pyvista-support/issues/210.

Output from the example shares points between cells, which is also more common and realistic.

![image](https://user-images.githubusercontent.com/11981631/88341207-68c73f00-ccfa-11ea-8b42-5130e3d4b68f.png)
",0,12,[]
404,455553713,844,92974124,2020-07-23 08:26:47,2020-07-23 11:42:36,closed,Update create-structured-surface.py,"Count typo fix

",0,1,[]
405,454869342,842,92974124,2020-07-22 04:16:56,2020-07-24 12:27:55,closed,New probe filter and massively improve interpolate filter,"### Overview

This introduces a new `probe` filter based on `vtkProbeFilter` per https://github.com/pyvista/pyvista-support/issues/203 and has some massive improvements to the `interpolate` filter.

cc @jrwrigh 

### Details

- See https://github.com/pyvista/pyvista-support/issues/203 for details on the probe filter
- The `interpolate` filter was wildly inefficient for large datasets and required the use of an intermediate `UniformGrid` during the interpolation. This removes that intermediate step so that the gaussian interpolation happens directly on the calling mesh. This has drastic performance differences when interpolating large meshes and yields the exact same results for our example use cases. The arguments for the method have rightfully changed (DEPRECATION), but it's well worth the improvement
    - So much more is possible with this implementation that was previously not doable with the uniform grid sampling approach.
    - Note that we have to cast some inputs to an unstructured grid due to how the point locator and interpolator interface with the source data.
- See the super awesome use case for the interpolate filter at the bottom of https://github.com/pyvista/pyvista-support/issues/211#issuecomment-662801004",0,7,"['enhancement', 'deprecation']"
406,454855134,841,92974124,2020-07-22 03:19:41,2020-07-22 04:38:02,closed,Update topo-map.py,"Topography typo update.

",0,1,[]
407,451380236,840,92974124,2020-07-17 19:14:19,2020-07-23 22:08:22,closed,Clarify clip filter docstring,"### Overview

The clip filter docstring currently states that ""If no parameters are given the clip will occur in the center of that dataset.""  However it isn't really clear why this is true from the defaults of the other parameters.  What if I specify just the value?  Adding this to the description of origin clarifies this.

The description of value seems to be held over from somewhere else, which is also fixed.

Additionally, I made an edit for consistency (within clip anyway) to end with a period, but I see both styles in other docstrings in this module.

### Details

I didn't make any changes, but there is inconsistent usage of `optional`. Specifying the default value in the parameter description is also inconsistent throughout the filters.  I wasn't sure what is preferred for further cleaning up the clip filter docstring. 

",1,4,['documentation']
408,449139452,837,92974124,2020-07-14 22:12:22,2020-07-24 12:28:43,closed,Feat: Implement compute_derivative,"### Overview

This PR will implement the extra quantities available for computation in `vtkGradientFilter`. Specifically, gradient, divergence, vorticity, and Q-criterion. 

Resolves #831 

### Details

- Add `compute_derivative` method with options for all 4 quantities in `vtkGradientFilter`
- Wrap `compute_gradient` with `compute_derivative` method

TODO:
 - [x] Implement new functionality in `compute_derivative`
 - [x] Wrap `compute_gradient` with new function
 - [x] Add tests
 - [x] Update example documentation

",6,11,"['enhancement', 'deprecation']"
409,449055527,836,92974124,2020-07-14 18:56:23,2020-07-15 05:30:46,closed,Add pathlib Support,"### Pathlib Support

This PR adds pathlib support and resolves #833, allowing:
```python
import pyvista as pv
from pathlib import Path
vtuFilePath = Path(r'./test.vtu')
pv.UnstructuredGrid(vtuFilePath)
```

This PR took longer than expected due to problems with Python3.5 and pathlib support for `~` and the many locations that we need to check for `pathlib` vs `str` in our code.",1,6,['enhancement']
410,448246126,832,92974124,2020-07-13 13:11:38,2020-07-13 18:53:01,closed,Fix is_all_triangles,"Fixes some edge cases where an empty `faces` array would evaluate to `True` in `is_all_triangles`. Also, if the mesh contained any lines or vertice cells, a false positive could occur so that was fixed too

Resolve #830 

cc @jrwrigh 

",0,2,['bug-fix']
411,447786573,829,92974124,2020-07-11 16:12:53,2020-07-13 12:40:21,closed,Misc. documentation fixes,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Fix typo and grammatical errors in documentation.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

 - Fix typo in gradients example: `vecotrs` --> `vectors`
 - Fix grammar in ""What is a mesh?"" section: ""Attributes a data values..."" --> ""Attributes are data values""

",1,2,[]
412,447656043,828,92974124,2020-07-10 21:42:01,2020-07-14 16:37:38,closed,Add tolerance argument to sample_over_line,For https://github.com/pyvista/pyvista-support/issues/201,0,4,['bug-fix']
413,446822597,825,92974124,2020-07-09 12:16:40,2020-07-09 14:02:30,closed,Fix GPU info in scooby report,"Fixes the GPU info order in the scooby report's HTML table

<img width=""731"" alt=""Screen Shot 2020-07-09 at 8 16 35 AM"" src=""https://user-images.githubusercontent.com/22067021/87038984-82c23700-c1bc-11ea-8334-60c60d78d084.png"">
",2,1,[]
414,446543062,824,92974124,2020-07-09 00:00:24,2020-11-05 05:45:19,closed,🚀 Add full featured notebook rendering 🚀 ,"### Overview

This unapologetically removes the previous `panel` notebook plotting code in favor of [`ipyvtk_simple`](https://github.com/Kitware/ipyvtk-simple). Why? Because this approach lets us utilize PyVista's ***entire feature set*** interactively in notebooks. Plus, I think we’ve fallen behind on correctly utilizing panel 😞 

![2020-07-08 19 45 18](https://user-images.githubusercontent.com/22067021/86981632-1fe98500-c155-11ea-9517-c4069462306f.gif)



### Details

- By the entire feature set, I really mean everything! Widgets, sub-plotting, eye dome lighting... you name it and now you can use it within a notebook (these features simply aren't possible with panel/VTKjs)
- Note that now we have an interactor and render window even when off-screen plotting. @akaszynski, are you okay with this? This will easily resolve #285 too
    - No more hacky checking if the plotter has an `iren` in random places
- Resolve #364 
- Relevant to #313  
- @pyvista/developers, I'd like a critical review on this one. There is a discussion in https://github.com/Kitware/ipyvtk-simple/issues/6 on whether or not this should be included directly in PyVista. With a few changes (always having an interactor), then including the two lines needed to do this in a bare try/except is well worth it in my mind. It'll give all users a quick way to utilize PyVista's full feature set directly in a notebook environment.
- @pyvista/collaborators, sorry to spam you, but it'd be great to get your feedback on this as well
- `ipyvtk_simple` is not yet on PyPI so this won't land until that happens
- this also fixes a bug when trying to fetch a screenshot before the `show()` call in some scenarios

Possible concerns
- plotters aren’t ever closed/cleaned up in this approach. The user must call `.close()`. But the implementation with panel was the same way",18,9,"['IPython/Jupyter', 'deprecation', 'headless-display']"
415,446528566,823,92974124,2020-07-08 23:05:58,2021-04-11 00:24:38,closed,Add Physically Based Rendering,"### Overview

Add Physically Based Rendering based on https://blog.kitware.com/vtk-pbr/

Needs a bit more fine-tuning and possibly a better example:

![download](https://user-images.githubusercontent.com/22067021/86978778-b0bc6280-c14d-11ea-85d2-ff16d4e186ea.png)

## More Examples

I cannot reproduce the sphere examples in that blog post perfectly. The closest I have gotten so far is the following, but they do not look like the blog post at all 😞 

```py
import pyvista as pv
from pyvista import examples

texture = examples.download_sky_box_cube_map()

# Helper to create good sphere
Sphere = lambda center: pv.Sphere(center=center, radius=0.5, theta_resolution=128, phi_resolution=128)

colors = ['red', 'teal', 'black', 'orange', 'silver']

p = pv.Plotter()

p.set_environment_texture(texture)
p.add_axes()
for i in range(5):
    color = colors[i]
    for j in range(6):
        mesh = Sphere((0.0, i, j))
        p.add_mesh(mesh, color=color,
                   pbr=True, metallic=i*2/10, roughness=j*2/10)

p.view_vector((1,0,0), (0,-1,0))
p.show()
```

![download](https://user-images.githubusercontent.com/22067021/86978887-eeb98680-c14d-11ea-8a34-78707f2b2ed6.png)

```py
color = 0.7, 0.5, 0.1

p = pv.Plotter()
p.add_axes()
p.set_environment_texture(texture)
p.add_mesh(Sphere((0,0,0)), pbr=True, color=color, metallic=0.0, roughness=0.2,)
p.add_mesh(Sphere((0,0,1)), pbr=True, color=color, metallic=1.0, roughness=0.2)
p.view_vector((-1,0,0), (0,-1,0))
p.show()
```

![download](https://user-images.githubusercontent.com/22067021/86978891-f0834a00-c14d-11ea-9a8c-9907cc6c8bc7.png)
",22,30,['enhancement']
416,445617594,821,92974124,2020-07-07 19:31:08,2020-07-08 23:14:50,closed,Add texture demo with scalar data,"Adds an example to show scalar data over a textured mesh. I forgot how to do this and figured I'd add an example to document this
",0,2,[]
417,442287384,819,92974124,2020-06-30 20:53:02,2020-07-01 18:20:43,closed,MAINT: Log init start/stop,"### Overview

1. Add a default streamhandler so that you can just do `pyvista.plotting.log.setLevel(10)` for example if you want the output to be printed. Does nothing by default because logging.CRITICAL is the default level
2. Add init start/stop debug-level messages",5,2,[]
418,441468526,818,92974124,2020-06-29 14:52:24,2020-07-09 14:11:41,closed,Follow up #793: fix get_data_range,"A follow up to #793 to fix `get_data_range` for meshes without scalar data.

#793 broke the widget plotting helpers like: 

```py
mesh = pv.Sphere()
plotter.add_mesh_clip_plane(mesh)
```",1,1,[]
419,440688246,817,92974124,2020-06-26 16:54:33,2020-07-16 21:18:36,closed,Add release suffix to version string,"### Overview

Resolve #814


### Details

- Adds a suffix to the version string. On actual releases, this will need to be empty
- I'm pretty positive this follows https://www.python.org/dev/peps/pep-0440/
",4,4,['maintenance']
420,438784661,813,92974124,2020-06-23 19:51:41,2020-06-23 20:00:25,closed,Fix typo in slice_along_axis docstring,"Fixes a small typo in the `slice_along_axis()` docstring. 

Sorry if this isn't pointing to the correct branch for a change like this -- feel free to close this PR and just amend the typo with the next PR getting merged.",1,1,[]
421,438737504,812,92974124,2020-06-23 18:12:32,2020-06-23 19:58:40,closed,Use smooth shading on gif example,"### Adds smooth shading to the gif example

Minor improvement to the gif example at [gif.py](https://docs.pyvista.org/examples/02-plot/gif.html#sphx-glr-examples-02-plot-gif-py).  While playing around with another project, I discovered that you have to update the normals on the fly when animating if you want to get an accurate rendering of your plot when using smooth shading.  Figured it's important to write this down somewhere and and example seems like a good spot for it.

Before:
![image](https://user-images.githubusercontent.com/11981631/85439537-6784e400-b58d-11ea-8532-b3db7306fa4f.png)


After:
![image](https://user-images.githubusercontent.com/11981631/85439477-5340e700-b58d-11ea-89a0-c228402fc938.png)
",0,1,[]
422,437492380,809,92974124,2020-06-21 04:04:24,2020-06-22 23:51:47,closed,Fix UniformGrid points and extract_subset,"### Overview

In answering https://github.com/pyvista/pyvista-support/issues/154#issuecomment-647074618, I discovered some weirdness with the `extract_subset` filter (`vtkExtractVOI`) where the origin might not be what a user expects. This PR provides an extra step to that filter to adjust the result to be more in line with what you'd expect.

Also, this made me realize that I implemented the `points` property of `UniformGrid`s incorrectly as it did account for the extent.


### Details

- changed output of `extract_subset` to be more logical/user-friendly
- fixed bug when fetching points of a `UniformGrid` mesh with a non-origin based extent

",0,3,"['enhancement', 'bug-fix']"
423,437486465,808,92974124,2020-06-21 02:33:53,2020-07-14 01:48:03,closed,Vector slice example,Some more examples,0,1,[]
424,437357998,807,92974124,2020-06-20 03:26:18,2020-06-24 01:24:45,closed,Add PolyData strip filter,"### Overview

Adds `vtkStripper` filter support

Resolves https://github.com/pyvista/pyvista-support/issues/169


### Details

- See test and https://github.com/pyvista/pyvista-support/issues/169 for demo

",0,5,['enhancement']
425,437355178,806,92974124,2020-06-20 02:56:29,2020-06-22 23:52:22,closed,Type check PolyData boolean filters,Resolve #789,0,1,"['enhancement', 'bug-fix']"
426,437346699,805,92974124,2020-06-20 01:27:17,2020-06-22 23:52:51,closed,Fix camera reset in add_point_labels,"Resolve #804 

@rodrigomologni, could you please review?",1,2,['bug-fix']
427,434043447,799,92974124,2020-06-13 19:00:30,2020-06-14 22:45:05,closed,Fix visible cell picking,"### Overview

This fixes all the issues we were having with visible cell picking 🎉 

resolves https://github.com/pyvista/pyvista-support/issues/177


### Details

In summary: `vtkSelectionNode` was giving us the cell IDs after running a `vtkDataSetSurfaceFilter` and a `vtkTriangleFilter`. So we have to mimic that pipeline to map the selected cells back to the original mesh. Easy-peasy once I thought about it a little bit...

An important note... the representation style MUST be `surface`!!!!!!!!!! Using `wireframe` or points will break this pipeline. I added a warning for this.",11,2,['bug-fix']
428,434031940,798,92974124,2020-06-13 17:13:16,2020-07-08 23:35:00,closed,Patch for auto_close warning,"### Overview

I believe this is a fix for #791 - haven't tested because I'd have to boot up a windows VM

@rodrigomologni, would you be able to test this for us?

",4,1,['bug-fix']
429,434030766,797,92974124,2020-06-13 17:03:16,2020-06-17 17:00:38,closed,clip closed surface for PolyData,"See #794 

This only supports single plane clipping though the underlying VTK filter supports plane collections.

```py
import pyvista as pv
mesh = pv.Sphere()
cclipped = mesh.clip_closed_surface(normal='-x')
oclipped = mesh.clip(normal='-x', invert=False)

p = pv.Plotter(shape=(1,2))
p.add_mesh(cclipped, show_edges=True)
p.subplot(0,1)
p.add_mesh(oclipped, show_edges=True)
p.link_views()
p.view_isometric()
p.show()
```

![download](https://user-images.githubusercontent.com/22067021/84574758-b43f1280-ad76-11ea-8f25-118b0f266218.png)
",4,2,['enhancement']
430,433917218,795,92974124,2020-06-12 23:06:13,2020-06-16 04:56:24,closed,Add note to widget docs about significance of the name kwarg in add_mesh,"# Details

It's not obvious [in the excellent widget docs](https://docs.pyvista.org/plotting/widgets.html) that the `name` kwarg set in `Plotter.add_mesh` is crucial for callbacks to function seamlessly. E.g. in the sphere slider example:
```python
def create_mesh(value):
    res = int(value)
    sphere = pv.Sphere(phi_resolution=res, theta_resolution=res)
    p.add_mesh(sphere, name='sphere', show_edges=True)
    return
```
the fact that `name='sphere'` is passed is responsible for discarding meshes from previous calls to the callback.

The meat of this PR is to take explicit note of this keyword argument being passed. While I'm at it I also fixed a few typos and semantic mistakes on the same doc page. 

# Issues during build
I've also run into a few warnings and errors while I was building the docs locally. I can't tell whether some of these are actual issues (and not just misconfiguration on my side), so I'll post these here. I followed [the contributing guide](https://github.com/pyvista/pyvista/blob/master/CONTRIBUTING.md) so I executed the following commands from the `docs/` directory. I didn't run the pytest suite first, but I wouldn't expect that to be a problem in light of `make clean`.

### During `make doctest`
a. 15 different warnings of the kind:
```
WARNING: image file not readable: core/../images/auto-generated/structured_cube.png
```
b. Two indentation warnings:
```
/home/user/pyvista/pyvista/plotting/plotting.py:docstring of pyvista.BasePlotter:7: WARNING: Unexpected indentation.
/home/user/pyvista/pyvista/plotting/plotting.py:docstring of pyvista.Plotter:23: WARNING: Unexpected indentation.
```

### During `make html -b linkcheck`:
c. two warnings:
 ```
/home/user/pyvista/docs/examples/02-plot/depth-peeling.rst:15: WARNING: 'any' reference target not found: pyvista.rcParams
/home/user/pyvista/docs/plotting/plotting.rst:63: WARNING: undefined label: qt_ref (if the link has no caption the label must precede a section header)
```

Four link errors in three files:
```
writing output... [ 86%] getting-started/installation
(line  115) broken    https://github.com/pyvista/pyvista/blob/master/CONTRIBUTING.md#testing - Anchor 'testing' not found
```
d. This is weird, from what I can tell the anchor exists and works.

```
writing output... [ 89%] index
(line   52) broken    https://dev.azure.com/pyvista/PyVista/_build/latest?definitionId=3&branchName=master - 404 Client Error: Not Found for url: https://dev.azure.com/pyvista/PyVista/_build/latest?definitionId=3&branchName=master
```
e. This link is indeed broken for me; I suspect the existence of the link has to do with CI.

```
writing output... [ 91%] plotting/itk_plotting
(line   18) broken    https://github.com/InsightSoftwareConsortium/itkwidgets#installation - Anchor 'installation' not found
(line    6) broken    https://github.com/InsightSoftwareConsortium/itkwidgets#installation - Anchor 'installation' not found
```
f. Again this anchor seems to exist and work.

g. And with both runs of `sphinx` I got a deprecation warning:
```
/home/user/pyvista_test_env/lib/python3.7/site-packages/sphinx/deprecation.py:52: RemovedInSphinx40Warning: sphinx.builders.html.DirectoryHTMLBuilder is deprecated. Check CHANGES for Sphinx API modifications.
```


## TODO

- [x] add significance of the `name` kwarg
- [x] fix existing typos 
- [x] reorder so that examples come before documentation
- [x] fix indentation warnings in plotting.py (point b. above)
- [x] fix the Qt reference, point to pyvistaqt (point c. above)",9,10,['documentation']
431,433819519,793,92974124,2020-06-12 18:09:56,2020-06-18 12:35:24,closed,Fix get_data_range for nested MultiBlock,"### Overview

Fixes an issue if trying to plot a nested MultiBlock with a common scalars array

",2,3,"['bug-fix', 'deprecation']"
432,431870096,788,92974124,2020-06-09 15:06:13,2020-06-09 15:51:50,closed,Do not include docs in sdist,This PR resolves #787 by not including the `docs` directory in the source distribution.,0,4,[]
433,431265271,786,92974124,2020-06-08 16:44:38,2020-06-08 17:37:17,closed,Deploy sdist,"### Upload sdist to PyPi

Turns out a whl isn't a replacement for the source distribution.  This PR adds back in uploading the sdist.

Additionally, thought it would be great to always test uploading, and this PR adds in a step to the CI to always test out uploading to PyPi testing when not tagged.",0,2,[]
434,429228478,783,92974124,2020-06-06 14:19:12,2020-06-13 19:46:27,closed,Add documentation on how to set up sphinx gallery,"### Overview

Follow up to #782 for documentation",0,1,['documentation']
435,428807428,782,92974124,2020-06-05 22:14:55,2020-06-06 14:18:30,closed,Fix screenshots for Sphinx Gallery,"Many projects use `pyvista` for `sphinx_gallery` and this PR seeks to keep the past behavior without sacrificing performance by unnecessarily always saving screenshots.

On initialization, `pyvista` checks if `sphinx` has been imported.  If it has, screenshots are automatically saved upon the closing of a plot.

Follow up to #730 ",2,1,"['bug-fix', 'priority-super-duper-high']"
436,428600269,781,92974124,2020-06-05 17:21:13,2020-06-05 17:21:52,closed,Update release branch to 0.25.2,Simply updates release branch to 0.25.2,0,4,[]
437,428191036,780,92974124,2020-06-05 02:55:04,2020-06-13 19:46:07,closed,Fix BackgroundPlotter references in docs,Some minor fixes,0,1,['documentation']
438,428184257,779,92974124,2020-06-05 02:27:44,2020-06-14 22:46:08,closed,Enable status bars for the glyph filter,The glyph filter has a reputation for taking a long time... this enables a bit more transparency to what it's up to. (Typically its the clean operation that will take a while...),7,1,[]
439,428022066,778,92974124,2020-06-04 18:42:58,2020-06-04 22:02:44,closed,Build and install wheel,"### Wheels!
Now that I've been using `pyvista` more on windows I've noticed that it takes a bit longer to install as `pip` builds a wheel and installs that instead of the source dist.  In an effort to test what's actually being installed, our CI now builds, installs, and tests against the wheel rather than the cloned source.

This PR also uploads the wheel by default and I've bumped the version with a minor patch so the latest version contains a wheel rather than the tar ball.",0,1,['deployment']
440,427197408,777,92974124,2020-06-03 13:20:26,2020-06-03 13:57:52,closed,Add .mailmap item to fix credentials of squashed commits,"Add my credentials to .mailmap to fix the git log for squashed commits.

My web settings are such that web actions hide my email address, but this seems to affect how squashed commits are created. The .mailmap restores my credentials in the git log for these cases.",0,1,[]
441,426886485,776,92974124,2020-06-02 23:47:41,2020-11-10 17:05:28,closed,Add table of glyphs option to DataSetFilters.glyph,"### Overview

[vtk supports tables of glyphs from which glyphs are looked up](https://vtk.org/doc/nightly/html/classvtkGlyph3D.html#details). This PR exposes this functionality. Originally mentioned [here](https://github.com/pyvista/pyvista-support/issues/157#issuecomment-631158591).

### Details

We can allow tables of glyphs in a backward-compatible way by allowing a sequence of geometries as well as single (scalar) geometries to be passed as [the `geom` kwarg of `glyph`](https://github.com/pyvista/pyvista/blob/master/pyvista/core/filters.py#L949-L950). An `indices` optional keyword is added, which is mandatory in case `geom` is a sequence, and in this case has to be the same length.

Here is a small example (taken from the above linked issue) with the new functionality:
```python
import numpy as np
import pyvista as pv

rng = np.random.default_rng()

# get dataset for the glyphs: supertoroids in xy plane
# use N random kinds of toroids over a mesh with 27 points
N = 5
values = np.arange(N)  # values for scalars to look up glyphs by
params = rng.uniform(0.5, 2, size=(N, 2))  # (n1, n2) parameters for the toroids
geoms = [pv.ParametricSuperToroid(n1=n1, n2=n2) for n1,n2 in params]
for geom in geoms:
    # make the disks horizontal for aesthetics
    geom.rotate_y(90)

# get dataset where to put glyphs
x,y,z = np.mgrid[:3, :3, :3]
mesh = pv.StructuredGrid(x, y, z)

# add random scalars
mesh.point_arrays['scalars'] = rng.integers(0, N, size=x.size)

# construct the glyphs on top of the mesh; don't scale by scalars now
glyphs = mesh.glyph(geom=geoms, indices=values, scale=False, factor=0.3, rng=(0, N-1))

# create Plotter and add our glyphs with some nontrivial lighting
plotter = pv.Plotter(window_size=(1000, 800))
plotter.add_mesh(glyphs, specular=1, specular_power=15, smooth_shading=True,
                 show_scalar_bar=False)

plotter.show()
```
Output:
![bunch of supertoroids in a 3d grid with randomly chosen shapes from a few kinds](https://user-images.githubusercontent.com/17914410/83580101-73a3f580-a53b-11ea-929d-7071103a558a.png)

TODOs:
- [x] implement basic functionality
- [x] add tests
- [x] allow falling back to `indices = range(len(geom))` as a default? But explicit is better than implicit, and missing `indices` might hide a mistake.
- [ ] allow the user to choose between scaling by scalar or vector? The existing `scale` functionality chooses based on active scalars and that's what I've kept for now.
- [x] ~allow arbitrary arrays (rather than just scalars or vectors) to use for glyph lookup? `SetInputArrayToProcess` might make it possible somehow...~ (this [does not seem to be possible](https://vtk.org/doc/nightly/html/classvtkGlyph3D.html#a018a79d2e4604bdabd38881bb760e7b5), one can only use ""the"" scalars or vectors for lookup)
- [x] don't require `indices` when `geom` has length 1? We're going to discard the value anyway.
- [ ] maybe add examples?

Miscellaneous remarks:
 1. I went with an ""optionally sequence `geom` plus sequence `indices`"" design. The main alternative that came to mind was using an iterable of `(index, geometry)` tuples, but the former seemed more intuitive to me (and more convenient, since users are likely to generate indices as numpy arrays in one go).
 2. `indices` might need a better name.
 3. `scale`: can actually be `str`, encoding a scalar array name, but this is not documented. Not sure if this could go into this PR.
 4. `Range` is shared between scalar scaling and glyph lookup, but this seems to be by design in vtk, so there's probably not much we can do about it.
 5. I've changed `vtkDataSet` to `vtkPolyData` in the docs as a requirement for `geom`, since this is necessary for `vtkGlyph3D.SetSourceData` to work.
 6. For the sake of semantics I allowed a `np.ndarray` of geometries on input, but this is not a likely (nor preferred) scenario.",11,9,[]
442,426774924,775,92974124,2020-06-02 19:06:07,2020-06-04 17:30:55,closed,Release 0.25.0,"# Release 0.25.0
It's been three months since the last release and there are quite a few bug fixes and features that are ready to be tested.  Please see the release candidate wheels here:
https://github.com/pyvista/pyvista/releases/tag/0.25.0RC

@pyvista/developers, the next release is ready to be tested out.  Please install the wheel and post any issues you encounter here.

Ideally, we can test the RC and if there are no problems we can have the release out by the end of this week.  There are a few projects that need Python 3.8 support, and which means supporting VTKv9.

---

Here are the release notes.  I've drafted it here so we can just copy and paste it into the release.

Major API Changes
-----------------
- Moved `BackgroundPlotter` and `QtInteractor` to `pyvistaqt`.  See #719 for the reasoning, but as a summary this boils down to licencing, unit testing, and improved development.  See [pyvistaqt](https://github.com/pyvista/pyvistaqt) to test out the new module.  Wheels will be released for that as soon as we've released wheels for `pyvista==0.25.0` as it's a dependancy.
- Added better support for VTKv9.  There were several changes under the hood to VTK's `UnstructuredGrids` that need to be implemented here, as well as many changes to our unit testing and CI to support Python 3.8 and VTKv9.  See #732, #772, and #693.

Features
--------
- Removing cells or faces (#653)
- Progress bar using `tqdm` (#608)
- Plotting floors (#424)
- Additional geometry features (#449)
- Subplot groups (#696)
- Custom orientation widget (#702)

Bug Fixes
---------
- Checking vectors when setting vectors #763 
- Check overwriting dataset to avoid segfault #738 
- Fix faulthandler (#694 and #645)
-  Implicit point setters (#769)
- Ellipsoid wrapping (#705)

CI Improvements
---------------
- Unit testing is between 25-40% faster.  MacOS testing no supports multiple testing processes using `pytest-xdist`.  See #739 and #744 
- Improved code coverage #745 and #709
- Removed all example downloading from unit testing.  Greatly improves test stability (#731)
- Various speedups (#661)

Refactoring
-----------
- Removed untested `pyansys` quality method.
- Using underscore numpy types (#762)
- Optimized imports (#743)
- Line break consistent (#737)
- Use new style super() calls (#741)
- Generic load/save (#736)
- Refactored active scalars/vectors (#746)
- Better error types (#759)
- And many many more...


Contributors
------------
Thanks to all those who contributed to this release!  In no particular order:
- @JevinJ 
- @mli0603 
- @banesullivan 
- @GuillaumeFavelier 
- @dcbr 
- @tomsal 
- @tkoyama010 
- @ralovich 
- @florian-wagner 
- @imsodin 
- @larsoner 
- @adeak 
- @akaszynski ",2,2,['release']
443,426749791,774,92974124,2020-06-02 18:12:17,2020-06-02 18:45:08,closed,Hotfix/0.24.3 For Examples Path,"### Implement Hotfix for #773 and Release 0.24.3

This PR bumps the version to 0.24.3 and implements the hotfix for #773.",2,3,[]
444,426715300,773,92974124,2020-06-02 17:06:18,2020-06-02 18:02:55,closed,HOTFIX: Allow examples path failure and override,"### Allow examples path failure and override

In some rare edge cases (e.g. on a network drive), creating a network path isn't possible or might encounter race conditions where the path doesn't exist when initially checked yet exists when `pyvista` tries to create the examples path.  This PR fixes that in two ways:

- Allow the user to override the user data path with `PYVISTA_USERDATA_PATH`
- If unable to create `EXAMPLES_PATH`, set to None and raise an error when attempting to download examples.

Having a module break on initialization is a deal breaker when `pyvista` is used as a dependency.",1,2,[]
445,426223898,772,92974124,2020-06-01 21:27:20,2020-06-02 16:44:16,closed,Add VTK9 Connectivity Support,"### Add VTK9 Connectivity Support
This PR adds support for VTK v9's new connectivity arrays with the `cell_connectivity` property available for the `UnstructuredGrid` class.  This class is used extensively by `pyansys` and other closed source software and the addition of this property is critical for supporting VTK 9. 

Summary of changes between the versions:

Topology:
---------
Cell 0: Triangle | point ids: {0, 1, 2}
Cell 1: Triangle | point ids: {5, 7, 2}
Cell 2: Quad     | point ids: {3, 4, 6, 7}
Cell 4: Line     | point ids: {5, 8}

VTKv9
=====
Offsets:      {0, 3, 6, 10, 12}
Connectivity: {0, 1, 2, 5, 7, 2, 3, 4, 6, 7, 5, 8}

```python
grid.offset
grid.cell_connectivity
```

Prior to VTKv9
==============
Offsets:      {0, 4, 8, 13, 16}
Connectivity: {3, 0, 1, 2, 3, 5, 7, 2, 4, 3, 4, 6, 7, 2, 5, 8}

```python
grid.offset
grid.cells
```",1,8,['enhancement']
446,425129615,771,92974124,2020-05-29 14:11:35,2020-05-30 16:22:15,closed,Refactor Doc String Parm,"### Refactor Doc String Parm

I missed `'iso'` when testing out our `camera_position` string setter while running through our doc tests and figured I'd refactor the camera setter along the way to improve testing.

Rather than having a bunch of `if` and `elif` to test various strings, this PR introduces `CAMERA_STR_ATTR_MAP`, which maps an input string to a method (e.g. `'iso'` to `view_isometric`).  To allow us to test this, it needs to be a class global, but I can't assign a class global class methods as the class doesn't exist while it's being created.  To fix this, the implementation uses `getattr`.

If someone can think of a better way to do this, please chime in.  Otherwise, this way we kill two birds with one stone.  Any additional string options added to the class are automatically added to our testing.

Also, this PR adds a quick patch of `Renderer.deep_clean` as setting `_actors = None` has unintended consequences if anyone wants to add actors again to the `renderer` after cleaning (edge case).

I'm rapidly becoming of the opinion that if we're not testing something, it's probably broken, so the better unit testing we have, the less likely we're shipping a mildly/wildly broken release.",1,4,[]
447,424866031,770,92974124,2020-05-29 03:38:55,2020-05-29 04:18:26,closed,Jevin Jones is an author!,"Thank you for all of the excellent work, @JevinJ! It's developers like you that make PyVista awesome and further the impact this software has!!

Upon your approval, this will be merged.",2,1,[]
448,424853970,769,92974124,2020-05-29 02:49:46,2020-06-02 00:07:19,closed,Fix implicit points setters,"### Overview

Resolve #713 

The `UniformGrid` and `RectilinearGrid`'s `points` setter should not be allowed. These changes deprecate those setters to resolve the bug in #713 and address an issue where setting the points in place has no effect.

### Details

- The `UniformGrid` points are implicitly defined and thus we cannot directly set them or directly access/modify them. 
- The `RectilinearGrid` points are similarly not explicitly defined and must be set along each axial direction individually.

Now when a user tries to set the points for either of these types, they will see a detailed error message:

```py
>>> from pyvista import examples
>>> import numpy as np
>>> grid = examples.load_uniform()
>>> grid.points = np.random.rand(10, 3)
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/Users/bane/Software/pyvista/pyvista/pyvista/core/grid.py"", line 370, in points
    raise AttributeError(""The points cannot be set. The points of ""
AttributeError: The points cannot be set. The points of `UniformGrid`/`vtkImageData` are implicitly defined by the `origin`, `spacing`, and `dimensions` of the grid.
>>>
```


Unfortunately, there still remains a behavior where the user might update the points in place and no error is raised or no effect takes place:

```py
>>> import numpy as np
>>> from pyvista import examples

>>> a = examples.load_rectilinear()
>>> b = a.copy()
>>> a.points[:,0] *= 10000000
>>> np.allclose(a.points, b.points)
True
```

This is because the numpy array that was fetched from the `points` getter is modified in place and not passed back to the setter. This could still confuse users, but I think we have to leave it as is because a user may want to modify that array of points in their own workflow. To mitigate this, I updated the language in the docs for those classes' `points` getter to highlight that they return a COPY of the points.",3,6,"['bug-fix', 'deprecation']"
449,424843712,768,92974124,2020-05-29 02:07:39,2020-05-29 02:51:57,closed,FIX: except statement did not catch exception changed in #765,"See https://github.com/pyvista/pyvista/pull/765/files#r432218010

@pyvista/developers, should we go back through #765 more carefully to make sure we didn't miss more `try/excepts`s like this?",4,1,"['bug-fix', 'priority-high']"
450,424670177,767,92974124,2020-05-28 18:53:31,2020-05-28 19:24:42,closed,Revert exception changes to /examples/,"### Overview

This reverts changes to assert statements made in /examples/ in #765 
",1,1,[]
451,424634967,766,92974124,2020-05-28 17:39:32,2020-05-28 19:23:56,closed,Fix setting view direction,"### Fix setting view direction

#750 broke setting the view direction from camera position:
```python
import pyvista
plotter = pyvista.Plotter()
plotter.add_mesh(sphere)
plotter.camera_position = [-1, 2, 5]
```
```
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/home/alex/python/pyvista/pyvista/plotting/plotting.py"", line 636, in camera_position
    self.renderer.camera_position = camera_location
  File ""/home/alex/python/pyvista/pyvista/plotting/renderer.py"", line 160, in camera_position
    self.camera.SetPosition(scale_point(self.camera, camera_location[0], invert=False))
  File ""/home/alex/python/pyvista/pyvista/plotting/renderer.py"", line 40, in scale_point
    scaled = mtx.MultiplyDoublePoint((point[0], point[1], point[2], 0.0))
TypeError: 'int' object is not subscriptable
```

This slipped by our CI as we're not building our documentation on each PR.  We've known that our unit testing does not have full coverage, and this is another reason why we need to focus on improving coverage, especially with all our refactors.

This PR also improves `camera_position` setter value checking and provides a more helpful error statement when given an invalid camera position.",1,3,[]
452,424184860,765,92974124,2020-05-28 00:43:42,2020-05-28 04:31:43,closed,Better exception types,"### Overview

Changes most instances of AssertionError, RuntimeError, assert(in runtime code) to more appropriate errors.

",1,17,[]
453,424166372,764,92974124,2020-05-27 23:34:12,2020-05-28 00:33:10,closed,Better exception types,"### Overview

Changes most instances of AssertionError, RuntimeError, assert(in runtime code) to more appropriate errors.


",1,22,[]
454,424165984,763,92974124,2020-05-27 23:32:50,2020-05-28 00:55:35,closed,Check vectors are vectors,"#### New and Exciting VTK 9 Bugs
Seems that we've been spoiled a bit in VTK 8 as we've been able to set invalid active vectors without getting a warning.  Now we do:


Reproduce this using `vtk>=9.0.0` with:
```python
import pyvista
from pyvista import examples

import numpy as np
grid = examples.load_hexbeam()
grid.point_arrays['values'] = np.zeros(grid.n_points)
```

```
2020-05-28 00:58:00.464 (  82.406s) [        D7CF4740]vtkDataSetAttributes.cx:1305  WARN| vtkPointData (0x5561190ba540): Can not set attribute Vectors. Incorrect number of components.
```

However this works:
```python
grid.point_arrays['values'] = np.zeros((grid.n_points, 3))
```

We just need to implement a simple check to make sure that non-vector data isn't set as vector data.",2,2,[]
455,424149716,762,92974124,2020-05-27 22:40:12,2020-06-02 15:58:50,closed,MAINT: Underscore numpy types,"### Overview

Numpy has `np.bool`, `np.int` and `np.float` and `np.complex` as aliases for the native python types `bool`, `int`, `float` and `complex`, respectively. The numpy-native types are available as `np.bool_`, `np.int_`, `np.float_` and `np.complex_`. This PR replaces the former with the latter.

### Details

The two scenarios in which these types appear in pyvista are like

  1. `array.astype(np.bool)` and
  2. `array.dtype == np.bool`

In both cases it doesn't actually make a difference whether one uses native types or numpy types:
```python
>>> np.bool_ == np.dtype(bool) is np.dtype(np.bool_) == bool
True
# even though
>>> np.bool_ == bool
False
```
So these are not bugs, but the semantics are a bit cleaner with the proper (underscored) numpy types.",9,4,['review-critical']
456,424137147,761,92974124,2020-05-27 22:05:20,2020-05-28 14:08:32,closed,Remove pyansys Quality Property,"### Remove `pyansys` Quality Property
Quality should be computed from the `pyansys` module and we should not include any callbacks to that functionality here.  Otherwise, we would have to expand unit testing, and with some recent changes with VTK 9 any upstream bugs would be reported in this project.",1,1,[]
457,424127098,760,92974124,2020-05-27 21:37:49,2021-03-12 03:26:53,closed,"Split DataObject, Common into their own files.","### Overview

Test of splitting DataObject and Common into dataobject.py, dataset.py


",7,8,['review-critical']
458,424066029,759,92974124,2020-05-27 19:19:45,2020-05-27 20:09:25,closed,Remove usages of Exception or bare except.,"### Overview

This changes instances of 'raise Exception', 'except:', 'pytest.raises(Exception)' to more appropriate types of Exception. There are a couple I missed because external documentation doesn't say what would be raised.

",1,26,[]
459,423867759,758,92974124,2020-05-27 13:52:35,2020-05-29 03:44:24,closed,Fix Unstructured Docs,Quick fix to fix the unstructured grid docstring.,1,2,[]
460,423539912,756,92974124,2020-05-27 00:51:49,2020-05-27 01:53:44,closed,"Fix 754, add active_scalars, active_vectors options when adding array.","### Overview

Fixes #754 and a typo.
",1,2,[]
461,423471375,755,92974124,2020-05-26 21:23:39,2020-06-01 20:07:21,closed,Fix/update various type checks,"### Overview

I've noticed several instances of type checks against `collections.Iterable`. A lot of these should actually be stricter checks, and they should all be using `collections.abc` going forward.

### Details

The first commit replaces every instance of `collections.Iterable` with `collections.abc.Iterable`, as the former is deprecated.

The second commit replaces some instances of `collections.abc.Iterable` checks with `(np.ndarray, collections.abc.Sequence)` checks. The two cases that made this necessary were

  * subsequent `len` checks on the iterables,
  * subsequent subscription of the iterables, and
  * subsequent calls of `np.asarray` on the iterables.

For the above [an `Iterable` is insufficient](https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes). For instance `obj = iter([2, 3, 4])` would pass the `Iterable` check, but it would fail both at `len(obj)` and `obj[0]`, and produce an unexpected (object-dtype) array when passed to `np.asarray`. For `len` it would be enough to use `collections.abc.Collection`, but these don't necessarily support subscription (e.g. `set`s). In every case it seemed to me that the collections in question actually had inherent order to them: bounds with from/to, ranges as min/max, things like that. So semantically speaking I believe `collections.abc.Sequence` is the correct abstract base type to check.

The small blemish is that [`numpy.ndarray` doesn't register as a `Sequence`](https://github.com/numpy/numpy/issues/2776), so we also have to explicitly check for `ndarray`s as well (which are a very common use case for most inputs).

### TODO

- [x] also handle `numpy_to_idarr`
- [x] also handle similar instances of `np.asarray`, if any 
- [x] add tests for each fixed `Iterable` case
- [ ] ~maybe do the same for high-profile entry points with array-like inputs~",10,15,[]
462,422990381,753,92974124,2020-05-26 05:17:43,2020-05-26 05:36:36,closed,Fix failing test when accessing active_scalars_info after clearing arr…,"### Overview

#746 broke test_compute_gradients(), this is the fix.

",2,1,[]
463,422972465,752,92974124,2020-05-26 03:54:47,2020-05-27 21:06:24,closed,Add abstract class decorator.,"### Overview

Adds a decorator which marks a class abstract, preventing instantiation, similarly to abc, but does not require any @abstractmethods. Basically just automatically replaces \_\_new__ with the same \_\_new__ that was copy pasted before.

",2,7,[]
464,422927626,751,92974124,2020-05-25 23:55:04,2021-02-04 06:09:03,closed,🚧 Add type hints to majority of public core methods.,"### Overview

Type hints(added in 3.5), make it easier for the user and IDEs to determine parameter and return types of functions, especially if there is no explicit documentation. 

It should also be possible to have the types automatically added to documentation. https://pypi.org/project/sphinx-autodoc-napoleon-typehints/

This adds type hints to most of the public methods in /core/. Please ensure that pyvista.Texture is the correct type for the texture related methods in common.py, I'm unsure if it's that or vtk.vtkTexture.
",8,1,[]
465,422916464,750,92974124,2020-05-25 22:45:52,2020-05-25 23:11:58,closed,Remove return statements for all setters.,"### Overview

Setters should not return a value, this removes return statements which return a value in setters.

",1,1,[]
466,422880040,749,92974124,2020-05-25 19:58:33,2020-05-25 20:56:37,closed,"Remove private _field_array, _cell_array, _point_array.","### Overview

Removes private Common._field_array, Common._cell_array, Common._point_array. #659 Made these obsolete and just point to DSA now.

",1,1,[]
467,422791098,748,92974124,2020-05-25 14:56:29,2020-05-27 14:07:31,closed,Add vtkCellArray Wrapper,"Resolves #700 

Turns out that not wrapping lines `MultiBlock` with lines causes a segfault, and as the core issue is with `vtkCellArray`, it's much easier to collect all methods that call `numpy_to_vtkIdTypeArray`.

This has been an issue for quite some time as we have several methods that either rewrite or duplicate writing cell indices to `vtkCellArray`.  This PR cleans it up by creating a single method to wrap `numpy_to_vtkIdTypeArray` and a single class to wrap `vtkCellArray`.",9,11,[]
468,422616444,747,92974124,2020-05-25 08:26:50,2020-05-25 14:40:08,closed,"Fix missing ""pragma"" from ""pragma: no cover"" in Common","https://github.com/pyvista/pyvista/pull/709 introduced `no cover` coverage instructions, among other things, for methods of Common overridden by subclases. In one instance `pragma: no cover` turned into `no cover`, this is a quick fix for this.",3,1,[]
469,422566425,746,92974124,2020-05-25 06:13:18,2020-05-26 03:27:46,closed,Refactor active scalars/vectors,"### Overview

Refactor of active scalars/vectors info.

",3,24,[]
470,422564332,745,92974124,2020-05-25 06:06:16,2020-05-26 03:11:17,closed,Improve filters coverage,"### Improve filters coverage and other
- Improves coverage for `filters.py` from 93% to 99%
- Refactored some tests to use fixtures.
- Cleaned up `test_grid.py`
- Fixed a few spelling mistakes
- Minor doc fixes
- Changed error types from `AssertionError` to more applicable error types.",1,15,[]
471,422541074,744,92974124,2020-05-25 04:42:49,2020-05-26 03:10:21,closed,Speedup Testing,"### Speedup Testing

This PR introduces some minor tweaks to speedup testing:
- Parallel testing on Mac OS using `pytest-xdist`.  25 - 50 % improvement in test times.
- Cache pip cache across builds.  Saves 30 - 60 seconds on Windows, marginal improvements on Linux.

As an aside, I discovered that parallel testing using `pytest-parallel` when using the progress bar.  It's now thread-safe.

CI testing now takes a total of 10 minutes.",0,14,[]
472,422502645,743,92974124,2020-05-25 01:26:01,2020-05-25 02:33:37,closed,Optimize imports.,"### Overview

Ran optimize imports with Pycharm. This removes anything unused, duplicate import paths, alphabetizes and groups imports.

",2,2,[]
473,422499608,742,92974124,2020-05-25 01:09:21,2020-05-25 02:34:06,closed,Remove unused lists in Common.,"### Overview

Just removes unused lists in Common. #659 made these outdated.


",1,2,[]
474,422492692,741,92974124,2020-05-25 00:25:14,2020-05-25 01:30:11,closed,Use new style classes an argumentless super() calls.,"### Overview

With minimum Python 3.5 support, explicit object inheritance and super() calls with arguments are no longer necessary.

",1,1,[]
475,422485334,740,92974124,2020-05-24 23:25:06,2020-05-25 01:28:56,closed,Refactor load/save,"### Overview

Refactor of save/load system. Replaces _vtk_reader, _vtk_writer properties with static class constants. This way they can be referenced in testing while also being part of the class itself.
",2,9,[]
476,422484209,739,92974124,2020-05-24 23:15:03,2020-05-26 18:43:35,closed,Add Python 3.8 to Mac and Windows Testing,"### Add Python 3.8 to Mac and Windows Testing
Now that Python wheels 3.8 are available to Mac and Windows, we can add those tests to CI.  Support for Python 3.8 has been a long time coming since its release in October of last year, and it's great that we finally have support for it.",1,7,[]
477,422347549,738,92974124,2020-05-24 01:07:06,2020-05-24 16:23:03,closed,Check Type when Overwriting a DataSet,"### Check Type when Overwriting a DataSet

Checks input type when using `overwrite`.  Prevents the following:

```python
from pyvista import examples
grid = examples.load_uniform()
poly = examples.load_airplane()
poly.overwrite(grid)
```
```
~/tmp/tmp.py in <module>
      2 grid = examples.load_uniform()
      3 poly = examples.load_airplane()
----> 4 poly.overwrite(grid)
      5 
      6 grid = examples.load_uniform()

~/python/pyvista/pyvista/core/common.py in overwrite(self, mesh)
   1167         if not isinstance(type(mesh), type(self)):
   1168             raise TypeError('The Input DataSet type must match '
-> 1169                             'the one being overwritten %s' % type(self))
   1170         self.deep_copy(mesh)
   1171         if is_pyvista_dataset(mesh):

TypeError: The Input DataSet type must match the one being overwritten <class 'pyvista.core.pointset.PolyData'>

```

Resolves #688",1,3,[]
478,422339335,737,92974124,2020-05-23 23:21:37,2020-05-24 21:43:40,closed,Make line breaks consistent.,"### Overview

Make line breaks consistent in all modules by using PEP8 recommendation. (1 line break between class methods)

Depends on #736 

",15,20,[]
479,422334858,736,92974124,2020-05-23 22:28:07,2020-05-24 16:50:29,closed,Generic load/save.,"### Overview

Adds a generic way to load/save datasets.

For each dataset type that can be saved or loaded, the _vtk_writers, _vtk_readers properties are overridden with a dictionary containing {(file extension): (specific vtk reader/writer type)}


",2,15,[]
480,422327956,735,92974124,2020-05-23 21:14:18,2020-05-24 16:32:16,closed,"Add dataset, association references to pyvista_ndarray.","### Overview

Brings back parts of #654 while keeping the base as ndarray. Accepts Iterable, ndarray, or vtk arrays.

I've changed references of cls.[member variable] to obj.[member variable]. The reason for this is because cls would be a static class member, not an instance member.



",1,15,[]
481,422220510,734,92974124,2020-05-23 04:34:36,2020-05-24 01:10:38,closed,Add doc cache,"### Pipeline Documentation Cache

This PR adds a documentation cache that maintains a persistent save across all pipelines of the `docs/examples` directory.  This means only changes in the documentation will trigger a selective rebuild of gallery pages.  To test this I changed `""mydata"" --> ""mymesh""` in `examples/02-plot/clear.py`, and only that example was rebuilt.  See:
https://dev.azure.com/pyvista/PyVista/_build/results?buildId=2607&view=logs&j=0d0124fa-d3a8-51e8-d2f8-a0118e38d729

The cache selected is the Azure `Cache@2` pipeline cache that keeps a persistent cache according to a ""key"".  When the cache for a given key is empty (i.e. the cache has not been created yet for that key), there is a ""cache miss"", and the examples are rebuilt from scratch.  At the end of the pipeline the examples folder is uploaded to the cache.  Since the caches are read-only, the cache will not be changed even if there are significant changes to the examples directory.

The key used for the cache is:
```
key: 'PYVISTA_DOC_EXAMPLES_CACHE | ""$(PYVISTA_VERSION)""'
```

This means that changing the version will reset the cache, meaning that cache will be reset on release PRs, and won't be rebuilt if there is a failure when building the docs.  This seems like a good compromise between speed and stability.

Resolves #720 ",1,7,[]
482,422181454,732,92974124,2020-05-23 00:25:15,2020-05-24 01:11:21,closed,VTK v9 Compatibility Fixes,"### VTK v9 Compatibility Fixes

This PR introduces several changes to account for the variations between VTK 8 and VTK 9:
- [x] The `offset` array is no longer required for `vtkUnstructuredGrid`
- [x] Bounds for `MulitBlock` no longer returns another `MultiBlock`
- [x] Offset array is different in VTK9 (decremented by 1 per index)
- [x] Do not trigger mouse clicks until render window is actually active.
- [x] Lines must be raveled for version consistency.
- [x] Set `vtk<=9.0` for Windows Python 3.5
- [x] Needs #730 

It should be noted that the `off_screen` plots look a bit better.  I think they're using anti-aliasing behind the scenes:
![image](https://user-images.githubusercontent.com/11981631/82721340-983ada80-9cbc-11ea-81b0-e4e8aacb70b8.png)

As compared to VTK 8.1.2:
![image](https://user-images.githubusercontent.com/11981631/82721345-a1c44280-9cbc-11ea-8ea3-0fd66790ff60.png)

This does seem to significantly increase the render time and our doc-build task will take much much longer and necessitates #720.",2,21,[]
483,422179930,731,92974124,2020-05-23 00:15:17,2020-05-24 00:08:19,closed,No More Downloads for Unit Tests,"### Eliminate Flaky Downloading on CI

This PR replaces all unit tests that require downloads with simpler and faster ones that do not require downloads.  This allows us to have good coverage on Mac OS and now downloads won't fail on unit tests.

Also adds a bonus streamlines example:
![sphx_glr_streamlines_004](https://user-images.githubusercontent.com/11981631/82717124-256d3780-9c9b-11ea-8ece-65afe56036fa.png)

Chipping away at our bloated unit testing...",2,2,['testing']
484,422157046,730,92974124,2020-05-22 22:11:31,2020-05-24 01:10:07,closed,Save image only when necessary,"### Plot Optimization Patch
While testing out VTK9, I discovered that the unit tests were much slower.  It turns out part of the issue is that we're saving a screenshot when the `show` method is triggered in the `Plotter` class:

```python
self.last_image = self.screenshot(screenshot, return_img=True)
self.last_image_depth = self.get_image_depth()
```

In VTK < 9.0, this adds a small overhead, but in VTK 9, the overhead is quite noticeable.  In an effort to streamline `pyvista` regardless of the VTK version, this PR adds a the global variable `BUILDING_GALLERY` that is enabled while building the documentation.  Here's the timings for `vtk` 8.1.2.

#### No screenshots
```python
>>> pyvista.BUILDING_GALLERY = False
>>> timeit grid.plot(interactive=False)
134 ms ± 1.42 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
```

#### Screenshots
```python
>>> pyvista.BUILDING_GALLERY = True
>>> timeit grid.plot(interactive=False)
201 ms ± 1.15 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
```",12,5,[]
485,422104712,729,92974124,2020-05-22 19:19:40,2020-05-24 00:48:24,closed,Use fixed version for style packages,"### Use fixed version for style packages

Our code style pipeline ran into an issue where the updated version of `codespell` detected a new spelling error (`wee --> we`).  While I was glad to have found out the (embarrassing) spelling error, if this pops up again, we're going to failures on branches that have nothing to do with the new branch.

As such, I'm proposing we fix the versions of both `codespell` and `pydocstyle` and set those versions in another requirement file rather in the pipelines.  That way we can have a separate PR for spelling and docstyle changes that might crop up due to upgrading those packages.

#### New style requirements file
`requirements_style.txt`
```
codespell==1.16.0
pydocstyle==5.0.2
```
",2,1,[]
486,422095750,728,92974124,2020-05-22 18:56:05,2020-05-22 19:55:50,closed,Backwards compatibility for py3.5 for ModuleNotFoundError,"`ModuleNotFoundError` is not valid in Python3.5, yet we have it:

```python
try:
    from vtk.vtkCommonKitPython import vtkDataArray, vtkAbstractArray
except (ModuleNotFoundError, ImportError):
    from vtk.vtkCommonCore import vtkDataArray, vtkAbstractArray
```

I've added a simple backwards compatibility class.  We don't see this on the main branch as we're not testing against vtk 9.0.",3,2,[]
487,421047591,727,92974124,2020-05-20 22:17:16,2020-05-20 22:53:57,closed,trigger a build,Triggering in support of #726 ,2,1,[]
488,420954544,726,92974124,2020-05-20 18:44:51,2020-05-20 23:39:02,closed,🚧 DataSetAttributes debugging. ,"### Overview

This is #659 but I will be progressively enabling certain changes to suss out testing errors.


",5,12,[]
489,420093672,725,92974124,2020-05-19 12:41:42,2020-10-30 20:40:13,closed,ensight gold file reader,"### Overview

<!-- Please insert a high-level description of this pull request here. -->
Add reading support for ensight gold format `.case`.

 Note that writing is not supported: this is due to the partial support of `vtk` for writing ensightGold. If I understood correctly, we can only write down unstructured grids by specifying a field ""BlockID"" that tells to which block each verts/cell belongs. So the logic is a bit different, i.e. we would have to merge the blocks into 1 vtu and then specify the split which wouldn't always work i.e. if we have originally fields only on some blocks. Thus, I did not include it in this PR. We can read the `.case` and write it to vtm(b) for the moment, which should be enough for most applications I guess.

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->
resolves #722 

### Details

- Read MultiBlock support for `.case` files

Note that the new test expect the folder zipped in #722  to be present (unzipped) in the examples directory. 

",11,8,['enhancement']
490,418906259,724,92974124,2020-05-16 03:13:47,2020-05-24 00:47:10,closed,Add all_scalars parameter to the threshold filter,"### Add all_scalars parameter to the threshold filter

Based on https://github.com/pyvista/pyvista-support/issues/164, it turns out that we're missing some functionality in our `threshold` filter.  Mainly, the user can't choose if all or any points within the cell must meet the threshold parameters.

This PR adds an `all_scalars` parameter to give the user this option.",1,2,[]
491,418848469,723,92974124,2020-05-15 22:04:03,2020-05-18 14:55:54,closed,added reset_camera_clipping_range function to baseplotter,"### Overview

Add reset_camera_clipping_range function directly to baseplotter per discussion [here](https://github.com/pyvista/pyvista-support/issues/40#issuecomment-622492834)

",1,2,[]
492,418365487,721,92974124,2020-05-15 04:14:00,2020-05-16 00:05:57,closed,xfail on flaky mac tests,"### Allow xfail on flaky macOS tests
Both `test_streamlines` and `test_interpolate` sometimes fail on Mac OS on the download examples steps.  It's hit or miss, but when your PR is solid and you have to restart the Mac OS test(s) it gets a little old.

As we're hitting these tests on Windows and Linux, I'm not worried about these tests not passing every time.
",1,2,[]
493,418224427,719,92974124,2020-05-14 20:17:14,2020-05-24 23:40:53,closed,Refactor/Move qt_plotting to pyvista_qt,"### Move qt_plotting to pyvista_qt

This PR moves `qt_plotting.py` out of `pyvista.plotting` and into [pyvistaqt](https://github.com/pyvista/pyvistaqt).  Reasoning for this:

##### Licensing
GPL scares me a little, and I want to make certain that we've removed all traces of `pyqt` from our module over the concern of licensing.

##### Agile Development
Testing is really bogging down agile development.  It's difficult to get core tests/doc building/ and qt tests to consistently run each time.  It's usually a flaky test in Mac or some similar timeout in Windows due to server load.

With split modules, we can add a ton of features like better icons, `pyqt5` version control, feature tree, etc. all within the setup.py.

##### Better testing control
Changes to `BackgroundPlotter` do not affect any upstream core functionality and as such we should not need to test the core functionality again with each minor change.  The opposite doesn't hold true, (i.e. changes to the `pyvista` core can affect `pyvistaqt`) so we simply pull from master and check if we're valid.

##### Pyside
We can support pyside in the same manner; by providing a submodule that builds upon `BasePlotter`.  Including `pyside` support within `pyvista` will further bloat the module and we need to move the opposite direction.

### Summary
This is a significant but necessary change to make `pyvista` easier to develop in an agile manner.  It will also lead to improvements in `BackgroundPlotter` as changes there will be easier to test and develop.",14,9,['review-critical']
494,417729762,716,92974124,2020-05-14 03:34:36,2020-05-15 03:42:08,closed,Allow List as PolyData input,"### Allow List as PolyData Point Input
Discovered that this is invalid:
```python
import pyvista
points = [[0, 0, 0],
          [0, 1, 0],
          [0, 0, 1]]
mesh = pyvista.PolyData(points)
```
```
TypeError: Invalid input type
```

This simple PR fixes that by allowing for a list of points to be input.  Includes test and data type checks.
",2,1,[]
495,417682090,715,92974124,2020-05-14 00:26:46,2020-05-15 03:49:19,closed,Improve _make_vertice_cells performance,"## Improve `_make_vertice_cells` Performance
As noted in https://github.com/pyvista/pyvista/issues/712, the performance of creating a polydata directly from points is quite slow.  This PR improves it.

closes #712 

Here's the timing improvement:
```python
import numpy as np
import pyvista as pv

pts = np.random.random((100000, 3))
timeit pv.PolyData(pts)
```

#### Master
```
56.9 ms ± 773 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)
```

#### This PR
```
272 µs ± 6.22 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
```",3,1,['bug-fix']
496,414008896,711,92974124,2020-05-06 10:26:44,2020-05-06 20:09:11,closed,Remove swap files,This small PR deletes some unnecessary files from the code base.,2,2,['maintenance']
497,412765253,710,92974124,2020-05-04 06:39:13,2020-05-05 14:16:42,closed,Implement scale argument for Arrow object,"### Overview

Add a simple way to scale the geometric object `Arrow`.

Resolves https://github.com/pyvista/pyvista/issues/670.
",3,3,[]
498,412634690,709,92974124,2020-05-03 17:13:17,2020-05-05 21:11:07,closed,Improve test_common coverage,"### Improve `test_common` coverage

This PR introduces several tests to improve the code coverage of `test_common.py`.  Major items include:

- Not testing the the code coverage of methods inherited by subclasses of `Common`
- Fixing a bug where field data is not updated.
- Cleans up some error types (i.e. getting rid of generic `Exception`)
- Fixes `test_transform`.  Before test was raising an error due to improper test setup.
- Tests setting the extent for uniform grids.
- Adds testing for edge cases (i.e. setting cell data with a range or non-contiguous arrays).
- Some minor spelling fixes.
- Not including code coverage of depreciated functions with `# pragma: no cover`.  We should either test them and expect a warning, or ignore the code coverage.

This PR is the start of an effort to improve code coverage to the point we no longer need doc-testing to get full code coverage.",5,4,['testing']
499,412543007,708,92974124,2020-05-03 03:38:10,2020-05-04 14:23:50,closed,Bump minor release to 0.24.2,"This PR bumps our `release/0.24` branch to 0.24.2.  This is needed due as the `faulthandler` is still causing problems.  See https://github.com/akaszynski/pyansys/issues/209

I've cherry picked 85a9c3e38c492c23f132f8f1f47868c7c79ad045 and pushed it to the branch.  Once this PR is merged, I'll create a tag for 0.24.2

As stated earlier [Trunk Based Development](https://trunkbaseddevelopment.com/) is really the way to go for these release branches and I'm already seeing the advantages as we don't need additional testing for this patch release. ",1,1,[]
500,412149679,706,92974124,2020-05-01 14:21:38,2020-05-01 19:16:48,closed,Fix slider widget normalization to work with different sized viewports,"### Overview

Slider widget can now be added to arbitrary sized viewports (not limited to layouts created through the 2D shape grid).

Follow up of #549 to close #513 

### Details

- In combination with #696 the following is now possible (based on the example from #549):
```py
import pyvista as pv

shape = (3, 4)
row_w = [1,1.5,2]
col_w = [1,1.5,2,2.5]
groups = [
    ([0,1],[1,2]),
    ([1,2],0)
]
pointa = (0.2, 0.5)
pointb = (0.8, 0.5)

p = pv.Plotter(shape=shape,groups=groups,row_weights=row_w,col_weights=col_w)

for i in range(shape[0]):
    for j in range(shape[1]):
        group = p.loc_to_group((i,j))
        # Only draw on individual cells or on the first cell of the group (to prevent duplicates)
        if group is None or (p.groups[group,0]==i and p.groups[group,1]==j):
            p.subplot(i, j)
            p.add_mesh(pv.Sphere())
            p.add_slider_widget(
                callback=lambda value: value,
                rng=[0, 1],
                pointa=pointa,
                pointb=pointb,
            )

p.show()
```

![slider_fix](https://user-images.githubusercontent.com/15089458/80812143-a323b300-8bc7-11ea-8257-31a0d762c6c8.png)
",3,1,[]
501,411894307,705,92974124,2020-04-30 23:31:34,2020-05-01 14:53:44,closed,Ellipsoid should wrap once,"### Quick Ellipsoid Fix

```python
import pyvista
geometry = pyvista.ParametricEllipsoid(1, 2, 3)
````

Ellipsoid `max_v` arg should be `pi` and not `pi*2`.  Otherwise, it actually wraps around twice.

Here's `pi*2`
![pre](https://user-images.githubusercontent.com/11981631/80768550-fc013600-8b4a-11ea-93f5-acf1def7bff1.png)


And afterwards `pi`
![post](https://user-images.githubusercontent.com/11981631/80768556-fefc2680-8b4a-11ea-98db-0b51f5e31eaa.png)


screenshots generated with:
```python

from math import pi
import pyvista as pv

cpos = [(4.534917140080849, 3.9178021712705364, 3.71292980497582),
 (0.47978466150916366, -0.13733030730115356, -0.3422026735958702),
 (0.0, 0.0, 1.0)]

geometry = pv.ParametricEllipsoid(1, 2, 3, max_v=pi*2)
geometry.plot(show_edges=True, screenshot='/tmp/pre.png', cpos=cpos)
geometry = pv.ParametricEllipsoid(1, 2, 3, max_v=pi)
geometry.plot(show_edges=True, screenshot='/tmp/post.png', cpos=cpos)
```",1,1,['bug-fix']
502,411893355,704,92974124,2020-04-30 23:28:42,2020-04-30 23:29:32,closed,Patch/fix ellipsoid,"### Quick Ellipsoid Fix

```python
import pyvista
geometry = pyvista.ParametricEllipsoid(1, 2, 3)
````

Ellipsoid `max_v` arg should be `pi` and not `pi*2`.  Otherwise, it actually wraps around twice.

Here's `pi*2`
![pre](https://user-images.githubusercontent.com/11981631/80768550-fc013600-8b4a-11ea-93f5-acf1def7bff1.png)


And afterwards `pi`
![post](https://user-images.githubusercontent.com/11981631/80768556-fefc2680-8b4a-11ea-98db-0b51f5e31eaa.png)


screenshots generated with:
```python

from math import pi
import pyvista as pv

cpos = [(4.534917140080849, 3.9178021712705364, 3.71292980497582),
 (0.47978466150916366, -0.13733030730115356, -0.3422026735958702),
 (0.0, 0.0, 1.0)]

geometry = pv.ParametricEllipsoid(1, 2, 3, max_v=pi*2)
geometry.plot(show_edges=True, screenshot='/tmp/pre.png', cpos=cpos)
geometry = pv.ParametricEllipsoid(1, 2, 3, max_v=pi)
geometry.plot(show_edges=True, screenshot='/tmp/post.png', cpos=cpos)
```",0,6,[]
503,409832721,702,92974124,2020-04-28 01:37:37,2020-04-29 23:45:53,closed,custom orientation widget,"### Overview

Abstracted how we add orientation markers to easily pass a custom mesh/actor as the marker for the widget

```py
import pyvista as pv
from pyvista import examples

mesh = examples.download_st_helens().warp_by_scalar()

p = pv.Plotter(notebook=False)
p.add_mesh(mesh)
p.add_orientation_widget(mesh, color=""grey"")
p.show()
```

![2020-04-27 21 30 53](https://user-images.githubusercontent.com/22067021/80436964-65284580-88ce-11ea-86bc-dc67e1db784a.gif)

## Details

- current implementation forces the actor to be a solid color (can add opacity)
- changed the `add_axes` method to enable it to replace custom actors if called after adding a custom actor
- this means there can only ever be one axes widget - we could enable more down the road but placement will get tricky and I don't have the time to implement a placement scheme.",3,4,['enhancement']
504,409822927,701,92974124,2020-04-28 00:57:26,2020-04-28 01:56:40,closed,BUGFIX: function improperly called,"### Overview

Working on something and noticed this little bug

",2,1,['bug-fix']
505,409107010,698,92974124,2020-04-26 15:55:04,2020-11-09 04:06:23,closed,🚧 Re-implement VTKjs export,"### Overview

A VTKjs scene graph exporter was added upstream in VTK for the 9.x release. From now on, we should use that as it is better than our outdated export script and will be maintained upstream.

See [`vtkJSONRenderWindowExporter`](https://github.com/Kitware/VTK/blob/master/IO/Export/vtkJSONRenderWindowExporter.cxx)

This new scene exporter requires us to use the `vtkSynchronizableRenderWindow` in vtk-js rather than the `vtkHttpSceneLoader` that we used to use. This means the old scene loader at http://viewer.pyvista.org that we would link people to will no longer work with these exports.

You can load these new files at https://kitware.github.io/vtk-js/examples/SynchronizableRenderWindow/index.html using [this example](https://kitware.github.io/vtk-js/examples/SynchronizableRenderWindow.html)

NOTE:

waiting on the export script in Panel to be backported to the C++ exporter upstream in VTK. This could be a while.

TODO:

- [ ] things like lighting are not exporting correctly
- [ ] scalar array mapping isn't working
- [ ] `vtkImageData` is not working (standard or volume rendering)
- [ ] do some local testing of complex scenes to make sure all is good
- [ ] deprecation/change warning?
- [ ] implement a synchronized way of exporting with [`vtkPartitionedArchiver`](https://github.com/Kitware/VTK/blob/master/Common/Archive/Testing/Python/TestPartitionedRenderWindowExporter.py)
- [ ] host a new url for the new export type. Suggestions? We need to keep the old URL because a lot of people use that viewer for data that was exported in the old format.

",3,4,"['enhancement', 'web']"
506,408954202,697,92974124,2020-04-25 18:57:27,2020-04-25 23:57:12,closed,Fix broken documentation build,"Fixes #674 and resolves doc build warnings

cc @tkoyama010",2,5,"['documentation', 'priority-high']"
507,408938150,696,92974124,2020-04-25 16:56:39,2020-05-31 00:06:41,closed,Subplot groups,"### Overview

I implemented this for one of my projects and thought it might be useful for others to use as well. This allows individual renderers to span multiple rows and columns of the layout grid, similar to what can be done with subplots in matplotlib and Matlab.

### Details

- Adds a 'groups' argument to BasePlotter which should be a list or tuple defining all groups for this plotter. Each group can be defined through a slice or sequence of row and column ids (see multi-window.py example). This allows for more complicated UI designs that could previously not be achieved through the 'shape' argument as far as I know.
",16,8,['enhancement']
508,408670411,695,92974124,2020-04-24 17:16:21,2020-04-24 17:16:45,closed,Patch/remove scalar bar,"This PR mirrors https://github.com/pyvista/pyvista/pull/694

Right now the faulthandler is a critical bug that I'd like to get patched as soon as possible.  The scalar bar is also affecting one of my closed source projects.",0,22,[]
509,408667851,694,92974124,2020-04-24 17:10:38,2020-04-25 20:23:55,closed,Fix faulthandler,"The `faulthandler` import still is causing grief.  See https://github.com/akaszynski/pyansys/issues/208

I'm just going to catch all and pass a user warning as I'm tried of chasing all the different possible return types.",1,5,['bug-fix']
510,408538355,693,92974124,2020-04-24 13:03:24,2020-05-06 20:45:58,closed,FIX: Fix for VTK9 + PyQt5 5.13.2,"On PyQt 5.13.2 I was getting a VTKGenericWindowInteractor instead of the Qt variant only when using PyVista (Mayavi was fine). After some investigation, it seems that setting the `QVTKRWIBase` was the culprit -- leaving it as the default `QWidget` makes things work again.

This PR makes it so that if you are on VTK9+, Linux, and PyQt < 5.14, it will use `QWidget` instead of `QGLWidget`. This makes things work with both PyQt5 5.13.2 and 5.14.2 for me.

cc @GuillaumeFavelier ",28,5,['bug-fix']
511,405749607,691,92974124,2020-04-19 22:40:32,2020-04-19 23:08:23,closed,[test] dev.pyvista.org trigger,"**Do not merge.** Test to see if docs are deploying to `dev.pyvista.org` during PRs

ref #674 ",2,1,[]
512,405232935,690,92974124,2020-04-17 16:37:32,2020-04-20 18:49:19,closed,Add trunk based development link and MISC CI fixes,"CI fixes:
- Mentions the [Trunk Based Development](https://trunkbaseddevelopment.com/) in our branching model.
- Removes Conda builds from CI
- Includes root directory for `codespell`, thereby checking our `README` and `CONTRIBUTING`
- Fixes a handful of invalid markdown html links in `CONTRIBUTING`",1,5,[]
513,403461815,689,92974124,2020-04-14 23:25:08,2020-04-17 16:56:14,closed,Minor testing improvements,"### Overview

Some minor testing improvements

",2,3,['testing']
514,403215492,686,92974124,2020-04-14 14:21:48,2020-04-23 16:18:23,closed,WIP: Fix for VTK9,"On VTK 9 this:

```py
import pyvista as pv
cyl = pv.Cylinder()
p = pv.BackgroundPlotter(shape=(3, 3))
p.subplot(0, 0)
p.add_mesh(cyl, color=""tan"", show_edges=True)
```
Just freezes on the line:
```py
            self.iren.Initialize()
```
It seems to be because the existing interactor is a vtkGenericRenderWindowInteractor. If I replace it with a vtkRenderWindowInteractor, things at least work somewhat -- the window opens, but the plot doesn't update when interacting with it. So there will probably need to be other fixes in addition to or instead of this one, but I at least wanted to get the ball rolling on these fixes.

----

Relevant to #562 ",13,1,['bug-fix']
515,403193856,685,92974124,2020-04-14 13:45:13,2020-04-14 19:59:33,closed,allow textures with alpha-channel for opacity mapping,"### Overview

Continuation of #633 - thank you @luca-penasa

Modify the `Texture` class in `obejcts.py` to allow transparent-mapping of textures


### Details

input array for `Texture` was limited to RGB, but vtk also supports RGBA imagery, this pull request adds the possibility of using RGBA data for texture. Not sure other changes should be made in other portions of the code. Please review this request.
",4,9,['enhancement']
516,402387811,683,92974124,2020-04-12 19:34:21,2020-04-14 13:36:51,closed,Add all depends to Report,"There was a duplicate listing in the conda env file, not all optional dependencies were being reported by `pyvista.Report()`, and core depend `meshio` wasn't reported at all
",0,1,['maintenance']
517,402281981,682,92974124,2020-04-12 03:45:56,2020-04-17 16:23:02,closed,"Refactor test_common transforms section, introduce Hypothesis","### Overview

This breaks up transforms related tests in test_common.py, specifically Common.transform(), rotate(), translate(). They are now separate tests, grouped and renamed to what is expected to happen. This also introduces [Hypothesis](https://hypothesis.readthedocs.io/en/latest/) to the testing requirements.

There are now failed tests which reveal possible ""issues"" that I'd like to discuss.

- If Common.transform is given values of nan or inf it will not have the same result as vtk

- Same for rotate

- Common.translate cannot handle addition of very large integers, likely overflow, specifically for example (+/-)9223372036854775809, which is just over size of long long.
",7,30,[]
518,402036645,681,92974124,2020-04-10 19:24:18,2020-04-13 22:52:33,closed,Add basic slider styles,"This PR adds 2 basic slider styles: `classic` and `modern`

```py
import numpy as np
import pyvista as pv


def foo(value):
    pass


p = pv.BackgroundPlotter()
pos = np.array([.2, .8])
for style in (None, ""classic"", ""modern""):
    p.add_slider_widget(foo, [0, 1], style=style,
                        pointa=pos, pointb=pos + [0.6, 0])
    pos += [0, -0.3]
```

![image](https://user-images.githubusercontent.com/18143289/79017390-77d21900-7b71-11ea-81ec-5ee8d2bbb02d.png)

",3,2,['enhancement']
519,401990240,680,92974124,2020-04-10 17:09:11,2020-04-16 17:07:38,closed,Make the menu bar optional,This PR makes the `BackgroundPlotter` main menu bar optional. There is now a parameter `menu_bar` which can be set to `False` to disable it.,12,11,['enhancement']
520,401960967,679,92974124,2020-04-10 15:46:13,2020-04-10 17:42:33,closed,Add loading NRRD image files,"### Overview

Adds loading NRRD image files.
",7,2,[]
521,401680004,678,92974124,2020-04-09 22:46:30,2020-04-10 02:53:13,closed,Move example dataset fixtures to conftest.py,"### Overview

Pytest requires fixtures available to all testing files to be in a file called conftest.py, this moves the example dataset fixtures in test_common.py to conftest.py.


",6,3,[]
522,401525699,677,92974124,2020-04-09 16:34:19,2020-04-09 16:38:50,closed,🚧 test no pi build,"### Overview
triggers merge to see if we can stop azure from building on select branches",0,2,[]
523,401513633,676,92974124,2020-04-09 16:09:26,2020-04-10 16:18:10,closed,Update CONTRIBUTING Guide,"### Overview

Some updates to the `CONTRIBUTING.md` guide.

### Details

- [x] new branch naming convention
- [x] update the steps for making a release
- [x] Add formatting guidelines (should we enforce 79 character lines)
- [x] add steps for running pycodestyle and codespell locally
- [x] discuss the motivation behind new release strategy and how to make patch releases vs minor releases
- [x] add rules about how old branches are deleted after merging (we only want to delete `fix/` branches after a minor release in case we need to send those changes as a patch to a previous release)
- [x] add rules about how reviews are required to merge a PR.

@akaszynski still needs to refine the steps to make a release based on the new process discussed in #669 

@pyvista/developers, can you all take a look at this when you get a chance and suggest changes/guidelines that we should add?
",6,20,"['discussion', 'maintenance']"
524,401493394,675,92974124,2020-04-09 15:31:01,2020-04-09 16:19:39,closed,Do not build on no-ci branch name,"## CI Change

This simple PR changes the pipeline to exclude CI builds on any branch that starts with ""no-ci""
. 

This will help us avoid super long build times on branches that do not need it (for example, updating CONTRIBUTING).",2,8,['maintenance']
525,401184801,673,92974124,2020-04-09 03:20:42,2020-04-09 15:19:20,closed,Refactor test_composite.py,"### Overview

Quick refactor of test_composite.py

- Add airplane, rectilinear, sphere, uniform, ant, globe fixtures.
- Various simplifications, typo fixes, etc.


",5,31,[]
526,401140617,672,92974124,2020-04-09 00:10:51,2020-04-09 15:18:57,closed,Refactor test_common.py,"### Overview

Quick refactoring pass in test_common.

In a future PR I can break the tests up more and try to get better coverage with hypothesis, if there's no issue with that. I'm not liking in a lot of places the tests don't say what exactly they're testing, or they test several things at once.


### Details

- Add a grid fixture.
- Fix typos, double statements, unnecessary code
- Add missing asserts
- Fix a test which doesn't get picked up by pytest.

",8,13,[]
527,400937204,671,92974124,2020-04-08 15:57:48,2020-04-09 05:34:26,closed,update external gallery,"Updates the external example gallery.

@akaszynski, can we land this before the release so that it gets deployed to the published docs?
",4,3,[]
528,400527096,669,92974124,2020-04-07 22:10:38,2020-04-09 13:59:10,closed,Version bump 0.24.1,"### Version Bump to 0.24.1

I figure since our @pyvista/developers group has gotten large and active, I'd put out a PR instead of just pinging everyone on slack that I'd like to push a release.  The main reasoning for this is due to #645, which turns out to be a deal breaker for using `pyvista` when `stderr` is unavailable for any reason.

This release will include the following commits to master:
- 8ea409ca master origin/master Change base class of pyvista_ndarray back to ndarray (#664)
- 127ec0a7 Fail CI step if any command fails in bash scripts (#666)
- faaf1b26 [doc] Improve installation instructions (#658)
- 582ad8b4 Speed up test_clip_surface (#661)
- bc8b9750 Additional geometry features (#449)
- 9b92ec54 Only volume render point data (#531)
- 75c000df Add PolyData verts setter/getter (#554)
- 2c93aced Add plotting floors (#423)
- 0499cc96 Fix import issues (#656)
- dcf24365 Add tqdm progress bar to filters (#608)
- 4d87fb35 Fix potential false negative in TestSetItem.test_setitem_should_change_value. (#655)
- fae1d500 Refactor pyvista_ndarray (#654)
- 7f78a8c1 Remove Cells or Faces (#653)
- bc41aaac Use Enum for FieldAssociation (#652)
- ea24bc54 fork/master Add basic API for background image (#594)
- bc80eeb4 FIX: Logging error (#648)
- dd163eb5 patched faulthandler when missing stdout (#645)
- ff02a2c6 Fix auto generation of spacing for 2d uniform grids (#643)
- aea0751a Use parent method to close BackgroundPlotter (#641)

Anyone who objects to this release, please let me know.  Otherwise, I need this release soon for the bugfix.",20,1,[]
529,400293598,667,92974124,2020-04-07 14:12:43,2020-04-13 20:27:46,closed,Make the toolbar optional,"This PR makes the `BackgroundPlotter` tool bars optional. There is now a parameter `toolbar` which can be set to `False` to disable them.

---

What I think would be good to add:

- [x] Test that the toolbars are shown properly (and everything is registered by `qtbot`)
- [x] Update the docstring with this new parameter",3,4,['enhancement']
530,399741859,666,92974124,2020-04-06 15:54:06,2020-04-06 18:48:46,closed,Fail CI step if any command fails in bash scripts,"In https://github.com/pyvista/pyvista/pull/660 I discovered that by default scripts in azure steps do not fail if any of the commands inside the script fails. While that's in principle just the bash default, I consider this harmful for CI: You really want to know if anything fails, and if there is a command that is know to fail and it is ok, you should use a proper `if` clause or prepend ` | :` to allow it specifically. As this applies to CI in general, not just adding conda tests, I am opening this separate PR.",6,1,[]
531,399688497,665,92974124,2020-04-06 14:31:20,2020-04-10 15:54:32,closed,BUGFIX: GPU issues with Report,"The `Report` had a bug when not wanting the GPU details included. This made debugging impossible if having OpenGL issues

",1,2,"['bug-fix', 'priority-high']"
532,399402291,664,92974124,2020-04-06 06:05:29,2020-04-07 21:58:01,closed,Change base class of pyvista_ndarray back to ndarray,"### Partial Revert `pyvista_ndarray` Refactor

There are several code breaking changes in #654 that aren't covered by our tests, to include:

```python
def test_setting_points_from_self():
    grid = GRID.copy()
    grid.points = GRID.points
    assert allclose(grid.points, GRID.points)
```
This will raise a `TypeError` exception unless these changes are reverted.

Additionally, there's really no reason to wrap all possible array types.  We just need to wrap `vtk` objects so we can trigger `Modified`.

Also, depending on how quickly we need to resolve this revert, it would be more helpful to add in a bunch of methods to `pyvista_ndarray` that trigger `Modified` as it's not triggered in all cases.  For example:

```python
import pyvista as pv

sphere = pv.Sphere()
pl = pv.BackgroundPlotter()
pl = pl.add_mesh(sphere)

pts = sphere.points
```
Running `pts[:10] = 0` triggers `Modified`, but running `pts *= 2` will not trigger `Modified`.  This is because we've only implemented `__setitem__` in `pyvista_ndarray`.  We should add methods like:
- `__imul__`
- `__iadd__`
- `__ipow__`

I'm in favor of adding back in the testing, but there's no reason at all to include `from_vtk_data_array` when it that method should be implemented in `__new__` and no other init methods are necessary.
",10,3,[]
533,399252193,663,92974124,2020-04-05 21:25:40,2020-06-01 20:12:16,closed,🚧 Add Object Name Attribute,"### Object Name Attribute
This was created in response to [#115 pyvista-support](https://github.com/pyvista/pyvista-support/issues/151).

The `name` attribute is now available on most `pyvista` data objects.  For example:
```python
from pyvista import examples
dragon = examples.download_dragon()
print(dragon)
```
```
PolyData (0x7ff9a9a21050)
  Name      :	dragon.ply
  N Cells   :	871414
  N Points  :	437645
  X Bounds  :	-1.083e-01, 9.657e-02
  Y Bounds  :	5.273e-02, 1.972e-01
  Z Bounds  :	-5.041e-02, 4.121e-02
  N Arrays  :	0
```
Objects created from files will have their names based on the filename they were created from, whereas the stack is inspected for a function name if the instance was created from another instance or function.  For example:
```python
print(pyvista.Sphere())
```
```
PolyData (0x7ff9a9a211a0)
  Name      :	Sphere
  N Cells   :	1680
  N Points  :	842
  X Bounds  :	-4.993e-01, 4.993e-01
  Y Bounds  :	-4.965e-01, 4.965e-01
  Z Bounds  :	-5.000e-01, 5.000e-01
  N Arrays  :	1
```
And:
```python
print(pyvista.Sphere().copy())
```
```
PolyData (0x7ff9a9a64e50)
  Name      :	copy
  N Cells   :	1680
  N Points  :	842
  X Bounds  :	-4.993e-01, 4.993e-01
  Y Bounds  :	-4.965e-01, 4.965e-01
  Z Bounds  :	-5.000e-01, 5.000e-01
  N Arrays  :	1
```",2,2,"['enhancement', 'discussion']"
534,398848568,661,92974124,2020-04-05 01:16:45,2020-04-05 02:23:35,closed,Speed up test_clip_surface,"### Overview

Commit from @banesullivan in #517 to test_clip_surface, cuts about 8 seconds off test time.


",1,1,[]
535,398224684,660,92974124,2020-04-03 15:00:30,2020-04-12 17:25:46,closed,Testing VTK minor releases from conda-forge,"### Overview

Resolve #657 

This adds a conda environment spec file and updates the build strategy on Azure to test against the latest patches for each MINOR release of VTK on the conda-forge channel. Right now, the versions are hardcoded, but we may want to write a script to query which versions are available.

",14,41,[]
536,397997271,659,92974124,2020-04-03 07:13:10,2020-05-23 17:10:05,closed,Add DataSetAttributes,"### Overview
Part 3 of #517 split, waiting for #657

This is larger than I would like, but the tests require integration with the other classes. 

I had an issue where endianness gets swapped when converting cell arrays from numpy to vtk, causing test_meshio beam and uniform tests to fail. I was able to fix failing tests by swapping from big to little before conversion but I don't know if this is correct. (line 216-218) in DataSetAttributes.append()

This is pretty much done so I'll accept input while waiting for #657.

Major changes:
* Replaces cell_arrays, field_arrays, point_arrays implementations.
* Removes _ScalarsDict, PointScalarsDict, CellScalarsDict, FieldScalarsDict
* Moves t_coords to DataSetAttributes, mirroring vtk.
* Removed test_cell_array_non_contiguous(), test is invalid because the case is handled in append().
* (Possible regression) Removes default behavior when getting a row array through the private _row_array(), the key is required, however there were previously no public paths for the default behavior. 
* Modified pyvista_ndarray to work with current implementation, allows the underlying vtkArray to be accessed through pyvista_ndarray.
* Add hexbeam fixture.



",29,223,['review-critical']
537,397749289,658,92974124,2020-04-02 18:35:17,2020-04-05 02:24:08,closed,[doc] Improve installation instructions,"a few changes to update the getting started guide
",0,2,['documentation']
538,397744826,656,92974124,2020-04-02 18:25:39,2020-04-03 01:53:04,closed,[patch] Fix VTK 8.2 compatibility,"Urgently fix compatibility with VTK v8.2 introduced in #654 

Some parts of the numpy interface changed between 8.1 and 8.2 and these import changes handle it

",1,1,['priority-super-duper-high']
539,397308596,655,92974124,2020-04-02 01:27:43,2020-04-02 04:19:44,closed,Fix potential false negative in TestSetItem.test_setitem_should_chang…,"### Overview
Quick fix for a potential false positive in a test_pyvista_ndarray test.

",1,1,[]
540,396009426,654,92974124,2020-03-31 01:44:56,2020-04-01 23:21:15,closed,Refactor pyvista_ndarray,"### Overview
Part 2 of #517

Replaces/moves the implementation of pyvista_ndarray in common.py and adds some tests. The new implementation has multiple constructors.



",9,28,[]
541,395150751,653,92974124,2020-03-28 20:29:49,2020-04-01 15:21:20,closed,Remove Cells or Faces,"### Remove Cells or Faces
Someone posted an example on pyvista-support ([Issue 144](https://github.com/pyvista/pyvista-support/issues/144)), and I found it really inconvenient that we don't have a way of removing cells or faces in-place.

Turns out using ghost cells is the way to go.  See the issue above for a good demo on how it works in practice.",7,11,[]
542,395041199,652,92974124,2020-03-28 03:39:55,2020-03-31 00:32:42,closed,Use Enum for FieldAssociation,"### Overview
Got busy with other projects and am finally looping back here.

Part 1 of #517 split mentioned here, https://github.com/pyvista/pyvista/pull/517#issuecomment-591733519_

### Details

Makes POINT_DATA_FIELD, ROW_DATA_FIELD, CELL_DATA_FIELD, FIELD_DATA_FIELD into an enum for simpler imports, most of #517 depends on this which is why it's first.
",4,7,[]
543,393717911,651,92974124,2020-03-25 17:15:20,2020-04-10 15:05:59,closed,add a warp by vector filter to filters,"### Overview

Following discussion in #650 and encouragements of @imsodin, I'm proposing a suggestion for a warp by vector filter, inspired by the conceptually close warp_by_scalar filter.

### Details

- adds a warp_by_vector filter in pyvista/core/filters.py

I would need some additional input regarding two things:
- how to add error checking at the beginning of function
  - should it check for empty argument list after popping factor from kwargs?
  - should it raise an error if there are no point data fields?
  - is it right to name the argument of the function scalars if they're vectors?
- how to design some possible tests
  - I'm thinking of a 3D mesh and adding simple vector fields like translations and rotations where we could check the warped coordinates
- adding an example that looks nice (like eigenmodes of a plate or something like that)

Anyways, thanks for the amazing library. I really enjoy using pyvista.

Regards,
Florian",12,14,['enhancement']
544,391106574,649,92974124,2020-03-19 16:27:58,2020-04-14 14:39:20,closed,TST: Reproduce timeouts on Azure,This PRs follows https://github.com/pyvista/pyvista/pull/648#issuecomment-601274640 and tries to reproduce the timeouts on windows.,5,1,['testing']
545,391084560,648,92974124,2020-03-19 15:51:08,2020-03-19 16:53:49,closed,FIX: Logging error,"On `master` I get:
```
/home/larsoner/python/pyvista/pyvista/plotting/plotting.py:802: SyntaxWarning: 'str' object is not callable; perhaps you missed a comma?
  log.error('Exception encountered for keypress ""%s"" % %s' (key, str(e)))
```
This should fix the missing `%`.",3,1,['bug-fix']
546,390585636,645,92974124,2020-03-18 18:00:09,2020-03-18 20:25:07,closed,Handle faulthandler when missing stderr,"When stderr is None (i.e. when using `pythonw.exe` on Windows), `faulthandler` raises a `RuntimeError` and we don't current catch that.  It's a simple fix to patch this.

Also, moved some of the imports in `__init__.py` to the top to make it more inline with PEP8[ import guidelines](https://legacy.python.org/dev/peps/pep-0008/#imports).",0,1,[]
547,390475811,643,92974124,2020-03-18 14:39:36,2020-03-18 15:22:20,closed,Fix automatic generation of spacing for 2d uniform grids,"This PR fixes the issue encountered in https://github.com/pyvista/pyvista/issues/642 (especially https://github.com/pyvista/pyvista/issues/642#issuecomment-600646555) and adds a test for it.

It's now possible to create 2d uniform grids with for example:

```py
import numpy as np
import pyvista as pv

x_surf = y_surf = range(80)
z_surf = np.ones(80)

grid = pv.UniformGrid()
grid.points = np.array([x_surf, y_surf, z_surf]).transpose()
grid.plot(show_edges=True)
```",4,1,['bug-fix']
548,390109899,641,92974124,2020-03-17 22:27:22,2020-03-18 15:04:53,closed,Use parent method to close BackgroundPlotter,"This is a followup to https://github.com/pyvista/pyvista/pull/619#discussion_r381302407:

> I'd call super().close() here. BackgroundPlotter inherits QtInteractor, whose close method already calls BasePlotter.close(self) and stops the timer (without the check though).

I investigated the following (by @GuillaumeFavelier):

> The thing is QtInteractor.close() calls QVTKRenderWindowInteractorAdapter.close() which is already done by app_window.close() (because of Qt parent relationship)

QVTKRenderWindowInteractorAdapter's parent is is `.frame` (`QFrame`), not `.app_window`. I manually checked that QVTKRenderWindowInteractorAdapter's close method is called once only and added some checks for `_closed` to be extra sure that closing happens once only.",5,1,['enhancement']
549,390071686,640,92974124,2020-03-17 20:52:42,2020-03-18 02:49:41,closed,track all observers on iren.observers,"This is a followup to https://github.com/pyvista/pyvista/pull/619#issuecomment-589274665:

> Instead of listing potential observers to close, it adds utility functions to add and remove observers and in the process tracks them, thus can be closed in a loop. Or should I just push to this branch and if anyone disagrees they can revert/adjust?",0,1,[]
550,386275433,639,92974124,2020-03-10 17:44:02,2020-03-16 20:55:31,closed,"Remove ""Edit on Github"" button","### Move gallery examples to docs directory

#636 noted that the ""Edit on GitHub"" link in the top right of all the gallery example pages is broken.  This is due to the examples directory where the examples are built from is outside of the `docs` directory.  To fix this, this PR moves `examples` to `docs/sphinx_examples` and changes the reference in `conf.py`. 

Note:
You can see the latest development docs at:
https://github.com/pyvista/pyvista-docs-dev

It's tagged to the last build, so you'll have to build this branch to see the changes.  I've verified that the edit on github link works.",12,8,['documentation']
551,386160185,638,92974124,2020-03-10 14:17:26,2020-03-10 16:42:38,closed,Remove Unnecessary Rendering on Exit/Close/Clear,"### Remove Unnecessary Rendering on Exit/Close/Clear

This is a redo of #637, as it included changes from #619.

This issue has bothered me for a while.  Upon close, all the actors of each renderer are removed.  The problem is, upon removal, we trigger a `render` and the render window refreshed with a render.  This isn't an issue when there are only a handful of actors, but when there are hundreds, there is a significant delay when closing.  This gif was taken right after pressing ""q"":

![closing](https://user-images.githubusercontent.com/11981631/76280266-86d35c00-6291-11ea-9a7d-d84013b4f99b.gif)

This PR adds the `render=` keyword argument that is defaulted to True when an actor is removed so that the `Renderer` class retains its current behavior except when `clear` is called, whereby actors are removed without triggering a render.

",1,1,[]
552,385934800,637,92974124,2020-03-10 04:45:18,2020-03-10 14:20:12,closed,Remove Unnecessary Rendering on Exit/Close/Clear,"### Remove Unnecessary Rendering on Exit/Close/Clear

This issue has bothered me for a while.  Upon close, all the actors of each renderer are removed.  The problem is, upon removal, we trigger a `render` and the render window refreshed with a render.  This isn't an issue when there are only a handful of actors, but when there are hundreds, there is a significant delay when closing.  This gif was taken right after pressing ""q"":

![closing](https://user-images.githubusercontent.com/11981631/76280266-86d35c00-6291-11ea-9a7d-d84013b4f99b.gif)

This PR adds the `render=` keyword argument that is defaulted to True when an actor is removed so that the `Renderer` class retains its current behavior except when `clear` is called, whereby actors are removed without triggering a render.

",5,72,[]
553,382061499,633,92974124,2020-03-01 15:59:19,2020-04-14 13:45:25,closed,allow textures with alpha-channel for opacity mapping,"### Overview
modify the Texture class in in obejcts.py  to allow transparent-mapping of textures


### Details
input array for Texture was limited to RGB, but vtk also support RGBA imagery, this pull request add the possibility of using RGBA data for texture. Not sure other changes should be made in other portions of the code. Please review this request.
",6,3,['enhancement']
554,379494289,630,92974124,2020-02-25 10:28:46,2020-02-25 19:59:18,closed,[doc] alert user in MP4 example,"### Overview

Implements two print commands in the examples that produce a movie.

### Details

resolve #627 

",0,1,['example']
555,377970183,624,92974124,2020-02-20 20:55:35,2020-02-21 16:52:39,closed,ENH: Expose tip_resolution in pyvista.Arrow,"### Overview

The API of `pyvista.Arrow` was missing `tip_resolution`. Exposing this parameter is straightforward.

Resolves #623 

### Details
 
The change exposes the tip resolution setting of `vtkArrowSource` objects. Short example code demonstrating its use:

```py
import pyvista as pv

plotter = pv.Plotter(shape=(1, 3))
for isub,resparams in enumerate([{}, {'shaft_resolution': 50}, {'tip_resolution': 50}]):
    plotter.subplot(0, isub)
    arrow = pv.Arrow(**resparams)
    plotter.add_mesh(arrow, show_edges=True)

plotter.show()
```

![mcve_screenshot_after](https://user-images.githubusercontent.com/17914410/74977623-58e5bf00-542b-11ea-89a8-2c38ec1cc6f4.png)

The first subplot is the default call to `Arrow()` which should be the same as the original default, the middle one changes the already existing `shaft_resolution` setting, and the third subplot demonstrates the new feature.

I chose a default resolution of `20` for the parameter, because that seemed like the current behaviour of `pv.Arrow`. I also snuck in a minor change in the docstring to make most of the parameter descriptions end in a fullstop.

I got four errors locally in pytest (3 in test_meshio and 1 in test_file_format) and an error during doctests, but none of them seem related to my change.",8,2,['enhancement']
556,377398985,622,92974124,2020-02-19 21:12:44,2020-02-20 21:36:51,closed,Add MacOS CI,This PR adds MacOS testing to Azure pipelines as requested/suggested by @GuillaumeFavelier.,7,9,[]
557,377338486,621,92974124,2020-02-19 18:59:53,2020-02-26 19:31:17,closed,Update to meshio > 4,"### Overview

``meshio`` recently updated to version ``>4.0.0`` with a lot of new API changes that break upstream codes (see #606).

This PR should solve PR #620.


### Details

- Update to new ``meshio`` cells and cell data style,
- No longer need to skip test for Python 3.5 (``meshio`` supports Python 3.5 until its EOL).",8,10,['maintenance']
558,376733250,620,92974124,2020-02-18 17:04:53,2020-02-20 18:39:10,closed,BUG: test_read failures,This PR tries to reproduce `test_read` failures encountered in: https://github.com/pyvista/pyvista/pull/619#issuecomment-587566464,8,1,['bug']
559,376634849,619,92974124,2020-02-18 14:02:53,2020-03-14 02:08:30,closed,Improve testing of Qt plotting,"This is a follow-up of https://github.com/pyvista/pyvista/pull/603#issuecomment-586415368 Let's do test driven development.

:warning: **local testing on macOS is required before merging** :warning: 

---

**BackgroundPlotter**

AFAIK, there are 5 ways to close `BackgroundPlotter`:

1) programmatically with `close()`, `close_all()`
2) *X* window button
3) `q`-key
4) `File` > `Exit`
5) `del` finalizer

I wish for those 5 scenarii to work for a version of `PyQt5>5.10.1` on IPython, Python, Jupyter/Spyder on macOs, Windows and Linux. This should be fully covered and tested.

There is maybe `auto_close` too but I may need help to understand what it does @banesullivan 

**ToDo**
- [x] Add testing for scenario 1)
- [x] Add testing for scenario 2)
- [x] Add testing for scenario 3)
- [x] Add testing for scenario 4)
- [x] Add testing for scenario 5)
- [x] Add testing on `macOS`
- [x] Use a complex scene with `BackgroundPlotter` (shape, picking, slider, ...) instead of the default created object. We can go all out on this one, the sooner it breaks, the better it is.
- [x] Investigate `signal_close` (suggested in https://github.com/pyvista/pyvista/pull/619#issuecomment-588428387)
- [x] Investigate `main_menu`/`QMenuBar` in `macOS` (suggested in https://github.com/pyvista/pyvista/pull/619#issuecomment-590056370)

**Fix**
- [x] Tag meshio to `3.3.1` to mitigate https://github.com/pyvista/pyvista/pull/620
- [x] Refactor the callback creation in fe82e24 to solve Windows issues
- [x] Stop `render_timer` and call `BasePlotter.close` in `BackgroundPlotter.close()` (report in https://github.com/pyvista/pyvista/pull/619#issuecomment-587559609)
- [x] Emit `signal_close_test` (suggested in https://github.com/pyvista/pyvista/pull/619#issuecomment-588396007)
- [x] Refactor `RemoveAllObservers()` in 4a75f1dbc0fc91bc388dd4ba1e31851f5d5c99fd
- [x] Set `show=true` for `FileDialog` and `ScaleAxesDialog` in tests to avoid segfaults in `macOS` (reported in https://github.com/pyvista/pyvista/pull/619#issuecomment-589624628)
- [x] Disable native menubar (report in https://github.com/pyvista/pyvista/pull/619#issuecomment-590879215) and add `_create_menu_bar` (suggested in https://github.com/pyvista/pyvista/pull/619#discussion_r388818770)
- [x] Use the `_closed` mark in `BackgroundPlotter.__del__` (report in https://github.com/pyvista/pyvista/pull/619#issuecomment-592673685)

---

**QtInteractor**

**ToDo**
- [x] `test_qt_interactor` segfaults locally during `python -m pytest -v --cov pyvista` (reported in https://github.com/pyvista/pyvista/pull/619#issuecomment-587503797)
- [x] Improve testing following `test_background_plotting_close` example

**Fix**
- [x] Mark the `_closed` plotters to avoid closing destroyed Qt objets (added in 
daf1b5b )
- [x] Refactor `TstWindow`'s menu bar to allow testing by `wait_exposed`

---

**FileDialog**

The tests modified in this part are:
* test_background_plotter_export_files
* test_background_plotter_export_vtkjs

**ToDo**
- [x] Catch signals and register `QWidget` objects
- [x] Parametrize testing to avoid code duplication

---

**ScaleAxesDialog**

The tests modified in this part are:
* test_background_plotting_axes_scale

**ToDo**
- [x] Catch signals and register `QWidget` objects

**Fix**
- [x] Connect `self.plotter.app_window.signal_close()` to `ScaleAxesDialog.close()` (reported in https://github.com/pyvista/pyvista/pull/619#issuecomment-595331651)

---

**Ideas**
* Use `super.close()` in `BackgroundPlotter.close()` (suggested in https://github.com/pyvista/pyvista/pull/619#discussion_r381302407)
* Manage observers with `_add_oberver` and `_remove_observer` (suggested in https://github.com/pyvista/pyvista/pull/619#issuecomment-589274665)
* Remove unnecessary/unused signals/slots
* Return the `QTimer` object in `add_callback` (suggested in https://github.com/pyvista/pyvista/pull/619#discussion_r384467310)
* Investigate `BackgroundPlotter.__del__()` shadowing `BasePlotter.__del__()` (suggested in https://github.com/pyvista/pyvista/pull/619#discussion_r388587146)",103,70,"['help-wanted', 'proposed-change', 'testing', 'IPython/Jupyter']"
560,375649465,618,92974124,2020-02-15 03:07:23,2020-02-15 05:43:42,closed,Disable depth peeling,"### Overview

Resolve #617 
Resolve https://github.com/pyvista/pyvista-support/issues/128
Resolve https://github.com/pyvista/pyvista-support/issues/123

### Details

Depth peeling has issues with some VTK versions and some OS. It also is known to segfault, so we should disable this by default.

",1,1,[]
561,375330512,616,92974124,2020-02-14 10:59:56,2020-02-15 05:27:19,closed,Minor fixes and polish for plotting,I recently for the first time used pyvista for plotting and discovered a few minor things to fix/improve (looking at the PRs using pyvista mainly as a nicer vtk interface seems to be a minority use :) ).,2,2,[]
562,374682360,613,92974124,2020-02-13 05:48:55,2020-02-13 19:06:16,closed,Add Gitter badge,"Add the Gitter badge because folks asked for a Gitter: [![image](https://img.shields.io/gitter/room/pyvista/community?color=darkviolet)](https://gitter.im/pyvista/community)

I still have a very strong preference for Slack and will be most active on Slack. Hopefully having a separate Gitter chat room doesn't fragment the community presence online.

",3,1,['maintenance']
563,374612418,612,92974124,2020-02-13 00:41:05,2020-02-13 01:16:55,closed,Disable codecov status,Turn off the codecov status check.,1,1,['maintenance']
564,374488379,611,92974124,2020-02-12 19:30:23,2020-02-13 00:08:48,closed,Move CI to Azure,"### Overview
Moves all CI/CD to Azure Devops.

I know Microsoft is evil and all, but Devops is great, and having all our CI under one service *should* make it easier to maintain.

### Details
- All features from TravisCI (coverage, building docs, deploying docs, unit testing) is now in Azure.
- Documentation is always built, but only deployed on tags.  This makes sense as people from PyPi will want to look at documentation that matches the latest version.
- The `EXAMPLES_PATH` is now cached, which should improve test stability and we won't run into GitHub download limits anymore.  Slightly speeds up test maybe, but otherwise the speed is comparable with TravisCI
- `codespell` and `pydocstyle` are now run in a separate job that takes 30 seconds.  Having a test fail after 10 minutes because of a single spelling error is no fun.
",5,69,['testing']
565,374032801,610,92974124,2020-02-12 01:06:19,2020-02-13 19:32:14,closed,Rename extract edges filters,"### Overview

Resolves https://github.com/pyvista/pyvista-support/issues/124 

The `extract_edges` and `wireframe` filters' names were not chosen very well. These changes deprecate their old name and use new, more accurate names. `wireframe()` wraps the `vtkExtractEdges` algorithm and `extract_edges()` wraps the `vtkFeatureEdges` algorithm. The names we chose does not reflect the VTK filters they wrap.

### Details

- Rename `extract_edges` -> `extract_feature_edges`
- Rename `wireframe` -> `extract_all_edges`

",3,4,['proposed-change']
566,373981466,609,92974124,2020-02-11 23:32:41,2020-02-13 19:32:37,closed,Fix increment point size,"Make sure the point size increment keyboard short cuts update in real-time


",1,5,['bug-fix']
567,373917526,608,92974124,2020-02-11 22:19:22,2020-04-02 15:36:21,closed,Add tqdm progress bar to filters,"Add a way to monitor specific filters/algorithms that might take a while to run, for example, the Dalunay 3D filter. This new `ProgressMonitor` class can be used in a `with` context to show a `tqdm` status bar of the algorithm's progress.

This PR is a WIP and here to demonstrate what is possible. Feedback would be appreciated.

```py
with ProgressMonitor(alg, message=""Delaunay 3D""):
    alg.Update()
``` 


![2020-02-11 15 03 55](https://user-images.githubusercontent.com/22067021/74284845-d568f700-4ce1-11ea-8f49-d872106cf9ae.gif)



",5,7,['enhancement']
568,373507798,605,92974124,2020-02-11 07:21:59,2020-04-16 16:04:09,closed,Documentation Coverage by sphinx.ext.coverage #519,"Subject: Documentation Coverage by sphinx.ext.coverage #519

### Feature or Bugfix
Feature

### Purpose
We can see the coverage like this.
https://travis-ci.com/tkoyama010/pyvista/jobs/285757449#L959-L964

### Relates

",9,5,[]
569,373455623,604,92974124,2020-02-11 03:18:47,2020-02-12 01:03:40,closed,Update PULL_REQUEST_TEMPLATE.md,"### Overview 

<!-- Please insert a high-level description of this pull request here. -->
The new issue template wasn't doing it for me after giving it a try. How about something like this?

<!-- Be sure to link other PRs or issues that relate to this PR here. --> 
This relates to #601 

<!-- If this fully addresses an issue, please use the keyword `resolves` in front of that issue number. -->


### Details

- Changes to the template to make it more concise/easy to fill out


",0,1,['maintenance']
570,373453942,603,92974124,2020-02-11 03:10:32,2020-02-14 01:54:27,closed,Fix QtInteractor and BackgroundPlotter issues,"#548 introduced issues with threading between VTK and PyQt. These changes fix those issues and attempt to address #600 


### Detail

- Fix closing issues where `BasePlotter.close()` was being called multiple times. It should only be called once.
- Fix camera lagging issue by removing the `Modified` callback when moving the camera (this one was on me) and calling Modified on the Renderer anytime the camera's position is set (not moved interactively)
- Attempt a fix for the `q` key on the `BackgroundPlotter` it was totally messed up and even these changes aren't great... I get random segfaults that crash the kernel from time to time with this (but not every time so this is better). Its mostly mitigated.
- Thread the `render` call for the `QtInteractor` class - this was the cause of the segfaults happening during cell picking and other times where VTK modified the renderer.
- Add segfault handler on `__init__` of PyVista to yield tracebacks when segfaults occur (I believe `faulthandler` is a standard lib package, but I put it in a `try` statement just in case)
- Remove all observers of the `Renderer` and its camera when closing
- Fix Qt example in the docs to reflect API changes from #548 
- Make sure the `_first_time` flag is set to false after creating the `QtInteractor` to make sure render calls aren't blocked (relevant to https://github.com/pyvista/pyvista-support/issues/86)
- repurpose `auto_update` to take float time interval for update rate",51,36,"['bug-fix', 'review-critical', 'priority-super-duper-high']"
571,373217747,602,92974124,2020-02-10 16:04:29,2020-02-10 17:18:03,closed,:wastebasket: flake8 F401 imported but unused,"Subject: :wastebasket: flake8 F401 imported but unused

### Feature or Bugfix
- Feature

### Purpose
- Delete imported but unused module by flake8.

### Detail
It makes save memory.

### Relates
",1,1,['maintenance']
572,373149553,601,92974124,2020-02-10 13:59:14,2020-02-10 17:22:15,closed,:heavy_plus_sign: PULL_REQUEST_TEMPLATE.md,"Subject: :heavy_plus_sign: PULL_REQUEST_TEMPLATE.md

### Feature or Bugfix
- Feature

### Purpose
- Add PULL REQUEST TEMPLATE to make it easy to review.

### Detail

### Relates
- I referenced template from [sphinx project](https://github.com/sphinx-doc/sphinx/blob/2.0/.github/PULL_REQUEST_TEMPLATE.md).
",9,1,['maintenance']
573,372764622,599,92974124,2020-02-08 22:19:27,2020-02-08 22:50:44,closed,Depth peeling off after VTK 8.2,"There's no real advantage to having depth peeling on by default if VTK is 8.2 or later (in my experience) and the depth peeling can be costly, so this turns it on by default only if VTK is less than 8.2

Also, I'm having local segfaults with depth peeling that are driving me crazy, so I'm using my admin power to merge this ASAP",0,3,['proposed-change']
574,372763477,598,92974124,2020-02-08 22:05:09,2021-03-12 03:28:20,closed,Add component feature for plotting vectors,"Continuation of #543 

pinging @MatthewFlamm 

This fixes the array title issues.

Also, note that we used to forcibly copy/overwrite existing scalars and these changes prevent scalars that already exist on a mesh from being copied, which should speed things up a bit when plotting larger meshes (maybe?).",5,13,"['enhancement', 'bug-fix']"
575,372659031,596,92974124,2020-02-08 00:53:10,2020-02-09 17:50:28,closed,[BUGFIX] visible cell picking with multiple meshes,"Follow up to #571 to fix an issue when visible cell picking.

I may need to push a patch release after this... pinging @GuillaumeFavelier and @akaszynski, you all okay if `v0.23.2` release comes?",5,4,"['bug-fix', 'priority-high']"
576,372572615,595,92974124,2020-02-07 19:47:15,2020-02-07 20:48:40,closed,FIX: Set the _first_time variable to enable render on BackgroundPlotter,"This PR fixes the call to `BasePlotter.render()`. Because `_first_time` is not set in the `BackgroundPlotter`, `render()` was never called causing lags in widgets (waiting for `ModifiedEvent` to call `update()` instead)",3,1,"['bug-fix', 'priority-high']"
577,372274891,594,92974124,2020-02-07 07:36:10,2020-03-24 02:48:20,closed,Add basic API for background image,"Following https://github.com/pyvista/pyvista/issues/522#issuecomment-583095108, this PR is an experiment for basic support of an image as background. I could notice three constraints with this implementation:

1) The background image is shared among the viewports/renderers
2) The image is not resized with the window
3) It's available only for `Plotter` at the moment

Closes #522 ",8,8,['enhancement']
578,372097924,593,92974124,2020-02-06 20:30:37,2020-02-07 18:33:28,closed,[MNT] Move remove_actor,"Follow up to #592 to move the method into its appropriate place in the `BasePlotter` class.

I move to make a policy of keeping those `@wraps` methods all next to each other",0,1,[]
579,371885346,592,92974124,2020-02-06 12:57:43,2020-02-06 18:36:09,closed,Improve documentation of remove_actor,"In the discussion about `remove_actor` in https://github.com/pyvista/pyvista-support/issues/121#issuecomment-582866412, I realized the docstring of this function does not mention the support of  `str` type or iterable types which are very convenient! The goal of this PR is to make it clearer.",5,2,['documentation']
580,371799139,591,92974124,2020-02-06 09:42:06,2020-02-07 18:34:32,closed,[MNT] Fix codespell config,This PR fixes `codespell`'s configuration and includes now the `tests` directory. It will also correct the detected spelling errors.,10,4,['testing']
581,371711161,590,92974124,2020-02-06 05:07:37,2020-03-18 21:48:59,closed,🚧 Check #185,I'm hoping that #185 has resolved itself over time,2,1,"['documentation', 'testing']"
582,371696796,589,92974124,2020-02-06 04:02:12,2020-02-06 17:56:08,closed,[Patch] libjpeg issues,Follow up to #507 but when reading JPEG images as meshes as the conda-forge VTK is having issues https://github.com/conda-forge/vtk-feedstock/issues/98,0,1,['bug-fix']
583,371504659,587,92974124,2020-02-05 17:47:11,2020-02-07 23:00:18,closed,Minor updates to opacity_transfer_function,"I needed to control the `kind` of interpolation for some figures I am making with opacities and figured I'd update the docs for this method.


Here is a snippet from a bigger project:


```py
opacity = [0.2, 0.2, 0.75, 0.2, 0.2]
# 'linear', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'previous', 'next'
tf = pv.opacity_transfer_function(opacity, 256, kind='slinear')
vv =np.linspace(*dargs_vel[""clim""], len(tf))

plt.plot(vv, tf.astype(float) / 255.)
plt.axvline(5500, color='r', linestyle='--')
plt.ylim(0,1)
plt.title('My Opacity Transfer Function')
plt.ylabel('Opacity')
plt.xlabel('Scalar Values')
plt.show()
```

![download](https://user-images.githubusercontent.com/22067021/73875071-dd242980-4811-11ea-884c-8aaee897ebf7.png)




and then pass the transfer function as `opacity` argument to `add_mesh`
```py
...
p.add_mesh(s2_refrac.threshold(), opacity=tf, **dargs_vel)
p.add_mesh(s2_refrac.contour([5500]), line_width=5, 
           opacity=tf, **dargs_vel)
...
```

<img width=""1136"" alt=""Screen Shot 2020-02-05 at 12 19 38 PM"" src=""https://user-images.githubusercontent.com/22067021/73875047-d1d0fe00-4811-11ea-9a1a-2a744e5bfd35.png"">


",2,6,"['enhancement', 'documentation']"
584,371086638,586,92974124,2020-02-04 22:40:47,2020-02-05 17:48:17,closed,[BUGFIX] do not render before show is called,Resolve #585,1,1,['bug-fix']
585,370942334,584,92974124,2020-02-04 16:49:13,2020-02-06 05:12:47,closed,Improve depth peeling docs and default values,"Address #547 as a follow up to #529 

This changes the default values of depth peeling to use VTK's default values and improves documentation of the depth peeling parameters

Note that the values in `rcParams` weren't actually being used after the refactor/wrapping of the `Renderer` methods in #552 ",7,4,['enhancement']
586,370658844,583,92974124,2020-02-04 05:51:10,2020-02-04 16:39:38,closed,Consistently return actors,"Resolve https://github.com/pyvista/pyvista-support/issues/118

These changes make sure that any methods on the `BasePlotter`/`Renderer` that add actors to the scene return those actors",0,1,['proposed-change']
587,370648504,582,92974124,2020-02-04 05:05:11,2020-02-04 16:39:52,closed,Fix axes widget warning,"The new close method of the `Renderer` from #565 is throwing a warning when offscreen plotting. This fixes that

```
ERROR:root:The interactor must be set prior to enabling/disabling widget
```",0,1,['bug-fix']
588,370601886,581,92974124,2020-02-04 01:25:56,2020-02-09 17:51:32,closed,🚀 more examples for the gallery 🚀,"Some new examples and updates to make existing examples better.

Resolve https://github.com/pyvista/pyvista-support/issues/83
Resolve https://github.com/pyvista/pyvista/issues/510

Note: this will increase the docs build time on Travis... (currently at 40 minutes on this branch and 32 minutes on `master`) 

Changes:

- More example downloads
- New `compute_implicit_distance` filter
- Add ability to close loops in `lines_from_points`
- Improve docs for `delaunay_2d`",6,18,"['enhancement', 'discussion', 'documentation']"
589,370551808,580,92974124,2020-02-03 22:22:18,2020-02-06 17:40:25,closed,Add PlotterITK examples and documentation,"This PR adds better documentation and support for `PlotterITK`.  Also added a convenience method `plot_itk` which is available at the module level.

![itk_plotting_sphere](https://user-images.githubusercontent.com/11981631/73696247-2ffbc500-46dc-11ea-8f7f-d42a3da648c1.png)
",2,12,['enhancement']
590,370441085,579,92974124,2020-02-03 17:44:45,2020-02-04 10:43:56,closed,Enable Qt plotting tests on Azure,This PR enables testing of qt plotting on Azure. Let's make them all green.,2,2,['testing']
591,369313032,577,92974124,2020-01-30 22:07:05,2020-02-03 03:54:21,closed,Fixed dimension of CylinderStructured,"Removed a layer of repeating points at the end of the circumference.
The dimension now provides the right number of points specified.",0,3,['bug-fix']
592,369231432,576,92974124,2020-01-30 18:52:40,2020-01-30 20:39:59,closed,[DOC] Add export section to getting started,Just to show folks how to save a mesh to various formats,0,1,['documentation']
593,369148835,575,92974124,2020-01-30 15:50:39,2020-01-30 17:04:34,closed,[BIGFIX] volume render numpy arrray,Fix issue from #521 when volume rendering NumPy arrays,0,1,['bug-fix']
594,368859281,574,92974124,2020-01-30 02:33:28,2020-01-30 03:57:09,closed,Fix issue where plotter appears in sphinx-gallery when making a report,"When putting a `Report` in an SG notebook, the GPU info routine would create a plotter that would be shown in the SG output. Not anymore",0,1,['bug-fix']
595,368771586,573,92974124,2020-01-29 21:21:58,2020-04-05 02:45:21,closed,🚧 [BUG] clipping planes issues when linking views,"When linking views in subplots that have varying spatial extents, the camera clipping planes get all wacky like the following depending on which renderer is being interacted with.

This is an attempt to fix this issue, though it doesn't work.


![2020-01-29 14 17 24](https://user-images.githubusercontent.com/22067021/73398138-23bdd500-42a2-11ea-9430-7bd44160b6d2.gif)
",2,1,['bug']
596,368434685,571,92974124,2020-01-29 08:39:51,2020-02-03 04:37:53,closed,Update visible cell selection,"this provides some updates to fix visible cell selection when multiple meshes are in a scene.

Relevant to #560 

### Example

```py
import pyvista as pv

centers = [(0, 0, 0), (1, 0, 0), (-1, 0, 0),
           (0, 1, 0), (0, -1, 0)]
radii = [1, 0.5, 0.5, 0.5, 0.5]

spheres = pv.MultiBlock()
for i, c in enumerate(centers):
    spheres.append(pv.Sphere(center=c, radius=radii[i]))

p = pv.Plotter(notebook=False)
p.add_mesh(spheres)
p.enable_cell_picking(through=False)
p.show()
```


Previous behavior:


![2020-01-29 01 52 07](https://user-images.githubusercontent.com/22067021/73341513-05bc8a00-423a-11ea-936c-92edc6a50d61.gif)


New behavior:

![2020-01-29 01 50 59](https://user-images.githubusercontent.com/22067021/73341517-0b19d480-423a-11ea-87a7-cc6fa16d0cb6.gif)
",0,3,['enhancement']
597,368412470,570,92974124,2020-01-29 07:27:27,2020-04-04 01:43:27,closed,🚧 Shallow copy mesh when adding to scene,"Resolve #542, pinging @MatthewFlamm

These changes make it so that meshes are shallow copied when added to the scene. This means that when we add a mesh to a scene, a new ""container"" mesh is created that points to the data values in the original mesh so that the same mesh can be added to other renderers with a different active scalar array. This is possible because the ""container"" mesh will manage the active scalars, but the actual data lives in the original mesh (the beauty of a shallow copy).

For example, maybe you have a mesh with a few different scalar arrays and you want to plot them all next to each other like:

![download](https://user-images.githubusercontent.com/22067021/73335488-c8053480-422c-11ea-9b30-cc09a973a57f.png)


Previously (as outlined in https://github.com/pyvista/pyvista/issues/542#issuecomment-574871438), the user would have to copy the mesh before adding the mesh to the scene after it had been added in a previous renderer as the active scalars attribute would be overwritten. Now, it works like a user might expect:

```py
import pyvista as pv
from pyvista import examples
import numpy as np

mesh = examples.download_blood_vessels().ctp()
contours = mesh.contour(scalars=""shearstress"")


plotter = pv.Plotter(shape=(1,3), window_size=[2048*3, 1536])

plotter.add_mesh(contours, scalars=""density"")

plotter.subplot(0,1)
plotter.add_mesh(contours, scalars=""velocity"")

plotter.subplot(0,2)
plotter.add_mesh(contours, scalars=""shearstress"")

plotter.link_views()
plotter.camera_position = [
    (104.95248078038908, -157.07391180168247, -16.534092166373355),
    (87.72735313495542, 82.94721195427934, 110.3163662948969),
    (-0.6644780195578007, -0.38590290740723265, 0.6399593015022035)
  ]

plotter.show()
```

-----

And to prove that no issues arise from these changes when wanting to dynamically update a mesh that has already been added to a renderer, check out this example:

*note that we add the same mesh to two renderers and display different scalars but are still able to update the coordinates of the mesh after it has been added (shallow copied).*

```py
import pyvista as pv
from pyvista import examples
import numpy as np

w = pv.Wavelet().cast_to_structured_grid()
w[""x""] = w.points[:,0]

w.plot()
```

Original mesh:

![download](https://user-images.githubusercontent.com/22067021/73336069-16ff9980-422e-11ea-8f11-ebe593650b31.png)


```py
p = pv.Plotter(shape=(1,2))

# Add same mesh to scene twice with differrent active scalars
p.add_mesh(w, scalars=""RTData"")
p.subplot(0,1)
p.add_mesh(w, scalars=""x"")
# Update the mesh after it has been added to the scene
w.points[:,0] *= 2
p.show_grid()
p.show()
```

![download](https://user-images.githubusercontent.com/22067021/73335642-3813ba80-422d-11ea-91ef-c32f34829708.png)
",5,2,"['enhancement', 'proposed-change', 'review-critical']"
598,368349676,569,92974124,2020-01-29 03:16:12,2020-02-03 04:28:55,closed,Add vtkExtractVOI filter,Adds an `extract_subset` filter to extract volumes of interest from image data/uniform grids while preserving the data type,3,7,['enhancement']
599,367856009,568,92974124,2020-01-28 06:56:34,2020-01-28 23:23:03,closed,load from meshio instances,"These changes make it possible to load from `meshio` instances and pass `meshio` objects to the `pyvista.wrap()`, `pyvista.plot()`, and `pyvista.from_meshio` methods.

What does this mean? More interoperability with `meshio` based software like [`pygalmesh`](https://github.com/nschloe/pygalmesh) or [`pygmsh`](https://github.com/nschloe/pygmsh) without having to save a static copy of the mesh to a file.


```py
import pygmsh
import pyvista as pv

geom = pygmsh.opencascade.Geometry(
  characteristic_length_min=0.1,
  characteristic_length_max=0.1,
  )

rectangle = geom.add_rectangle([-1.0, -1.0, 0.0], 2.0, 2.0)
disk1 = geom.add_disk([-1.2, 0.0, 0.0], 0.5)
disk2 = geom.add_disk([+1.2, 0.0, 0.0], 0.5)
union = geom.boolean_union([rectangle, disk1, disk2])

disk3 = geom.add_disk([0.0, -0.9, 0.0], 0.5)
disk4 = geom.add_disk([0.0, +0.9, 0.0], 0.5)
flat = geom.boolean_difference([union], [disk3, disk4])

geom.extrude(flat, [0, 0, 0.3])

mesh = pygmsh.generate_mesh(geom)

pv.plot(mesh, show_edges=True, point_size=10, render_points_as_spheres=True)
```

![download](https://user-images.githubusercontent.com/22067021/73241860-91fa7e80-4160-11ea-9d57-c82af2bc4b6b.png)


",0,1,['enhancement']
600,367626056,567,92974124,2020-01-27 17:59:36,2020-02-02 19:31:19,closed,add file drop functionality to BackgroundPlotter,"`BackgroundPlotter` now accepts dropped files.  Right now, it just adds the mesh directly to the plotter using no kwargs.  We need to add the option to have an object tree like `pyvista-gui` so we can change the way a mesh is plotted from within the GUI.

![forpyvista](https://user-images.githubusercontent.com/11981631/73200430-0c160d80-4137-11ea-94e7-4536a8adf43b.gif)
",4,1,['enhancement']
601,367603876,565,92974124,2020-01-27 17:07:16,2020-02-03 04:38:09,closed,[BUGFIX] Properly close axes widgets,"Resolve #558 by adding a `close()` method to the `Renderer` class that will close out the axes widgets before the render window interactor is destroyed.

This also makes me think that we should refactor the `widgets` module to keep track of all the widgets on the `Renderer`s themselves rather than the `BasePlotter`.... for another time",3,3,"['bug-fix', 'priority-high']"
602,367587277,564,92974124,2020-01-27 16:32:32,2020-02-03 04:42:15,closed,Deep copy textures in copy_meta_from,"When copying a dataset with textures, ensure the textures are also copied and not pointing to the original mesh's textures",0,1,['enhancement']
603,367258878,563,92974124,2020-01-26 20:38:54,2020-01-28 18:38:53,closed,[BUGFIX] getitem list of str with MultiBlock,There was a bug if passing a list of string names to fetch subsets of a `MultiBlock` dataset. These changes fix that and add a test.,1,1,['bug-fix']
604,366478161,561,92974124,2020-01-23 17:26:08,2020-01-23 18:32:53,closed,[BUGFIX] CylinderStructured height,The structured grid generated was shorter than the length argument.,0,1,['bug-fix']
605,366024680,559,92974124,2020-01-22 19:29:24,2020-01-23 02:42:53,closed,Improve meshio support,"**Writer**
- Added: support to polygons,
- Added: raise ``AssertionError`` is any cell type is not supported by ``meshio``.

**Note**
- See issue https://github.com/pyvista/pyvista-support/issues/108.",0,2,"['enhancement', 'bug-fix']"
606,365089942,554,92974124,2020-01-21 04:33:29,2020-04-03 14:50:58,closed,Add PolyData verts setter/getter,For https://github.com/pyvista/pyvista-support/issues/104,3,5,['enhancement']
607,365078913,553,92974124,2020-01-21 03:33:09,2020-01-22 19:09:25,closed,Fix scalar bar font size issue,Fixes an issue with the scalar bar font sizes brought up in https://github.com/pyvista/pyvista/issues/539#issuecomment-576345992,1,2,['bug-fix']
608,365037931,552,92974124,2020-01-20 23:40:04,2020-01-22 19:11:15,closed,Refactor BasePlotter's wrapping of Renderer,"Close #470 and follow up https://github.com/pyvista/pyvista/pull/536#issuecomment-575248748

This uses `functools.wraps` to properly wrap the methods on `BasePlotter` that call to the active `Renderer`, minimizing duplicated docstrings and argument listing. Note that properties still aren't handled via wrapping but are all explicitly defined in `BasePlotter`.

I also went ahead and deprecated the `loc` argument that was in a few places across the `BasePlotter` API as it was mostly unused. This deprecation was done in favor of having the user activate a given plotter by the `subplot` method then calling the method of choice. See https://github.com/pyvista/pyvista/pull/536#issuecomment-575254512. I think that using one active renderer managed by `subplot()` is more in line with our mission to follow Matplotlib conventions and simpler (having `loc` argument just makes things messy and hard to manage). Also, this is in line with the Zen of Python:

> There should be one-- and preferably only one --obvious way to do it.

I also reorganized the `Plotter` and `Renderer` class by keeping all of the wrapped methods from `Renderer` and properties in their respective sections of the class definition.

",1,9,"['enhancement', 'documentation', 'proposed-change', 'deprecation', 'priority-high']"
609,365002673,551,92974124,2020-01-20 21:07:32,2020-01-20 23:47:57,closed,Remove duplicate code,"Not sure how this happened but the `add_mesh` call was adding actors and creating mappers twice - not good.

I am the culprit on this... happened when merging #292 which wasn't up to date at the time",4,2,"['bug-fix', 'priority-high']"
610,365000131,550,92974124,2020-01-20 20:57:50,2020-01-20 23:48:17,closed,Add find_closest_point method,Adds a method to all spatially referenced datasets to find the closest single point (see https://github.com/pyvista/pyvista-support/issues/107),3,1,['enhancement']
611,364928112,549,92974124,2020-01-20 16:56:17,2020-01-20 18:04:29,closed,Fix slider coordinates in subplot,"This PR is a follow-up of https://github.com/pyvista/pyvista/issues/513#issuecomment-575161649 and change the coordinate system of the slider to fix issues in subplots.

Now the following is possible:

```py
import pyvista as pv

shape = (2, 4)
pointa = (0.2, 0.5)
pointb = (0.8, 0.5)

p = pv.Plotter(shape=shape)

for i in range(shape[0]):
    for j in range(shape[1]):
        p.subplot(i, j)
        p.add_mesh(pv.Sphere())
        p.add_slider_widget(
            callback=lambda value: value,
            rng=[0, 1],
            pointa=pointa,
            pointb=pointb,
        )

p.show()
```

![image](https://user-images.githubusercontent.com/18143289/72744403-d3fa5200-3bad-11ea-8b5f-bee22386defb.png)

Closes #513 ",1,1,['bug-fix']
612,364919844,548,92974124,2020-01-20 16:35:16,2020-02-03 18:58:36,closed,Duplicated figures with BackgroundPlotter in sphinx,"I have an issue of duplicated figures with `BackgroundPlotter` and `sphinx-gallery`. I share my example in here.

I expect one figure after cell 1 but we can see two and I expect no figure in cell 2 since there is a call to `close()` but once again we can see two.

![image](https://user-images.githubusercontent.com/18143289/72742785-bc6d9a00-3baa-11ea-9e8d-cace9fd1f1ba.png)
",28,26,"['proposed-change', 'bug-fix', 'priority-high']"
613,364506617,546,92974124,2020-01-19 07:46:10,2020-02-03 04:38:27,closed,Minor fixes for voxelize,"Here are some fixes for the `voxelize` method. This ensures any passed mesh type will now work as sometimes the `select_enclosed_points` would throw an error if the mesh wasn't `PolyData` or wasn't a closed surface.

Also, this now sets a default for `density` as 1/100th the mesh length - seemed reasonable to me.

With this, close https://github.com/pyvista/pyvista-support/issues/78

Data:  [salt_body.ply.zip](https://github.com/pyvista/pyvista/files/4082374/salt_body.ply.zip)

```py
import pyvista as pv
surf = pv.read(""salt_body.ply"")
grid = pv.voxelize(surf, check_surface=False)
grid.plot()
```

![download](https://user-images.githubusercontent.com/22067021/72677033-0e9ca700-3a55-11ea-9815-dbce53f6239e.png)

",5,1,"['enhancement', 'bug-fix']"
614,364505170,545,92974124,2020-01-19 07:24:22,2020-05-29 04:12:34,closed,🚧 StructuredGrid subsample filter,"Here is a new filter to subsample `StructuredGrid`s using their internal coordinate axes.

Resolves https://github.com/pyvista/pyvista-support/issues/62

TODO:

- [ ] Make sure arrays are properly handled (fix cell data issues)
- [ ] Fix point ordering issues
- [ ] Add tests
- [ ] Add example to gallery",2,6,['enhancement']
615,363861559,544,92974124,2020-01-16 21:43:50,2020-02-03 04:38:48,closed,Add vtkIdList converter and leverage in geodesic filter,"These changes add a converter for the `vtkIdList` type (had to use a comprehension as we cannot fetch the data values from a buffer... this is slow, but all I could manage to get to work).

This allows us to fetch the original point ids in the geodesic filter to close https://github.com/pyvista/pyvista-support/issues/105


```py
import pyvista as pv
from pyvista import examples

mesh = examples.download_bunny()

geo = mesh.geodesic(0, 10,)

p = pv.Plotter()
p.add_mesh(mesh, color=True, show_edges=True)
p.add_mesh(geo, color=""red"", line_width=5)

p.camera_position = [(0.020113726841265497, 0.17861833794480292, 0.11038697869173446), 
                     (-0.05506443936066557, 0.12216832283054987, 0.02454963672656186), 
                     (-0.1928428741624666, 0.8888478424625952, -0.41564544847062723)]
p.show()
```

![download](https://user-images.githubusercontent.com/22067021/72565169-8a88ca80-386e-11ea-8739-54a4ef949b91.png)


And now you can use the `vtkOriginalPointIds` array for whatever
```py
extracted = mesh.extract_points(geo[""vtkOriginalPointIds""])

p = pv.Plotter()
p.add_mesh(mesh, color=True, show_edges=True)
p.add_mesh(extracted, color=""red"", line_width=5)
p.camera_position = [(0.020113726841265497, 0.17861833794480292, 0.11038697869173446), 
                     (-0.05506443936066557, 0.12216832283054987, 0.02454963672656186), 
                     (-0.1928428741624666, 0.8888478424625952, -0.41564544847062723)]
p.show()
```

![download](https://user-images.githubusercontent.com/22067021/72565188-91174200-386e-11ea-926a-a9417c827676.png)
",0,4,['enhancement']
616,363719415,543,92974124,2020-01-16 15:57:17,2020-02-08 22:03:52,closed,Add component feature for plotting vectors,"Fixes title of scalar bar in `BasePlotter`. It looks like `title` was meant to be used, but `stitle` was used instead.

Confusingly, it looks like add_volume is intended to use `stitle`?

Example:
```py
import pyvista as pv
from pyvista import examples
mesh = examples.download_carotid().threshold(145, scalars=""scalars"")
p = pv.Plotter()
p.add_mesh(mesh, scalars=""vectors"")
p.show()
```

Old behavior:
![image](https://user-images.githubusercontent.com/39341281/72540456-d4fa4f00-384e-11ea-8519-5a3a41b26466.png)


New Behavior:
![image](https://user-images.githubusercontent.com/39341281/72540388-bc8a3480-384e-11ea-80df-88a168cbba23.png)



",15,8,"['bug-fix', 'review-critical']"
617,363260074,538,92974124,2020-01-15 17:45:04,2020-01-15 21:48:56,closed,Patch brown color and legend geometry placement,"For some reason the color brown was mapped incorrectly in `colors.py`... previously it was red-ish.

Also, some markers in the legend would not always be placed correctly becuase they need to be centered at (0,0) - this fixes that

```py
import pyvista as pv
from pyvista import examples

p = pv.Plotter()
p.add_mesh(examples.download_bunny(), label=""mesh"", color=""brown"", lighting=False)
p.add_legend()
p.show()
```

![download](https://user-images.githubusercontent.com/22067021/72457442-da3e9780-3783-11ea-9ef2-3efd710dddc2.png)

now we get

![download](https://user-images.githubusercontent.com/22067021/72457586-30abd600-3784-11ea-9c8c-475b85a00201.png)


-----
Previously misplaced legend markers:

<img width=""1335"" alt=""Screen Shot 2020-01-15 at 10 44 34 AM"" src=""https://user-images.githubusercontent.com/22067021/72457525-0823dc00-3784-11ea-8153-12a3cf0578b6.png"">

which are fixed to 

<img width=""209"" alt=""Screen Shot 2020-01-15 at 10 44 54 AM"" src=""https://user-images.githubusercontent.com/22067021/72457543-13770780-3784-11ea-8b9d-71425e7e0957.png"">

",0,2,['bug-fix']
618,363236860,537,92974124,2020-01-15 16:50:35,2020-01-16 20:57:33,closed,Better repr for camera position list,"The repr for the camera position (from #491) was a bit poorly formatted and would sometimes result in really long lists if copy/pasting.

For example, in one scene I am working with right now, this is what is currently returned if I copy/paste:

```
[(315661.9406719345, 4234675.528454831, 15167.291249498076), (337498.00521202036, 4260818.504034578, -1261.5688408692681), (0.2708862567924439, 0.3397398234107863, 0.9006650255615491)]
```

which if I try to put back into my code, results in a really long line

now, the elements are broken up by lines so copy/pasting is a little better:

```
[(315661.9406719345, 4234675.528454831, 15167.291249498076),
 (337498.00521202036, 4260818.504034578, -1261.5688408692681),
 (0.2708862567924439, 0.3397398234107863, 0.9006650255615491)]
```",0,2,['enhancement']
619,362976044,536,92974124,2020-01-15 06:20:42,2020-01-16 21:49:16,closed,Refactor axes widget to be on any renderer,"Previously, the axes widget could only be added to a single renderer in any given Plotter. Now we can have axes widgets in any renderer!

![Screen Shot 2020-01-14 at 11 10 28 PM](https://user-images.githubusercontent.com/22067021/72409558-55bc2c80-3723-11ea-8e4b-824f8c71e239.png)
",9,3,['enhancement']
620,362932885,535,92974124,2020-01-15 03:01:16,2020-01-30 20:35:02,closed,[BUGFIX] fix combine filter for nested MultiBlock,"Previously, running the `combine` filter on a nest MultiBlock dataset would result in a stream of errors. This resolves that.",0,2,"['bug-fix', 'priority-high']"
621,362427809,533,92974124,2020-01-14 03:37:27,2020-01-26 20:57:05,closed,[BUGFIX] correct how widget tools activate scalars,"Resolve #400 🎉 

If you try to use one of the widget tools like `add_mesh_slice` and plot any scalars other than the active scalars, then you will see incorrect results in the color mapping upon updating the widget.

Also, if a mesh does not have active scalars, then you will run into problems as the filter mesh will not either so the mapper will get all confused",2,2,"['bug-fix', 'priority-high']"
622,362254071,532,92974124,2020-01-13 18:16:14,2020-01-15 03:06:34,closed,MNT: Remove duplicate clear() in test_widgets,This is a follow-up of https://github.com/pyvista/pyvista/pull/528#discussion_r365654309 and removes the duplicated calls of `clear()` in `test_widgets.py`. They are not necessary since `close()` takes care of it and they can lead to test failure.,0,1,['testing']
623,361949042,531,92974124,2020-01-13 06:09:40,2020-04-04 01:43:56,closed,Only volume render point data,"I've had a number of issues volume rendering grids with cell data. these changes migrate cell data to point data right before volume rendering. Since we were already copying the dataset (see #475), this fits in easily as an effect that will only benefit users until we overhaul the volume rendering code in accordance with #475 

NOTE: see https://github.com/pyvista/pyvista/pull/464#issuecomment-558466410 for further reasoning",3,1,['proposed-change']
624,361941580,530,92974124,2020-01-13 05:39:07,2020-01-13 17:29:03,closed,Fix issues with RectilinearGrid instantiation,"These changes fix an issue where you couldn't update the coordinates of a `RectilinearGrid` after instantiating it. 

The issue arose from how the dimensions have to be updated anytime the coordinates are changed. These changes make it so that the dimensions are automatically managed by PyVista and the user is unable to set them unless using the VTK method (`.SetDimensions()`). `RectilinearGrid`s are technically implicitly defined, so it makes sense to only let the user update the `x`, `y`, and `z` coordinates for the mesh grid.

These changes also give users more options if wanting to create a 1D or 2D `RectilinearGrid` upon instantiation by allowing 1 or 2 coordinate arrays to be passed instead of 3. The `__init__` method defaults to x first, then y, then z. If a user wants to have a 2D grid oriented on the `yz` plane, then they can set the coordinates after instantiating like so (this was previously not possible):

```py
import pyvista as pv
import numpy as np
foo = pv.RectilinearGrid()
foo.y = np.array([3,4,5])
foo.z = np.array([6,7,8])
foo.plot(show_edges=True, show_bounds=True, lighting=False)
```

![download](https://user-images.githubusercontent.com/22067021/72234855-376ff880-358c-11ea-8014-7a854762b94b.png)

-----

This also adds a convenient `cast_to_structured_grid()` method as `RectilinearGrid`s can easily be represented by a `StructuredGrid`.

Testing is implemented.",1,4,"['enhancement', 'bug-fix']"
625,361790159,529,92974124,2020-01-12 03:21:54,2020-01-13 16:12:25,closed,enable depth peeling by default,Resolve #527 by controlling depth peeling (#450) in the `rcParams`. Default is now enabled.,4,2,"['enhancement', 'proposed-change']"
626,361465730,528,92974124,2020-01-10 14:06:29,2020-01-13 18:03:12,closed,Add checkbox button,"This PR adds basic support for checkbox button. The `Animate` label below is **not part of the button** but is given by [`add_text()`](https://docs.pyvista.org/plotting/plotting.html?highlight=add_text#pyvista.BasePlotter.add_text) instead.

To illustrate (inspired by [Orbiting](https://docs.pyvista.org/examples/02-plot/orbit.html?)):

![output](https://user-images.githubusercontent.com/18143289/72157902-418dcd80-33b9-11ea-9f69-2e8bf17d6a4e.gif)

Source code: https://gist.github.com/GuillaumeFavelier/1bfa7ad2160d86b0814ed890dd7f27bc

*I think this demo could be improved with [floors](https://github.com/pyvista/pyvista/pull/423) or [background image](https://github.com/pyvista/pyvista-support/issues/91).*",2,7,['feature-request']
627,361170652,525,92974124,2020-01-09 21:33:04,2020-01-13 17:29:37,closed,Add new filter sample_over_line and refactor plot_over_line,"This PR enables a new filter sample_over_line, which is a simple refactoring of plot_over_line, but enables the user to retrieve the data instead of just plotting it.  plot_over_line calls sample_over_line, and now only does plotting.",3,5,['enhancement']
628,360288376,521,92974124,2020-01-08 05:29:14,2020-01-09 19:15:08,closed,Resolve issue where meshes are overridden in scene based on duplicate ids,"This should resolve #386 

Pinging @kjelljorner and @sampotter

a test was implemented to check that this is always working",0,4,['bug-fix']
629,358468362,520,92974124,2020-01-01 09:02:09,2020-01-08 04:27:44,closed,🎉 HAPPY NEW YEAR 2020 🎉,:tada: HAPPY NEW YEAR 2020 :tada: . I updated the year of LICENSE to 2020.,6,3,[]
630,357495869,518,92974124,2019-12-28 14:14:38,2020-01-08 13:34:04,closed,Add basic text slider,"This PR adds a text slider widget. This is a specialized version of `add_slider_widget()` for convenience.

```py
import pyvista as pv

data = ['red', 'green', 'blue', 'purple', 'orange']
cone = pv.Cone()


def set_color(color):
    color = pv.parse_color(color)
    cone.point_arrays['color'] = [color] * cone.n_points


p = pv.Plotter()
p.add_text_slider_widget(set_color, data=data, event_type='always')
p.add_mesh(cone, scalars='color', rgba=True)
p.show()
```

![output](https://user-images.githubusercontent.com/18143289/71544876-9165a100-2984-11ea-82f9-4067920258d3.gif)

This is still a work in progress. I have to:

- [x] Rework the documentation
- [x] Update the tests
- [x] Return the slider",3,6,['enhancement']
631,356379078,517,92974124,2019-12-23 16:10:48,2020-04-05 02:44:11,closed,🚧 Refactor and Cleanup,"Brings #408 and #468  up to date in a branch within the PyVista repo for @JevinJ, @banesullivan, @GuillaumeFavelier, and @akaszynski to collaborate on since this PR brings major changes to the internal codebase

Originally from @JevinJ
### To Do

This To Do list is mostly from @JevinJ in #468's description

- [ ] Write tests for `DataSetAttributes/pyvista_ndarray`.
- [ ] Get rid of `__new__` methods in abstract classes, with `abc.ABC` it should throw an error, but it's not working atm(maybe vtk overrides that behavior). It should also be possible to hide the abstract classes from the API.
- [ ] Move `active_scalars_info/active_vectors_info`. Currently, it's on the `DataSet` level, but it seems vtk can have 2 different ones for each dataset, one for `CellData` and one for `PointData`, accessible through `DataSetAttributes`.
- [ ] Move/redirect more methods from `dataset.py` if possible.
- [ ] Add `CompositeDataSetAttributes`, @JevinJ might not get to this.
- [ ] Fix line spaces in classes, currently, they are inconsistent(either 1 or 2) through the project, but this may be a stylistic change for later, can save lots of lines if made 1.
    - @banesullivan: Maybe this can be fixed by enforcing a codestyle like Black (see #516)
- [ ] Do a final pass to ensure everything is as it should be & API doesn't change. Run plotting tests since I can't currently.

Things @JevinJ would like to do but probably won't do since they change API:

- ~Remove duplicate methods, `n_cells`/`n_points` & `number_of_cells`, `number_of_points`. Both do the same thing.~, @JevinJ, these are here for backward compatibility and likely here to stay
- [ ] Rename methods/properties in `dataset.py`, they aren't _quite_ what @JevinJ thinks they should be.
- [ ] Give all pyvista objects their own file, it's a bit confusing(and exhausting scrolling wise) having semi-related classes grouped in one file. Won't do because it would overwrite change history.
    - @JevinJ, there are ways to handle this that will not overwrite the change history than @banesullivan can handle as it was done before in the `core` module.
",14,278,"['enhancement', 'proposed-change', 'priority-high', 'review-critical']"
632,356271610,516,92974124,2019-12-23 10:23:02,2020-04-05 02:43:26,closed,🚧 ⬆️ UPDATE code style by black,"Hello pyvista project. I formatted python code by using [black](https://github.com/psf/black).  As you know, black is an auto Python code formatter by Python software foundation. And the good thing to use this tool are
- It will follow PEP8 automatically.
- It will set a rule beyond what is not mentioned in PEP8. We don't have to discuss where to start a new line.
- We don't have to discuss whether to use single quotes or double quotes.

This tool saves these times and we will be able to focus on development. If you like this change, let's set this tool in CI !

Feel free to comment, because I didn't spend so much time to make this patch. It is automated :-).",5,3,"['proposed-change', 'for-future-consideration']"
633,356063260,515,92974124,2019-12-22 07:31:58,2019-12-22 19:48:45,closed,📛 License,Thank you for cool library. I think it is good to add :name_badge: License to README. Thank you for reading.,1,2,[]
634,356035647,514,92974124,2019-12-21 22:22:14,2019-12-23 09:09:13,closed,Select type of event for slider widget,This PR allows the user to specify how often the slider interacts with the callback.,7,2,['enhancement']
635,355424377,512,92974124,2019-12-19 23:36:13,2019-12-29 16:08:13,closed,Add GPU details to Report,"Waiting on a new release for `scooby`. Requires https://github.com/banesullivan/scooby/pull/39

These changes give us a way to gather information about a user's GPU:

```py
import pyvista as pv

pv.Report()
```
<img width=""744"" alt=""Screen Shot 2019-12-19 at 6 33 47 PM"" src=""https://user-images.githubusercontent.com/22067021/71218080-34842f80-228e-11ea-9001-901d514ed162.png"">

```py
print(pv.Report())
```
```
--------------------------------------------------------------------------------
  Date: Thu Dec 19 18:35:43 2019 EST

            Darwin : OS
                12 : CPU(s)
            x86_64 : Machine
             64bit : Architecture
        GPU Vendor : ATI Technologies Inc.
      GPU Renderer : AMD Radeon Pro Vega 20 OpenGL Engine
       GPU Version : 4.1 ATI-3.2.24
           32.0 GB : RAM
           Jupyter : Environment

  Python 3.7.3 | packaged by conda-forge | (default, Dec  6 2019, 08:36:57)
  [Clang 9.0.0 (tags/RELEASE_900/final)]

            0.23.0 : pyvista
             8.1.2 : vtk
            1.17.3 : numpy
             2.6.1 : imageio
             1.4.3 : appdirs
             0.4.3 : scooby
             3.1.2 : matplotlib
            5.12.3 : PyQt5
             7.6.1 : IPython
             1.0.0 : colorcet
               2.0 : cmocean
--------------------------------------------------------------------------------
```

```py
pv.GPUInfo()
```
<img width=""360"" alt=""Screen Shot 2019-12-19 at 6 33 57 PM"" src=""https://user-images.githubusercontent.com/22067021/71218087-3c43d400-228e-11ea-98a9-da09347030d6.png"">


```py
print(pv.get_gpu_info())
```
<details>

```
OpenGL vendor string:  ATI Technologies Inc.
OpenGL renderer string:  AMD Radeon Pro Vega 20 OpenGL Engine
OpenGL version string:  4.1 ATI-3.2.24
OpenGL extensions:  
  GL_ARB_blend_func_extended
  GL_ARB_draw_buffers_blend
  GL_ARB_draw_indirect
  GL_ARB_ES2_compatibility
  GL_ARB_explicit_attrib_location
  GL_ARB_gpu_shader_fp64
  GL_ARB_gpu_shader5
  GL_ARB_instanced_arrays
  GL_ARB_internalformat_query
  GL_ARB_occlusion_query2
  GL_ARB_sample_shading
  GL_ARB_sampler_objects
  GL_ARB_separate_shader_objects
  GL_ARB_shader_bit_encoding
  GL_ARB_shader_subroutine
  GL_ARB_shading_language_include
  GL_ARB_tessellation_shader
  GL_ARB_texture_buffer_object_rgb32
  GL_ARB_texture_cube_map_array
  GL_ARB_texture_gather
  GL_ARB_texture_query_lod
  GL_ARB_texture_rgb10_a2ui
  GL_ARB_texture_storage
  GL_ARB_texture_swizzle
  GL_ARB_timer_query
  GL_ARB_transform_feedback2
  GL_ARB_transform_feedback3
  GL_ARB_vertex_attrib_64bit
  GL_ARB_vertex_type_2_10_10_10_rev
  GL_ARB_viewport_array
  GL_EXT_debug_label
  GL_EXT_debug_marker
  GL_EXT_depth_bounds_test
  GL_EXT_texture_compression_s3tc
  GL_EXT_texture_filter_anisotropic
  GL_EXT_texture_mirror_clamp
  GL_EXT_texture_sRGB_decode
  GL_APPLE_client_storage
  GL_APPLE_container_object_shareable
  GL_APPLE_flush_render
  GL_APPLE_object_purgeable
  GL_APPLE_rgb_422
  GL_APPLE_row_bytes
  GL_APPLE_texture_range
  GL_ATI_texture_mirror_once
  GL_NV_texture_barrier
PixelFormat Descriptor:
  colorSize:  32
  alphaSize:  8
  stencilSize:  0
  depthSize:  32
  accumSize:  0
  double buffer:  Yes
  stereo:  No
  stencil:  0
  hardware acceleration:  Yes
  profile version:  0x3200
```

</details>",5,7,['enhancement']
636,355234175,511,92974124,2019-12-19 16:31:03,2019-12-19 17:52:03,closed,Fix slider widget coordinate parameters,"This PR fixes a bug with the input coordinates of the slider widget.

To reproduce:

```py
import pyvista as pv


def foo(v):
    pass


rng = [0, 1]
left = [[0.1, -0.3],
        [0.1, 1.3]]
right = [[0.9, -0.3],
         [0.9, 1.3]]
p = pv.Plotter()
p.add_slider_widget(foo, rng=rng, title='left', pointa=left[0], pointb=left[1])
p.add_slider_widget(foo, rng=rng, title='right', pointa=right[0], pointb=right[1])
p.show()
```

master | PR
---------|------
![2019-12-19_1920x1080](https://user-images.githubusercontent.com/18143289/71190588-27167780-2285-11ea-9882-7ff6b5df4119.png) | ![2019-12-19_1920x1080](https://user-images.githubusercontent.com/18143289/71190535-0cdc9980-2285-11ea-9130-da951aa1dab1.png)
",6,1,['bug-fix']
637,354247887,509,92974124,2019-12-17 18:26:51,2019-12-17 19:10:53,closed,Add update hook on ModifiedEvents for Qt widgets,"This is a simple fix to https://github.com/pyvista/pyvista-support/issues/86 to make sure the `update` method is called on any modified events when embedding a plotter as a qt widget.

I set this up so it can easily be turned off (on by default) using the `auto_update` argument when instantiating the `QtInteractor` class

Resolves https://github.com/pyvista/pyvista-support/issues/86",1,1,[]
638,354241659,508,92974124,2019-12-17 18:12:08,2019-12-17 18:48:38,closed,Prevent q-key from binding to QtInteractor class,"Adress issue raised in https://github.com/pyvista/pyvista-support/issues/86#issuecomment-566595944 by @akaszynski 

Now the `q`-key will not bind to embedded widgets in Qt apps but will still close the `BackgroundPlotter`",0,1,[]
639,354178630,507,92974124,2019-12-17 15:53:32,2019-12-17 18:50:30,closed,Use imageio if libjpeg is broken,Patch to handle issues from https://github.com/conda-forge/vtk-feedstock/issues/98 if using the conda build of VTK,1,1,[]
640,354142566,506,92974124,2019-12-17 14:43:08,2019-12-17 15:35:37,closed,Change OSError to more specific FileNotFoundError when needed,Fix #505,1,1,[]
641,354013803,504,92974124,2019-12-17 09:56:22,2019-12-17 18:29:57,closed,MAINT: Use the latest version of pydocstyle,"Now that a [patch is available](https://github.com/PyCQA/pydocstyle/issues/434#issuecomment-563413927) in the version `5.0.1` of `pydocstyle`, we can use the latest version.",7,3,[]
642,353405500,503,92974124,2019-12-16 06:59:38,2019-12-17 14:55:35,closed,Add auto start option for cell picking,,2,1,[]
643,353207168,502,92974124,2019-12-14 19:53:14,2019-12-17 15:20:59,closed,Fix windows closing issues,"Close #501 

Resolve #186 and resolve #500 and resolve #418 

It's finally figured out and fixed 🎉 In the GIF below, you can see me use the exit button in the GUI and nothing crashes (#500), THEN I run the next code cell and it doesn't close itself out of nowhere (https://github.com/pyvista/pyvista/issues/186#issuecomment-550993270)!

![2019-12-14 13 11 37](https://user-images.githubusercontent.com/22067021/70854023-5e46ec00-1e73-11ea-9ca1-307ae35f104c.gif)
",1,5,"['bug-fix', 'priority-high']"
644,353159175,501,92974124,2019-12-14 09:25:26,2019-12-16 13:30:56,closed,🚧 Fix window exit crash,"Considering the following simple code snippet:

```py
from pyvista import examples
import pyvista as pv
mesh = examples.download_st_helens()
p = pv.Plotter(notebook=False)
p.add_mesh(mesh)
p.show()
```

Running this on Windows on a IPython environment either on a `jupyter notebook` or `Spyder` terminal for example will open a window:

![image](https://user-images.githubusercontent.com/18143289/70846618-554a2080-1e5b-11ea-81fe-96ed156a5532.png)

But a few issues have been reported:

- [ ]  **1)** Closing the window with the X button crashes the kernel with `ERROR:root:Shader object was not initialized, cannot attach it.` (see https://github.com/pyvista/pyvista/issues/186#issuecomment-545598442 or https://github.com/pyvista/pyvista/issues/500#issue-537459287)
- [ ]  **2)** Closing the window with `q` closes correctly but if you run the cell again, the window will open and close instantly. You need to restart the kernel to have the correct behaviour: only the first run of the cell opens a window that actually stays opened. (see https://github.com/pyvista/pyvista/issues/186#issuecomment-550993270)

Closes #186 and #500 ",7,3,[]
645,352673143,499,92974124,2019-12-13 00:40:51,2019-12-13 15:32:59,closed,Log scale color mapping and arial default font,"This enables access to a log scale when mapping the scalars during plotting and also changes the default font to Arial because courier looked harsh to me

Using the dataset from https://github.com/pyvista/pyvista-support/issues/83

No log scale:

![download](https://user-images.githubusercontent.com/22067021/70760315-7a794a80-1d06-11ea-8849-d9f4c6265e86.png)


With a log scale:

![download](https://user-images.githubusercontent.com/22067021/70760323-81a05880-1d06-11ea-8d7d-d20545f48932.png)
",5,2,['enhancement']
646,352348853,498,92974124,2019-12-12 10:47:30,2019-12-17 14:45:37,closed,Fix QVTKRWIBase default value,"Update the default class chosen by `QVTKRenderWindowInteractor` depending on the version of `vtk`.
The fix was suggested by @math-artist.

To reproduce, using the version `8.2` of `vtk`:

On my configuration, before:

```py
>>> import pyvista
>>> import vtk
>>> vtk.qt.QVTKRenderWindowInteractor.QVTKRenderWindowInteractor.__bases__
(<class 'PyQt5.QtWidgets.QWidget'>,)
```

With this patch:
```py
>>> import pyvista
>>> import vtk
>>> vtk.qt.QVTKRenderWindowInteractor.QVTKRenderWindowInteractor.__bases__
(<class 'PyQt5.QtOpenGL.QGLWidget'>,)
```

Closes #473 ",2,1,['bug-fix']
647,352145541,497,92974124,2019-12-11 22:31:32,2019-12-11 23:02:56,closed,[MNT] volume render color limits,"Small patch to partially solve #475. Thanks, @keltonhalbert!",0,2,[]
648,351237744,496,92974124,2019-12-10 07:17:27,2019-12-11 17:31:41,closed,[DOC] Updates to README,Just some minor updates to the README,0,1,[]
649,351227361,495,92974124,2019-12-10 06:45:04,2019-12-11 20:30:51,closed,resolve meshio issues,"I can't read Dolfin meshes using PyVista's `meshio` reader from #472. These changes are a start to a fix as 2D coordinates are returned...

@keurfonluu, can you check this out with the following example? You should have push access to this branch, so please feel free to edit here. 

```py
import pyvista as pv
from pyvista import examples

# Downloads a sample Dolfin mesh from our data repo: https://github.com/pyvista/vtk-data
saved_file, _ = examples.downloads._download_file(""dolfin_fine.xml"")

pv.read_meshio(saved_file, file_format=""dolfin-xml"")
```

```
ERROR:root:Number of components is different...can't set data
UnstructuredGrid (0x7fac111847c8)
  N Cells:	5400
  N Points:	0
  X Bounds:	1.000e+299, -1.000e+299
  Y Bounds:	1.000e+299, -1.000e+299
  Z Bounds:	1.000e+299, -1.000e+299
  N Arrays:	0
```


----

Note: this Dolfin mesh is originally from [`vtkplotter`](https://github.com/marcomusy/vtkplotter) - they have a lot of great example mesh files in the `vtkplotter/data/` directory that we should borrow for testing `meshio` further",20,21,"['testing', 'bug-fix']"
650,351170516,494,92974124,2019-12-10 02:42:29,2019-12-11 17:31:22,closed,Read lists of files as MultiBlock datasets,"These changes enable recursive calling of `pv.read()` so that you can pass a nest list of filenames and get back a nested `pyvista.MultiBlock` dataset of all those meshes

For example:
```py
import glob
import pyvista as pv

files = glob.glob(""archive/*.vtu"")
dataset = pv.read(files)
```

or you could have nested file structures like:

```py
from pyvista import examples

files = [examples.planefile, 
         [examples.hexbeamfile, examples.uniformfile]]

dataset = pv.read(files)
```

![Screen Shot 2019-12-09 at 7 39 57 PM](https://user-images.githubusercontent.com/22067021/70490518-cb493300-1abb-11ea-9f2e-cdbe33694e5d.png)
",0,2,['enhancement']
651,350895569,493,92974124,2019-12-09 18:52:09,2019-12-11 17:30:45,closed,Remove all support for Python 2.7,"Resolve #164 - We've ""not supported"" Python 2.7 for quite some time, but low-key have been making sure PyVista would generally work on Python 2.7 for a while which has been a pain.

These changes stop testing on Python 2.7 on Travis and drop support for installing on Python 2.7 from PyPI.

With 2020 approaching, this is in line with #164 and https://python3statement.org

Goodbye Python 2.7 👋 🚪 🚶 👢 ",1,1,"['proposed-change', 'testing']"
652,350762884,492,92974124,2019-12-09 15:03:17,2019-12-09 18:10:57,closed,MAINT: pydocstyle update,This PR triggers the CIs to check the result of `pydocstyle` since the new version 5.0.0 is released.,4,2,[]
653,350511843,491,92974124,2019-12-09 04:20:24,2019-12-13 01:52:47,closed,Add camera position class,"This doesn't change any behavior but lets us represent the camera position as its own object with the various parts of it (position, focal point, and viewup) be accessible under attributes. This will probably reduce folks confusion about what exactly the camera position is since the current implementation of a list of three tuples is not self-describing. Now, an object is returned which can still be treated like a list or accessed by each component to be a little more intuitive",7,5,['enhancement']
654,348438570,489,92974124,2019-12-03 16:51:11,2019-12-08 21:02:16,closed,Recomputing normals prior to saving stl or ply files,Resolves #488 by computing normals in-place prior to saving ply or stl meshes.,0,3,['bug-fix']
655,347687927,486,92974124,2019-12-02 15:39:25,2019-12-11 17:32:03,closed,MAINT: Minor improvement for scalarbar,This PR implements the ideas suggested in https://github.com/pyvista/pyvista/pull/370#pullrequestreview-285233791,3,4,[]
656,347654467,485,92974124,2019-12-02 14:31:12,2019-12-02 16:39:03,closed,Add gaussian smoothing example,"Following https://github.com/pyvista/pyvista/pull/420#pullrequestreview-307170309 this PR adds a gaussian smoothing example to the gallery to showcase @imsodin work.

Locally I obtain the following:

![image](https://user-images.githubusercontent.com/18143289/69967148-1d1c1700-1518-11ea-8f96-e88aa4262a32.png)",3,1,['example']
657,347168369,484,92974124,2019-11-29 22:23:42,2019-11-30 01:16:17,closed,fixed memory leak due to mesh not being cleared,Super easy - fixes #482.,6,4,['bug-fix']
658,347167827,483,92974124,2019-11-29 22:19:13,2019-11-29 22:19:56,closed,Fixed Clear for Memory Leak,Super easy fix for the memory leak #482.,0,4,[]
659,346554898,480,92974124,2019-11-28 07:15:11,2019-12-03 07:13:46,closed,[BUGFIX] Parametric kwargs,The parametric object kwargs weren't handled properly by #432 ,0,1,['bug-fix']
660,346060334,477,92974124,2019-11-27 05:34:21,2019-11-29 22:52:40,closed,[MNT] Fix pyflakes issues,My IDE (atom) automatically runs pyflakes in the working directory and these were issues that have been present for a long while,0,2,['maintenance']
661,346048621,476,92974124,2019-11-27 04:47:19,2019-11-29 22:51:23,closed,Use transform matrix when getting/setting camera position,"When scaling a scene (`.set_scale`), the camera coordinates are transformed to a new projected space. This PR makes sure that when you set the position of the camera using data coordinates, the camera will properly handle those coordinates in the camera's projected space.

One place where many folks noticed this issue is when setting the camera location or focal point which is handled by the `orbit_on_path` method. The path given corresponds to the data coordinates and not the camera's projected coordinates so if the scene is scaled, the camera could be in a totally wrong location.

Here is a code snippet to demonstrate:

```py
import pyvista as pv
from pyvista import examples

mesh = examples.download_lidar()
z_scale = 2.0

p = pv.Plotter(notebook=False)
p.add_mesh(mesh, render_points_as_spheres=True)

p.set_scale(1, 1, z_scale)
p.show_axes()

p.show(auto_close=False)
path = p.generate_orbital_path(n_points=36, shift=mesh.length)
p.open_gif(""~/Desktop/orbit.gif"")
p.orbit_on_path(path, write_frames=True)
p.close()
```

### Master Branch

The camera's position is totally away from the mesh because the coordinates were not properly transformed.

![orbit](https://user-images.githubusercontent.com/22067021/69694427-ec5e5c80-1095-11ea-8ea7-8594b6dde5b6.gif)


### This Branch

Ah, much better.

![new-orbit](https://user-images.githubusercontent.com/22067021/69694431-f1bba700-1095-11ea-96c8-6f29dd53f983.gif)
",1,5,['bug-fix']
662,345832658,474,92974124,2019-11-26 16:44:19,2019-11-29 22:15:54,closed,Fix #447 v-key issue,Fix #447 by grabbing the last active renderer if the current interactive renderer is `None`,1,1,['bug-fix']
663,345566078,472,92974124,2019-11-26 06:37:08,2019-12-09 18:09:33,closed,Add support to meshio readers and writers,"- Added: option to read files using [``meshio``](https://github.com/nschloe/meshio) (Python library to convert unstructured grids from one format to another).

```python
import pyvista
grid = pyvista.read(""test.f3grid"")
grid.plot(show_edges = True)
```

![meshio2pyvista](https://user-images.githubusercontent.com/16566206/69604861-7b567080-0fd3-11ea-9947-bb811a910a3a.png)

Example FLAC3D grid file (supported by [``meshio``](https://github.com/nschloe/meshio) but not by ``pyvista``)
[test.zip](https://github.com/pyvista/pyvista/files/3890345/test.zip)

- Added: function to save files using [``meshio``](https://github.com/nschloe/meshio).

```python
import pyvista
import numpy
values = numpy.linspace(0, 10, 1000).reshape((20, 5, 10))
grid = pyvista.UniformGrid()
grid.dimensions = values.shape
grid.origin = (100, 33, 55.6)
grid.spacing = (1, 5, 2)
grid.point_arrays[""values""] = values.flatten(order=""F"")
pyvista.save_meshio(""out.msh"", grid)
```

Structured grid example exported by [``meshio``](https://github.com/nschloe/meshio) and opened in Gmsh:
![pv_gmsh](https://user-images.githubusercontent.com/16566206/70202629-171c6680-16cf-11ea-8757-6fbb95ee6cbe.png)",28,29,"['enhancement', 'file-formats', 'review-critical']"
664,345438397,471,92974124,2019-11-25 22:01:33,2019-11-25 22:01:50,closed,"Revert ""Add copy_function_doc decorator""",Reverts pyvista/pyvista#469,0,1,[]
665,345434474,470,92974124,2019-11-25 21:50:40,2020-01-22 19:11:14,closed,🚧 copy_function_doc decorator,"@GuillaumeFavelier, I didn't do my due diligence in reviewing #469 (which I reverted and put in this PR)

It doesn't work well for class methods. For example, the following class was just added to the tests and passes, but it looks like this:

```py
import pytest
from pyvista.utilities import copy_function_doc


class Foo:
    def goo(self, *args):
        """"""This has some documentation.

        Parameters
        ----------
        arg0 : int
            This is an argument.

        """"""
        pass

    @copy_function_doc(goo, alias=True)
    def goo_alias(self, *args):
        pass

    @copy_function_doc(goo, deprecated=True)
    def goo_depr(self, *args):
        pass
```

```py
>>> help(Foo.goo)
Help on function goo in module __main__:

goo(self, *args)
    This has some documentation.
    
    Parameters
    ----------
    arg0 : int
        This is an argument.
```

```py
>>> help(Foo.goo_alias)
Help on function goo_alias in module __main__:

goo_alias(self, *args)
    This has some documentation.
    
            Parameters
            ----------
            arg0 : int
                This is an argument.
    
            
    Alias for: ``goo``.
```

As shown, the aliased method's docs are improperly formatted - and thus Sphinx cannot properly auto-document that function.",7,6,"['duplicate', 'enhancement']"
666,345301999,469,92974124,2019-11-25 16:20:24,2019-11-25 21:07:34,closed,Add copy_function_doc decorator,"Following this https://github.com/pyvista/pyvista/pull/461#issuecomment-557789538, this PR adds a `copy_function_doc` decorator with its corresponding tests.",1,2,['enhancement']
667,344975986,468,92974124,2019-11-25 01:20:43,2019-12-23 16:02:28,closed,🚧 Refactor and cleanup ,"Brings #408 up to date and reverts all/most style changes.

TODO:
- Write tests for DataSetAttributes/pyvista_ndarray.
- Get rid of \_\_new\_\_ methods in abstract classes, with abc.ABC it should throw an error, but it's not working atm(maybe vtk overrides that behavior). It should also be possible to hide the abstract classes from the api.
- Move active_scalars_info/active_vectors_info. Currently it's on the DataSet level, but it seems vtk can have 2 different ones for each dataset, one for CellData and one for PointData, accessible through DataSetAttributes.
- Move/redirect more methods from dataset.py if possible.
- Add CompositeDataSetAttributes, I might not get to this.
- Fix line spaces in classes, currently they are inconsistent(either 1 or 2) through the project, but this may be a stylistic change for later, can save lots of lines if made 1.
- Do a final pass to ensure everything is as it should be & api doesn't change. Run plotting tests since I can't currently.

Things I'd like to do but probably won't do since they change api:
- Remove duplicate methods, n_cells/n_points & number_of_cells, number_of_points. Both do the same thing.
- Rename methods/properties in dataset.py, they aren't _quite_ what I think they should be.
- Give all pyvista objects their own file, it's a bit confusing(and exhausting scrolling wise) having semi-related classes grouped in one file. Won't do because it would overwrite change history.
",12,206,"['proposed-change', 'review-critical']"
668,344886020,467,92974124,2019-11-24 08:52:36,2019-11-24 17:57:37,closed,MAINT: Fix documentation style,This fixes the last complain of `pydocstyle` found on https://github.com/pyvista/pyvista/pull/457#issuecomment-557868548,0,1,['documentation']
669,344875365,466,92974124,2019-11-24 05:36:34,2019-12-03 07:15:21,closed,Use world coordinates with click tracking,"Previously, when tracking the click position, it would use the viewport coordinates. Now it picks the world coordinates by default",1,4,['enhancement']
670,344373035,464,92974124,2019-11-22 06:38:25,2019-11-26 16:54:59,closed,Fix volume rendering issues,"Resolve #428, resolve #430, resolve #431, resolve #444

Woot! 🎉 

This fixes all the opacity issues we've been having when volume rendering. The problem had to do with how the opacity transfer function is applied over a distance - the default distance to apply it over was set to 1.0 which means if you have a mesh with an extent less than 1.0, the whole dataset could be transparent (#444) as the opacity function would be applied over an extent bigger than the mesh. Likewise, if you have a really big mesh, you wouldn't see any effect from the opacity transfer function (#430 and #431) for the inverse reason.

This also:
- fixes an issue around how the scalars were not properly set when volume rendering (#428)
- implements an option for shading when volume rendering
- adds diffuse and specular controls to volume rendering

@keltonhalbert, can you check this out with your data and make sure all is good?

@pyvista/developers, I'd like to merge this as soon as possible so a review would be greatly appreciated! Notable changes

- changes default mapper to `""smart""`. We've gone back and forth between what mapper to use in a few issues and implemented the `""fixed_point""` mapper at first as outlined in https://github.com/pyvista/pyvista/pull/231#issuecomment-496247649 and later justified in https://github.com/pyvista/pyvista/issues/301#issuecomment-509709765, but now I am having significant performance issues when using that mapper on my machine. The smart mapper performs the best for me so that's why I propose switching it. @supersubscript, do you have any objections to this? This may need to be checked for support on Windows and Linux (I'm Mac).
- Adds controls to two attributes of the volume property (minor impact) but are my default values good? for the opacity distance, I chose 1/100th of the length of the mesh which is what ParaView implements (I think).

------

## Fix to #428 

![download](https://user-images.githubusercontent.com/22067021/69401448-58198180-0cb2-11ea-81bd-0a49a9d990ac.png)


## Fix to #430 and #431 

![download](https://user-images.githubusercontent.com/22067021/69401496-71223280-0cb2-11ea-9445-16ac3d5ac9aa.png)

## Shading

![sphx_glr_volume_004](https://user-images.githubusercontent.com/22067021/69402859-5356cc80-0cb6-11ea-9f60-7c85da387af6.png)
",8,11,"['enhancement', 'bug-fix', 'priority-high']"
671,344347589,463,92974124,2019-11-22 04:44:37,2019-11-29 23:43:45,closed,Minor picking updates and docs,"Allows the user to set the picking tolerance with the point picker - I need this for using the horizon picking feature when having a ton of meshes in the scene

Also updates the docs around the pickers

Notable changes:

- new tolerance argument for picking
- the `c` key event for cell picking was changed to `shift+c` to avoid conflicts",0,4,['documentation']
672,344090591,461,92974124,2019-11-21 15:29:56,2019-11-23 21:35:41,closed,MAINT: Fix documentation style,"This PR is a follow-up of this https://github.com/pyvista/pyvista/pull/457#issuecomment-556389769 and fixes the documentation style. It doesn't add any features.

I iterate locally using:

`pydocstyle pyvista`

___

**Current status**

- [x] plotting.py 
- [x] qt_plotting.py 
- [x] renderer.py
- [x] widgets.py
- [x] export_vtkjs.py
- [x] colors.py
- [x] picking.py
- [x] mapper.py
- [x] helpers.py
- [x] tools.py
- [x] theme.py
- [x] examples.py
- [x] downloads.py
- [x] parametric_objects.py
- [x] fileio.py
- [x] geometric_objects.py
- [x] errors.py
- [x] features.py
- [x] sphinx-gallery.py
- [x] composite.py
- [x] common.py
- [x] pointset.py
- [x] filters.py
- [x] objects.py
- [x] grid.py

**Fancy progress bar**

🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵 100% :tada: ",5,28,['documentation']
673,343978729,460,92974124,2019-11-21 11:21:50,2019-11-23 21:34:15,closed,Add codespell autocheck,This PR follows this https://github.com/pyvista/pyvista/pull/458#issuecomment-555994068 and adds a `codespell` call in Travis configuration.,9,8,"['testing', 'review-critical']"
674,343830164,459,92974124,2019-11-21 03:47:06,2019-11-29 23:38:43,closed,More MultiBlock indexing options,"I use MultiBlock datasets a lot and slicing the indices makes accessing the data so much easier

![Screen Shot 2019-11-20 at 8 46 00 PM](https://user-images.githubusercontent.com/22067021/69302417-cc7ef280-0bd6-11ea-9d7e-7a4ebc89ff11.png)
",0,4,['enhancement']
675,343335512,458,92974124,2019-11-20 12:40:43,2019-11-21 16:01:20,closed,MAINT: Fix documentation typos,This PR is a follow-up of https://github.com/pyvista/pyvista/issues/336#issuecomment-555940828 and fixes typos in the documentation. It doesn't change the style or add any features.,8,3,['documentation']
676,343293007,457,92974124,2019-11-20 10:55:32,2019-11-24 23:24:46,closed,Add pydocstyle autocheck,"Follow-up of #427 and especially https://github.com/pyvista/pyvista/issues/427#issuecomment-548427121. The goal of this PR is to add automatic testing of the documentation.

My first idea is to add a Travis job that runs `pydocstyle`. 

*Note: a small documentation style hotfix was necessary.*",11,6,"['testing', 'review-critical']"
677,343143002,456,92974124,2019-11-20 05:27:49,2019-11-26 16:55:30,closed,Improve naming consistency,"Resolve #429 to improve naming consistency for `*_scalars` and `*_array`. This should be good to go and has deprecation warnings for the old methods to keep backward compatibility.

@pyvista/developers, anyone have time to double-check all of this? This needs to land before the `0.23.0` release.",3,12,"['proposed-change', 'review-critical']"
678,342729727,454,92974124,2019-11-19 15:09:16,2019-11-19 21:00:23,closed,Catch up to sphinx_gallery v0.5,"Fixes the ""backreferences_dir"" issue from https://github.com/sphinx-gallery/sphinx-gallery/issues/567 which is causing all of our docs builds to fail

This also changes the examples gallery to now leverage the `__repr__` and `_repr_html_` methods utilized in `v0.5.0` of `sphinx-gallery`:

Before             |  After
:-------------------------:|:-------------------------:
<img width=""669"" alt=""Screen Shot 2019-11-19 at 8 30 22 AM"" src=""https://user-images.githubusercontent.com/22067021/69160710-41eba580-0aa7-11ea-96b3-05944a8e415b.png"">  |  <img width=""664"" alt=""Screen Shot 2019-11-19 at 8 35 20 AM"" src=""https://user-images.githubusercontent.com/22067021/69160908-88410480-0aa7-11ea-86cd-86c762d4100e.png"">




",1,2,"['documentation', 'bug-fix']"
679,342405909,452,92974124,2019-11-18 23:07:06,2019-11-20 05:01:32,closed,BUGFIX: copying composite datasets would not wrap internal structures,"This fixes a bug when calling `.copy()` on `MultiBlock` datasets

```py
import pyvista as pv

centers = [(0, 0, 0), (1, 0, 0), (-1, 0, 0), 
           (0, 1, 0), (0, -1, 0)]
radii = [1, 0.5, 0.5, 0.5, 0.5]

spheres = pv.MultiBlock()
for i, c in enumerate(centers):
    spheres.append(pv.Sphere(center=c, radius=radii[i]))
    
    
spheres.copy().plot()
```
```
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-11-f0416828be34> in <module>
     11 
     12 
---> 13 spheres.copy().plot()

~/Software/pyvista/pyvista/pyvista/plotting/helpers.py in plot(var_item, off_screen, full_screen, screenshot, interactive, cpos, window_size, show_bounds, show_axes, notebook, background, text, return_img, eye_dome_lighting, use_panel, volume, parallel_projection, **kwargs)
    110             plotter.add_volume(var_item, **kwargs)
    111         else:
--> 112             plotter.add_mesh(var_item, **kwargs)
    113 
    114     if text:

~/Software/pyvista/pyvista/pyvista/plotting/plotting.py in add_mesh(self, mesh, color, style, scalars, clim, show_edges, edge_color, point_size, line_width, opacity, flip_scalars, lighting, n_colors, interpolate_before_map, cmap, label, reset_camera, scalar_bar_args, show_scalar_bar, stitle, multi_colors, name, texture, render_points_as_spheres, render_lines_as_tubes, smooth_shading, ambient, diffuse, specular, specular_power, nan_color, nan_opacity, loc, culling, rgb, categories, use_transparency, below_color, above_color, annotations, pickable, preference, **kwargs)
    920             # extract surface if mesh is exterior
    921             if not isinstance(mesh, pyvista.PolyData):
--> 922                 grid = mesh
    923                 mesh = grid.extract_surface()
    924                 ind = mesh.point_arrays['vtkOriginalPointIds']

AttributeError: 'vtkCommonDataModelPython.vtkPolyData' object has no attribute 'n_points'
```",1,3,['bug-fix']
680,342277702,451,92974124,2019-11-18 17:44:04,2019-11-20 05:29:07,closed,Add clamping/range to the glyph filter,This PR adds two parameters `clamping` and `rng` (for range) to improve the flexibility of the `glyph` filter.,3,2,['enhancement']
681,342177545,450,92974124,2019-11-18 14:15:29,2019-11-20 06:19:19,closed,Depth Peeling ,"This PR adds `enable_depth_peeling()` and `disable_depth_peeling()` functions to the `BasePlotter` API. There is also `check_depth_peeling()` in `pyvista.utilities`. This is strongly inspired by the material provided in [lorensen.github.io](https://lorensen.github.io/VTKExamples/site/) about [translucent geometry](https://lorensen.github.io/VTKExamples/site/Cxx/Visualization/CorrectlyRenderTranslucentGeometry/).

Closes #437 ",4,8,['enhancement']
682,341729297,449,92974124,2019-11-16 06:44:19,2020-04-04 19:05:38,closed,Additional geometry features,"There's plenty of missing features with `pyvista`.  Some simple geometry hasn't been wrapped and this pull request seeks to remedy that.

  - [x] `vtkCircularArc` --> `CircularArc`
  - [x] `vtkLinearExtrusionFilter` --> `extrude` (ref https://github.com/pyvista/pyvista-support/issues/100)",4,8,['enhancement']
683,341729041,448,92974124,2019-11-16 06:40:12,2019-11-16 06:43:21,closed,Add new geometry features,"There's plenty of missing features with pyvista.  Some simple geometry hasn't been wrapped and this pull request seeks to remedy that.

  - [x] `vtkCircularArc` --> `CircularArc`
  - [x] `vtkLinearExtrusionFilter` --> `extrude`
  - [ ] Lots of others...",0,1,[]
684,341214385,446,92974124,2019-11-14 22:56:21,2019-11-19 14:46:18,closed,Add helper to tell if PolyData is all triangles,"Credit to @akaszynski 

Related to https://github.com/pyvista/pymeshfix/issues/12",1,1,['enhancement']
685,340016774,445,92974124,2019-11-12 17:11:07,2019-11-13 21:07:58,closed,Allowing user to specify a colormap with a list of strings,"You can now pass a color map with a list of strings:

```python
import numpy as np
import pyvista

sphere = pyvista.Sphere()

n = sphere.n_points

# specify scalars
scalars = np.empty(n)
scalars[:n//3] = 0
scalars[n//3:2*n//3] = 1
scalars[2*n//3:] = 2

sphere.plot(scalars=scalars, cmap=['red', 'green', 'blue'])
```

![tmp](https://user-images.githubusercontent.com/11981631/68693556-c609ce80-0577-11ea-90ce-de829ef4cd14.png)
",3,2,['enhancement']
686,338894510,442,92974124,2019-11-08 23:11:42,2019-11-15 17:10:35,closed,Fix random behavior of CylinderStructured,"Resolve #439 

This should fix the random location of the seed point by not arbitrarily rotating the mesh to the given direction vector.

Someone may need to check my vector math",1,3,['bug-fix']
687,338779008,440,92974124,2019-11-08 17:26:57,2019-11-11 21:02:22,closed,Pass all errors with panel on import,"Folks are reporting issues with panel so this will allow them to still use PyVista with a broken install of panel

ping @prisae ",2,1,['bug-fix']
688,334705888,436,92974124,2019-10-31 06:53:35,2019-10-31 15:21:47,closed,Remove old name disclaimer,"I think it's time we remove the big disclaimer about PyVista's name change in favor of a more subtle ""...(formerly ``vtki``)"" in the about section of the README.",1,1,['documentation']
689,334700803,435,92974124,2019-10-31 06:38:51,2021-04-09 04:19:54,closed,🚧 Add tests for picking helpers,"The picking methods are not currently tested. This implements tests for those methods. Note that coverage is still very low as we need to simulate picking events in the tests.

How would we simulate picking events programmatically?",3,1,"['help-wanted', 'testing']"
690,334681702,434,92974124,2019-10-31 05:39:16,2019-11-02 17:32:48,closed,Add more keypress events,"Resolves #149 by adding the following nifty keyboard shortcuts:

- ``shift+s``: Save a screenhsot (only on ``BackgroundPlotter``) (control/command would not register)
- ``c``: Enable interactive cell selection/picking
- ``up``/``down`` (arrows): Zoom in and out
- ``+``/``-``: Increase/decrease the point sizes and line widths
- numerical keys are linked to saved camera positions in the `BackgroundPlotter`

Note that this should resolve the issues where the key bindings were not being added to the `BackgroundPlotter` - someone may need to double-check my work to make sure the `BackgroundPlotter` is still closing properly",1,2,"['enhancement', 'bug-fix']"
691,334662897,433,92974124,2019-10-31 04:36:18,2019-11-02 17:34:07,closed,Add support for poly data box in clip_box filter,"Resolve #372 - pinging @craigmillernz

This adds support for using a poly data box to clip a mesh. Why? the `clip_surface` filter isn't very efficient and the box clipping filter is very efficient. Most of the time, users just want a rotated volume/region of interest and this will provide a really good way to extract those!

```py
from pyvista import examples
import pyvista as pv

# The mesh to clip
mesh = examples.load_airplane()

# Use `pv.Box()` or `pv.Cube()` to create a region of interest
roi = pv.Cube(center=(0.9e3, 0.2e3, mesh.center[2]), 
              x_length=500, y_length=500, z_length=500)
roi.rotate_z(33)

# Runt the box lipping algorithm
extracted = mesh.clip_box(box, invert=False)

p = pv.Plotter(shape=(1,2))
p.add_mesh(box, opacity=0.75, color=""red"")
p.add_mesh(mesh)
p.subplot(0,1)
p.add_mesh(extracted)
p.link_views()
p.view_isometric()
p.show()
```

![download](https://user-images.githubusercontent.com/22067021/67919294-6c5fd800-fb65-11e9-93db-4a0e5b7dc565.png)
",0,2,['enhancement']
692,334644465,432,92974124,2019-10-31 03:34:40,2019-11-08 23:34:08,closed,Strictly enforce keyword arguments everywhere,"Resolve #427 

This PR updates all functions that accept `**kwargs` to pop out all items and if anything is unused a `TypeError` is thrown. 

### Notes

- I also renamed the `pyvista.utilities.utilities` module to `pyvista.utilities.helpers` due to import issues where if you do `from pyvista import utilities`, it was importing the submodule and not the whole module.
- This helped me catch a few errors like in the `PolyData.plot_boundaries` method where the legend wasn't being added
- Many functions in PyVista accept `**kwargs` and pass them on to another function - I only enforce the `**kwargs` in functions that do not pass the `kwargs` on. I think I did this for all functions in PyVista but it would be great if someone else could do a quick search to make sure I did not miss any.",3,11,"['proposed-change', 'priority-high', 'review-critical']"
693,333871067,426,92974124,2019-10-29 20:57:53,2019-10-31 16:51:19,closed,Release Checklist,"This adds a release checklist in `CONTRIBUTING.md` to make sure everything goes smoothly when staging a release.

Also, note that this PR fixes some broken/forwarded links in the docs. We should periodically run a linkcheck on the docs, so I added this in the steps of the release process as we probably don't want Travis builds failing due to down webpages.",0,6,"['testing', 'deployment']"
694,333427859,425,92974124,2019-10-29 04:28:27,2019-10-29 05:13:44,closed,Array name autocompletion for IPython,"I have become accustomed to Pandas' autocompletion when indexing a `DataFrame` by a column name (e.g. `df[""a...`) and have longed for this in PyVista when fetching arrays. 

Now it's possible! 🎉 🎆 

![2019-10-28 22 25 21](https://user-images.githubusercontent.com/22067021/67737799-16a6f680-f9d2-11e9-9b0d-2a6ae8996971.gif)
",1,1,['enhancement']
695,333287381,424,92974124,2019-10-28 19:34:20,2019-11-03 18:11:12,closed,"Improve PyQt signals, mouse tracking, and more","~this introduces an error in a downstream package that needs to be fixed~

I'm no PyQt expert, so someone needs to double-check my updates to the `QtInteractor` class (pinging @GuillaumeFavelier or @akaszynski)

New Features:

- mouse positions and/or click positions can be tracked automatically: `BasePlotter.track_mouse_position` and `BasePlotter.track_click_position`
  - Can easily stop tracking with `BasePlotter.untrack_*_position`
  - `BasePlotter.track_click_position` allows for a callback which is passed the viewport coordinates of the click position
- A picker was added to use the mouse/click position: `PickingHelper.pick_mouse_position`/`PickingHelper.pick_click_position` to return the 3D world coordinates of the mouse/click position
- A nice little helper method makes it easy to use the click event tracking and the picking features to fly to points in the scene with a right-click: `PickingHelper.enable_fly_to_right_click`
- Easy way to call the FXAA antialiasing method `BasePlotter.enable_anti_aliasing`
- A new keyboard shortcut `f` was added to fly to the mouse's current location in the scene
- A new style for rotating actors in the scene: `BasePlotter.enable_trackball_actor_style`,
- Some cleanup to the `pyqtSignal`s in the `QtInteractor` class
",1,13,"['priority-high', 'review-critical']"
696,332911700,423,92974124,2019-10-28 00:39:11,2020-04-03 14:50:39,closed,Add plotting floors,"This adds a helper method to add a floor/wall at the boundary of the rendering scene


```py
import pyvista as pv
from pyvista import examples

mesh = examples.download_dragon()

p = pv.Plotter()
p.add_mesh(mesh)
p.add_floor('-y')
p.add_floor('-z')
p.show()
```

![download](https://user-images.githubusercontent.com/22067021/67644667-07984980-f8e9-11e9-9539-663432ce87ce.png)
",6,21,['feature-request']
697,332403984,421,92974124,2019-10-25 08:43:36,2019-10-27 22:06:41,closed,make several vtk filters accessible in contour filter,,0,2,['enhancement']
698,332390824,420,92974124,2019-10-25 08:06:33,2019-10-26 20:08:14,closed,Gaussian smoothing filter for UniformGrid,"Not much to say here: Adds the Gaussian smoothing filter to uniform grids.

For testing I just check that the data is changed at all and shape has not changed.

Also the scalars, preferences filter arguments and correspondingly setting the input of the vtk algo is duplicated so many times, and not always consistently - this should definitely happen in a wrapper function/decorator/...",2,2,"['enhancement', 'example']"
699,331995600,419,92974124,2019-10-24 11:23:19,2020-04-14 14:37:37,closed,🚧 Add pep8speaks bot basic configuration,"Follow-up of #288, this PR adds `flake8` on Travis configs as pep8 checker. It is still a work in progress and is just a suggestion for testing.",19,7,"['testing', 'for-future-consideration']"
700,331679084,417,92974124,2019-10-23 18:16:22,2019-10-27 21:30:38,closed,New example: plotting in spherical coordinates,"Following https://github.com/pyvista/pyvista-support/issues/52 and https://github.com/pyvista/pyvista-support/issues/67, I thought it would be useful to have some basic examples of plotting data on a sphere in the gallery.",2,5,"['documentation', 'example']"
701,331513867,416,92974124,2019-10-23 12:27:08,2019-10-23 13:34:01,closed,[MRG] Add border control to background plotter,"By default, the `border`, `border_color` and `border_width` parameters are not passed to the `BasePlotter` so it's not possible to customize the borders with the `BackgroundPlotter`.

In this code snippet we try to disable the borders for example: 

```py
import pyvista as pv

p = pv.BackgroundPlotter(shape=(1,2), border=False)
p.background_color = 'white'
p.subplot(0, 0)
p.add_mesh(pv.Cone())
p.subplot(0, 1)
p.add_mesh(pv.Sphere())
p.screenshot(""test.png"")
```

master | PR
--------|--------
![image](https://user-images.githubusercontent.com/18143289/67392556-0ab9cf80-f5a1-11e9-8958-f665ecb5b6c7.png) | ![image](https://user-images.githubusercontent.com/18143289/67392492-eb22a700-f5a0-11e9-9444-78a18d958239.png)
",1,1,['bug-fix']
702,331084609,415,92974124,2019-10-22 16:25:19,2019-10-28 01:49:56,closed,[GemPy] widget enhancements,"These are improvements from @leguark's changes in #410 to make the widgets a bit more robust and ready for advanced use in downstream dependencies (namely GemPy). This also greatly improves the testing of the widgets

@Leguark: you can now just pass `implicit=False` to the `add_plane_widget()` method and it will handle setting up the simple plane widget with callbacks and all - I'm going to keep the implicit plane widget as the default as it is a bit more user-friendly. Also, this adds a flag, `pass_widget` to all widget methods that allows you to pass the widget to the callback for advanced usage",3,11,['enhancement']
703,329924567,411,92974124,2019-10-18 21:08:28,2019-10-21 14:10:54,closed,Gradient background colors,"because why not?

```py
import pyvista as pv
from pyvista import examples

mesh = examples.load_airplane()

plotter = pv.Plotter()
plotter.add_mesh(mesh, color=""white"")
plotter.set_background(""royalblue"", top=""aliceblue"")
plotter.show()
```
![download](https://user-images.githubusercontent.com/22067021/67128518-1ed48a00-f1b9-11e9-9839-ae21aef48511.png)
",0,3,['enhancement']
704,329787010,410,92974124,2019-10-18 15:05:46,2019-10-22 16:21:40,closed,🚧 [GemPy] widget enhancements,"I open a pull request so you @banesullivan can keep an eye on the small changes I did to fit my code.

So far the main changes are:

1) Added a plane widget for the orientations like what I had with gempy. It is a different widget than you implemented vtkPlaneWidget vs vtkImplicitPlaneWidget. I tried to give it a go with yours but I did not find an easy way. I guess that if we add this widget, we would need to make it more consistent with the rest of pyvista widgets.

2) On the sphere widget you were only passing the coordinates (and index if you create a list of widgets) to the user call back but I found easier to also pass the whole widget object -- in my case also for the index and radio of the points. I think in general is good to give the option to the user if they want to hack something more advanced",2,2,['enhancement']
705,329565704,409,92974124,2019-10-18 05:19:43,2019-10-25 18:49:08,closed,"🚧 Contour, Integrate, and Smoothing Filters","Hi @imsodin, I was looking at the Fork network and saw you made some useful additions! Do you plan on working any further on this?",3,4,['enhancement']
706,329564103,408,92974124,2019-10-18 05:11:41,2019-11-23 21:50:13,closed,🚧 Refactor and cleanup,"@JevinJ, I saw you had some refactoring and cleanup commits, so I thought I would open a PR to see a diff of your work",8,23,"['enhancement', 'proposed-change', 'review-critical']"
707,329562476,407,92974124,2019-10-18 05:01:21,2019-10-18 05:53:29,closed,Improve Texture and add example of topographic map,"Some improvements to the `pyvista.Texture` class and how textures can be mapped.

Also adds a nice example in the gallery for a topographic map, thanks to @craigmillernz!

![download](https://user-images.githubusercontent.com/22067021/67066987-e342ad00-f131-11e9-8126-320c7f44fbe1.png)
",0,2,['enhancement']
708,328358353,405,92974124,2019-10-15 16:23:16,2019-10-15 20:58:50,closed,BUG: Fix literal comparison,"Fixes on Python3.8:
```
SyntaxError: ""is"" with a literal. Did you mean ""==""
```",3,1,[]
709,327916254,403,92974124,2019-10-14 18:13:54,2019-10-15 22:34:51,closed,Remove ipy_tools module and notebook testing,"Resolve #402, closes #70 and closes #332

Todo:

- [x] reimplement all the IPython tools as helper methods using the widgets",4,3,['proposed-change']
710,327599155,401,92974124,2019-10-13 22:22:55,2019-10-13 23:31:57,closed,Widget refactoring and spline widget,"A bit of refactoring to the widgets. Now the naming is `add_*_widget` instead of `enable_*_widget` because we can have more than one of any widget type in a scene

Spline widget also added",0,6,"['enhancement', 'proposed-change']"
711,326356217,399,92974124,2019-10-09 17:04:18,2019-10-09 18:51:10,closed,Fix lines_from_points,Resolve #394,0,1,[]
712,326074006,396,92974124,2019-10-09 05:26:32,2019-10-09 20:22:02,closed,BUGFIX: save screenshot when no file extension given,"When saving a screenshot with the BackgroundPlotters save dialog, it was very easy to forget to add a file extension - this resolves that issue and makes saving screenshots default to PNG.

@akaszynski, are there any formats besides PNG and JPEG that are used?",2,2,['bug-fix']
713,326010843,393,92974124,2019-10-08 23:59:20,2019-10-09 02:00:49,closed,Resolve some major Python 2.7 issues,These issues were preventing https://github.com/pyvista/pymeshfix/pull/11 from building the 2.7 wheels,1,4,[]
714,325416445,392,92974124,2019-10-07 17:42:10,2019-10-09 06:03:00,closed,Add OBJ scene exporter,"This makes exporting the geometry in a scene to an OBJ file easy. Note that you can also place *simple* OBJ files in PowerPoint presentations these days:

```py
import pyvista as pv
from pyvista import examples

mesh = examples.load_random_hills()

p = pv.Plotter()
p.add_mesh(mesh)
p.export_obj(""~/Desktop/foo"")
p.show()
```

![2019-10-09 00 00 10](https://user-images.githubusercontent.com/22067021/66455409-eb129b00-ea27-11e9-97c6-126ba06fd1e6.gif)
",0,1,['enhancement']
715,325413349,391,92974124,2019-10-07 17:33:50,2019-10-09 02:01:47,closed,Ignore warnings when capturing depth image,#369's new depth image capturing which is captured automatically when the plotter is closed would sometimes incur NumPy warnings. This suppresses those warnings,0,1,['flaky']
716,324716205,390,92974124,2019-10-04 14:48:13,2019-10-04 17:42:50,closed,Add viewport parameter for add_text,Add a `viewport` parameter for the `add_text()` function of the `BasePlotter` to enable support for normalized viewport coordinates (values between 0 and 1 and support for HiDPI) if `position` is a `tuple` of `float`s.,1,2,['enhancement']
717,323917061,389,92974124,2019-10-02 19:52:47,2020-02-03 05:21:42,closed,Add prototype itkwidgets plotter,"Ping @thewtex and @akaszynski 

This is a seriously rough prototype but it works for general visualization of meshes and their scalars using `itkwidgets`. Much, much, much refactoring and implementation is still needed but here's a prototype to show what is possible

There are lots of issues with this... so be careful what keyword argument you give to the `add_mesh` method

### Example

Use the `pv.PlotterITK` class just like you might use a `pv.Plotter` class.

(segmenting of colors is because this is a GIF)
```py
import pyvista as pv
from pyvista import examples

import pyvista as pv
from pyvista import examples

# Example dataset with normals
mesh = examples.load_random_hills()

# create a subset of arrows using the glyph filter
arrows = mesh.glyph(scale=""Normals"", orient=""Normals"", tolerance=0.05)

p = pv.PlotterITK()
p.add_mesh(arrows, color=""black"")
p.add_mesh(mesh, scalars=""Elevation"")
p.show()
```


![2019-10-02 13 51 31](https://user-images.githubusercontent.com/22067021/66076781-c85e1f00-e51b-11e9-9ba0-30aa60a1ab57.gif)


",10,12,"['enhancement', 'IPython/Jupyter', 'web', 'priority-high']"
718,323305931,388,92974124,2019-10-01 14:30:15,2019-10-02 16:32:03,closed,BackgroundPlotter q-key press event,"Follow-up to #314, fixes #379 by connecting qkey press event to `self.app_window.close()`",2,1,['bug-fix']
719,322552454,385,92974124,2019-09-29 23:40:49,2019-10-27 21:45:03,closed,Bug fix for plotting multi block datasets,"This patches a rare bug I randomly encountered. I'm not sure why I even had this line in there originally, but I'm pretty sure it isn't needed. I cannot reproduce how I ran into the issue now though 🤦‍♂ 

I might let this sit for a bit to make sure it doesn't have repercussions ",0,1,"['bug-fix', 'flaky']"
720,322329166,384,92974124,2019-09-27 21:10:36,2019-09-29 23:24:44,closed,Fix scalar mapping setting for uint8 arrays,Fixes an issue when mapping uint8 arrays found in #383 ,0,1,['bug-fix']
721,321989000,383,92974124,2019-09-27 03:58:51,2019-10-09 05:49:01,closed,Widget improvements and add sphere widget,"More widget improvements...

This makes managing several widgets better. Also adds the sphere widget. Check out the changes in the docs for examples on how to use these. This one is my favorite:

![sphere-widget-c](https://user-images.githubusercontent.com/22067021/66451502-efd05280-ea19-11e9-9742-5bdc0eba423e.gif)


The sphere widget is handled a bit differently than other widgets where many, many widgets can be added at once (see examples in docs).

### Remaining Issues

- [x] ~figure out how to only display a widget in the scene. Currently, nothing is shown if only adding a widget to the scene - they require another mesh to be in the scene which might not always be desired.~ fixed on the master branch

- [x] Data arrays that are mconverted from `uint*` to float having issues mapping when using the widgets.

- [ ] similar issue for bool arrays - needs to be its own PR


",0,14,"['enhancement', 'proposed-change']"
722,321987965,382,92974124,2019-09-27 03:52:57,2019-10-02 18:26:25,closed,Grab screenshot when plotter is closed,"This adds support for the `BackgroundPlotter` with sphinx-gallery

ping: @GuillaumeFavelier 

I'm running into issues controlling the size of the window when using the `BackgroundPlotter` with sphinx gallery... its always super small",7,3,['bug-fix']
723,320925173,381,92974124,2019-09-24 19:22:37,2019-09-29 23:29:09,closed,Add method for casting UniformGrids to RectilinearGrids,"```py
import pyvista as pv
from pyvista import examples

m = examples.load_uniform()
r = m.cast_to_rectilinear_grid()
```",0,1,['enhancement']
724,319408312,380,92974124,2019-09-19 18:31:29,2019-09-20 18:25:53,closed,subplot with (semi)arbitrary geometry,"this PR allows to split in half the window at automatic or specified position by a shape descriptor.

```python
import pyvista as pv
from pyvista import examples

# This defines the position of the vertical/horizontal splitting, in this
# case 40% of the vertical/horizontal dimension of the window
pv.rcParams['multi_rendering_splitting_position'] = 0.40

# shape=""3|1"" means 3 plots on the left and 1 on the right,
# shape=""4/2"" means 4 plots on top of 2 at bottom.  
plotter = pv.Plotter(shape='3|1', window_size=(1000,1200))

plotter.subplot(0)
plotter.add_text(""Airplane Example"")
plotter.add_mesh(examples.load_airplane(), show_edges=False)

# load and plot the uniform data example on the right-hand side
plotter.subplot(1)
plotter.add_text(""Uniform Data Example"")
plotter.add_mesh(examples.load_uniform(), show_edges=True)

plotter.subplot(2)
plotter.add_text(""A Sphere"")
plotter.add_mesh(pv.Sphere(), show_edges=True)

plotter.subplot(3)
plotter.add_text(""A Cone"")
plotter.add_mesh(pv.Cone(), show_edges=True)

# Display the window
plotter.show()
```
![mlt](https://user-images.githubusercontent.com/32848391/65270662-e9863f00-db1b-11e9-93cd-302dc3fb85f5.png)

- bug fixings
- example update

I just implemented this for vtkplotter and I thought that it might be useful to pyvista users too :)",7,6,"['enhancement', 'bug-fix']"
725,318420695,377,92974124,2019-09-17 16:20:33,2019-09-20 19:24:58,closed,custom copy methods,"Resolve #375 by implementing custom shallow/deep copy methods that can be overridden in subclasses. For example, the `pyvista.PointSet` class overrides the `shallow_copy` method to ensure that when copying points-based datasets, the dataset being copied has a points data array which will properly link the wrapped and original datasets in memory. This also enables us to add more features when copying down the road for class-specific cases",2,6,"['enhancement', 'review-critical']"
726,318409650,376,92974124,2019-09-17 15:54:16,2019-09-17 16:33:17,closed,Improve Widget Performance,"These changes majorly improve the performance and responsiveness of the widgets. The widgets are now used in a pipeline to ensure the renderer isn't creating a new actor/mapper on every update or recreating a scalar bar.

See some differences:

### Threshold

Before:

![2019-09-17 09 45 04](https://user-images.githubusercontent.com/22067021/65057839-75d40e80-d930-11e9-8074-0de2ee98febc.gif)


After:

![2019-09-17 09 44 18](https://user-images.githubusercontent.com/22067021/65057847-78ceff00-d930-11e9-9aa5-87e346c963a5.gif)

### Slicing

Before:
![2019-09-17 09 51 02](https://user-images.githubusercontent.com/22067021/65057982-b6cc2300-d930-11e9-99b9-6feeaa6082e9.gif)


After:
![2019-09-17 09 50 21](https://user-images.githubusercontent.com/22067021/65057989-bc296d80-d930-11e9-986f-7b8d6f64fbcb.gif)


### Box Clipping

This is generally an expensive algorithm to run, but these changes do make a difference.

Before:
![2019-09-17 09 45 59](https://user-images.githubusercontent.com/22067021/65058105-f09d2980-d930-11e9-95e6-9174bf8044db.gif)


After:

![2019-09-17 09 47 26](https://user-images.githubusercontent.com/22067021/65058095-eb3fdf00-d930-11e9-9e4f-800e89b7d8e2.gif)
",1,6,"['enhancement', 'bug-fix']"
727,316852964,374,92974124,2019-09-12 11:09:31,2019-09-12 12:50:16,closed,Add relaxation param to smooth filter,"I started to work on an image analysis/generation project and found pyvista to be very handy to ease access to vtk - thanks a lot for this nice library!

I use the smoothing filter to get rid of curvature outliers in a mesh. While searching for the optimal parameters the relaxation factor turned out to be an important factor for my use case. And I just wanted to share it in case you feel it's useful for other users.",1,1,['enhancement']
728,314950534,370,92974124,2019-09-06 13:17:02,2019-09-06 14:29:56,closed,Allow background color and n_colors for the scalarbar,"This PR allows the `add_scalar_bar()` function to use a given `background_color` in the very specific case where the input colormap uses alpha channel. It also adds a new `n_colors` parameter to control the number of colors in the bar.

```py
import numpy as np
import pyvista as pv
from matplotlib.colors import ListedColormap
arr = np.linspace([1.0, 0.7, 0.5, 1.],
                  [0., 0., 0., 0.],
                  128)
colors = np.concatenate((arr, np.flip(arr)))
cmap = ListedColormap(colors)

p = pv.Plotter()
p.background_color = 'black'
p.add_mesh(pv.Cone().elevation(), cmap=cmap)
p.add_scalar_bar(title='Elevation (with background_color)',
                 background_color=(0.5, 0.5, 0.5), n_colors=256)
p.show()
```

![image](https://user-images.githubusercontent.com/18143289/64430617-e9685700-d0b8-11e9-91db-87ef91c1d32d.png)
",2,1,['enhancement']
729,314722259,369,92974124,2019-09-05 22:09:59,2019-09-17 23:39:56,closed,improve rendering depth image,"Resolve #368 

In this pull request:

- pyvista.Plotter().image_depth raises an error now, it is replaced by get_image_depth()
- Added an example of using pyvista.Plotter().get_image_depth()  
- Updated the example readme
",1,2,['bug-fix']
730,313002614,367,92974124,2019-09-01 05:11:52,2020-05-29 04:13:17,closed,🚧 Layers in renderer!,"Resolve #137 

This makes eye dome lighting waaayyyy better:

<img width=""624"" alt=""Screen Shot 2019-08-31 at 11 07 26 PM"" src=""https://user-images.githubusercontent.com/22067021/64072004-1db8bf00-cc44-11e9-975f-91805478cf0c.png"">


-----

In brief, this adds a helper renderer to the `Renderer` class that will handle rendering any/all accesory actors, things like axes actors, scalar bars, etc., which will be unaffected by the EDL shading.


Todo

- [ ] make sure cameras are bound to each other
- [ ] set up other accesory actors to use the `etc_renderer` (e.g. text actors)
- [ ] test, test, and test some more (manually)
- [ ] check against #368 
- [ ] Fix issue where grid axes actor is visible behind meshes

",4,9,"['proposed-change', 'bug-fix']"
731,310236634,366,92974124,2019-08-23 05:31:51,2019-10-27 22:34:58,closed,Attempt fix visible point label issue,"Attempt to resolve #282 

See https://github.com/pyvista/pyvista/issues/282#issuecomment-523242079",0,3,['bug-fix']
732,310234503,365,92974124,2019-08-23 05:20:02,2019-08-27 16:37:21,closed,Anti-aliasing,"This adds a way to control the anti-aliasing features in the `vtkRenderWindow`. I added options for controlling the point, line, and polygon smoothing (not sure if these really do anything, but I know they have to be called before the first render) and I added a convenient way to set the number of multi-samples used to avoid aliasing.

I'm not exactly sure if this will have any performance implications or issues across operating systems.


## Examples

The aliasing was most notable on axes grid lines/text and on the edges of meshes.

***Make sure to zoom into or download these PNGs if you want to compare - your web browser is likely affecting how they look!!!***

### Axes Grid

Current behavior - 0 multi-samples:

![Screen Shot 2019-08-22 at 11 02 30 PM](https://user-images.githubusercontent.com/22067021/63568499-a5ab1480-c532-11e9-8c7e-6fadc3d9ea87.png)


New default - 4 multi-samples:

![Screen Shot 2019-08-22 at 11 02 42 PM](https://user-images.githubusercontent.com/22067021/63568513-afcd1300-c532-11e9-93cf-8a8b4a2cfaf3.png)

And 8 multi-samples because why not:

![Screen Shot 2019-08-22 at 11 02 52 PM](https://user-images.githubusercontent.com/22067021/63568545-ca06f100-c532-11e9-9179-fe9199a71f3b.png)


### Edges on a Mesh

Current behavior - 0 multi-samples:

![Screen Shot 2019-08-22 at 11 05 02 PM](https://user-images.githubusercontent.com/22067021/63568547-cd01e180-c532-11e9-8f47-8a306d709f31.png)


New default - 4 multi-samples:

![Screen Shot 2019-08-22 at 11 05 09 PM](https://user-images.githubusercontent.com/22067021/63568550-d0956880-c532-11e9-9b1c-01d599cd371c.png)


And 8 multi-samples because why not:

![Screen Shot 2019-08-22 at 11 05 16 PM](https://user-images.githubusercontent.com/22067021/63568556-d428ef80-c532-11e9-9e26-a79e57e0dadd.png)
",3,3,['enhancement']
733,307980231,363,92974124,2019-08-16 07:59:49,2019-08-16 14:44:58,closed,Switch interpolate_before_map to True,"I propose we change the default for `interpolate_before_map` to True as it is more accurate for scientific visualization.

@akaszynski - is there a reason why this is currently set to False by default?

For more information, please see the detailed example added in the gallery as a part of this PR - In brief, the difference can be stark and not an accurate representation of the data. When `interpolate_before_map` is False, OpenGL interpolates the colors between nodes which means colors that aren't in the colormap could appear on the mesh.

Here are two screenshots showing the differences:

![sphx_glr_interpolate-before-map_001](https://user-images.githubusercontent.com/22067021/63152493-329d1d80-bfc9-11e9-8d40-18ccd73df2a4.png)

![sphx_glr_interpolate-before-map_004](https://user-images.githubusercontent.com/22067021/63152610-7c860380-bfc9-11e9-9dbc-59c2796ef36b.png)

",1,3,['proposed-change']
734,307839519,362,92974124,2019-08-15 20:07:34,2019-08-17 21:17:52,closed,Add point picking capabilites,"This adds single point picking and a few convenience methods for tracing lines on meshes

Resolve #295 and creates a way to pick ""horizons"" on meshes (see comments below)

One somewhat hacky one adds the ability to geodesically trace a path on a mesh. If other meshes are in the scene, this could throw confusing indexing errors

```py
import pyvista as pv
import numpy as np
from pyvista import examples

mesh = examples.download_st_helens().warp_by_scalar()

p = pv.Plotter(notebook=0)
p.add_mesh(mesh)
p.enable_geodesic_picking()
p.show()
```


![2019-08-15 14 05 49](https://user-images.githubusercontent.com/22067021/63123282-da80ff80-bf65-11e9-92c7-cb505f42ae34.gif)
",2,14,['enhancement']
735,307545638,360,92974124,2019-08-15 00:45:17,2019-08-17 19:03:27,closed,Add widgets support,"This adds box, plane, and line widgets that can be leveraged via callback functions. Several helper methods are also implemented to use the widgets for tasks like clipping, slicing, and thresholding.

Example of box clipping:

```py
from pyvista import examples
import pyvista as pv

mesh = examples.download_st_helens().warp_by_scalar()

p = pv.Plotter(notebook=False)
p.add_mesh(mesh, name='mesh')

def callback(box):
    clipped = mesh.clip_surface(box)
    p.add_mesh(clipped, name='mesh')
    
p.enable_box_widget(callback=callback)

p.show()
```

![2019-08-14 18 42 03](https://user-images.githubusercontent.com/22067021/63065489-7c034500-bec3-11e9-9374-fbff9c1c1542.gif)


Ping @jsfraser1

- Resolve #328 
",12,25,['enhancement']
736,306682740,359,92974124,2019-08-12 22:28:45,2019-10-28 00:22:47,closed,Meshes explained,"This attempts to add a guide to understanding what meshes are and how we use them in PyVista.

This might need some work and thought down the road to make sure we reach a wide audience

Also addresses #209 ",0,3,"['help-wanted', 'documentation']"
737,306180736,357,92974124,2019-08-10 03:13:48,2019-08-12 18:22:27,closed,Fix lines_from_points,The `lines_from_points` helper utility wasn't working - this properly builds the lines now and tests it,0,1,['bug-fix']
738,304938744,355,92974124,2019-08-07 00:48:10,2020-04-04 01:44:58,closed,🚧 Implement clean filter for UnstructuredGrid,"**WORK IN PROGRESS: this is very messy at the moment but it works**

This needs some optimization/vectorization where possible. Currently, it uses some heavyweight `for` loops.

This new clean filter addresses:

- Resolves #303 if we use this instead of `vtkAppendData`'s `MergPoints` option
- https://discourse.vtk.org/t/vtkmcleangrid-non-vtk-m-version/1483
- https://discourse.vtk.org/t/handle-point-data-arrays-with-vtkappendfilter/1479
- #349 

## Example

This will clean all duplicate points and cells in any UnstructuredGrid. This example creates a mesh where ~quarter of the mesh has duplicated points and cells

```py
import pyvista as pv
from pyvista import examples
pv.set_plot_theme('doc')

mesh = examples.download_st_helens().warp_by_scalar()
mesh0 = mesh.clip('x')
mesh1 = mesh.clip('y')

p = pv.Plotter()
p.add_mesh(mesh0, color='red', opacity=0.75)
p.add_mesh(mesh1, color='blue', opacity=0.75)
p.show(cpos='xy')
```

![download](https://user-images.githubusercontent.com/22067021/62587494-8304d480-b87f-11e9-9255-f79540e9e830.png)


Now merge those two overlapping meshes together to form a single UnstructuredGrid with duplicate points and cells.

```py
merged = mesh0.merge(mesh1, merge_points=False)
```

Run the new `clean` filter to remove duplicate points/cells:
```py
cleaned = merged.clean()

pr = ((merged.n_points - cleaned.n_points) / merged.n_points) * 100
cr = ((merged.n_cells - cleaned.n_cells) / merged.n_cells) * 100
print('Reduced points by: {:.2f}%'.format(pr))
print('Reduced cells by: {:.2f}%'.format(cr))
```
Reduced points by: 25.06%
Reduced cells by: 25.00%",4,8,['enhancement']
739,304366315,354,92974124,2019-08-05 16:01:42,2019-08-06 04:10:03,closed,"Add cell quality, gradient, and surface clip filters","New filters:

- `.clip_surface()`
- `.compute_gradient()`
- `.compute_cell_quality()`


## Example of Clip with Surface filter

```py
import pyvista as pv
import numpy as np

surface = pv.Cone(direction=(0,0,-1), height=3.0, radius=1,
                  resolution=50, capping=False)

# Make a gridded dataset
n = 51
xx = yy = zz = 1 - np.linspace(0, n, n) * 2 / (n-1)
dataset = pv.RectilinearGrid(xx, yy, zz)

# Clip grid using poly data surface
clipped = dataset.clip_surface(surface, invert=False)

# Visualize the results
p = pv.Plotter()
p.add_mesh(surface, color='w', opacity=0.75, label='Surface')
p.add_mesh(clipped, color='gold', show_edges=True, label=""clipped"")
p.add_legend()
p.show()
```

![download](https://user-images.githubusercontent.com/22067021/62486690-2f11c700-b77d-11e9-9daf-38b878e2618b.png)",1,4,"['enhancement', 'example']"
740,304085533,352,92974124,2019-08-04 18:14:41,2019-08-04 20:26:41,closed,Fix typos and grammar in example gallery,"Relevant to #336

This PR is meant to fix the typos, grammatical errors and confusing sentences in the documentation and examples. Additionally, capitalization of words such as PyVista and NumPy were changed to be consistent.

This PR also resolves #353",5,8,"['documentation', 'bug-fix']"
741,304029519,351,92974124,2019-08-03 22:37:42,2019-10-13 20:58:12,closed,Add toolbars to Qt plotter,"What other options should be in a toolbar? 

Perhaps we should overhaul the saved camera locations to be managed in a toolbar?

![2019-08-03 16 34 00](https://user-images.githubusercontent.com/22067021/62417453-e509d380-b60c-11e9-80ce-116769aa2398.gif)
",6,7,['enhancement']
742,303986522,350,92974124,2019-08-03 08:42:24,2019-08-05 18:39:42,closed,Clear the menu bar on close for BackgroundPlotter,Resolve #347 ,0,1,['bug-fix']
743,303981387,349,92974124,2019-08-03 06:46:48,2019-08-07 20:04:09,closed,Merge filter and __add__,"Resolve #321 and resolve #356  by refactoring the `merge` filter and implementing `__add__` method for all PyVista mesh/grid types. Other operators types will not be implemented.

This also implements `__len__` for `MultiBlock` datasets.


### Example

```py
import pyvista as pv
from pyvista import examples

mesh = examples.download_st_helens().warp_by_scalar()

merged = mesh.clip('x') + mesh.clip('-x').contour()

merged.plot()
```
![download](https://user-images.githubusercontent.com/22067021/62408547-f9f05380-b587-11e9-88be-a2001219c381.png)",3,9,['proposed-change']
744,303973462,348,92974124,2019-08-03 03:35:23,2019-08-05 18:40:36,closed,Labelled Scalar bars,"Resolve #298 
Relevant to #200 and https://github.com/pyvista/pyvista-support/issues/25

This PR updates functionality with the scalar bar to support annotations and categorical, labeled scalar bars.



## Annotatations

Now you can annotate specific values, NaN values, and values above/below the scalar range

Set up:
```py
import pyvista as pv
from pyvista import examples
pv.set_plot_theme('doc')
import numpy as np

mesh = examples.download_st_helens().warp_by_scalar().extract_surface()
```

### Below/Above Range

When setting the scalar bar range via the `clim` argument, you can pass `below_color` and `above_color` to color values below/above that range as desired:

```py
p = pv.Plotter()
p.add_mesh(mesh, clim=[1000, 2000],
           below_color='blue', above_color='red',)
p.show()
```

![sphx_glr_scalar-bars_004](https://user-images.githubusercontent.com/22067021/62406603-c6073500-b56b-11e9-9d1e-41a06af600bd.png)


### NaN values

Label the `nan_color` by passing `nan_annotation=True` in the `scalar_bar_args`

```py
inds = np.logical_and(mesh['Elevation'] < 1500, mesh['Elevation'] > 1300)
mesh['withnans'] = mesh['Elevation'].copy()
mesh['withnans'][inds] = np.nan

mesh.plot(scalars='withnans', nan_color='grey', 
          scalar_bar_args=dict(nan_annotation=True))
```

![download](https://user-images.githubusercontent.com/22067021/62406698-e5eb2880-b56c-11e9-9533-4d9874d9eb90.png)


### Specific values

Pass a set of annotations as a dictionary (key is label, value it float number to annotate) to label specific values on the scalar bar:

```py
# Make a dictionary for the annotations
annotations = {
    2300 : ""High"",
    805.3 : ""Cutoff value"",
}

p = pv.Plotter()
p.add_mesh(mesh, scalars='Elevation', annotations=annotations)
p.show()
```
![sphx_glr_scalar-bars_005](https://user-images.githubusercontent.com/22067021/62406612-e0d9a980-b56b-11e9-8d35-f8d568dd95a3.png)



## Categorical Arrays (string arrays)

Now automatically plot and label string categorical data arrays (see #298)

(We need a better example for this)

```py
# Creste string array
nmag = np.sum(mesh.compute_normals()['Normals'], axis=1)
labels = np.empty(len(nmag), dtype='<U10')
labels[:] = 'High'
labels[nmag < 1] = 'Medium'
labels[nmag < 0.7] = 'Low'

mesh['labels'] = labels
mesh.plot(scalars='labels')
```

![download](https://user-images.githubusercontent.com/22067021/62406629-2bf3bc80-b56c-11e9-9f43-7db7cb3f1124.png)",0,12,['enhancement']
745,303504080,346,92974124,2019-08-01 18:32:51,2019-08-01 20:46:18,closed,Resolve subplot indexing issues,"Resolve #325.

This ensures that the indices used when calling `plotter.subplot()` correspond to the plotter's shape.",1,3,['bug-fix']
746,303240827,344,92974124,2019-08-01 06:44:58,2019-08-01 15:51:27,closed,Allow setting PolyLines on PolyData,"Related to https://github.com/pyvista/pyvista-support/issues/34

Now we can use PolyLines with `PolyData` - we couldn't set them before

See updated example for details",0,2,['enhancement']
747,303227580,343,92974124,2019-08-01 05:52:00,2019-08-01 17:44:23,closed,Add more lighting controls for add_mesh,"This adds controls for the specular and diffuse display properties in addition to ambient.

I tried setting the ambient, diffuse, and specular colors but I saw no affects so I'm not including those.

Example of Specular:

```py
import pyvista as pv
from pyvista import examples

mesh = examples.download_st_helens().warp_by_scalar()

p = pv.Plotter(notebook=False)
p.add_mesh(mesh, specular=1)
p.add_axes()
p.show()
```

![2019-07-31 23 30 53](https://user-images.githubusercontent.com/22067021/62268184-430ba080-b3ec-11e9-88bd-803b865d65ab.gif)

High ambient, low diffuse:

```py
p = pv.Plotter(notebook=False)
a = p.add_mesh(mesh, ambient=1, diffuse=0)
p.add_axes()
p.show()
```

![Screen Shot 2019-07-31 at 11 51 35 PM 1](https://user-images.githubusercontent.com/22067021/62268767-25d7d180-b3ee-11e9-9df8-815bf1d39c02.png)

",3,3,['enhancement']
748,303197632,342,92974124,2019-08-01 03:06:59,2019-08-01 07:46:43,closed,Overhaul axes widgets,"Follow up to #334 

This improves the box axes widget a lot and creates a general way to construct axes actors which is now used by `add_axes_at_origin` too. This gives us a lot more control over what the axes markers look like and how they are labeled.

New default appearance when `box=True` is below. Note the opacity and backface culling for the annotations.

```py
import pyvista as pv
from pyvista import examples

mesh = examples.download_st_helens().warp_by_scalar()

p = pv.Plotter(notebook=False)
p.add_mesh(mesh)
p.add_axes(box=True)
p.show()
```

![2019-07-31 21 04 28](https://user-images.githubusercontent.com/22067021/62262678-d20dbe00-b3d6-11e9-8894-0de2f1f706f5.gif)



### Todo (later):

- [ ] how do we move/scale the axes actor added by `add_axes_at_origin`?",0,6,['enhancement']
749,303137368,341,92974124,2019-07-31 21:40:26,2019-07-31 22:16:27,closed,Add warning when using Plotter.plot(),`Plotter.plot()` has been deprecated for a while in favor of `Plotter.show()`. This finally adds a warning to get people to stop using it.,1,1,"['proposed-change', 'deprecation']"
750,303129848,339,92974124,2019-07-31 21:15:11,2019-08-01 03:15:43,closed,Allow plotting on azure pipelines,"No plotting tests were running on Azure 🤦‍♂ 

Now they all run (except Qt tests which is from https://github.com/pyvista/pyvista/pull/88)",11,9,['testing']
751,303119524,338,92974124,2019-07-31 20:43:21,2019-08-01 15:50:18,closed,Improve memory footprint,"Duplicate of #327 - I've made a few changes

Also, I've added [`pytest-memprof`](https://pypi.org/project/pytest-memprof/) to the dependencies during testing so that stats are automatically reported for high consupmption tests. Here's what I have from running locally:

```
============================================= memory consumption estimates =============================================
tests/test_plotting.py::test_plot_multi_component_array            - 482.6 MB
tests/test_plotting.py::test_plot_show_bounds_params[origin-both]  - 272.9 MB
tests/test_plotting.py::test_plot_show_bounds_params[back-back]    - 233.9 MB
tests/test_plotting.py::test_closing_and_mem_cleanup               - 232.3 MB
tests/test_plotting.py::test_plot_show_bounds_params[front-True]   - 220.3 MB
tests/test_plotting.py::test_volume_rendering                      - 215.8 MB
tests/test_plotting.py::test_plot_label_fmt                        - 175.6 MB
tests/test_ipy_tools.py::test_ipy_integrated                       - 107.1 MB
tests/test_examples.py::test_docexample_advancedplottingwithnumpy  - 98.3 MB
tests/test_plotting.py::test_scalars_by_name                       - 98.0 MB
tests/test_examples.py::test_beam_example                          - 82.1 MB
tests/test_grid.py::test_save_rectilinear[vtk-True]                - 49.3 MB
tests/test_polydata.py::test_boolean_difference                    - 18.9 MB
tests/test_examples.py::test_plot_ants_plane                       - 18.5 MB
tests/test_plotting.py::test_plotter_scale                         - 13.6 MB
tests/test_plotting.py::test_plot_show_bounds_params[front-both]   - 5.1 MB
tests/test_plotting.py::test_plot_show_bounds_params[all-True]     - 4.0 MB
```",2,16,['enhancement']
752,302303284,334,92974124,2019-07-30 02:35:08,2019-07-30 04:37:15,closed,Update axes colors to match ParaView,"This has been bugging me for a long time - now the axes widget's colors match ParaView's default. One caveat, yellow can be difficult to see in the document theme (I made it gold and bumped up the line width of the shaft to mitigate the issue)

<img width=""133"" alt=""Screen Shot 2019-07-29 at 8 38 00 PM"" src=""https://user-images.githubusercontent.com/22067021/62096389-c6888e80-b240-11e9-97aa-43ed05d2ae1a.png"">


<img width=""115"" alt=""Screen Shot 2019-07-29 at 8 38 35 PM"" src=""https://user-images.githubusercontent.com/22067021/62096421-da33f500-b240-11e9-949d-bb54e3ea4b65.png"">


<img width=""140"" alt=""Screen Shot 2019-07-29 at 8 53 16 PM"" src=""https://user-images.githubusercontent.com/22067021/62097050-e7ea7a00-b242-11e9-9692-502e7f43420b.png"">

",2,3,['enhancement']
753,302280060,331,92974124,2019-07-30 00:10:36,2019-10-28 00:22:58,closed,Add save graphic method for SVGs,"Resolve #330

For some reason, the SVG image rasterizes everything - we need to figure out how to use vector geometry for at least the cube axes. If ParaView can do it, PyVista can (see https://blog.kitware.com/exporting-vector-graphics-in-paraview-4-0/)


```py
import pyvista as pv
mesh = examples.download_bunny()

p = pv.Plotter()
p.add_mesh(mesh, )
p.show_grid()
p.show(auto_close=False)
p.save_graphic('foo.svg', raster=False)
p.close()
```

which if you zoom in is just as rasterized as a PNG:

<img width=""675"" alt=""Screen Shot 2019-07-29 at 6 09 19 PM"" src=""https://user-images.githubusercontent.com/22067021/62090987-1f99f780-b22c-11e9-8566-e296f6cf224b.png"">
",2,6,"['enhancement', 'help-wanted']"
754,302182618,327,92974124,2019-07-29 18:24:18,2019-07-31 20:43:39,closed,Improve memory footprint,"This PR decreases the memory footprint by cleaning the internal list of renderers. I would really appreciate your opinion on this @banesullivan , @akaszynski.

I benchmarked the changes of this branch by using the package `memory_profiler` with the following (specific) use-case:

```sh
$ mprof run ipython --gui=qt
In [1]: run script.py
In [2]: exit()
```

and the content of `script.py`:
```py
import pyvista as pv

for j in range(5):
    for i in range(4):
        p = pv.BackgroundPlotter()
        p.show()
        for k in range(5):
            p.add_mesh(pv.Sphere().subdivide(4))
    pv.close_all()
```

I got the following results with `mprof plot` (`master` in blue, `PR` in black):
![image](https://user-images.githubusercontent.com/18143289/62071955-e5d1ec80-b23d-11e9-8964-8f97b941ba1e.png)

Note: Some tests didn't work locally for me. I guess it's because they use the internal renderer after `close()` has been called. I think maybe even calling `clear()` after `close()` shouldn't be safe. Also the given script reproduces roughly an expected behaviour with `sphinx-gallery`.",16,4,['enhancement']
755,301894470,323,92974124,2019-07-29 03:36:21,2019-07-29 04:38:57,closed,Overhaul filters,"Moves all filters into the `core/filters.py` module

Attempts to make most filters generalizable - if a filter could be applied to any dataset type, it was moved to `DataSetFilters` which is inherited by `Common`

### Deprecations

- `clip_with_plane` -> `clip`
- `extract_selection_points` -> `extract_points`
- `tri_filter` -> `triangulate`
",1,6,"['proposed-change', 'deprecation']"
756,300346697,319,92974124,2019-07-23 15:15:40,2019-07-24 18:35:39,closed,Fix issues with overlapping vertical colorbars,"When using `pv.rcParams['colorbar_orientation'] = 'vertical'`


Before:

![download](https://user-images.githubusercontent.com/22067021/61724013-5488e480-ad2a-11e9-8717-ff80cb09df62.png)


After:

![download](https://user-images.githubusercontent.com/22067021/61724020-5783d500-ad2a-11e9-9ce3-c6a9d16ad76b.png)",0,1,['bug-fix']
757,299387492,317,92974124,2019-07-19 15:44:19,2019-07-19 17:00:31,closed,[TESTING] Replace AppVeyor with Azure,"Adds Azure windows testing because AppVeyor is regularly a pain to deal with.

Azure allows collaborators where AppVeyor does not",5,3,['testing']
758,299047253,316,92974124,2019-07-18 18:56:19,2019-07-19 17:57:20,closed,Fix 32bit Python ID type issue on windows,"Resolve #16 

@kinverarity1 - would you be able to check if this fixes your issue locally?

@akaszynski - does this seem implemented correctly? It could have major implications if not done correctly, so I'm a bit nervous to merge this without someone double-checking",6,6,"['bug-fix', 'review-critical']"
759,298975576,315,92974124,2019-07-18 15:41:04,2019-07-20 15:04:10,closed,Fix BackgroundPlotter window size setup,"This PR fixes an issue with the window's size of the `BackgroundPlotter` for example a 1000x1000 window:
```py
import pyvista as pv
p = pv.BackgroundPlotter()
p.add_mesh(pv.Cone())
p.window_size=(1000, 1000)
```
Before | After
---------|-------
![image](https://user-images.githubusercontent.com/18143289/61487684-d08bd100-a9a6-11e9-9ece-2badcb24b50e.png) | ![image](https://user-images.githubusercontent.com/18143289/61487536-71c65780-a9a6-11e9-99b7-67935f6c573d.png)

",9,2,"['bug-fix', 'IPython/Jupyter']"
760,298793331,314,92974124,2019-07-18 07:48:45,2019-07-18 11:07:43,closed,BackgroundPlotter with pyvista.close_all(),"This PR is a follow-up to #293 and connects all those different events:
* File > Exit
* Window close button `X`
* `pyvista.close_all()`
* `del` finalizer (I updated this one for completion I'm not sure it follows the intention behind it @akaszynski )

To the same action `self.app_window.close()` and fixes #310 ",3,4,"['bug-fix', 'IPython/Jupyter']"
761,298098572,311,92974124,2019-07-16 15:33:38,2019-07-16 16:19:57,closed,Fix misspell in scalar_bar_range,Fixes #308.,1,1,['bug-fix']
762,297585526,309,92974124,2019-07-15 11:53:44,2019-07-18 11:53:33,closed,Add offscreen support in BackgroundPlotter,"This PR adds basic support for offscreen rendering in the `BackgroundPlotter` class.

The following is an example of what's possible now:
```py
import pyvista as pv

pv.OFF_SCREEN = True

p = pv.BackgroundPlotter(size=(500, 500))
p.add_mesh(pv.Cone())
p.screenshot('shot1.png')

p.camera_position = [(5, 2, 2), (0, 0, 0), (0, 1, 0)]
p.background_color = (0.0, 0.0, 0.0)
p.screenshot('shot2.png')

p.close()
```

**shot1.png** | **shot2.png**
-----------------|------------------
![shot1](https://user-images.githubusercontent.com/18143289/61214285-cdbf8080-a707-11e9-9560-1de9e0b80ada.png) | ![shot2](https://user-images.githubusercontent.com/18143289/61214286-cdbf8080-a707-11e9-9fc3-9695f8171a9c.png)


**Known issues**:
* The axes are disabled by default when rendered offscreen.",12,5,"['enhancement', 'bug-fix']"
763,296794763,307,92974124,2019-07-11 19:34:28,2019-07-19 17:57:37,closed,Add more exluded arrays from being active,"This adds more arrays from being selected as the active scalars by default given the new features from https://github.com/pyvista/pyvista/pull/297#issuecomment-510198041

- `'Normals'` (https://github.com/pyvista/pyvista/pull/297#issuecomment-510227643)
- `'vtkOriginalPointIds'` (#303)

What else should be on this list?",0,1,['proposed-change']
764,296645196,305,92974124,2019-07-11 13:16:19,2019-07-11 16:22:56,closed,MRG: Set window title for BackgroundPlotter,Fix issue similar to #287 but for the `BackgroundPlotter`.,1,1,[]
765,296598407,304,92974124,2019-07-11 11:17:42,2019-07-11 22:54:10,closed,Add Callback support in BackgroundPlotter,"This PR suggests a way to address #280 and implements the ideas shared in the discussion.

This is the code snippet I used to test the changes locally:

```py
import pyvista as pv

sphere = pv.Sphere()
plotter = pv.BackgroundPlotter()
plotter.add_mesh(sphere)


#  create custom callback class including the sphere
class CallBack:
    def __init__(self, sphere):
        self.sphere = sphere

    def __call__(self):
        # can now operate on the sphere and have it updated in the background
        self.sphere.points *= 0.5


# create the callback instance and ship it with the sphere
callback = CallBack(sphere) 
plotter.add_callback(callback, interval=1000, count=2)
```",3,6,[]
766,295854145,302,92974124,2019-07-09 17:37:40,2019-07-09 21:59:30,closed,tolerance subsetting for glyph filter,"Implement tolerance based subsetting for glyph filter using `vtkCleanPolyData`

This fixes an issue from #269 using a suggestion from @marcomusy in #301

### Example

```py
import pyvista as pv
from pyvista import examples

# Example dataset with normals
mesh = examples.load_random_hills()

# create a subset of arrows using the glyph filter
arrows = mesh.glyph(scale=""Normals"", orient=""Normals"", tolerance=0.05)

p = pv.Plotter()
p.add_mesh(arrows, color=""black"")
p.add_mesh(mesh, scalars=""Elevation"", cmap=""terrain"")
p.show()
```

Note that the previous subsetting was not a uniform spatial distribution:

![sphx_glr_glyphs_004](https://user-images.githubusercontent.com/22067021/60910365-d3b3ee00-a23d-11e9-9937-d92a49871ea8.png)

Now it's uniform using a tolerance:

![sphx_glr_glyphs_004](https://user-images.githubusercontent.com/22067021/60910378-dca4bf80-a23d-11e9-8169-0d416e574845.png)",2,3,"['proposed-change', 'bug-fix']"
767,295201447,300,92974124,2019-07-08 07:00:02,2020-04-26 17:22:00,closed,🚧More notebook plotting backends: X3D and K3D,"These changes allow users to choose a notebook plotting backend. This implements the use of X3D, VTKjs from `panel`, and K3D.

Everything here is a work in progress - especially the K3D implementation (it's rather hacky)

Ping @akaszynski - this is likely very helpful for the shading issues we're encountering with VTKjs

## Addresses

- Resolve https://github.com/pyvista/pyvista-support/issues/12 - scene will always output on `.show` call now
- Resolve #258 


## Todo

### General

- [x] Make sure use of the old `use_panel` is switched to `nb_backend`
- [ ] Make sure docs and other repos like https://github.com/pyvista/cookiecutter-pyvista-binder are up to date with new `nb_viewer` option.
- [ ] Implement magic commands for #184 

### X3D

- [ ] X3D: Fix zoom scroll inversion issue
- [ ] X3D: Disable keyboard shortcuts in X3D scene
- [ ] X3D: Is there a way to embed a binary version of the HTML?
- [ ] X3D: Add more to the HTML to have buttons for viewing different camera angles, etc.

### K3D

- [ ] K3D: Fix issue with line sets (see https://github.com/K3D-tools/K3D-jupyter/issues/173)
- [ ] K3D: Set the color of text labels on scalar bars and axes from PyVsita's window/`rcParams`
- [ ] K3D: Add volume support with `vtkImageData`/`pyvista.UniformGrid`
- [ ] K3D: Fix point size and line width issue
- [ ] K3D: show edges of mesh?
- [ ] K3D: more informative names
- [ ] K3D: are textures possible?
- [ ] K3D: NaN colors?
- [ ] K3D: properly transfer lighting settings
- [ ] K3D: set camera position
- [ ] K3D: handle using RGBA arrays
- [ ] K3D: handle labeled points
- [ ] K3D: fix `n_colors` issue

## Differences

Check out the following example to see differences between the notebook backends and pure VTK rendering:

```py
import pyvista as pv
from pyvista import examples
m = examples.download_st_helens().warp_by_scalar()

cpos = [(567000.9232163235, 5119147.423216323, 6460.423216322832),
 (562835.0, 5114981.5, 2294.5),
 (-0.4082482904638299, -0.40824829046381844, 0.8164965809277649)]
```

```py
# Plot with X3D
pl = pv.Plotter(notebook=True)
pl.add_mesh(m, smooth_shading=True)
pl.show(nb_backend='x3d', cpos = cpos)
```

<img width=""1123"" alt=""Screen Shot 2019-07-08 at 12 47 43 AM"" src=""https://user-images.githubusercontent.com/22067021/60788956-2c3e9a80-a11b-11e9-851f-d43b1a9efbeb.png"">


```py
# Plot with VTKjs/panel
pl = pv.Plotter(notebook=True)
pl.add_mesh(m, smooth_shading=True)
pl.show(nb_backend='vtkjs', cpos=cpos)
```

<img width=""1078"" alt=""Screen Shot 2019-07-08 at 12 47 49 AM"" src=""https://user-images.githubusercontent.com/22067021/60788975-352f6c00-a11b-11e9-926c-40174d8bdaef.png"">

```py
# Plot with K3D
pl = pv.Plotter(notebook=True)
pl.add_mesh(m, smooth_shading=True)
pl.show(nb_backend='k3d')
```


<img width=""1032"" alt=""Screen Shot 2019-07-08 at 6 19 03 PM"" src=""https://user-images.githubusercontent.com/22067021/60850491-e29e9000-a1ac-11e9-8447-3eeb64c6a1bd.png"">



```py
# Plot with pure VTK
pl = pv.Plotter()
pl.add_mesh(m, smooth_shading=True)
pl.camera_position = cpos
pl.show(nb_backend=False)
```

![download](https://user-images.githubusercontent.com/22067021/60789013-4d9f8680-a11b-11e9-92a9-06813ac8d1ea.png)
",15,23,"['enhancement', 'IPython/Jupyter', 'web']"
768,295134229,297,92974124,2019-07-07 22:10:36,2019-07-11 01:13:03,closed,Opacity by scalar array or custom transfer function,"These changes enable a user to specify all kinds of options for the opacity:

- a scalar array on the mesh be used for opacity mapping to enable us to see two arrays at once 
- predefined transfer functions by string name
- custom built transfer functions
- single value for global opacity

### Why?

Maybe you have an uncertainty array - these changes make it so that you could make regions with high values of uncertainty be transparent. Or maybe you have a mesh with a modeled scalar array on another array of your modeling variance. This would allow you to control the opacity of the mesh by the variance.

### Example

Here I have a mesh with a modelled scalar array from Kriging and an associated kriging variance array which I'd like to use to make my mesh transparent:

```py
temp_grid = pv.read('temp_grid.vtk')
temp_grid
```
<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td><table><tr><th>UnstructuredGrid</th><th>Information</th></tr><tr><td>N Cells</td><td>2841790</td></tr><tr><td>N Points</td><td>551724</td></tr><tr><td>X Bounds</td><td>3.299e+05, 3.442e+05</td></tr><tr><td>Y Bounds</td><td>4.253e+06, 4.271e+06</td></tr><tr><td>Z Bounds</td><td>-2.700e+03, 2.300e+03</td></tr><tr><td>N Arrays</td><td>2</td></tr></table></td><td><table><tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr><tr><td><b>Temperature</b></td><td>Points</td><td>float64</td><td>1</td><td>6.729e+00</td><td>2.738e+02</td></tr><tr><td>Temperature_var</td><td>Points</td><td>float64</td><td>1</td><td>2.214e+02</td><td>1.107e+04</td></tr></table></td></tr> </table>

```py
# Make some contours
cntrs = temp_grid.contour(10, scalars='Temperature')

p = pv.Plotter(notebook=0)
p.add_mesh(cntrs, scalars='Temperature', 
           opacity='Temperature_var', 
           flip_opacity=True, cmap='bwr')
p.show()
```

<img width=""624"" alt=""Screen Shot 2019-07-07 at 4 09 40 PM"" src=""https://user-images.githubusercontent.com/22067021/60774490-acd8a900-a0d1-11e9-9967-cd78ac8f6bd0.png"">


Which looks a bit more informative than just the scalar array alone:

<img width=""580"" alt=""Screen Shot 2019-07-07 at 4 05 30 PM"" src=""https://user-images.githubusercontent.com/22067021/60774442-2e7c0700-a0d1-11e9-9521-d8421fc07445.png"">



### Todo:

- [x] fix issue where the scalar bar is not appearing
- [x] fix the issue where the added `__custom_rgba` array is set as active and would be plotted wrong on the second iteration.
- [x] Add tests
- [x] Add the ability to use user-specified mappings/transfer functions per #301  
- [x] throw error if scalars and opacity arrays are on different fields (cell/point)
- [x] refactor and implement for `add_volume` as well (`add_volume` doesn't currently support RGBA plotting - this will come later)
- [x] add examples!",5,15,"['enhancement', 'example']"
769,295045668,294,92974124,2019-07-06 15:25:53,2019-07-07 16:18:13,closed,Read long description using UTF-8,Reading long description fails on CentOS 7.6 Python3.6,3,2,[]
770,294261387,293,92974124,2019-07-03 17:18:38,2019-07-09 18:09:19,closed,BackgroundPlotter closing event,"This PR resolves #279.

My hypothesis is that the rendering thread is not cleared properly.

Since `BackgroundPlotter` is not a child of `QWidget`, `closeEvent()` is never called. That's why I noticed a different behaviour when we close the window with the top-right 'X' or if we do `File > Exit`. The actual window is stored in `app_window` so I created a new `MainWindow` class derived from `QMainWindow` and added the `closed` signal. That allowed me to migrate the rendering thread to `QThread`. After that, I connected the window closing signal with the rendering thread to ensure that it's closed correctly. I don't think closing the `BackgroundPlotter` itself is necessary since I assume it's done by `app_window` but I'm not entirely sure.

What do you think @akaszynski, @banesullivan, @coloss?

*EDIT: correct the issue number*",10,11,['bug-fix']
771,294023498,292,92974124,2019-07-03 06:39:52,2019-10-28 00:26:43,closed,Add frontface culling option and update bounding box,"Refactored `backface_culling` boolean argument to `culling` which now takes strings and booleans.

|`culling` value | Result|
|----------|-------|
|`False` | no culling |
|`True`, `'back'`, `'backface'` | backface culling |
|`'front'`, `'frontface'` | frontface culling |
 
Then I updated the already existing `add_bounding_box` method to leverage frontface culling.

I have a feeling we could build on `add_bounding_box` and use a `StructuredGrid` instead of `vtkCubeSource` to make something that resembles grid axes. then maybe leverage the point labelling feature to show XYZ coordinates and finally address #147 

```py
import pyvista as pv
from pyvista import examples

dragon = examples.download_dragon()

p = pv.Plotter(notebook=False)
p.add_mesh(dragon, color='firebrick')
p.add_bounding_box(outline=False)
p.add_axes()
p.show()
```

![ezgif com-video-to-gif-7](https://user-images.githubusercontent.com/22067021/60568410-fcae1d80-9d29-11e9-9d53-b139bef331e0.gif)",2,7,['enhancement']
772,293965516,291,92974124,2019-07-03 01:02:08,2019-07-10 17:28:29,closed,Window title,Resolve #287. We still need to address #290,0,2,[]
773,293801233,289,92974124,2019-07-02 15:24:20,2019-07-02 16:55:44,closed,Fix links in feature overview in Readme.rst,"The links seem outdated.

Best wishes
Florian

P.S.: @banesullivan Still waiting for your answer in https://github.com/gimli-org/gimli/issues/178 :wink: ",2,1,['documentation']
774,293546684,286,92974124,2019-07-02 01:05:03,2019-07-02 01:34:34,closed,Improve point labels,"Improve point labels with `vtkLabelPlacementMapper` and `vtkPointSetToLabelHierarchy`.

Implement from snippet in https://github.com/pyvista/pyvista/issues/282#issuecomment-507444035

Old behavior:

![ezgif com-video-to-gif-5](https://user-images.githubusercontent.com/22067021/60475129-0a34ac00-9c33-11e9-9050-69c421ac114c.gif)


New behavior:

![ezgif com-video-to-gif-4](https://user-images.githubusercontent.com/22067021/60475089-c772d400-9c32-11e9-9e15-217e8ab02c70.gif)
",0,1,['enhancement']
775,293536136,284,92974124,2019-07-01 23:56:51,2019-07-02 00:29:34,closed,Use scoobys .Report() convention,"Scooby is setting a new convention for having projects that use it make their own class called `Report` which is a child of `scooby.Report`.

This makes reporting consistent across libraries and makes it easier for user to remember how to generate a report for different packages.",0,1,['proposed-change']
776,293084930,281,92974124,2019-06-30 07:24:03,2019-07-10 17:47:47,closed,Add surface cell picking for visible cells only,"Resolve #277 

Originally from #278 

This implements a solution to select visible cells on the surface of triangulated meshes. Unfortunately, it is a bit buggy if the mesh is not triangulated 😞. See ""BUG"" section below for more details

-----

This provides a solution to #277 using `vtkOpenGLHardwareSelector` which requires us to use `vtkRenderedAreaPicker` instead of `vtkAreaPicker`. The result is awesome though:

```py
import pyvista as pv
from pyvista import examples

mesh = examples.download_nefertiti()

p = pv.Plotter(notebook=0)
p.add_mesh(mesh, show_edges=False, color='w')
p.enable_cell_picking(through=False)
p.show()
```


![ezgif com-video-to-gif-2](https://user-images.githubusercontent.com/22067021/60393416-587e6980-9ad2-11e9-882e-c534e58e87ae.gif)

## BUG

Datasets that are **not entirely triangles** will not work if using a non-NVIDIA GPU (ref #277 ) . The selection doesn't work with the `example.load_hexbeam()` dataset on my Radeon GPU but does with a triangulated extraction of the surface of that dataset `examples.load_hexbeam().extract_geometry().tri_filter()`

This is definitely a VTK bug

For now, I'm going to add a warning about non-triangulated datasets

## ISSUE

This will not work if there is more than one mesh in the scene. Or at least I do not know how to differentiate the Nodes from the selector and how to match them to the different meshes in the scene",3,8,"['enhancement', 'example', 'for-future-consideration']"
777,292593283,278,92974124,2019-06-27 20:35:23,2019-06-30 16:24:38,closed,show selection with cell picking,"After #272, change base to `master`

This adds a default callback method to the cell picker that will show a wireframe of the selection.

Why? It never seemed like the cell picker was doing anything if you were using it and it was difficult to know exactly what you were selecting.

@akaszynski, is there a way to mimic a keypress event to disable the selector after a selection has been made? I'm thinking we should disable it by default after a selection so that the user doesn't mess up their selection when try to move the camera

Relevant to #277 

## Example

```py
import pyvista as pv
from pyvista import examples

def make_example_data():
    surface = examples.download_saddle_surface()
    points = examples.download_sparse_points()
    poly = surface.interpolate(points, radius=12.0)
    return poly

poly = make_example_data()


p = pv.Plotter(notebook=False)
p.add_mesh(poly,)
p.enable_cell_picking()
p.show()
```
![ezgif com-video-to-gif](https://user-images.githubusercontent.com/22067021/60298765-725c5880-98e8-11e9-9107-e595b6ea0da9.gif)",9,66,['enhancement']
778,292577068,276,92974124,2019-06-27 19:44:53,2019-06-30 17:54:55,closed,PolyData project_points_to_plane,"After #272 

Implement `project_points_to_plane` for https://github.com/pyvista/pyvista-support/issues/20


```py
import numpy as np
import pyvista as pv
from pyvista import examples
pv.rcParams['use_panel'] = False

def make_example_data():
    surface = examples.download_saddle_surface()
    points = examples.download_sparse_points()
    poly = surface.interpolate(points, radius=12.0)
    return poly

poly = make_example_data()

# Project that surface to a plane
og = poly.center
og[-1] -= poly.length / 3.
projected = poly.project_points_to_plane(origin=og, normal=[0,0,1])

# Plot it
p = pv.Plotter()
p.add_mesh(poly,)
p.add_mesh(projected, )
p.show()
```

![download](https://user-images.githubusercontent.com/22067021/60295715-a2542d80-98e1-11e9-9bcd-e04ec35c5bf7.png)
",1,1,['enhancement']
779,292262847,275,92974124,2019-06-27 04:31:33,2019-06-30 16:42:11,closed,Change add_text to use vtkCornerAnnotation,"After #272

This implements `vtkCornerAnnotation` with the `add_text` method for the plotter

Why? Because our text stays in the same location wrt the scene and if the window is resized, which might turn into an inconvenient location. These changes keep the text in the desired location wrt to the window

```py
from pyvista import examples
import pyvista as pv

mesh = examples.download_st_helens().warp_by_scalar()

p = pv.Plotter(notebook=False)
p.add_mesh(mesh)
p.add_text('Mount St. Helens')
p.show()
```


Current behavior:

![ezgif com-video-to-gif](https://user-images.githubusercontent.com/22067021/60234566-fb7c7c80-9861-11e9-9e28-b8a034c4e4b6.gif)


New behavior:

![ezgif com-video-to-gif-2](https://user-images.githubusercontent.com/22067021/60234578-06371180-9862-11e9-8a36-710a8dfc69e0.gif)

",1,60,"['enhancement', 'bug-fix']"
780,292240963,274,92974124,2019-06-27 03:14:19,2019-08-09 20:14:01,closed,Table: wrap vtkTable class and refactor internals,"After #272

Closes #42 

This implements a wrapper for the `vtkTable` class which behaves like a dictionary of NumPy arrays. `Table` objects can be created from a 2D array or a dictionary of 1/2D arrays.

Quite a bit of refactoring was needed to make this possible. Field data now appropriately exists for all data objects (Tables, MultiBlocks, and all meshes). When referring to data arrays on a mesh either in the Point, Cell, or Field data, we now call them `arrays` rather than `scalars` as `arrays` is more general and these arrays can have more than one component (non-scalar)

Deprecations are backward compatible and throw warnings.

### Example

Use tables to keep track of your point/cell arrays:

```py
import pyvista
from pyvista import examples

dataset = examples.load_hexbeam()

table = pyvista.Table()
table.update(dataset.point_arrays)
table
```
<table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td><table><tr><th>Table</th><th>Information</th></tr><tr><td>N Rows</td><td>99</td></tr><tr><td>N Arrays</td><td>2</td></tr></table></td><td><table><tr><th>Name</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr><tr><td>sample_point_scalars</td><td>int64</td><td>1</td><td>1.000e+00</td><td>3.020e+02</td></tr><tr><td>VTKorigID</td><td>int64</td><td>1</td><td>0.000e+00</td><td>9.800e+01</td></tr></table></td></tr> </table>


And make a table from a Pandas DataFrame or a 2D NumPy array. There is also a convenient `to_pandas()` method if Pandas is installed.

```py
# Easily fetch arrays in the table
table['sample_point_scalars']
```
array([  1,   2,  ..., 300, 302])



### Todo

- [x] add tests
- [x] add Pandas support
- [x] add support for field data",1,16,['enhancement']
781,291954976,273,92974124,2019-06-26 11:59:59,2019-06-26 17:32:32,closed,MRG: Update gallery examples with link_views(),This small PR is a follow-up of [#255(comment)](https://github.com/pyvista/pyvista/pull/255#issuecomment-501780572) and updates some examples in the gallery with the `link_views()` function.,2,1,[]
782,291401470,272,92974124,2019-06-25 06:17:37,2019-06-30 15:46:37,closed,MAJOR: reorganize internal modules and implement volume rendering,"This implements a major restructuring of the internal modules to make management, refactoring, and implementing new features a bit easier moving forward.

The library has been in major need of this type of clean up/restructuring and with #231, it was required.

Closes #231: This has the changes from #231 in it already (which are incomplete). I needed to start modularizing the plotting code to implement the volume rendering properly so this PR is basically a whole lot of prep work to implement #231.

When complete, I will *SQUASH AND MERGE* these changes into the master branch - while closing #231. 

@akaszynski - I'd appreciate a close review on this one. Assuming I did everything right, usage of the API should not change to the user and all of the tests/examples have remained untouched.

If any external projects have absolute imports like `pyvista.pointset.PolyData` they may need to be changed to `pyvista.PolyData` or `pyvista.core.pointset.PolyData`


## The New Structure

There are now four main modules for the PyVista API:

- `core`: The underlying mesh types and filters to process those mesh types. This is the ""mesh analysis"" from our title
- `plotting`: All the code to handle 3D rendering/plotting of the `core` types and utilities around 3D plotting
- `utilities`: A conglomerate of tools for creating datasets, reading files, and the old utilities module for converting arrays, etc.
- `examples`: the good ole examples module that's always been there

## Next Steps

- [x] reorganize docs to reflect the internal reorganization
- [x] modularize the `add_mesh` method and borrow what we can for the new `add_volume` method.
- [x] create a class that will manage actors/mappers so that we can use volume mappers just like dataset mappers and implement color bars
- [x] implement volume rendering for ImageData (UniformGrids)
- [x] finish volume rendering example
- [x] address all items from #231 


# Features

Closes #189 with new `generate_report` function
Closes #237 


",9,63,"['proposed-change', 'priority-high', 'review-critical']"
783,291222891,271,92974124,2019-06-24 17:14:18,2019-06-24 20:28:19,closed,Change default colormap to viridis and add Colorcet and cmocean support,"I propose we change the default colormap to use Matplotlib's *viridis* when MPL is installed (if MPL is not installed, defaults back to jet/rainbow).

I'm curious if we could change the default colormap when MPL is unavailable to something like ParaView's ""cool to warm"" instead of jet - thoughts, @akaszynski?

Why should we use *viridis*? Besides it being MPL's default colormap, it's also perceptually uniform and ideal for scientific visualization.

Here are some nice articles/blogs/code on choosing colormaps for scientific visualization:

1. https://blogs.egu.eu/divisions/gd/2017/08/23/the-rainbow-colour-map/
2. https://www.kennethmoreland.com/color-advice/
3. http://www.cet.edu.au/research-projects/geophysics-integrated-data-analysis/projects/colour-maps-with-uniform-perceptual-contrast
4. https://github.com/ahartikainen/Perceptual-cmaps/blob/master/Divergent_monotonic_cmap.ipynb

On this topic of perceptually linear colormaps, maybe we should try to add support for [pyviz/colorcet](https://github.com/pyviz/colorcet) to get some more colormaps?

Relevant to #122",6,8,['proposed-change']
784,290929567,270,92974124,2019-06-24 00:19:44,2019-06-25 04:09:50,closed,Composite Filters,"This PR makes many of the common filters under `DataSetFilter` available to `MultiBlock` datasets. This also refactors the container -> composite module a bit.

Now, you can apply filters that do not process scalar arrays to composite datasets with ease - like clipping, slicing, outlining, generating wire meshes, computing cell sizes, moving scalars to cell/point data, and triangulation.

Here is an example using a MultiBlock dataset full of structured grids from the data mentioned in https://github.com/pyvista/pyvista-support/issues/17:

```py
...
all_surfaces.plot(notebook=False, multi_colors=True, eye_dome_lighting=True)
```

<img width=""1136"" alt=""Screen Shot 2019-06-23 at 12 36 50 PM"" src=""https://user-images.githubusercontent.com/22067021/59983934-f6a99580-95e1-11e9-80e5-9e0799d6bd45.png"">


```py
box = 428e3, 433e3, 1.35e6, 1.36e6, all_surfaces.bounds[4], all_surfaces.bounds[5]

# Run a filter on the composite dataset
extracted = all_surfaces.clip_box(box, invert=False)

p = pv.Plotter(notebook=False)
p.add_mesh(extracted, multi_colors=True)
p.enable_eye_dome_lighting()
p.add_mesh(all_surfaces.outline())
p.add_axes()
p.show()
```

<img width=""1509"" alt=""Screen Shot 2019-06-23 at 6 17 46 PM"" src=""https://user-images.githubusercontent.com/22067021/59984060-4c327200-95e3-11e9-9e3d-f751f8a7014f.png"">


Resolve #162 
",2,14,['enhancement']
785,290455330,269,92974124,2019-06-21 04:16:47,2019-06-24 20:28:30,closed,Glyphing subsets,"Some updates to the `glyph` filter and to the `arrows` property.

The `arrows` property now leverages the `glyph` filter - @akaszynski: you originally added this `arrows` property; could you make sure that it is now leveraging the `glyph` filter the way you intended?

This also adds an option to take a uniformly random subset of a dataset when glyphing incase you don't want glyphs for every node in the dataset. Quite often I glyph a dataset and have results that are difficult to interpret because there are way too many glyphs. For example:

```py
import pyvista as pv
from pyvista import examples

mesh = examples.load_random_hills()

arrows = mesh.glyph(scale='Elevation', orient='Normals', factor=0.25)

p = pv.Plotter()
p.add_mesh(arrows, color='black')
p.add_mesh(mesh, scalars='Elevation', cmap='terrain')
p.show()
```

![download](https://user-images.githubusercontent.com/22067021/59898007-61718b80-93ac-11e9-9915-8b1b3d8ba828.png)


The above plot is hard to decipher because there are too many glyphs. With these changes, we can take a uniform subset of the mesh's points.

*note this is a uniform sampling of the points array, not a uniform distribution in space - is this an issue for anyone?* @fourndo - you come to mind, do you have any suggestions on a better way to make a subset of the mesh for glyphing/drawing vectors?

```py
arrows = mesh.glyph(scale='Elevation', orient='Normals', factor=0.25, subset=0.05)

p = pv.Plotter()
p.add_mesh(arrows, color='black')
p.add_mesh(mesh, scalars='Elevation', cmap='terrain')
p.show()
```

![download](https://user-images.githubusercontent.com/22067021/59898010-646c7c00-93ac-11e9-809f-c79a67d202e3.png)
",1,3,['enhancement']
786,289888314,268,92974124,2019-06-19 21:36:26,2020-04-26 15:55:29,closed,🚧 Overhaul VTKjs export script for use with panel,"**WORK IN PROGRESS - this will be a somewhat major PR when complete. I'm getting this going now to outline what is needed and to provide place for folks to discuss these changes**

This PR will resolve https://github.com/pyviz/panel/issues/408 when completed

This isn't something I'll be able to complete on my own, so please feel free to chime in with suggestions/comments or tackle a feature request/bug if you can 

Pinging folks that might be interested and who's help/expertise I'd appreciate:

- @akaszynski 
- @GuillaumeFavelier
- @philippjfr
- @xavArtley 

### Features

- [ ] Leverage new changes in `panel` to plug in our VTKjs converter (mentioned in https://github.com/pyviz/panel/issues/408#issuecomment-500153052)
- [ ] modularize `export.py` module to either save a scene as a VTKjs file (many files if subplotting) or send the scene to `panel`
- [ ] Send subplots/individual renderers to their own pane in `panel` and handle displaying the panes in a grid
- [ ] Enforce panes to display when `.show()` is called (see https://github.com/pyvista/pyvista-support/issues/12)

### Bugs to Squash

- [ ] Send text/labels to VTKjs or at least don't throw an error (text added with `add_point_labels` and `add_text`)
- [ ] Fix how VTKjs doesn't always plot the active scalar - see https://github.com/pyvista/pyvista-support/issues/15
- [ ] Ensure all PyVista mesh types work - sometimes I run into issue with `StructuredGrid`s
- [ ] Make sure scalar/color mapping is working - sometimes the mapping is totally wrong. [Blood vessels example](https://docs.pyvista.org/examples/01-filter/streamlines.html#blood-vessels) shows this
- [ ] See if we can send lighting options to VTKjs (smooth versus default)
- [ ] Make sure things like legends don't through an error when converting to VTKjs
- [ ] Handle front and back face culling
- [ ] Issue with `float64` compatibility
- [ ] fix issue with `int` points array
- [ ] custom colormaps (see #345)",22,9,"['enhancement', 'help-wanted', 'proposed-change', 'bug-fix', 'IPython/Jupyter', 'web', 'priority-high']"
787,289854987,267,92974124,2019-06-19 19:51:53,2019-06-20 20:23:47,closed,Filter: slice along line,"Add new `slice_along_line` filter now that `Spline` is supported - this filter mimics ParaView's ""Slice Along Poly Line"" filter but supports just about any line source

```py
import pyvista as pv
from pyvista import examples
import numpy as np

model = examples.load_channels()

def path(y):
    """"""Equation: x = a(y-h)^2 + k""""""
    a = 110.0 / 160.0**2
    x = a*y**2 + 0.0
    return x, y

x, y = path(np.arange(model.bounds[2], model.bounds[3], 15.0))
zo = np.linspace(9.0, 11.0, num=len(y))
points = np.c_[x,y,zo]
spline = pv.Spline(points, 7)

slc = model.slice_along_line(spline)

p = pv.Plotter()
p.add_mesh(slc)
p.add_mesh(model.outline())
p.show(cpos=[1,-1,1])
```

![download](https://user-images.githubusercontent.com/22067021/59795781-45c99080-9299-11e9-91de-f432a802edf6.png)",2,5,"['enhancement', 'example']"
788,289837021,266,92974124,2019-06-19 18:54:51,2019-06-20 20:24:30,closed,Fix colormapping issue for uint8 arrays,"This change makes it possible to properly colormap arrays of `dtype('uint8')` by casting those arrays to floats. One problem - this changes the data type of the array to float and there no longer exists a `uint8` version of the array. Is there a situation where a user might not want to cast the `uint8` array to `float`?

Currently, this happens:

```py
import pyvista as pv
from pyvista import examples

data = examples.download_bolt_nut()
bolt = data['bolt'].threshold(50)
nut = data['nut'].threshold(50)

p = pv.Plotter()
p.add_mesh(bolt)
p.add_mesh(nut)
p.show(use_panel=False)
```

![download](https://user-images.githubusercontent.com/22067021/59792316-19117b00-9291-11e9-9885-7a4b28005758.png)


After casting the array to floats with this change, it looks like:

![download](https://user-images.githubusercontent.com/22067021/59792333-20d11f80-9291-11e9-95d2-4f07808b0e18.png)",3,1,['bug-fix']
789,288571466,263,92974124,2019-06-15 17:44:00,2020-05-29 04:16:34,closed,🚧 Orthographic Slicer,"A new tool for orthographically slicing meshes which is a subclass of `Plotter`. Resolves #111.

Todo:

- [x] make the 3 views of the slices have a parallel projection (2D)
- [ ] add lines in each view to show locations of other slices (see #111 and the gif from ParaView for an example) - the code is there, it causes the plotter to get hung though; not sure why.
- [ ] should we use a sphere widget or plane widgets?
- [x] show axes grid in 2D views by default

```py
import pyvista as pv
from pyvista import examples

mesh = examples.load_channels()

plotter = pv.OrthographicSlicer(mesh)
plotter.show()
```

![2019-10-17 21 24 53](https://user-images.githubusercontent.com/22067021/67063610-9efce000-f124-11e9-84e1-f42ee7788c2e.gif)

",14,22,['enhancement']
790,288462448,262,92974124,2019-06-14 20:01:03,2019-06-14 20:36:25,closed,Guillaume Favelier is an author!,"Thanks for all your contributions, @GuillaumeFavelier!!",2,1,[]
791,288417773,261,92974124,2019-06-14 17:26:14,2019-06-14 18:19:26,closed,Fix length calculation of geodesic path,"Address #260 

Ping @supersubscript ",0,1,['bug-fix']
792,288407892,259,92974124,2019-06-14 16:52:25,2019-06-16 06:27:39,closed,Update highlights of PyVista,"So far, this is a first pass at updating what users might first see when they are trying to learn what PyVista can do.

We need a bit more graphics and a bit more details in the Highlights Section of the README",1,2,['documentation']
793,288123648,257,92974124,2019-06-13 22:52:03,2019-06-14 17:28:33,closed,Ignore angle parameter for cone,"Resolve #249 

Ping @kjelljorner",0,1,['bug-fix']
794,287856635,255,92974124,2019-06-13 10:16:30,2019-06-13 22:54:56,closed,Linked cameras in subplots,"This PR fixes #253 by introducing two new functions called `link_views()` and `unlink_views()`.

Following #253 example, this a code snippet using those functions:

```py
import pyvista as pv
from pyvista import examples
import pyacvd

# download mesh
mesh = examples.download_cow()

clus = pyacvd.Clustering(mesh)
# mesh is not dense enough for uniform remeshing
clus.subdivide(3)
clus.cluster(20000)

# remesh
remesh = clus.create_mesh()

p = pv.Plotter(notebook=0, shape=(2,2))
p.add_mesh(mesh, show_edges=True, color=True)
p.subplot(0,1)
p.add_mesh(remesh, color=True, show_edges=True)
p.subplot(1,0)
p.add_mesh(mesh, color=True, show_edges=False)
p.subplot(1,1)
p.add_mesh(remesh, color=True, show_edges=False)
p.link_views() # link all the views
p.unlink_views([2, 3]) # unlink the last 2 views by giving indices
p.show()
```

![output](https://user-images.githubusercontent.com/18143289/59424509-66df3c80-8dd4-11e9-9489-44671214acd2.gif)


As a side note, I noticed that with this implementation enabling Eye-Dome lighting gives a white window.",11,6,['enhancement']
795,287188195,250,92974124,2019-06-11 17:22:13,2019-06-14 00:19:31,closed,plot_over_line filter,"Here is a new `.plot_over_line` filter in response to https://github.com/pyvista/pyvista-support/issues/13 that is intended to be much like ParaView's ""Plot over line"" filter.

## Simple Example

```py
import pyvista as pv
from pyvista import examples

mesh = examples.download_kitchen()

# Make two points to construct the line between
a = [mesh.bounds[0], mesh.bounds[2], mesh.bounds[4]]
b = [mesh.bounds[1], mesh.bounds[3], mesh.bounds[5]]

mesh.plot_over_line(a, b)
```

![download](https://user-images.githubusercontent.com/22067021/59292836-0ff22f80-8c3b-11e9-8e30-1e55f468a50e.png)


## Better Example

```py
import pyvista as pv
from pyvista import examples

mesh = examples.download_st_helens()

# Make two points to construct the line between
a = [mesh.center[0], mesh.bounds[2], mesh.bounds[5]]
b = [mesh.center[0], mesh.bounds[3], mesh.bounds[5]]

# Preview how this line intersects this mesh
line = pv.Line(a, b)

p = pv.Plotter()
p.add_mesh(mesh)
p.add_mesh(line, color='white', line_width=10)
p.add_point_labels([a, b], ['A', 'B'], font_size=48,
                   point_color='red', text_color='red')
p.show()
```

![sphx_glr_plot-over-line_003](https://user-images.githubusercontent.com/22067021/59296100-700dc380-8c85-11e9-9d7a-a1c70d1aa04d.png)


```py
mesh.plot_over_line(a, b, resolution=10000, title='Elevation Profile',
                    ylabel='Height above sea level', figsize=(10, 5))
```

![sphx_glr_plot-over-line_004](https://user-images.githubusercontent.com/22067021/59296094-6dab6980-8c85-11e9-99f4-1ce19b92b935.png)



## Todo

- [x] implement a way to dynamically chose a ""high resolution""
- [x] test
- [x] add arguments for controlling the `matplotlib` figure
- [x] add example",10,5,['enhancement']
796,286197070,248,92974124,2019-06-07 13:50:42,2019-06-07 14:24:15,closed,Add Smooth example and Parametric Geometry,"Went ahead and added a bunch of parametric geometry functions to match vtk's example here:
[ParametricObjectsDemo](https://lorensen.github.io/VTKExamples/site/Cxx/GeometricObjects/ParametricObjectsDemo/)

```python
import pv
supertoroid = pv.ParametricSuperToroid(n1=0.5)
supertoroid.plot(color='tan', smooth_shading=True)
```
![Visualization Toolkit - OpenGL_084](https://user-images.githubusercontent.com/11981631/59108699-d7e9a480-893b-11e9-9d0c-2514c2eb9c85.png)

#### Header File Parser
If anyone's interested, I wrote a parser to avoid having to manually translate the header files into Python functions.  Wasn't too bad and only had to clean up a little bit.  You'll need to clone their source.

```python
import os
import re
import vtk

lib_path = '/home/alex/projects/vtk_parse/VTK/Common/ComputationalGeometry/'

# vtk.vtkParametricBohemianDome

def sliceindex(x):
    i = 0
    for c in x:
        if c.isalpha():
            i = i + 1
            return i
        i = i + 1

def upperfirst(x):
    i = sliceindex(x)
    return x[:i].upper() + x[i:]

def get_para(raw_parameters):
    parameters = []
    for raw in raw_parameters:
        info = raw[1].replace('*', '').replace('\\', '').replace('/', '').strip()
        if 'vtkSetMacro' not in info:
            continue
        split = info.split('vtkSetMacro')
        desc = split[0].strip()        
        var_tup = split[1].split('vtkGetMacro')[0].split('\n')[0].replace(';', '')
        para_name = var_tup.split(',')[0].replace('(', '')
        para_type = var_tup.split(',')[1].replace(')', '').strip()
        desc = upperfirst(desc.replace('SetGet', '').strip())
        parameters.append([para_name, para_type, desc])
    return parameters


def translate_function(vtk_class_name, test=False):
    infile = os.path.join(lib_path, '%s.h' % vtk_class_name)

    with open(infile) as f:
        text = f.read()

    class_name = re.findall(""@class.*$"", text, re.MULTILINE)[0]
    fun_name = class_name.split('vtk')[1]
    desc = re.findall('(@brief)((\s|.)*?)(@)', text)
    fun_desc = desc[0][1].replace('*', '').replace('\\', '').replace('/', '').strip()
    fun_desc = fun_desc.replace('\n  ', '\n    ')
    fun_desc = fun_desc.replace('vtk' + fun_name, fun_name)

    raw_parameters = re.findall('(//@{)((\s|.)*?)(//@})', text)
    parameters = get_para(raw_parameters)

    para_str = """"""    Parameters
    ----------
""""""
    for para_name, para_type, desc in parameters:
        para_str += '    %s : %s, optional\n' % (para_name.lower(), para_type)
        para_str += '        %s\n\n' % desc

    return_str = """"""    Returns
    -------
    surf : pyvista.PolyData
        %s surface

    Examples
    --------
    Create a %s mesh
    >>> import pyvista
    >>> mesh = pyvista.%s()
    >>> mesh.plot(color='w', smooth_shading=True)  # doctest:+SKIP
"""""" % (fun_name, fun_name, fun_name)

    variables = [para_name.lower() for para_name, _, _ in parameters]

    none_var = ['%s=None' % var for var in variables]
    none_var.append('**kwargs')
    fun_signature = ""def %s(%s):"" % (fun_name, ', '.join(none_var))


    fun_set_para_lines = []
    for para_name, _, _ in parameters:
        line = '    if %s is not None:\n        parametric_function.Set%s(%s)\n' % (para_name.lower(), para_name, para_name.lower())
        fun_set_para_lines.append(line)

    fun_set_para = '\n'.join(fun_set_para_lines)

    fun_body = """"""    parametric_function = vtk.vtk%s()
%s
    surf = surface_from_para(parametric_function, **kwargs)

    center = kwargs.pop('center', [0., 0., 0.])
    direction = kwargs.pop('direction', [0., 0., 1.])
    translate(surf, center, direction)

    return surf"""""" % (fun_name, fun_set_para)

    doc_str = '""""""%s\n\n%s%s    """"""' % (fun_desc, para_str, return_str)
    # print(doc_str)

    fun = '%s\n    %s\n%s' % (fun_signature, doc_str, fun_body)


    if test:
        exec(fun)
        exec(""surf = %s(); surf.plot(color='w')"" % fun_name)

    test_fun = """"""def test_%s():
    geom = pyvista.ParametricBohemianDome()
    assert geom.n_points"""""" % fun_name

    # exec(test_fun)
    # exec('test_%s()' % fun_name)

    return fun, test_fun



class_names = ['vtkParametricBohemianDome',
               'vtkParametricBour',
               'vtkParametricBoy',
               'vtkParametricCatalanMinimal',
               'vtkParametricConicSpiral',
               'vtkParametricCrossCap',
               'vtkParametricDini',
               'vtkParametricEllipsoid',
               'vtkParametricEnneper',
               'vtkParametricFigure8Klein',
               # 'vtkParametricFunction',
               'vtkParametricHenneberg',
               'vtkParametricKlein',
               'vtkParametricKuen',
               'vtkParametricMobius',
               'vtkParametricPluckerConoid',
               'vtkParametricPseudosphere',
               'vtkParametricRandomHills',
               'vtkParametricRoman',
               # 'vtkParametricSpline',
               'vtkParametricSuperEllipsoid',
               'vtkParametricSuperToroid',
               'vtkParametricTorus']

funs = []
test_funs = []
for class_name in class_names:
    fun, test_fun = translate_function(class_name)
    funs.append(fun)
    test_funs.append(test_fun)


write_file = '/home/alex/projects/vtk_parse/parametric_geometry.py'
with open(write_file, 'w') as f:
    f.write('\n\n\n'.join(funs))


write_file = '/home/alex/projects/vtk_parse/test_parametric_geometry.py'
with open(write_file, 'w') as f:
    f.write('\n\n\n'.join(test_funs))
```",0,2,[]
797,285272738,246,92974124,2019-06-05 08:28:12,2019-06-05 10:14:26,closed,added splines,"Adds splines to ``geometric_objects``

```python
# sphinx_gallery_thumbnail_number = 2
import pyvista as pv
import numpy as np


################################################################################
# Create a dataset to plot

# data
n_points = 100
theta = np.linspace(-4 * np.pi, 4 * np.pi, n_points)
z = np.linspace(-2, 2, n_points)
r = z**2 + 1
x = r * np.sin(theta)
y = r * np.cos(theta)
points = np.column_stack((x, y, z))

################################################################################
# Now pass the NumPy data to PyVista

# Create spline with 1000 interpolation points
spline = pv.Spline(points, 1000)

################################################################################
# Plot spline as a tube

# add scalars to spline and plot it
spline['scalars'] = np.arange(spline.n_points)
tube = spline.tube(radius=0.1)
tube.plot(smooth_shading=True)

################################################################################
# Line can also be plotted as a plain line

# generate same spline with 400 interpolation points
spline = pv.Spline(points, 400)

# plot without scalars
spline.plot(line_width=4, color='k')
```
![Visualization Toolkit - OpenGL_080](https://user-images.githubusercontent.com/11981631/58941697-94950780-877c-11e9-9ef9-63cf8d5d4c8e.png)
![Visualization Toolkit - OpenGL_081](https://user-images.githubusercontent.com/11981631/58941698-94950780-877c-11e9-9759-c5238dd8f1f1.png)
",0,1,[]
798,285187239,244,92974124,2019-06-05 00:15:35,2019-06-08 21:14:11,closed,"In ""Issues"", my mistake. Sorry.","In ""Issues"", my mistake. Sorry.",0,5,[]
799,284140886,243,92974124,2019-05-31 18:00:40,2019-06-13 23:59:29,closed,Add volume option to plot function,"Makes volume rendering available when calling the bound `.plot()` function on a mesh/volume dataset.

@supersubscript: can you overlook these changes to make sure I didn't mess anything up before merging into #231

```py
import pyvista as pv
from pyvista import examples

vol = examples.download_frog()

vol.plot(volume=True)
```

<img width=""624"" alt=""Screen Shot 2019-05-31 at 12 57 25 PM"" src=""https://user-images.githubusercontent.com/22067021/58725102-f7188d00-83a3-11e9-8306-e8969e68b8ea.png"">",0,1,[]
800,283997407,242,92974124,2019-05-31 10:52:35,2019-05-31 11:30:47,closed,Add geometric objects,"Adds ``Ellipsoid`` to the available geometric objects, and generalizes the parametric function generator.

```python
import pyvista as pv

ellipse = pv.Ellipsoid(1, 2, 3)
ellipse.plot(color='w', smooth_shading=True)
```
![tmp](https://user-images.githubusercontent.com/11981631/58701341-f03d4a80-83a2-11e9-8de6-750c7b87a2f9.png)

",1,3,[]
801,283814164,241,92974124,2019-05-30 21:09:33,2019-05-30 22:07:11,closed,"Revert ""Add support for wrapping TetGen and PyMeshFix meshes""",Reverts pyvista/pyvista#234 and resolves #240 ,0,2,[]
802,282534942,235,92974124,2019-05-27 14:26:12,2019-05-28 06:21:41,closed,Fix hook for normals computation,"If the user enables `smooth_shading=True` when the input mesh is not a `PolyData`, for example `UnstructuredGrid`, we obtain the following:
```sh
AttributeError: 'UnstructuredGrid' object has no attribute 'compute_normals'
```
This PR fixes the hook triggering the computation of the normals for `PolyData` in this case.",2,2,['bug-fix']
803,282409514,234,92974124,2019-05-27 08:07:32,2019-05-27 20:50:14,closed,Add support for wrapping TetGen and PyMeshFix meshes,Resolve #233 ,6,1,"['enhancement', '🍏 low-hanging-fruit']"
804,281705770,232,92974124,2019-05-23 17:07:52,2019-05-31 17:01:04,closed,Clearing scalar arrays,There was no previous straightforward way for clearing an object of scalar arrays. Now there is.,3,6,"['enhancement', 'proposed-change']"
805,281587891,231,92974124,2019-05-23 12:26:42,2019-06-30 15:46:37,closed,[CLOSE] Numpy Array Volume Rendering,"Resolves #168 

This PR adds volume rendering of numpy arrays in accordance with #168. It uses the vtkGPURayCastMapper to generate an output volume that can be added to a plotter. 

### TODO and limitations

1. Does not currently allow for scalarbars
2. Currently downscales input data to range 0-255
3. Add methods for rotation/translation
4. In general, because the mapper used is different from e.g. the polydata mappers, some standard functionality is not currently available.
5. No tests available due to no (afaik) intensity data in examples.
6. No way of changing global opacity level (due to (4.)).

### Examples
```python
import pyvista as pv

data = <some intensity array data>
p = pv.Plotter()
p.add_volume(data, resolution='[.5, 1, 1])
p.show()
```
or
```python
import pyvista as pv

data = <some intensity array data>
pv.plot(data, resolution=[.5,1,1], opacity='linear')
```
",18,16,['enhancement']
806,281194071,230,92974124,2019-05-22 13:26:49,2019-05-23 16:26:18,closed,First try at smooth shading,This is a follow-up to [#9](https://github.com/pyvista/pyvista-support/issues/9) as a attempt to add smooth shading for PolyData as a first step.,10,5,[]
807,280822007,229,92974124,2019-05-21 14:54:56,2019-06-25 06:33:01,closed,New File IO Module,"Draft for addressing https://github.com/pyvista/pyvista/issues/226#issuecomment-494425688

Goal: aggregate all the file IO methods into one module

Once aggregated, managing things like locale issues mentioned in #226 would be a bit simpler",2,5,"['proposed-change', 'file-formats']"
808,280546274,228,92974124,2019-05-20 21:21:32,2019-06-27 00:31:16,closed,Use/Test Sphinx Gallery Scraper Agreement,"Implements a software contract between PyVista and Sphinx-Gallery per https://github.com/sphinx-gallery/sphinx-gallery/pull/494


Note that this was actually implemented in these three (fa897774ca3fa09773988ad14a1292a2aa608cb9, 0a814e8e35991825268e591678db5d3128b6e25d, and d474c94cd90514e24f9f631d98eb8d4c015a52a7) commits on the master branch - this PR tests that it's working",1,6,[]
809,280409605,225,92974124,2019-05-20 14:12:08,2019-05-20 14:12:22,closed,added supertorid,"This adds the ``SuperTorid`` function to ``pyvista``

```python
import pyvista
SuperToroid().plot(color='w')
```
![tmp](https://user-images.githubusercontent.com/11981631/58027947-fe28db00-7b19-11e9-83ea-ac1a36ecde24.png)
",0,1,[]
810,280061687,224,92974124,2019-05-17 23:57:08,2019-05-17 23:58:56,closed,Fix JOSS Figure Issues,"I have no idea why but the only having one figure, added at the end of the text makes the image render at the top of the page.

I realized this after looking at some other JOSS submissions that had a figure at the top of one of their pages.",0,2,[]
811,280049561,223,92974124,2019-05-17 22:27:09,2019-05-17 23:08:00,closed,JOSS Paper updates,Address #221 and minor edits,1,3,[]
812,280047807,222,92974124,2019-05-17 22:16:25,2019-05-17 22:24:39,closed,Fix typos and links in the JOSS paper,"The links are made to be visible in the PDF so that they are printer friendly and can be copy-pasted.
Removed the link to examples in the VTK wiki. It's not crucial for the paper and not very future proof.

openjournals/joss-reviews#1450",0,1,[]
813,279759917,220,92974124,2019-05-17 05:55:06,2019-05-17 07:12:51,closed,Mention yt and Mayavi in the JOSS paper,"Response to https://github.com/openjournals/joss-reviews/issues/1450#issuecomment-493243818

@akaszynski, can you approve these changes or suggest edits to make sure we are properly mentioning these other projects",1,1,[]
814,279646662,218,92974124,2019-05-16 19:52:32,2019-05-18 01:37:09,closed,Add box oreintation axes widget,"This adds a new box orientation widget.

Inspired by posts in https://discourse.vtk.org/t/colors-of-vtkannotatedcubeactor-faces-with-vtkorientationmarkerwidget/934/

Note we need to address #217 in order to properly color the box faces

```py
import pyvista as pv
from pyvista import examples
pv.set_plot_theme('doc')

mesh = examples.download_st_helens().warp_by_scalar()

p = pv.Plotter(notebook=0)
p.add_mesh(mesh)
p.add_axes(box=True)
p.show()
```

<img width=""580"" alt=""Screen Shot 2019-05-16 at 1 49 50 PM"" src=""https://user-images.githubusercontent.com/22067021/57882751-b1739600-77e1-11e9-83db-4cf9f30603c8.png"">",2,2,['enhancement']
815,279475173,216,92974124,2019-05-16 12:04:28,2019-05-18 00:12:39,closed,Fix plot texture example,"### What does this implement/fix?

Resolve pyvista/pyvista-support#4 to fix example on repeating textures

### Additional information

Maybe there is a better solution but at least we have something to start with.",6,5,['bug-fix']
816,277995501,212,92974124,2019-05-11 17:02:45,2019-05-11 17:06:15,closed,vista → PyVista,per #208 ,0,5,[]
817,276871275,211,92974124,2019-05-08 06:36:10,2019-05-08 07:12:07,closed,Rename vtki → vista,Implement all the necessary changes for renaming vtki → vista,1,10,[]
818,276013106,207,92974124,2019-05-05 17:36:38,2019-05-07 18:12:32,closed,Add field data arrays,"### Description

VTK objects are affiliated with three types of data: point data, cell data, and field data. Only the former two are currently implemented in vtki, which makes it such that there is no straightforward way of embedding arrays and similar that one might want affiliated with the object in question. See https://vtk.org/Wiki/VTK/Tutorials/DataStorage for more info.

(originally posted in #206)

### This PR

* adds functionality from VTK that is not currently accessible in vtki
* enables storing of arrays of arbitrary length in VTK objects

### Note

* I believe the safety check of ensuring that the input array is of length mesh.n_points of mesh.n_cells when setting array data is good to have, as field data should be reserved for very particular kinds of additional data. The way in which I've implemented adding a field_array is therefore through the use of vtki.Common.add_field_array. Other functionality is mimicked after how cell/point data is handled.
* #187 and #203 mention the need for storing non-traditional kinds of data in vtki objects. This feature still requires arrays of dimensionality > 0 to have individual elements of the same type (and if applicable, length).
* field arrays can never be set as the active scalar array
",2,5,"['enhancement', 'proposed-change']"
819,275777589,206,92974124,2019-05-03 16:40:03,2019-05-03 21:55:27,closed,Added field data feature,"### Description
VTK objects are affiliated with three types of data: point data, cell data, and field data. Only the former two are currently implemented in vtki, which makes it such that there is no straightforward way of embedding arrays and similar that one might want affiliated with the object in question. See https://vtk.org/Wiki/VTK/Tutorials/DataStorage for more info.

### This PR
* adds functionality from VTK that is not currently accessible in vtki
* enables storing of arrays of arbitrary length in VTK objects

### Note
* I believe the safety check of ensuring that the input array is of length mesh.n_points of mesh.n_cells when setting array data is good to have, as field data should be reserved for very particular kinds of additional data. The way in which I've implemented adding a field_array is therefore through the use of vtki.Common.add_field_array. Other functionality is mimicked after how cell/point data is handled. 
* #187 and #203 mention the need for storing non-traditional kinds of data in vtki objects. This feature still requires arrays of dimensionality > 0 to have individual elements of the same type (and if applicable, length).
* field arrays can never be set as the active scalar array",4,3,['enhancement']
820,275644561,205,92974124,2019-05-03 09:22:17,2019-05-03 09:41:00,closed,Added cell extraction from point indices,"Adds cell extraction from point indices

```python
import vtki
import vtk
import numpy as np

def voxelize(mesh, density):
    x_min, x_max, y_min, y_max, z_min, z_max = mesh.bounds
    x = np.arange(x_min, x_max, density)
    y = np.arange(y_min, y_max, density)
    z = np.arange(z_min, z_max, density)
    x, y, z = np.meshgrid(x, y, z)

    # Create unstructured grid from the structured grid
    grid = vtki.StructuredGrid(x, y, z)
    ugrid = vtki.UnstructuredGrid(grid)

    # get part of the mesh within the mesh
    selection = ugrid.select_enclosed_points(mesh, tolerance=0.0)
    mask = selection.point_arrays['SelectedPoints'].view(np.bool)

    # extract cells from point indices
    return ugrid.extract_selection_points(mask)


def text_3d(string, depth=0.5):
    """""" Create 3D text """"""
    vec_text = vtk.vtkVectorText()
    vec_text.SetText(string)

    extrude = vtk.vtkLinearExtrusionFilter()
    extrude.SetInputConnection(vec_text.GetOutputPort())
    extrude.SetExtrusionTypeToNormalExtrusion();
    extrude.SetVector(0, 0, 1 )
    extrude.SetScaleFactor(depth)

    tri_filter = vtk.vtkTriangleFilter()
    tri_filter.SetInputConnection(extrude.GetOutputPort())
    tri_filter.Update()
    return vtki.wrap(tri_filter.GetOutput())
```

Demoing cell extraction from point indices:
```python
grid = voxelize(text_3d('vtki'), 0.05)
grid.plot(color='w', show_edges=True)
```
![Visualization Toolkit - OpenGL_054](https://user-images.githubusercontent.com/11981631/57129075-ac502900-6d95-11e9-9a6d-8954ed0048e5.png)

",0,2,['enhancement']
821,275124179,200,92974124,2019-05-01 19:08:38,2019-05-01 22:26:12,closed,Add support for string scalar arrays and beter point labelling,"String data arrays are now supported for point and cell data!!

## Changes

- Conversion between `vtkStringArray` and a numpy array of `np.dtype('|S')` is now supported
- When adding a scalar array, the array is cast to numpy array if not already one. This allows users to pass lists and pandas series.
- A new `vtki.convert_array` function is implemented to handle nuances of converting between numpy and VTK arrays - *make sure to use this when converting data arrays*, spatial reference arrays like points, cells, etc do not need to use this converter.
- This also makes the point labeling function a bit better

Note that this is related to #64 

## Examples

Take a look at the examples added for this - here's one:

```py
import vtki
import numpy as np

# Make some random points
poly = vtki.PolyData(np.random.rand(10, 3))

# Add String array
poly['My Labels'] = ['Label {}'.format(i) for i in range(poly.n_points)]

# Plot and label
plotter = vtki.Plotter()
plotter.add_point_labels(poly, 'My Labels', point_size=20, font_size=36)
plotter.show()
```

![sphx_glr_plot-labels_001](https://user-images.githubusercontent.com/22067021/57042781-e77e1b00-6c22-11e9-8696-2b49d08cf0ce.png)


## Future Work

We might want to add a way to map unique strings to a categorized colormap. This is doable in ParaView and likely wouldn't be too difficult to implement in `vtki`. In the meantime, I added a change that will throw an error if a user tries to plot string data on a mesh.

Also, the string array converter is terribly inefficient - this will need to be optimized down the road.",1,3,['enhancement']
822,273946807,199,92974124,2019-04-26 15:42:49,2019-04-28 19:19:12,closed,streamlines filter,"Resolve #198 

This adds a `.streamlines()` filter that will integrate a vector field to generate streamlines.

### Todo:

- [x] Document the filter
- [x] Add parameter descriptions

@JiaweiZhuang: would you look over these changes and provide feedback?

### Example A:

```py
import vtki
from vtki import examples
mesh = examples.download_carotid()

streamlines = mesh.streamlines(max_time=100.0,
                           initial_step_length=2., terminal_speed=0.1,
                           n_points=25, source_radius=2.0,
                           source_center=(133.1, 116.3, 5.0) )

p = vtki.Plotter(notebook=1)
p.add_mesh(mesh.outline(), color='k')
p.add_mesh(streamlines.tube(radius=0.15))
p.add_mesh(mesh.contour([160]).wireframe(),
           color='grey', opacity=0.25)
p.camera_position = [(182., 177., 50),
                     (139, 105, 19),
                     (-0.2, -0.2, 1)]
p.show()
```
![sphx_glr_streamlines_001](https://user-images.githubusercontent.com/22067021/56819483-0cc7ef00-6807-11e9-97e1-cca9454e59a9.png)


### Example B:

```py
import vtki
from vtki import examples

mesh = examples.download_blood_vessels().cell_data_to_point_data()
mesh.set_active_scalar('velocity')

streamlines, src = mesh.streamlines(return_source=True, source_radius=10,
                           source_center=(92.46, 74.37, 135.5) ,)

boundary = mesh.decimate_boundary()

p = vtki.Plotter(notebook=1)
p.add_mesh(streamlines.tube(radius=0.2), ligthing=False)
p.add_mesh(src)
p.add_mesh(boundary, color='grey', opacity=0.25)
p.camera_position = [(10, 9.5, -43),
                     (87.0, 73.5, 123.0),
                     (-0.5, -0.7, 0.5)]
p.show()
```

![sphx_glr_streamlines_002](https://user-images.githubusercontent.com/22067021/56819661-6af4d200-6807-11e9-8ef5-4428d26a9fcb.png)",5,3,"['enhancement', 'example']"
823,272915202,195,92974124,2019-04-23 22:31:05,2019-04-24 02:38:33,closed,Example data galore!,"This adds a lot more example data download functions!

Down the road, I'd like to ""convert"" all the examples in https://lorensen.github.io/VTKExamples/ to `vtki` code in our examples gallery to show how much simpler `vtki` makes using VTK. This PR adds download functions for a majority of the data used in those examples.",0,1,['example']
824,272842409,194,92974124,2019-04-23 18:25:12,2019-04-25 05:03:42,closed,PolyData filters,"Extension of #193 - new issues were introduced and this resolves them

Expansion of @supersubscript's work

These changes will need to be squashed",1,14,"['enhancement', 'proposed-change']"
825,272790744,193,92974124,2019-04-23 15:49:43,2019-04-23 18:25:40,closed,Added PolyData.decimate_pro functionality and updated inplace arguments in pointset.py,"Not sure why my earlier commits aren't synced properly...

Hope this doesn't cause any major issues. ",3,10,[]
826,272601154,190,92974124,2019-04-23 06:40:06,2019-04-23 19:35:23,closed,do not call to renderer after pressing close button,"Resolve #186 

Resolve https://github.com/vtkiorg/vtki/pull/150#discussion_r277471399

Duplicate of #136 because I (Bane) made a mistake in #150

This also updates tests for notebook plotting",2,4,['bug-fix']
827,272430659,188,92974124,2019-04-22 17:00:49,2019-04-22 17:20:40,closed,`QMainWindow` defined twice,"Just a small thing I noticed randomly looking through files - `QMainWindow` is dealt with in the try-except statement, so no need to define it before that.",2,1,[]
828,272136596,182,92974124,2019-04-20 06:57:30,2019-04-20 07:14:01,closed,[Travis]: Update build matrix,Take a look at Travis - tests are split up into several jobs on each supported version of Python,7,18,['testing']
829,272067102,181,92974124,2019-04-19 18:50:50,2019-04-19 22:25:46,closed,Use gl-ci-helpers on Travis,"Use the new gl-ci-helpers repo on Travis builds

This makes sure we are consistently setting up CIs to run `vtki`",1,4,"['testing', 'headless-display']"
830,271878969,179,92974124,2019-04-19 01:05:28,2019-04-19 02:13:34,closed,Fix figure formatting for the JOSS paper,"Captions should be in the `[]`, ie `![caption here](figure.png)`.

openjournals/joss-reviews#1382",1,1,[]
831,271867966,178,92974124,2019-04-18 23:38:52,2019-04-19 00:15:46,closed,Add docs on remote servers with port-forwarding,Addresses https://github.com/vtkiorg/vtki/issues/177,4,1,[]
832,271830363,176,92974124,2019-04-18 20:46:38,2019-04-18 23:43:36,closed,Windows Testing on AppVeyor,"This implements full testing of `vtki` for Windows on AppVeyor

Also, huge thanks to @larsoner for helping get the CI scripts working!

Related to:

- https://github.com/vtkiorg/gl-ci-helpers
- #31 
- #88 
- https://github.com/mne-tools/mne-python/pull/6153

Notes:
- This disabled tests for Python 2.7 on Travis
- Qt tests are still not collecting on Windows",2,23,"['testing', 'headless-display']"
833,271784656,174,92974124,2019-04-18 18:07:50,2019-04-18 18:23:17,closed,BUG: Escape char on re,Fixes un-escaped char.,5,1,[]
834,271704551,173,92974124,2019-04-18 14:10:37,2019-04-19 07:52:59,closed,Fix set_position bug,"Thanks, @GuillaumeFavelier for pointing this out!

These changes fix a bug where calling `Plotter.set_position` would be overridden by the `Plotter.show()` call's preference for a default isometric view.

Test it out with:

```py
import vtki
plt = vtki.Plotter(notebook=1)
plt.add_mesh(vtki.Cone())
plt.set_position([0, 0, 5], reset=True)
plt.show(use_panel=False)
print(plt.camera_position)
```
![download](https://user-images.githubusercontent.com/22067021/56366637-d0661480-61b0-11e9-9bb2-1a2ab295e512.png)
```txt
[(0.0, 0.0, 3.2036135254332487), (0.0, 0.0, 0.0), (0.0, 1.0, 0.0)]
```

## Nuanced Behavior

Note that this has a pretty different result from using the `camera_position` setter which calls `Plotter.view_vector`

```py
import vtki
plt = vtki.Plotter(notebook=1)
plt.add_mesh(vtki.Cone())
plt.camera_position = [0,0,5]
plt.show(use_panel=False)
print(plt.camera_position)
```
![download](https://user-images.githubusercontent.com/22067021/56366737-099e8480-61b1-11e9-8d6f-e4c150a0e3e1.png)

```txt
[(0.0, 0.0, 3.2036135254332487), (0.0, 0.0, 0.0), (-1.0, 0.0, 0.0)]
```


Thoughts on the differences in behavior here, @GuillaumeFavelier and @akaszynski?",3,1,['bug-fix']
835,271032350,172,92974124,2019-04-16 18:53:02,2019-04-16 20:49:08,closed,Resample with dataset,"Note this is an expansion of @ascillitoe's #171 

Add a filter to resample some other dataset onto a mesh's points... naming might be tricky here. Note that this will be implemented under `vtki.DataSetFilters` as a filtering method so you could call the function and pass it another mesh that you like to probe.

I like @ascillitoe's naming suggestion of `.interpolate` but I want to make sure this makes sense - @akaszynski, thoughts?

Usage:

```py
import vtki
from vtki import examples
import numpy as np

# Querry a grids points onto a sphere
mesh = vtki.Sphere(center=(4.5,4.5,4.5), radius=4.5)
data_to_probe = examples.load_uniform()

# Plot the two datasets
p = vtki.Plotter()
p.add_mesh(mesh, color=True)
p.add_mesh(data_to_probe, opacity=0.5)
p.show()
```

![download](https://user-images.githubusercontent.com/22067021/56236169-33876800-6046-11e9-9fd2-c7d88383e126.png)


```py
# Run the algorithm
result = mesh.sample(data_to_probe)

# Plot result
result.plot(scalars='Spatial Point Data')
```

![download](https://user-images.githubusercontent.com/22067021/56236173-35512b80-6046-11e9-9975-54f66f0c960f.png)

",9,5,"['enhancement', 'discussion']"
836,271021729,171,92974124,2019-04-16 18:20:10,2019-04-16 18:20:21,closed,Added interpolation with vtkResampleWithDataSet,"Contributions from @ascillitoe

Thanks for implementing this, Ashley! I was actually about to add this feature for a colleague and was happy to see you added it! I'm going to merge this into a new branch within the `vtki` repo so that I can make some changes",0,1,[]
837,270944746,170,92974124,2019-04-16 14:48:56,2019-04-16 15:33:51,closed,Feature: Calculate geodesics on PolyData (#167),"Contributions from @supersubscript in #167 

* Added functionality for calculating geodesics on polydata

* removed polydata smoothing

* Added tests for geodesics on polydata",2,2,['enhancement']
838,270927499,167,92974124,2019-04-16 14:10:18,2019-04-16 14:47:13,closed,Feature: Calculate geodesics on PolyData,Just added a simple code tidbit to compute geodesics using the Dijkstra algorithm on PolyData surfaces. ,3,3,[]
839,268544591,161,92974124,2019-04-09 00:41:12,2019-04-11 23:00:57,closed,Add array setter/getter to vtki.Common,"This implements `__getitem__`/`__setitem__` on `vtki.Common`

A lot of new users are getting confused by the `.point_arrays` and `.cell_arrays` dictionaries and having trouble keeping track of where their data resides. Particularly, this can get confusing if one uses the `.cell_data_to_point_data` or `.point_data_to_cell_data` filters.

I propose we implement a `__getitem__` method on the `vtki.Common` class that will search the arrays in both `.point_arrays` and `.cell_arrays` for what the user asks for (note that this is already implemented in `.get_scalar`). This also comes with a `__setitem__` method that uses the length of the array to decide on where it belongs.

Overall, this makes usage of scalars in `vtki` simpler and more intuitive for new users.


```py
from vtki import examples
import numpy as np

data = examples.load_uniform()

# Assign arrays
data['foo'] = np.random.random(data.n_cells)
data['foo'] = np.random.random(data.n_points)
```
```py
>>> # Fetch arrays
>>> len(data['foo']) # defaults to cell preference
729
>>> len(data['foo', 'points'])
1000
>>> len(data['foo', 'cells'])
729
```",4,3,['proposed-change']
840,268070988,156,92974124,2019-04-07 00:00:18,2019-04-07 15:35:09,closed,Add padding option for axes bounds labels,"Sometimes the cube axes actor's grid lines can overlap with a mesh and give a false representation of the mesh's edges. For example, note the far slice and how the grid axes makes it appear as though the mesh is more finely discretized than it actually is:

```py
from vtki import examples
import vtki
vtki.set_plot_theme('document')

m = examples.download_tensors()

p = vtki.Plotter()
p.add_mesh(m.slice_along_axis(3), show_edges=True, lighting=False)
p.show_grid()
p.show()
```

![download](https://user-images.githubusercontent.com/22067021/55676609-b580cf80-5895-11e9-9cd6-b399cd9b6022.png)


These changes make it possible to offset the cube axes actor from the data scene's extent by a percentage to help avoid this:

```py
p = vtki.Plotter()
p.add_mesh(m.slice_along_axis(3), show_edges=True, lighting=False)
p.show_grid(padding=0.02)
p.show()
```

![download](https://user-images.githubusercontent.com/22067021/55676614-c16c9180-5895-11e9-8330-c95c754bdddd.png)
",0,1,['enhancement']
841,267621275,154,92974124,2019-04-04 21:37:18,2019-04-05 17:34:51,closed,Send VTK messages to logging module,Resolve #151 ,1,2,[]
842,267274269,153,92974124,2019-04-04 02:34:44,2019-04-04 20:14:39,closed,Set default error output file in new user data direcotry folder,Resolve #151 using the new user data directory from #152 ,1,1,[]
843,267271946,152,92974124,2019-04-04 02:19:35,2019-04-04 02:29:41,closed,Add user data directory,"Resolve #142 via https://github.com/vtkiorg/vtki/issues/142#issuecomment-475694139

This makes a `vtki` user data directory where examples can be downloaded and saved so that they do not have to be repeatedly downloaded every time `download_*` is called. There is also an `examples.delete_downloads()` function included to help users delete/refresh the example files.",1,1,['enhancement']
844,267094880,150,92974124,2019-04-03 15:16:53,2019-04-03 21:18:14,closed,Example Gallery,"Resolve #134

These changes utilize `sphinx-gallery` to create a gallery page in the docs for all the examples:

![ezgif com-video-to-gif-2](https://user-images.githubusercontent.com/22067021/55490567-33707c80-55f1-11e9-8700-887d091e58e6.gif)


This allows users to easily download the examples as Jupyter notebooks to get up and running with `vtki`:

<img width=""920"" alt=""Screen Shot 2019-04-03 at 9 13 29 AM"" src=""https://user-images.githubusercontent.com/22067021/55490279-c230c980-55f0-11e9-942f-4e8cee3a0eaa.png"">

See notes in https://github.com/sphinx-gallery/sphinx-gallery/issues/469 on how this was implemented

### Todo:

- [x] Redeploy documentation via Travis - ReadtheDocs can't handle setting up all the dependencies to actually run `vtki` so we'll have to deploy the documentation from Travis from now on
- [x] Remove the annoying ""Figure X"" labels
- [x] Fix `make doctest`",5,18,['documentation']
845,266373348,145,92974124,2019-04-01 19:33:51,2019-04-01 20:49:09,closed,Add ExodusII reader,"Addresses #143 and pinging @daniellivingston: does this look like it addresses your needs?

```py
import vtki

filename = 'mesh_fs8.exo'

dataset = vtki.read(filename)
# or
dataset = vtki.read_exodus(filename, enabled_sidesets=[0,1,3]) # Enable by index

dataset.plot(mulit_colors=True)
```

![download](https://user-images.githubusercontent.com/22067021/55354241-76601200-5482-11e9-9885-821ae9bf6ea7.png)
",1,2,"['enhancement', 'feature-request', 'file-formats']"
846,266064912,144,92974124,2019-04-01 01:35:27,2019-04-08 00:21:40,closed,Interactive notebook rendering,"***CURRENTLY EXPERIMENTAL***

These changes utilize new features (https://github.com/pyviz/panel/pull/312) from [pyviz/panel](https://github.com/pyviz/panel) to create interactive renderings directly in a Jupyter notebook

Note that these features are only possible after these https://github.com/pyviz/panel/pull/349 changes to `panel`

![ezgif com-video-to-gif](https://user-images.githubusercontent.com/22067021/55298605-da83c700-53eb-11e9-9995-0d8d29c4f375.gif)",2,6,"['enhancement', 'IPython/Jupyter']"
847,263672767,141,92974124,2019-03-22 16:05:58,2019-03-31 07:02:42,closed,Refactor add_bounds_axes -> show_bounds,"Refactor `add_bounds_axes` -> `show_bounds`. This naming convention is more consistent with the rest of the plotting code (e.g. `show_grid` and `show_axes`)

This maintains backward compatibility and throws a logging warning for `add_bounds_axes`",1,2,['proposed-change']
848,263047657,136,92974124,2019-03-20 21:38:25,2019-03-20 21:51:20,closed,Fixed windows close bug,"Ended up being a simple fix, but it was tough to find.  The screenshot needs to be generated before the interactive renderer starts.",1,1,['bug-fix']
849,262799066,133,92974124,2019-03-20 10:15:05,2019-03-21 09:48:37,closed,now using vtklightkit,"Lighting is better, but it's still not tracking the camera all the time.  It's possible to get the camera in a position where the lighting stays locked relative to the camera, but at other times it still moves around.  It's strange behavior and only occurs when the ""y-axis"" is perpendicular to the view direction.  Basically, if you're rotating around the y-axis, you get the expected lighting behavior.  Otherwise the lighting stays locked with the scene.

@banesullivan: Let me know if you see any reason why this isn't working.  According to the VTK documentation, you have to disable light following in the interactive renderer and enable it in the renderer.  I've done that:

```python
self.iren.LightFollowCameraOff()
self.renderer.LightFollowCameraOn()
```

![axis_rot](https://user-images.githubusercontent.com/11981631/54676559-3a7f9100-4b01-11e9-8ef0-153a3945a394.gif)
",5,2,"['enhancement', 'bug-fix']"
850,262318695,131,92974124,2019-03-19 05:47:47,2019-03-19 06:07:18,closed,Fix overwrite segfault issues,"Anytime I used the `vtki.PolyData.clean` filter or the `overwrite` method, I get a segfault. 

Prior to these changes, the following code would segfault for me - now it works:

```py
from vtki import examples
mesh = examples.download_lidar()
mesh.clean(merge_tol=1)
mesh.plot()
```

@akaszynski: do these changes look okay to you?",2,1,['bug-fix']
851,262298362,129,92974124,2019-03-19 03:29:52,2019-03-19 03:41:42,closed,Autogenerate All Doc Figures,"This autogenerates all figures in the documentation - from now on, any example figures must be produced by the code shown in the docs.

This also updates some of the default plotting parameters for the `'document'` theme",1,2,['documentation']
852,262270687,128,92974124,2019-03-19 00:22:14,2019-03-19 00:36:50,closed, Add eye dome lighting (EDL),"# Plot Eye Dome Lighting

This is per #124 


Eye-Dome Lighting (EDL) is a non-photorealistic, image-based shading technique
designed to improve depth perception in scientific visualization images.

To learn more, please see [this blog post](https://blog.kitware.com/eye-dome-lighting-a-non-photorealistic-shading-technique/).


When plotting a simple point cloud, it can be difficult to perceive depth.
Take this Lidar point cloud for example:

```py
import vtki
from vtki import examples

# Load a sample point cloud.
point_cloud = examples.download_lidar()
```

And now plot this point cloud as-is:

```py
# Plot a typical point cloud with no EDL
p = vtki.Plotter()
p.add_mesh(point_cloud, color='w', point_size=5)
p.show()
```

![point-cloud-no-edl](https://user-images.githubusercontent.com/22067021/54571689-743d8400-49a9-11e9-8bbd-4debcda482c2.png)



We can improve the depth mapping by enabling eye dome lighting on the renderer.
Reference :func:`vtki.Renderer.eye_dome_lighting_on`.

```py
# Plot with EDL
p = vtki.Plotter()
p.add_mesh(point_cloud, color='w', point_size=5)
p.eye_dome_lighting_on()
p.show()
```


![point-cloud-edl](https://user-images.githubusercontent.com/22067021/54571694-77387480-49a9-11e9-8d7f-507da46514fb.png)



The eye dome lighting mode can also handle plotting scalar arrays:

```py
# Plot with EDL and scalar data
p = vtki.Plotter()
p.add_mesh(point_cloud, scalars='Elevation', point_size=5)
p.eye_dome_lighting_on()
p.show()
```

![point-cloud-edl-scalars](https://user-images.githubusercontent.com/22067021/54571698-7a336500-49a9-11e9-945a-10f804fa154d.png)
",0,4,['enhancement']
853,261817000,126,92974124,2019-03-17 04:02:40,2019-03-17 04:16:41,closed,Custom colormaps and opacity transfer functions,"Adds the ability to use custom colormaps (#122) and the option for different opacity transfer functions (#125). Options include:

- `'linear'`: linearly vary (increase) opacity across the plotted scalar range from low to high
- `'linear_r'`: linearly vary (increase) opacity across the plotted scalar range from high to low
- `'geom'`: on a log scale, vary (increase) opacity across the plotted scalar range from low to high
- `'geom_r'`: on a log scale, vary (increase) opacity across the plotted scalar range from high to low

**Example:**

```py
from vtki import examples
mesh = examples.load_uniform()
mesh.plot(opacity='linear')
```

![download](https://user-images.githubusercontent.com/22067021/54485012-2a349100-4837-11e9-8c41-46a523c08541.png)
",0,2,['enhancement']
854,259286034,120,92974124,2019-03-07 22:00:17,2019-03-07 23:06:00,closed,Fix delaunay spelling mistake per #118,See #118 ,1,1,"['proposed-change', 'bug-fix']"
855,258181359,117,92974124,2019-03-05 04:39:02,2019-03-05 05:40:30,closed,Create Isocontour IPython tool,This creates a new IPython tool for iso-value contouring. I've implemented this tool to use only a single iso value that a user can control via a slider bar.,1,5,['enhancement']
856,257776104,115,92974124,2019-03-03 23:09:12,2019-03-04 00:02:53,closed,Add camera reseters for common view planes,"Addresses need for convenience methods to orient camera to view certain planes (XY, XZ, YZ) in #111 

```py
import vtki
from vtki import examples

data = examples.load_airplane()

p = vtki.Plotter()
p.add_mesh(data)
p.view_xz()
p.show()
```

![download](https://user-images.githubusercontent.com/22067021/53703365-72cb6380-3dce-11e9-88be-753ee579386c.png)


Also adds ability to lock the camera view for a renderer so the user cannot change it (see #111):

```py
p.disable()

p.enable()
```",1,4,['enhancement']
857,257773547,114,92974124,2019-03-03 22:32:15,2019-03-04 00:39:24,closed,Support plotting multi-component arrays,"This adds support for plotting multi-component arrays. A user can now plot RGB values contained in a data array or by default the norm of an array:

```py
import vtki
from vtki import examples

# Read ImageData with 3 component RGB array
data = vtki.read(examples.mapfile)

data.plot(scalars='JPEGImage')
```

![download](https://user-images.githubusercontent.com/22067021/53702945-79a3a780-3dc9-11e9-87dc-522db0dcfe6d.png)


```py
data.plot(scalars='JPEGImage', rgb=True)
```

![download](https://user-images.githubusercontent.com/22067021/53702948-81fbe280-3dc9-11e9-9233-a8679cfec4e4.png)

",1,4,"['enhancement', 'proposed-change', 'example']"
858,257767804,113,92974124,2019-03-03 21:11:15,2019-03-04 15:31:50,closed,Add abstract class protections,"This adds checks to the abstract classes in `vtki` to prevent users from instantiating helper classes like `vtki.Common`. I think I did this correctly but @akaszynski, I'd appreciate your approval.

```py
>>> import vtki
>>> vtki.Common()
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/Users/bane/Documents/OpenGeoVis/Software/vtki/vtki/common.py"", line 31, in __new__
    raise TypeError(""vtki.Common is an abstract class and may not be instantiated."")
TypeError: vtki.Common is an abstract class and may not be instantiated.
```",2,6,"['enhancement', 'proposed-change']"
859,257727055,112,92974124,2019-03-03 10:38:15,2019-03-05 04:23:57,closed,Example downloads & reader/writer updates,"This adds the ability to download a few examples from the VTK examples repository.

It also cleans up some to the experimental universal readers code.

### Todo

- [ ] all readers need to be tested
- [x] example downloads need to be tested?
- [x] should examples download to temp folder or to working directory?
- [ ] a second dictionary of `attrs` and arguments needs to be created for readers that do not work out of the box
- [x] Fix issue with windows `urllib` bug

### Example

```py
import vtki
from vtki import examples

head = examples.download_head()

tool = vtki.OrthogonalSlicer(head)

vol = head.contour([15])
tool.plotter.add_mesh(vol, color='yellow', name='skin', opacity=0.5)

```

![foo](https://user-images.githubusercontent.com/22067021/53694019-c2297980-3d65-11e9-9c18-7f401f56c1c0.png)


### Note

Including tests for the downloads might not be a good idea... it slows down the testing suite significantly.",4,14,"['enhancement', 'example']"
860,257666044,110,92974124,2019-03-02 13:44:07,2019-03-02 23:10:25,closed,Updated doc param default values for compute_normals,,2,1,['documentation']
861,257255162,108,92974124,2019-02-28 22:40:42,2019-03-01 00:05:40,closed,Add new geo-focused sample dataset,This adds a new sample dataset that with a geostatistical training image of fluvial channels. It makes a great example for the volumetric analysis page in the docs,2,5,[]
862,257219148,107,92974124,2019-02-28 20:36:17,2019-03-02 03:39:01,closed,Multi Renderer Plotting,"``vtki`` can now plot multiple renderers in the same render window.  Each renderer is independent from each other and the camera can be controlled individually.  This involved moving lots of code out of ``plotter`` into ``renderer``, which is actually a good thing since ``plotter.py`` was getting quite long.

@banesullivan, I'd like you to test this on your end as it's a big change.  Nothing should change if your plotter shape remains as default ``shape=(1,1)``, but I'd like you to verify it anyway.

```python
import vtki
from vtki import examples

plotter = vtki.Plotter(shape=(2, 2))

loc = (0, 0)
plotter.add_text('Render Window 0', loc=loc, font_size=30)
plotter.add_mesh(examples.load_globe(), loc=loc)
# plotter.add_axes()

# plotter.add_axes()
# plotter.set_background([1, 1, 1], loc)

loc = (0, 1)
plotter.add_text('Render Window 1', loc=loc, font_size=30)
plotter.add_mesh(vtki.Cube(), loc=loc, show_edges=True)
# plotter.add_axes()

loc = (1, 0)
plotter.add_text('Render Window 2', loc=loc, font_size=30)
sphere = vtki.Sphere()
plotter.add_mesh(sphere, loc=loc, scalars=sphere.points[:, 2])
plotter.add_scalar_bar('Z', vertical=True)
# plotter.add_axes()
# plotter.add_axes(interactive=True)


loc = (1, 1)
plotter.add_text('Render Window 3', loc=loc, font_size=30)
plotter.add_mesh(vtki.Cone(), color='g', loc=loc, show_edges=True)
plotter.add_bounds_axes(all_edges=True)
# plotter.add_mesh(vtki.Cube(), color='g', loc=loc, show_edges=True)
plotter.add_axes(interactive=True)
plotter.plot()
```
![visualization toolkit - opengl_042](https://user-images.githubusercontent.com/11981631/53596606-61047900-3ba0-11e9-9799-f9f557a34e20.png)

",13,21,"['enhancement', 'proposed-change', 'example']"
863,256947013,104,92974124,2019-02-28 06:25:45,2019-02-28 07:16:17,closed,Add new split_bodies filter,"Adds the ability to split all the different connected volumes/bodies in a dataset. This example is in the docs:

```py
import numpy as np
import vtki
from vtki import examples
vtki.set_plot_theme('document')

# Load a simple example mesh
dataset = examples.load_uniform()
dataset.set_active_scalar('Spatial Cell Data')
threshed = dataset.threshold_percent([0.15, 0.50], invert=True)

bodies = threshed.split_bodies()

for i, body in enumerate(bodies):
    print('Body {} volume: {:.3f}'.format(i, body.volume))

bodies.plot(show_bounds=True, multi_colors=True)
```

```text
Body 0 volume: 518.000
Body 1 volume: 35.000
```

![split-bodies](https://user-images.githubusercontent.com/22067021/53545499-e6c3ee00-3ae6-11e9-8f1c-ad3e2fc7a34a.png)",1,1,['enhancement']
864,256814862,103,92974124,2019-02-27 19:45:47,2019-02-27 20:54:01,closed,Add a Common volume calculation property,"Now all meshes have a `.volume` property leveraging the `.compute_cell_sizes()` filter. Note the `UnstructuredGrid` and `PolyData` objects still have their own implementation of `.volume` using `vtkMassProperties` filter

```python
import vtki
import numpy as np

grid = vtki.UniformGrid((10,10,10))
volume = float(np.prod(np.array(grid.dimensions) - 1))
assert np.allclose(grid.volume, volume)
```


Also, be sure to check out the new quick example for volume calculation of a two body threshold",1,4,['enhancement']
865,256473670,102,92974124,2019-02-26 22:38:27,2019-02-26 23:05:07,closed,Update links to vtkiorg,,0,3,[]
866,255803834,101,92974124,2019-02-25 08:54:25,2019-02-25 08:57:05,closed,Better testing of qt plotting,"Added additional tests for qt plotting, improved file dialogs, and added double spinboxes for setting axes scaling through ``PyQt``",0,9,[]
867,255728267,100,92974124,2019-02-25 00:46:41,2019-02-25 16:29:34,closed,Support all VTK readers,"This PR creates a way to support all VTK reader classes by mapping them to file extensions.

This creates a standard routine for reading any VTK supported file with just a few lines of code and without having to remember the proper VTK classes for performing those reads.

Find the dictionary mapping the extensions to the proper VTK reader classes in `readers.py`.

```python
import vtki
filename = 'path/to/my/file.ext'
data = vtki.read(filename)
```

Perhaps you need some flexibility with what the reader performs and need to call several setters/options on the reader - then simply pass a dictionary of function names and parameters to pass:

```python
import vtki
filename = 'path/to/my/file.ext'
data = vtki.read(filename, attrs={'DebugOn':None, 'SetScalarsName':'foo'})
```

**NOTES**: 

- Time-varying readers are not yet supported in this but could be implemented down the road
- These need to be double checked by people familiar with all the different formats
- The list of readers is not complete but creates a simple framework to add new ones by simply adding a key-value pair in the `READERS` dictionary.",3,7,"['enhancement', 'proposed-change', 'file-formats']"
868,255719380,99,92974124,2019-02-24 22:46:40,2019-02-24 22:51:46,closed,Code Quality  Improvements,Addressing issues raised by Codacy: https://app.codacy.com/project/banesullivan/vtki/dashboard,3,8,['enhancement']
869,253746618,94,92974124,2019-02-17 22:50:05,2019-02-17 22:56:07,closed,Fix Travis PyQt5 Testing,Force Travis to use `v5.11.3` of PyQt5 so that all the PyQt5 code will be automatically tested,1,3,['testing']
870,253743219,93,92974124,2019-02-17 21:58:32,2019-02-17 22:04:21,closed,Make `rng` more flexible.,"Currently, `vtki` fails if a numpy-array of two elements is provided to `rng`, with the error 
```
    723             # Set scalar range
--> 724             if not rng:
    725                 rng = [np.nanmin(scalars), np.nanmax(scalars)]
    726             elif isinstance(rng, float) or isinstance(rng, int):

ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
```

Changing `if not range` to `if range is None` solves that.",2,1,['bug-fix']
871,253114789,91,92974124,2019-02-14 15:28:17,2019-02-14 15:29:45,closed,Codecov,,0,10,['testing']
872,252785815,89,92974124,2019-02-13 17:38:38,2019-02-13 17:44:26,closed,Add shortcut-keys for Linux.,,4,1,['documentation']
873,252596491,88,92974124,2019-02-13 08:07:01,2019-02-13 08:07:31,closed,removed PyQt5.Qt import due to bluetooth bug,"@banesullivan,

Found out what was causing the appveyor build to fail:

```python
try:
    import PyQt5
    from PyQt5 import Qt  # <<-- loads bluetooth drivers
    from PyQt5.Qt import QMainWindow
    has_pyqt5 = True
except:
    has_pyqt5 = False
```

Turns out that importing ``Qt`` loads a ton of libraries, including bluetooth which isn't supported on the Windows Server.  Worst of all, being windows, a pop-up dialog shows up and hangs the collection so we can't tell where or why it happened.  I had to look back to old commits to see the commit that started killing appveyor.",1,1,['testing']
874,252558961,87,92974124,2019-02-13 04:35:08,2019-02-13 04:44:55,closed,Add glyphing filter and new arrows/glyph example,"The `Plotter.add_arrows` code was not sufficient for my needs so I added a new glyph filter.

```py
import vtki
import numpy as np

# Make a grid
x, y, z = np.meshgrid(np.linspace(-5, 5, 20),
                      np.linspace(-5, 5, 20),
                      np.linspace(-5, 5, 5))

grid = vtki.StructuredGrid(x, y, z)

vectors = np.sin(grid.points)**3


# Compute a direction for the vector field
grid.point_arrays['mag'] = np.linalg.norm(vectors, axis=1)
grid.point_arrays['vec'] = vectors

# plot using the plotting class
p = vtki.Plotter(notebook=False)
p.add_mesh(grid.glyph(orient='vec', scale='mag', factor=1))
p.show()
```

![vectorfield](https://user-images.githubusercontent.com/22067021/52687187-0c110380-2f0e-11e9-8b71-2fe06ee97743.png)
",0,2,"['enhancement', 'example']"
875,252452196,86,92974124,2019-02-12 20:02:23,2019-02-13 04:45:16,closed,Fixing scaling issues with cube axes actor,"This changes the scene scaling to actually scale the coordinate system not the points of all the actors. See [this discussion](https://discourse.vtk.org/t/scaling-a-rendering-scene/173/6) for more details.

Note that we still need a better solution for how the cube axes actor is displayed when the scene is scaled as now I force the `vtkCubeAxesActor` to use `SetUse2DMode(True)` if the scale is not the default `(1,1,1)`.",0,5,['enhancement']
876,252118134,84,92974124,2019-02-12 00:14:09,2019-02-13 04:45:50,closed,Update links to new website: http://www.vtki.org/,"Check out the new domain http://www.vtki.org/ where the documentation is hosted.

Note: I have also added email forwarding on that domain which we will need to set up for user support per the JOSS submission guidelines.

Currently, support@vtki.org forwards to my email. Perhaps we create an actual email account under the vtki.org domain that active maintainers can access?

-----
**EDIT:** moved to http://docs.vtki.org",2,1,['documentation']
877,252059634,80,92974124,2019-02-11 20:51:03,2019-02-12 19:40:24,closed,Add grid function to show axes grid,"I recently added functionality to highly control the bounds axes. 

This adds a method to plotter objects called `grid` that will display the grid behind the axes much like `matplolib`. This is simply a wrapped call to `add_bounds_axes` where the default parameters are edited.

Todo:

- [ ] Is it possible to show axes labels on ALL outer triads? The way it is shown below only shows closes outer triad. ParaView has this ability but I'm not sure how they implemented it...

**Example:**

```py
import vtki
from vtki import examples

vtki.set_plot_theme('doc')

data = examples.load_uniform()

tool = vtki.OrthogonalSlicer(data)

tool.plotter.add_mesh(data.threshold(200))

tool.plotter.grid()

```

![grid](https://user-images.githubusercontent.com/22067021/52592541-e39ce280-2e03-11e9-8f0c-bc8bbe6a10f8.png)
",9,8,"['enhancement', 'discussion']"
878,252015406,79,92974124,2019-02-11 18:20:30,2019-02-21 05:48:04,closed,Interactive scalar bars,"The scalar bar code needs to be updated to give users more control over where to place scalar bars and whether or not they should be present.

What should be the default behavior of the scalar bars?

- Should a scalar bar always be added when adding a mesh?
- Should it be interactive by default?


### Todo:

- [x] add scalar bar widgets for interactivity.
- [x] add an option to not display a scalar bar when adding a mesh with a scalar array.
- [x] ~make a better scheme for automatically placing new scalar bars (interactive and non-interactive)~ Maybe down the road. Use interactive scalar bars to place where desired for now
- [x] ~add a way for vertical scalar bars to have vertical text~ Requires a lot of effort... maybe down the road.",3,9,"['discussion', 'proposed-change']"
879,251766550,78,92974124,2019-02-10 21:16:18,2019-04-12 19:53:19,closed,JOSS Paper Submission,"This PR contains efforts to move `vtki` towards a ready state to submit to the Journal of Open Source Software (JOSS). 

Please see the [project board](https://github.com/akaszynski/vtki/projects/1) for status updates.",8,54,[]
880,251525816,77,92974124,2019-02-08 16:37:31,2019-02-08 16:44:19,closed,Documentation restructuring,Changes for #76 ,0,13,['documentation']
881,251004067,74,92974124,2019-02-07 06:16:19,2019-02-07 08:35:11,closed,Call Modified on data after using interfaced setters,"Call Modified when updating datasets. This enables data that has already been added to a Plotter to be updated without calling the `update_scalars` or `update_coordinates` routines. A user might want this if they have several datasets in one scene and they need to update parts of some of those datasets.

For example, the wave example can now be done as:

```py
import vtki
import numpy as np
from threading import Thread
import time

x = np.arange(-10, 10, 0.25)
y = np.arange(-10, 10, 0.25)
x, y = np.meshgrid(x, y)
r = np.sqrt(x**2 + y**2)
z = np.sin(r)

# Create and structured surface
grid = vtki.StructuredGrid(x, y, z)
grid.point_arrays['data'] = z.ravel()

# Create a plotter object and set the scalars to the Z height
p = vtki.BackgroundPlotter()
p.add_mesh(grid)

# Update Z through time
RUN = True
nframe = 25
tstep = 0.05

def update():
    while RUN:
        for phase in np.linspace(0, 2*np.pi, nframe + 1)[:nframe]:
            z = np.sin(r + phase)
            grid.points[:, -1] = z.ravel()
            grid.point_arrays['data'] = z.ravel()
            time.sleep(tstep)
    return None
        
update_thread = Thread(target=update)
update_thread.start()

```

```py
# And then when you're ready to stop it:
RUN = False
```",5,2,"['enhancement', 'discussion']"
882,250994821,73,92974124,2019-02-07 05:11:58,2019-02-07 08:30:22,closed,Update axes bounds,"Some updates to add more controls to the axis bounds. Enables a grid to be drawn, ticks in inside/outside/both, and ability to control the location of the grid. See the docs for `vtki.Plotter.add_bounds_axes` for more details.

```py
import vtki
from vtki import examples

data = examples.load_uniform()

tool = vtki.OrthogonalSlicer(data)

tool.plotter.add_bounds_axes(grid=True, location='outer', ticks='both')
```

![img](https://user-images.githubusercontent.com/22067021/52391698-d24a8380-2a5b-11e9-9b62-1da4cd8d123e.png)
",0,4,['enhancement']
883,250861245,72,92974124,2019-02-06 18:30:34,2019-02-06 19:03:10,closed,Add CellSize filter,"This provides a simple solution to #71 for @byba1990

### Example:

```py
from vtki import examples

data = examples.load_rectilinear()
foo = data.compute_cell_sizes()

foo.plot(scalars='Volume')

```

![download](https://user-images.githubusercontent.com/22067021/52364465-815a7100-2a02-11e9-8791-b51997430769.png)",1,2,['enhancement']
884,249489974,70,92974124,2019-02-01 05:17:14,2019-10-15 22:34:50,closed,🚧 Update interactive python tools to control display parameters,"This is currently a work in progress.

This adds IPython widgets that control all the display parameters for a mesh on an active `BackgroundPlotter`.

**Todo:**

- [ ] Make the widget layout more condensed
    - The current layout takes up way too much space
    - Maybe make these widgets optionally engaged
- [ ] Enable colormap choices
    - [ ] Fix issue where changing colormap does not update scalar bar
- [ ] Fix `flip_scalars` issue not updating scalar bar
- [ ] Rigorously test

**What this currently looks like:**

![ezgif com-video-to-gif](https://user-images.githubusercontent.com/22067021/52103967-843e0780-25a5-11e9-91f4-94fdbe65fb75.gif)
",2,14,"['help-wanted', 'proposed-change', 'IPython/Jupyter']"
885,249423356,69,92974124,2019-01-31 22:26:41,2019-01-31 22:50:41,closed,Use absolute filenames for IO,"Whenever using IO functions from the VTK library, pass absolute file names such that we can now pass paths that include the home directory (`'~/'`):
```python
dataset.save('~/Desktop/astroid.vtk')
```
which will expand and save to where it is expected.",1,1,"['enhancement', 'bug-fix']"
886,249361445,68,92974124,2019-01-31 18:58:54,2019-01-31 19:15:47,closed,Scaled plotter,"This adds a new IPython interface with sliders for scaling a plotting window. I added this because it was easier for me than adding text fields to specify the scale value under the Qt interface.

<img width=""1170"" alt=""screen shot 2019-01-31 at 11 58 24 am"" src=""https://user-images.githubusercontent.com/22067021/52078057-870e0d80-254f-11e9-9034-35bd1dd07ecc.png"">
",1,2,"['enhancement', 'IPython/Jupyter']"
887,249107157,67,92974124,2019-01-31 03:35:15,2019-01-31 06:40:16,closed,Add OBJ and MultiBlock readers. Support nested MultiBlock datasets.,"Some cleanup for the MultiBlock datasets and add MultiBlock file IO

Also add the OBJ PolyData reader",0,1,"['enhancement', 'file-formats']"
888,249055240,66,92974124,2019-01-30 22:40:52,2019-01-30 22:48:21,closed,Change default for show_edges to false.,"Can we do this, @akaszynski? I suppose you prefer the show_edges for your datasets but I'm realizing almost 9/10 times I plot something I need the edges to be off because the datasets are too big and the edges overwhelm the dataset:

![edges](https://user-images.githubusercontent.com/22067021/52017677-51144f00-24a5-11e9-8508-56e522b81e81.png)

vs.

![no-edges](https://user-images.githubusercontent.com/22067021/52017676-51144f00-24a5-11e9-873b-834f8be2d2d4.png)
",1,1,['proposed-change']
889,247978999,65,92974124,2019-01-27 20:30:53,2019-01-28 06:51:23,closed,Update where/how .render is called,"Note there was an issue with calls to `self.redner()` in the plotter code. This should be fixed now.

@akaszynski, can we push out `0.16.1` to patch this if all looks good to you?

And here is a version of the wave example that is interactive!

```py
import vtki
import numpy as np
from threading import Thread
import time

x = np.arange(-10, 10, 0.25)
y = np.arange(-10, 10, 0.25)
x, y = np.meshgrid(x, y)
r = np.sqrt(x**2 + y**2)
z = np.sin(r)

# Create and structured surface
grid = vtki.StructuredGrid(x, y, z)

# Creat a plotter object and set the scalars to the Z height
p = vtki.BackgroundPlotter()
p.add_mesh(grid, scalars=z.ravel())

pts = grid.points.copy()

# Update Z through time
RUN = True
nframe = 25
tstep = 0.01

def update():
    while RUN:
        for phase in np.linspace(0, 2*np.pi, nframe + 1)[:nframe]:
            z = np.sin(r + phase)
            pts[:, -1] = z.ravel()
            p.update_coordinates(pts)
            p.update_scalars(z.ravel())
            time.sleep(tstep)
    return None
        
update_thread = Thread(target=update)
update_thread.start()

# And then when you're ready to stop it:
RUN = False
```

![ezgif com-video-to-gif](https://user-images.githubusercontent.com/22067021/51806498-afd49100-2237-11e9-8485-d7564fc34a1c.gif)
",1,1,"['bug-fix', 'example']"
890,247105925,63,92974124,2019-01-23 20:29:55,2019-01-24 04:07:21,closed,Bump version: 0.15.1 → 0.16.0,"Went bug hunting and I think it's ready! (Plus I need the version bump for another project)

Then a tag after the merge:

```
git tag 0.16.0
git push origin master
git push origin --tags
```",1,1,[]
891,246806510,62,92974124,2019-01-23 01:14:25,2019-01-23 17:02:16,closed,Tested Documentation,"A whole lot of changes to the docstring examples so that we can use `pytest-sphinx` to test all the examples. 

I haven't revamped everything in the `rst` doc files but I think this is a good start to make sure every example in the documentation is current and a user could copy-paste the examples without issue.

In the RST docs, use the directive: 
```rst
.. testcode:: python
   
   <code>
```

And in the code docstrings, use some variant of the doctest syntax for pytest/Napolean:

```py
def my_function(arg):
    """"""This is a description...

    Example
    -------
    >>> my_function(3)
    9
    """"""
    return arg**arg
```

## To locally run the tests

```bash
# Run the test suite and generate coverage report
pytest -v --cov vtki
# Run all code examples in the docstrings
pytest -v --doctest-modules vtki
# And test the documentation
cd ./docs/
make doctest
make html
```",1,9,['documentation']
892,246725872,61,92974124,2019-01-22 19:32:32,2019-01-22 22:06:49,closed,Add a textures property to keep track of associated textures,"@akaszynski: Could you approve this (as its adding new properties that doesn't call back to the VTK object)? I need this new property for the [`omfvtk`](https://github.com/OpenGeoVis/omfvtk) project.

It essentially helps a user keep track of `vtkTextures` that could be associated with that dataset. I need it in `omfvtk` because the data files contain both the dataset and the texture. Having this would enable me to pass textures along with the datasets. 

This also allows for easier texture plotting when a texture is associated with a dataset in the new `textures` dictionary property:

```py
>>> from vtki import examples
>>> globe = examples.load_globe()
>>> globe.textures
{'2k_earth_daymap': (vtkRenderingOpenGL2Python.vtkOpenGLTexture)0x11bf878e8}

>>> globe.plot(texture=True)

```

![download](https://user-images.githubusercontent.com/22067021/51561204-dc596900-1e43-11e9-9e9a-139385883868.png)
",1,5,['enhancement']
893,246491288,59,92974124,2019-01-22 06:30:36,2019-01-22 16:58:00,closed,Add ability to load and plot textures,"Here's an example:

```py
import vtki
from vtki import examples

# Load a texture mapped dataset
globe = examples.load_globe()

# Load a texture from an image file (jpg)
texture = examples.load_globe_texture()

# Plot the globe with the applied texture
globe.plot(texture=texture)
```

![globe](https://user-images.githubusercontent.com/22067021/51516263-125f0480-1dd4-11e9-914c-2224fd788f04.png)


Or you could add your own texture coordinates to a dataset:

```py
import numpy as np
import vtki

# create a rectangle vertices
vertices = np.array([[0, 0, 0],
                     [1, 0, 0],
                     [1, 0.5, 0],
                     [0, 0.5, 0],])

# mesh faces
faces = np.hstack([[3, 0, 1, 2],
                   [3, 0, 3, 2]]).astype(np.int8)

# Create simple texture coordinates
t_coords = np.array([[0, 0],
                    [1, 0],
                    [1, 1],
                    [0, 1]])

# Create the poly data
mesh = vtki.PolyData(vertices, faces)

# Set the texture coordinates
mesh.t_coords = t_coords

# Load a texture from an image file (jpg)
texture = examples.load_globe_texture()

# Plot it
mesh.plot(texture=texture)
```

![map](https://user-images.githubusercontent.com/22067021/51516367-7255ab00-1dd4-11e9-9402-e484125a88e5.png)
",1,7,"['enhancement', 'example', 'file-formats']"
894,246446618,58,92974124,2019-01-22 00:51:23,2019-01-22 02:09:39,closed,Docs: Cleanup,"I've cleaned up the GitHub README to make it concise and point to different Read the Docs pages for examples

Todo: @akaszynski, I've put a *Connections* section in the README to point to projects that leverage `vtki` (they are two of my projects). I hope that's okay... I thought it would be a good way to show what's possible with this project. Do you know of any other packages we could add there?",1,8,['documentation']
895,246127969,57,92974124,2019-01-20 19:02:32,2019-01-28 06:48:33,closed,Add vtkjs export script,"## Description

This adds a new method to the `BasePlotter` class: `export_vtkjs`. This exports the rendering window to the [VTKjs](https://kitware.github.io/vtk-js/docs/) file format which can be viewed in a web browser like at the [page I have hosted for PVGeo](http://viewer.pvgeo.org). 

## Example

```py
import vtki
from vtki import examples

dataset = examples.load_uniform()

# I use IPyton
thresher = vtki.Threshold(dataset)

# Add some other stuff in there
_ = thresher.plotter.add_mesh(dataset.slice_orthogonal(), color='orange')

# Run the export script
thresher.plotter.export_vtkjs('footest')
```

## Sharing

To help in the sharing process, I have also included a function that will parse Dropbox file URLs and create a weblink for that file to be viewed by anyone.

Copy the share URL from Dropbox and then:

```py
vtki.get_vtkjs_url('https://www.dropbox.com/s/l4sbapnemc77qup/footest.vtkjs?dl=0')
```

For example, a link was produced for this scene at:

http://viewer.pvgeo.org/?fileURL=https://dl.dropbox.com/s/l4sbapnemc77qup/footest.vtkjs?dl=0

And another one for my [`omfvtk`](https://github.com/OpenGeoVis/omfvtk) project at:

http://viewer.pvgeo.org/?fileURL=https://dl.dropbox.com/s/4t3zewv8stbsfqk/omf.vtkjs?dl=0

## Future Work

- [x] ~We need to allow people to save the VTKjs file places other than under their Dropbox folder.~
- There are some hacks in the script to make it work (I haven't had any issues with it yet)
- We may want to deploy the vtkjs HTML rendering code and replace the static image IPython output with this interactive scene.
    - We'd need to save the file to a temporary directory
    - We'd need to hack the VTKjs code to point it to local files and not web files",2,14,"['enhancement', 'example']"
896,246077103,56,92974124,2019-01-19 23:14:58,2019-01-22 01:39:36,closed,Keep track of actors by name,"The plotter now stores pointers to all actors by a string name so that users can specify names for their rendered data and update that data easily by passing a `name` argument to `add_mesh`. 

In the following gif, I show how a user can continually call `add_mesh` with a constant `name` to remove the old actor and add the new one. Previously the user would have to be sure to call `remove_actor` with the proper actor object which would get really messy and cumbersome. These changes make updating an actor super user-friendly.

![ezgif com-video-to-gif](https://user-images.githubusercontent.com/22067021/51444197-fa8f5f80-1cb1-11e9-9c57-0c69dd715f9c.gif)




",0,10,['enhancement']
897,246067734,55,92974124,2019-01-19 19:55:22,2019-01-19 20:02:16,closed,Docs Updates,,0,4,['documentation']
898,245998122,54,92974124,2019-01-18 23:04:41,2019-01-18 23:32:29,closed,Add ability to cycle through colors when plotting MultiBlock datasets,"An optional argument to give each block in a `MultiBlock` dataset a color:

```py
multi = vtki.MultiBlock()
# Add a bunch of datasets ...
multi.plot(multi_colors=True)
```

![download](https://user-images.githubusercontent.com/22067021/51417299-9b5b0f00-1b3a-11e9-9853-2755b6e568dd.png)
",0,2,['enhancement']
899,245738597,53,92974124,2019-01-18 06:11:03,2019-01-18 08:10:18,closed,Overhaul to documentation structure,"This is still a work in progress but at least it brings the docs up to date.

@akaszynski: could you enable building for the `docs` branch on ReadTheDocs?",1,2,['documentation']
900,245680117,52,92974124,2019-01-17 23:25:07,2019-01-19 11:41:11,closed,Refactor Keyword Arguments,"This is a pretty major refactoring of keyword arguments. @akaszynski: you may have issues with projects that have `vtki` as a dependency.  This may still need some refining so this can totally sit for a bit.

I view this as a necessary refactor that ensures all keyword arguments for plotting are consistent across `vtki` and adhere to many of the conventions in `matplotlib` to bring a level of familiarity to new users.

- [MatPlotLib Plotting kwargs](https://matplotlib.org/2.1.1/api/_as_gen/matplotlib.pyplot.plot.html)
- [MatPlotLib Text kwargs](https://matplotlib.org/api/text_api.html#matplotlib.text.Text)

**Example of fixing `vtki` consistency:** 

- the argument to control the size of points was inconsistently `psize` and `pointsize`. Now it is `pointsize` which follows conventions in `matplotlib`

- Arguments starting with `show`. Now they all start with `show_` (previously only some did)

**Examples of switching to `matplotlib` convention:**

- `colormap` -> `cmap`
- `xtitle` -> `xlabel`, `ytitle` -> `ylabel`, `ztitle` -> `zlabel`, 

### Some That Might Still Need Refactoring:

- `interpolatebeforemap`
- `use_2dmode`
- Should we make all arguments follow snake case?
   - `textcolor` -> `text_color`, etc.?",5,31,"['discussion', 'proposed-change']"
901,245677706,51,92974124,2019-01-17 23:13:09,2019-01-18 06:09:04,closed,Develop: bind the plotting method,"This little change binds `vtki.plotting.plot` to the `vtki.Common` data objects to make sure arguments and the docstring stay linked. This allows for a much nicer interface in ipython with tab completion and allows us to make changes to `vtki.plotting.plot` without worrying about updating the plot method directly on objects:

![ezgif com-video-to-gif](https://user-images.githubusercontent.com/22067021/51354982-c417d180-1a72-11e9-9270-f3fb019d897b.gif)


",0,2,"['enhancement', 'documentation']"
902,245607641,50,92974124,2019-01-17 18:50:41,2019-01-17 19:07:06,closed,Filters: add elevation filter,Add elevation filter. See docstring for description.,1,2,['enhancement']
903,245606898,49,92974124,2019-01-17 18:48:10,2019-01-17 19:05:30,closed,BUGFIX: PolyData init from just vertices was not setting the vertex cells,"@akaszynski, please double check this.

When constructing poly data that only has vertices, you must use `vtk.vtkPolyData.SetVerts`. Previously the code only used `vtk.vtkPolyData.SetPolys` which works when there are faces present.

## Code to Reproduce:

```py
import vtki
import numpy as np

points = np.array([[0, 0, 0],
                     [1, 0, 0],
                     [1, 1, 0],
                     [0, 1, 0],
                     [0.5, 0.5, -1]])

mesh = vtki.PolyData(points)
assert mesh.n_points == points.shape[0]
assert mesh.n_cells == points.shape[0]
mesh.plot(psize=10)
```

which would not have any vertices:

![bad](https://user-images.githubusercontent.com/22067021/51341000-8eacbd00-1a4d-11e9-9107-9da1de14d0e2.png)

### The fix

Now the vertices are properly set:

![good](https://user-images.githubusercontent.com/22067021/51341029-a08e6000-1a4d-11e9-91ca-242c53c58e6c.png)


",7,1,['bug-fix']
904,244971996,47,92974124,2019-01-15 23:20:55,2019-01-16 07:00:48,closed,Update default position for adding text,"The bottom left corner is too messy for text now that the axes orientation is present. These changes move the default text position to the top left corner:

```py
from vtki import examples
examples.beam_example()
```

![download](https://user-images.githubusercontent.com/22067021/51216371-7455d080-18e1-11e9-9b19-edfd04010f2f.png)",0,2,['proposed-change']
905,244966447,46,92974124,2019-01-15 22:54:59,2019-01-16 06:42:13,closed,Test/notebook,"Adds testing for all the notebooks on Travis to make sure they at least run without error.

This is only done on Python 3",0,8,['testing']
906,244919137,45,92974124,2019-01-15 19:58:20,2019-01-15 21:04:08,closed,Test/filters,"Add tests for all filters.

Note a major bug fix in 91b97c5",0,5,['testing']
907,244684359,44,92974124,2019-01-15 06:09:19,2019-01-15 06:40:58,closed,Live app icon for BackgroundPlotter,"This adds a live app icon to the `BackgroundPlotter` to go from this non-descriptive icon:

<img width=""261"" alt=""screen shot 2019-01-14 at 11 03 47 pm"" src=""https://user-images.githubusercontent.com/22067021/51161740-dd413800-1850-11e9-94a7-ffc1689c6c39.png"">

To this informative icon:

![ezgif com-video-to-gif-9](https://user-images.githubusercontent.com/22067021/51161857-49bc3700-1851-11e9-8e33-62f53a92777f.gif)


**Technical Notes**

The app icon gets updated every 5 seconds after the camera position is changed to remain lightweight yet be semi-live.

",1,5,['enhancement']
908,244337727,43,92974124,2019-01-14 04:56:38,2019-01-15 06:40:40,closed,Feat/bounds: Updates to the bounds_axes,"This adds the ability for the bounds axes to automatically update to the full extent of the rendering scene. For example, you can add a dataset, add some bounds, then add another dataset with larger bounds and on the next render call, the bounds axes will be updated to the new larger extent.

I have also included a bit that will reset the camera when adding/removing actors unless the camera position has been set or `add_mesh`/`remove_actor` are passed `resetcam=False`. This allows for some nifty interactive plotting where you can add a dataset and the render view will adjust automatically to account for the new information:

![ezgif com-video-to-gif-8](https://user-images.githubusercontent.com/22067021/51096998-080e8c00-177e-11e9-8476-7fd080ca7350.gif)

*There are a few bug fixes for the axes bounds in here.*

This addresses #39",0,15,['enhancement']
909,244300697,41,92974124,2019-01-13 19:51:19,2019-01-13 20:14:08,closed,Develop: Cleanup filters,"This is a cleanup for #38 that optimizes the interactive tools, adds `extras_requires`, yields more meaningful errors if iPython is unavailable, and demos the new features in the README with some code snippets and the following gif:

![slicer-tool](https://user-images.githubusercontent.com/22067021/51090000-d1f7ea80-1732-11e9-989a-050941288c9b.gif)
",0,10,['enhancement']
910,244200499,38,92974124,2019-01-12 04:55:03,2019-01-12 10:59:51,closed,Some awesome new tools and bug fixes galore,"# New ipython tools

First and foremost, this contains a super awesome new tool for ipython notebooks: the orthogonal slicer tool:

When ipython is available:

```py
import vtki
from vtki import examples

dataset = examples.load_rectilinear()

vtki.OrthogonalSlicer(dataset)
```

<img width=""707"" alt=""screen shot 2019-01-12 at 1 44 29 am"" src=""https://user-images.githubusercontent.com/22067021/51071277-9f9f9d80-160b-11e9-99a5-7ca13ba345e0.png"">



Which looks something like this:

![ezgif com-video-to-gif-7](https://user-images.githubusercontent.com/22067021/51070064-20ed3500-15f8-11e9-8940-8246fe42f6c3.gif)

## Other tools

In this new `ipy_tools` module, I have added a new class that makes constructing these tools fairly simple and have also added one for producing many slices along an axis:

<img width=""703"" alt=""screen shot 2019-01-12 at 1 47 09 am"" src=""https://user-images.githubusercontent.com/22067021/51071294-fefdad80-160b-11e9-9fc4-8697cfc6b859.png"">

<img width=""567"" alt=""screen shot 2019-01-12 at 1 47 34 am"" src=""https://user-images.githubusercontent.com/22067021/51071300-0c1a9c80-160c-11e9-8de8-41b4bdd360cc.png"">

And a nifty tool for thresholding:

<img width=""649"" alt=""screen shot 2019-01-12 at 2 48 07 am"" src=""https://user-images.githubusercontent.com/22067021/51071831-9c5cdf80-1614-11e9-8bae-ddee64efc522.png"">

<img width=""700"" alt=""screen shot 2019-01-12 at 2 48 20 am"" src=""https://user-images.githubusercontent.com/22067021/51071832-9ff06680-1614-11e9-8d48-b21983306c38.png"">



# Other Additions

- A number of bug fixes
- Some new filters:
    - `slice_orthogonal`: creates a `MultiBlock` dataset of 3 orthogal slices
    - `threshold_percent`: Threshold by percentages of the scalar range
    - `outline_corners`: Outlines the corners of the data extent
    - `extract_geometry`: Extract surface geometry
    - `slice_along_axis`: creates a `MultiBlock` dataset of many slices along a specified axis

See commit comments for a synopsis",1,31,"['enhancement', 'bug-fix', 'IPython/Jupyter']"
911,243856801,37,92974124,2019-01-10 22:49:15,2019-01-11 09:06:12,closed,Overhaul to the scalar bar management and some syntax changes,"- I refactored `Plotter.plot()` -> `Plotter.show()` to be consistent with `qt_plotting` and `matplotlib` but `Plotter.plot()` is still available for backwards compatibility (it just forwards to `Plotter.show()` now)

- Updated the default behavior of `Plotter.add_bounds_axes()` to add bounds that surround all datasets in the render window.

- A major overhaul to how scalar bars are added and managed so that repeat scalar bars are not added and so they do not overlap.
    - Set a max limit of 10 color bars
    - Change orientation to horizontal and they iteratively stack on top of each other
    - Added `Scalar Bar Preservation` Notebook that helps demo this
    - See gif below to see how the scalar bar is updated when another data set colored by an array with the same title is added.

![ezgif com-video-to-gif-5](https://user-images.githubusercontent.com/22067021/51011391-9c29ea80-1515-11e9-8b61-9d37316593e0.gif)

",1,7,"['enhancement', 'proposed-change']"
912,243167787,35,92974124,2019-01-09 00:28:03,2019-01-09 06:51:46,closed,Fix setup for windows 32 bit architecture,This handles the 32bit Windows install issue mentioned in #32,2,1,['bug-fix']
913,243092231,34,92974124,2019-01-08 19:43:25,2019-01-09 07:09:15,closed,Feat/filters: Add methods to use common filters,"This adds common filters (the ones in ParaView's Common category) as methods directly on vtki wrapped data objects so users can easily apply these filters to their dataset. This PR also includes the ability to use a new `active_scalars` attribute of datasets. Essentially `vtki` will now keep track of a user preferred active scalar that the filters will act on and the plotting routines will display instead of solid white coloring by default.

To use the new filters:

(Note how clean that code is! No need to remember array names and pass them to plot everytime you'd like to color a dataset.)

```py
import vtki
from vtki import examples

dataset = examples.load_uniform()
# Note: this is how you explicitly set the active scalars, it is automatically chosen if not set
# dataset.set_active_scalar('Spatial Point Data')

# Thresholding
thresh = dataset.threshold([100, 500])
thresh.plot()

```

![download](https://user-images.githubusercontent.com/22067021/50877441-2a279900-138f-11e9-9f5d-7578cf12860d.png)
",0,15,['enhancement']
914,240652323,31,92974124,2018-12-22 20:28:45,2018-12-22 21:42:57,closed,CI-Testing: Test plotting on Travis,"It's working! All tests are executed on Travis. I have no idea how to do this on Appveyor (I'm not familiar enough with windows).

@akaszynski, could you set up a [codecov](https://codecov.io) account to post the coverage results and then get a badge on the readme?",1,6,['testing']
915,240619346,30,92974124,2018-12-22 06:29:05,2018-12-22 21:42:37,closed,Develop: Add support for vtkMultiBlockDataSets,"Note #29 is attempting to merge into this

This PR adds support for `vtkMultiBlockDataSet` with the introduction of `vtki.MultiBlock` which provides a container for any VTK or vtki datasets. Plotting for this container is generally supported.

@akaszynski, would you mind overlooking this to make sure the `MultiBlock` wrapper makes sense

Tests are fully implemented and looking good:

<img width=""655"" alt=""screen shot 2018-12-22 at 1 16 26 am"" src=""https://user-images.githubusercontent.com/22067021/50371421-b4e35800-0588-11e9-9b9e-a7cd23af5e6c.png"">
",0,20,['enhancement']
916,240619234,29,92974124,2018-12-22 06:25:33,2018-12-22 19:40:17,closed,Refactoring,A refactor of  `number_of_*` to `n_*` to make accessing these properties a bit easier,1,1,['proposed-change']
917,239937904,27,92974124,2018-12-19 18:46:11,2018-12-20 14:33:15,closed,Develop: Testing and Bugfixes,"Here are quite a few updates to #24 to provide testing, general bug fixes, and examples.

Note that #25 and #26 are both trying to merge into this branch but can be switched to merge into `master` if these changes are given the green light

### New Features:

- `vtki.read`: Reads any VTK data file and handles object creation/wrapping
- Fix bug in the plotting routines that would add an array with an empty name
- Add some more properties to the `Common` class

### Testing

Running the pytest suite with X11 returns all tests as passing on my local machine",0,24,"['testing', 'bug-fix']"
918,239934653,26,92974124,2018-12-19 18:33:40,2018-12-20 12:07:49,closed,Notebook Examples,"Here are some Jupyter notebook examples on how to use `vtki` and some demo figures that can be produced inline within the notebooks.

Note you can preview the two notebooks [here](https://github.com/akaszynski/vtki/blob/notebook/notebooks/Overview.ipynb) and [here](https://github.com/akaszynski/vtki/blob/notebook/notebooks/Examples.ipynb)",1,3,"['documentation', 'IPython/Jupyter']"
919,239907519,25,92974124,2018-12-19 16:57:18,2018-12-20 12:06:20,closed,Major restructure of classes to be consistent with VTK side,"This might be something to very much double check. I did some shuffling of the class locations and how things were inherited now that `UniformGrid` and `RectilinearGrid` are added.

The shuffling is an attempt to mimic VTK's inheritance scheme as close as possible. Prior, `UniformGrid` and `RectilinearGrid` shared their inheritance of the `Grid` class with `StructuredGrid` and `UnstructuredGrid`. This didn't really make sense... in VTK, `vtkStructuredGrid` and `vtkUnstructuredGrid` are pointset datasets more similar to `vtkPolyData`. To change this, I moved `StructuredGrid` and `UnstructuredGrid` into a renamed `pointset` module next to `PolyData` where they can inherit their own `PointGrid` class for helpers.

I left `UniformGrid` and `RectilinearGrid` in the `grid` module where they now inherit a class named `Grid` that can be filled out for methods common to non-pointset gridded datasets.

For more insight into what I am thinking, see VTK's inheritance diagram:

<img width=""1277"" alt=""screen shot 2018-12-19 at 11 48 40 am"" src=""https://user-images.githubusercontent.com/22067021/50235005-ee4b7600-0384-11e9-862a-4d96ece24678.png"">
",1,4,"['enhancement', 'proposed-change']"
920,239699207,24,92974124,2018-12-19 03:13:09,2018-12-19 08:41:51,closed,Add wrappers for vtkImageData/vtkRectilinearGrids and a whole lot more,"Overall, this pull request is adding wrappers for `vtkImageData` and `vtkRectilinearGrids` as well as  a few features I found useful:

## `vtki.wrap`

A new wrapping method under the `utilities` module. This allows users to quickly wrap any VTK dataset they have to its appropriate `vtki` object:

```py
import vtk, vtki
stuff = vtk.vtkPolyData()
better = vtki.wrap(stuff)
```

## `vtki.Common._repr_html_` and a few other methods

A new way to represent the object in Jupyter notebooks that might be a bit more insightful that printing the class name and memory address. See below:

<img width=""633"" alt=""screen shot 2018-12-18 at 9 54 47 pm"" src=""https://user-images.githubusercontent.com/22067021/50196026-91fa3f00-030f-11e9-8ce2-50079f85b2f7.png"">


## `vtki.get_scalar`

A helper to search both the Point and Cell data for an array by its name. This allows users to now pass an array name to the `plot`/`add_mesh` method so that it will find the Cell or Point data with that name and then color the dataset by that array.

<img width=""659"" alt=""screen shot 2018-12-18 at 9 52 41 pm"" src=""https://user-images.githubusercontent.com/22067021/50195966-46479580-030f-11e9-8623-b57afe57ec86.png"">

<img width=""1197"" alt=""screen shot 2018-12-18 at 9 52 30 pm"" src=""https://user-images.githubusercontent.com/22067021/50195967-48a9ef80-030f-11e9-848d-218c3a1cedac.png"">


## Other updates

- I fixed the ReadTheDocs badge and cleaned up the README

## What's Next?

### Jupyter Plotting

I really, REALLY want to get the plotting code working for interactive plots in Jupyter notebooks. I think I can get some traction on this from both myself and a few other open-source developers using VTK. 

What is needed to implement interactive 3D plots in Jupyter notebooks? Can we just open the rendering window into a frame in the notebook?


### Other Wrappers

I have a branch started for adding a `vtkMultiBlockDataSet` wrapper. This will be necessary for me to use `vtki` with my project [**`PVGeo`**](https://github.com/OpenGeoVis/PVGeo) so hopefully, we can collaborate to make a wrapper for multiblock datasets.

### Wrapping VTK algorithms

I have been thinking about wrapping all of the VTK algorithms/filters into a common API such that users can call the filters/ writers in a more Pythonic manner. **Is this something that might fit into `vtki`?** For example, we could wrap the `vtkThreshold` to go from:

```py
import vtk
alg = vtkThreshold()
alg.SetInputDataObject(pdi)
alg.ThresholdByLower(99.0)
alg.Update()
pdo = alg.GetOutputDataObject(0)
```

to this easier API:

```py
import vtki
pdo = vtki.algs.Threshold(pdi, 99.0, option='lower')
```

## Why am I doing this?

`vtki` is AWESOME! Having these wrappers make using the VTK data objects so, so, so much easier in Python. The rendering code and plotting routines are also great and I would like to leverage these for a library I am building that is basically a bunch of VTK algorithms designed for geoscience datasets ([**`PVGeo`**](https://github.com/OpenGeoVis/PVGeo)). ",6,12,"['enhancement', 'discussion']"
921,210921104,21,92974124,2018-08-25 20:59:57,2018-08-25 22:09:38,closed,fix BooleanUnion function,"The boolean filter variable wasn't correctly referenced, which caused some problems for me. This should fix it!",1,1,['bug-fix']
922,210874006,20,92974124,2018-08-25 00:12:12,2018-08-25 08:21:40,closed,update polydata.rst,"A minor spelling error that was bugging me while reading the docs—I believe you meant ""additional,"" since it adds additional functionality.",1,1,['documentation']
923,199935532,17,92974124,2018-07-08 10:31:31,2018-07-09 08:52:05,closed,"Added CenterOfMass, PlotNormals, SurfaceArea","Added some convenient tools.

- _CenterOfMass_ simply retrieves the center of mass coordinates for the polydata object. 

- _PlotNormals_ is a convenience function for quickly visualizing the normals of a polydata. 

- _SurfaceArea_ simply calculates the total area of the mesh based on the individual triangle areas. For this I've implemented two functions in _utilities.py_, denoted _TriUnitNormal_ and _TriangleArea_, which returns the unit normal of a polygon and the triangle area respectively. ",2,5,['enhancement']
924,189810189,10,92974124,2018-05-22 22:29:19,2018-05-23 08:11:07,closed,"Added functionality for filling mesh holes, scrap removal, mesh (plane) clipping and normal generation","Added functionality for filling mesh holes (PolyData.FillHoles), extracting the largest domain / scrap removal (PolyData.ExtractLargest; rename?), clipping meshes with planes (PolyData.ClipPlane; rename?), generating normals (PolyData.GenerateNormals; can't currently handle vertex splitting). 

I'm not sure whether GenerateNormals should be contained in the PolyData class and just add the array to the input mesh, or whether it should return an array, similar to Curvature. At the moment it's not possible to pass the output of the PolyDataNormals filter to PolyData.Overwrite as with other functions in the PolyData class, as this doesn't preserve the PointData object. 

Also amended the PolyData.Decimate function to include all user-definable parameters (such as volume preservation).

I added some documentation for the things I'm PRing which should be complete AFAICT. Most is copied from the corresponding VTK functions, with some minor modifications.

Thanks for maintaining this really awesome package!",3,1,['enhancement']
925,178736793,7,92974124,2018-04-01 16:33:10,2018-04-01 22:20:24,closed,minor change in reading/writing of structured grids,"structured grids could be exported using ""vtu""-extension and renamed afterwards to ""vts"", which is an unnecessary step if ""vts""-extension is allowed",0,1,['bug-fix']
926,173282011,5,92974124,2018-03-06 21:10:25,2018-03-07 12:14:51,closed,add Update method to PlotClass for redraw window in non blocking mode,"Allows do such update:
```
plobj = vtkInterface.PlotClass()
plobj.Plot(autoclose=False, interactive_update=True)
...
while True:
    plobj.Update()
```
",1,1,['bug-fix']
