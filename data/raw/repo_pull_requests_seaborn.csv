index,id,number,repo_id,created_at,closed_at,state,title,body,total_comments,total_commits,labels
0,706104056,2637,4704710,2021-08-08 20:45:40,2021-08-08 21:00:45,closed,Fix non-removed interior axis labels and diagonal legends in PairGrid,These were oversights from #2583,1,1,"['mod:axisgrid', 'bugfix']"
1,706097168,2636,4704710,2021-08-08 19:48:39,2021-08-08 20:11:21,closed,Avoid scatter edgecolor warning,"Matplotlib added a warning when passing an `edgecolor` parameter with an unfilled `scatter` marker. See https://github.com/matplotlib/matplotlib/issues/17849 and subsequent matplotlib PR  for details.

seaborn wasn't doing anything wrong here, but on newer matplotlibs it will now spew warnings; this change avoids them.",1,1,"['mod:relational', 'upstream', 'bugfix']"
2,705920147,2634,4704710,2021-08-07 17:17:46,2021-08-07 17:33:55,closed,Add proportion-based normalization in histplot,Follows #2461. This gives the same result as  but may be more intuitive for some people.,1,1,"['enhancement', 'plots', 'mod:distributions']"
3,705393114,2633,4704710,2021-08-06 11:00:28,2021-08-06 11:07:53,closed,Test v0.11 branch,"Not for merge, just to kick off CI",0,74,[]
4,697821031,2623,4704710,2021-07-27 12:35:11,2021-08-02 00:02:00,closed,Fix FacetGrid.data on object returned from relplot and displot,"Fixes #2622 

Context: `relplot` and `displot` no longer use the original approach of ""set up a `FacetGrid`, map an axes-level function"" such that the `FacetGrid` owns the data. This is because they can handle wide data and data passed directly as vectors, using the relevant module-level plotting class to parse the inputs. But as a consequence, the `.data` attribute on the `FacetGrid` that they return does not have all the columns that were passed into the function.

This  PR attempts to improve that situation by merging the input dataframe with the processed dataframe used internally (which handles, e.g. the transform from wide data or vectors that were passed directly to plot kwargs, often without names).

Because input data specification is so flexible, this is a little tricky, and there may be some corner cases. For instance, if you pass a series object to one of the plot variables and it shares a name with one of the columns in the input dataframe, its data won't be represented in the output data. It may be possible to handle weird cases like that, but for now I am going to aim for simplicity / consistency with what was originally possible.

### Test case with `displot`

```python
g = sns.displot(
    data=tips.to_dict(orient=""list""),
    x=""total_bill"",
    hue=tips[""smoker""].rename(""y_var""),
    col=tips[""time""].to_numpy(),
)
print(g.data.head())
```

v0.11.1:
```
   total_bill y_var   _col_
0       16.99    No  Dinner
1       10.34    No  Dinner
2       21.01    No  Dinner
3       23.68    No  Dinner
4       24.59    No  Dinner
```

This branch:
```
   total_bill   tip     sex smoker  day    time  size   _col_ y_var
0       16.99  1.01  Female     No  Sun  Dinner     2  Dinner    No
1       10.34  1.66    Male     No  Sun  Dinner     3  Dinner    No
2       21.01  3.50    Male     No  Sun  Dinner     3  Dinner    No
3       23.68  3.31    Male     No  Sun  Dinner     2  Dinner    No
4       24.59  3.61  Female     No  Sun  Dinner     4  Dinner    No
```

### Test case with `relplot`

```python
g = sns.relplot(
    data=tips,
    x=""total_bill"",
    y=tips[""tip""].to_numpy(),
    col=tips[""time""].rename(""col_var""),
)
print(g.data.head())
```

v0.11.1:
```
       x     y   hue  size style units   NaN col_var
0  16.99  1.01  None  None  None  None  None  Dinner
1  10.34  1.66  None  None  None  None  None  Dinner
2  21.01  3.50  None  None  None  None  None  Dinner
3  23.68  3.31  None  None  None  None  None  Dinner
4  24.59  3.61  None  None  None  None  None  Dinner
```

This branch:
```
   total_bill   tip     sex smoker  day    time  size   _y_ col_var
0       16.99  1.01  Female     No  Sun  Dinner     2  1.01  Dinner
1       10.34  1.66    Male     No  Sun  Dinner     3  1.66  Dinner
2       21.01  3.50    Male     No  Sun  Dinner     3  3.50  Dinner
3       23.68  3.31    Male     No  Sun  Dinner     2  3.31  Dinner
4       24.59  3.61  Female     No  Sun  Dinner     4  3.61  Dinner
```

### TODO
- [x] Mention in release notes",1,5,"['mod:relational', 'mod:distributions', 'bugfix']"
5,692140919,2620,4704710,2021-07-18 19:55:20,2021-07-24 18:55:47,closed,JointGrid reference lines,"Closes #2249 &ndash; Adds new `JointGrid.refline()` method: 
```python
JointGrid.refline(self, *, x=None, y=None, joint=True, marginal=True, **line_kws)
```

Example usage:
```python
import seaborn as sns

penguins = sns.load_dataset('penguins')
g = sns.jointplot(data=penguins, x='bill_length_mm', y='bill_depth_mm')

# by default plot on both the marginal and joint axes
g.refline(y=16, linestyle='dashed', color='gray')

# only on joint
g.refline(x=45, marginal=False, linestyle='dotted', color='red')

# only on marginal
g.refline(x=55, joint=False, linestyle='dashed', color='blue')
```

Needs:

- [X] Test
- [X] Documentation in the JointGrid and FacetGrid API examples
- [X] Mention in release notes",15,16,"['enhancement', 'mod:axisgrid']"
6,691092314,2617,4704710,2021-07-15 23:22:21,2021-07-15 23:46:58,closed,Fix various typos,"Found via `codespell -q 3 -L ans,hist,whis`",2,1,[]
7,678303952,2608,4704710,2021-06-26 09:01:48,2021-07-01 12:46:11,closed,[DO NOT MERGE] Test pandas 1.3 release candidate,"Not to merge, but just to test the pandas release candidate on your CI.",6,3,[]
8,675680245,2604,4704710,2021-06-22 18:51:19,2021-07-24 19:02:29,closed,Try to provide more helpful error if load_dataset is given a DataFrame,"This should help reduce confusion following a relatively common beginner mistake. The current result is useless for solving the problem:

```python-traceback
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-245-abe567917c1d> in <module>
----> 1 sns.load_dataset(tips)

~/code/seaborn/seaborn/utils.py in load_dataset(name, cache, data_home, **kws)
    479                                   os.path.basename(full_path))
    480         if not os.path.exists(cache_path):
--> 481             if name not in get_dataset_names():
    482                 raise ValueError(f""'{name}' is not one of the example datasets."")
    483             urlretrieve(full_path, cache_path)

~/miniconda3/envs/seaborn-py38-latest/lib/python3.8/site-packages/pandas/core/generic.py in __nonzero__(self)
   1440     @final
   1441     def __nonzero__(self):
-> 1442         raise ValueError(
   1443             f""The truth value of a {type(self).__name__} is ambiguous. ""
   1444             ""Use a.empty, a.bool(), a.item(), a.any() or a.all().""

ValueError: The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
```

Now we have 
```python-traceback
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-3-d18ae242c087> in <module>
----> 1 sns.load_dataset(pd.DataFrame([]))

~/code/seaborn/seaborn/utils.py in load_dataset(name, cache, data_home, **kws)
    480             ""it is not necessary to use this function before plotting.""
    481         )
--> 482         raise TypeError(err)
    483
    484     url = f""https://raw.githubusercontent.com/mwaskom/seaborn-data/master/{name}.csv""

TypeError: This function accepts only strings (the name of an example dataset). You passed a pandas DataFrame. If you have your own dataset, it is not necessary to use this function before plotting.
```

Note that this does involve a change in Exception type (but the new type is the correct one).",1,1,['enhancement']
9,675030041,2603,4704710,2021-06-22 02:58:02,2021-06-22 02:58:15,closed,empty commit,,0,1,[]
10,673671699,2601,4704710,2021-06-18 19:05:19,2021-06-18 19:22:56,closed,Include empty example_thumbs directory in repository,"As an alternative to creating the directory in conf.py

Cf #2572",1,1,[]
11,671721093,2598,4704710,2021-06-16 17:39:34,2021-06-24 12:58:03,closed,Update README.md,Add License to Readme,5,1,[]
12,644929808,2585,4704710,2021-05-14 19:22:15,2021-05-14 19:52:22,closed,Fix typo: singeton --> singleton,Simple typo.,1,1,[]
13,642404622,2583,4704710,2021-05-12 00:08:26,2021-05-13 12:13:47,closed,Improve FacetGrid axis labeling,"A few small changes to make custom `FacetGrid` plotting a little easier:

- Disable the visibility of interior axis label objects (closes #2493)
- No longer remove axis labels after mapping a function (closes #2456)
- Use the `x` and `y` kwargs passed to `map_dataframe` for axis labels",1,4,"['enhancement', 'mod:axisgrid']"
14,638601598,2581,4704710,2021-05-10 22:42:40,2021-05-11 19:23:48,closed,Avoid error from relplot faceting variable name collision,"Fixes #2488

This is a short-term fix and, as mentioned in the original issue, there will hopefully be better overall integration between the plotter objects and the figure-level functions such that the complicated operations that caused (and then fixed) the bug are no longer necessary. But it is a relatively easy fix so might as well put it in for now.",1,2,"['mod:relational', 'bugfix']"
15,638353274,2580,4704710,2021-05-10 20:08:54,2021-05-10 20:57:31,closed,Fix size norm extrapolation,"Builds on #2579 with

- a test for the original bug
- the addition of a `size_range` attribute on the `SizeMapping` object, rather than accessing the `_default_size_range` attribute, which is regrettable and will ideally get refactored away somehow.",2,5,"['bugfix', 'mod:core']"
16,637272298,2579,4704710,2021-05-10 09:36:55,2021-05-10 20:59:06,closed,fix bug in size_norm extrapolation beyond data range ,"## Original Issue
- https://github.com/mwaskom/seaborn/issues/2539

## Behavior 
```
import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt

np.random.seed(12345)
df = pd.DataFrame({'x': np.random.rand(60),
                   'y': np.random.rand(60),
                   'sz': np.append(np.random.randint(0, 2500, 30), np.random.randint(2500, 6000, 30))})

fig, axs = plt.subplots(ncols=2, figsize=(10, 4), sharex=True, sharey=True)
sns.scatterplot(data=df[:30], x='x', y='y', size='sz', sizes=(0.01, 200), size_norm=(0, 6000), ax=axs[0])
sns.scatterplot(data=df, x='x', y='y', size='sz', sizes=(0.01, 200), size_norm=(0, 6000), ax=axs[1])
```
- Before
![スクリーンショット 2021-05-10 18 33 06](https://user-images.githubusercontent.com/33516104/117639144-906e9180-b1be-11eb-8344-53141be6cedf.png)

- After 
![スクリーンショット 2021-05-10 18 31 40](https://user-images.githubusercontent.com/33516104/117639148-919fbe80-b1be-11eb-9392-de4bb3ec7c2a.png)



",3,2,"['bugfix', 'mod:core']"
17,633545985,2578,4704710,2021-05-07 22:29:38,2021-05-07 23:01:15,closed,Clean up categorical plot logic a bit,Followup to #2577; this removes some unecessary tracking of x/y levels,1,2,['mod:categorical']
18,633114494,2577,4704710,2021-05-07 17:21:49,2021-05-07 19:00:26,closed,Use ticks to infer number of categorical levels on an axis,"Fixes #2516

With the example from that issue:

```python
ax = sns.stripplot(x=[""A"", ""B"", ""C""], y=[1, 3, 2])
ax = sns.stripplot(x=[""E"", ""F""], y=[5, 2])
```
![image](https://user-images.githubusercontent.com/315810/117486123-3c9e4700-af37-11eb-98d3-8fe666e75de9.png)

This does make some assumptions about what matplotlib will be doing, namely that updating categorical unit data will add ticks to the matplotlib axis (even though it does not rescale the limits).

I also ran into a bunch of confusing issues when implementing this (apparently simple) fix. The internals relating to establishing/using the `var_levels` for categorical variables messy and confusing. I was able to get this working without rethinking/reimplementing everything, but I do think that doing so will ultimately be important for ongoing maintainability.",1,2,"['mod:categorical', 'bugfix']"
19,631736891,2576,4704710,2021-05-06 18:35:25,2021-05-06 21:26:19,closed,Several fixes/improvements related to lmplot axis scaling,"This PR rolls together a couple small fixes to semi-related issues in `lmplot`.

## Fixes sticky edges on regression line with `truncate=True`

I don't actually think there's an issue about this, but it's ugly and not intentional:

Old:

![image](https://user-images.githubusercontent.com/315810/117348075-c555ae00-ae77-11eb-9e06-436ea2ab4165.png)

New:

![image](https://user-images.githubusercontent.com/315810/117348223-f635e300-ae77-11eb-95f0-5835da1559a6.png)

## Fixes `sharey` with very different scales

This improves the code that scales the x axis to the data limits before plotting so that it does not interfere with `sharey=False` (fixes #2509)

Using the example case from that issue:

![image](https://user-images.githubusercontent.com/315810/117348333-149bde80-ae78-11eb-9e05-85c9878cf5ba.png)

## Adds `facet_kws` to `lmplot` and deprecate a couple params from the signature

Fixes #2518.

Additionally, `sharex`/`sharey`/`legend_out` have been deprecated from the `lmplot` signature, but they can now be passed using this parameter dictionary.",1,8,"['enhancement', 'mod:regression', 'bugfix']"
20,630956371,2574,4704710,2021-05-05 22:05:33,2021-05-06 00:09:12,closed,Set heatmap yticklabel alignment while rotating,"Closes #2484

With the case from that issue:

```python
m = ['January', 'February', 'March']
sns.heatmap(data=np.random.rand(3, 3), yticklabels=m, xticklabels=m)
```
![image](https://user-images.githubusercontent.com/315810/117216370-a6024680-adcd-11eb-95e2-f6de3b919078.png)

Not sure of a good way to test this that isn't just asserting that the thing that's in the code happens, so I'm not adding a test. Should hopefully be able to catch it in the docs if it reappears.",1,2,"['mod:matrix', 'bugfix']"
21,630880788,2573,4704710,2021-05-05 20:29:50,2021-05-05 21:40:50,closed,Improve docstrings for theme-related functions,Closes #2481,1,4,['docs']
22,630714616,2572,4704710,2021-05-05 15:54:05,2021-05-05 16:41:25,closed,Create example_thumbs while running conf.py,"This is a little hacky, but including the thumbnail images in the build seems otherwise complicated because they are written into raw html source with an `<img>` tag, not using the sphinx image directive.

Fixes #2532",1,1,['docs']
23,630618612,2571,4704710,2021-05-05 13:58:05,2021-05-05 14:40:00,closed,Disable autolayout rcparam when constructing Facet/PairGrid,"This prevents matplotlib from doing a naive tight_layout operation that ignores the space the legend needs to occupy.

Closes #2496",1,2,['enhancement']
24,629927050,2570,4704710,2021-05-04 16:15:46,2021-05-05 11:30:02,closed,Improve histogram efficiency,"Closes #2550 

Now we only pass an array of bins into the numpy function when that's what the user supplied. Otherwise we keep track of the number of bins and bin range. This gives a ~order of magnitude performance boost for medium-large arrays (note log scales):

```python
bins = 50
ns = np.logspace(2, 7, num=6, dtype=int)
times = pd.Series(index=ns, dtype=float)

for n in ns:
    hist = sns._statistics.Histogram(bins=bins)
    x = np.random.normal(0, 1, size=n)
    res = %timeit -o hist(x)
    times[n] = res.average
```

![image](https://user-images.githubusercontent.com/315810/117050818-ceae1180-ace3-11eb-8031-8ba1e059c8f1.png)

No change to external API.",1,3,"['enhancement', 'mod:distributions', 'statistics']"
25,623638412,2566,4704710,2021-04-26 19:26:26,2021-05-04 11:24:52,closed,Add warn_singular parameter in kdeplot,"Set to False to silence the warning about zero variance datasets.

~One downside is that if you run into this in the `histplot(..., kde=True)` context the suggestion for how to disable it is incorrect (or at least unhelpful). Could potentially have `histplot` set this to False internally. In general I think I probably should have trusted my ""non-deprecation-related warnings are almost always more annoying then helpful"" intuition here.~

Most cases where `kdeplot` is called internally now have this set to `False`, as I think the warning makes most sense in the ""hey, why is my single plot empty"" context, not when one kde curve in a large pairplot (or etc.) has disappeared.

Closes #2499",1,3,"['enhancement', 'mod:distributions']"
26,622598826,2562,4704710,2021-04-24 15:07:31,,open,fix clustermap test: colors parameter,"the `tree_kws` parameter for [clustermap](https://seaborn.pydata.org/generated/seaborn.clustermap.html?highlight=clustermap#seaborn.clustermap) is forwarded to [matplotlib.collections.LineCollection](https://matplotlib.org/stable/api/collections_api.html#matplotlib.collections.LineCollection). But that constructor does not have a `color` kwarg. The unit test fails on openSUSE Tumbleweed with MPL 3.4.1:

```
[  333s] _________________________ TestClustermap.test_tree_kws _________________________
[  333s] 
[  333s] self = <seaborn.tests.test_matrix.TestClustermap object at 0x7f3043a83100>
[  333s] 
[  333s]     def test_tree_kws(self):
[  333s]     
[  333s]         rgb = (1, .5, .2)
[  333s]         g = mat.clustermap(self.df_norm, tree_kws=dict(color=rgb))
[  333s]         for ax in [g.ax_col_dendrogram, g.ax_row_dendrogram]:
[  333s]             tree, = ax.collections
[  333s] >           assert tuple(tree.get_color().squeeze())[:3] == rgb
[  333s] E           assert (0.2, 0.2, 0.2) == (1, 0.5, 0.2)
[  333s] E             At index 0 diff: 0.2 != 1
[  333s] E             Full diff:
[  333s] E             - (1, 0.5, 0.2)
[  333s] E             + (0.2, 0.2, 0.2)
[  333s] 
[  333s] seaborn/tests/test_matrix.py:1320: AssertionError
```",10,1,[]
27,617646064,2559,4704710,2021-04-19 04:32:07,2021-04-23 11:40:36,closed,Reduce redundant computation in distplot linewidth,"Fixes #2555

* moves `binwidth`, `thin_bar_idx`, and `left_edge` calculation out of the loop since it's invariant over the iterations
* Only `set_linewidth` one per bar, instead of setting all bar's linewidth once per facet

## Some evidence this works

I've run this on this branch, and on master

```python
import seaborn as sns
import matplotlib as mpl
from setuptools_scm import get_version

# To show commit
print(get_version(root='..', relative_to=sns.__file__))

diamonds = sns.load_dataset(""diamonds"")
```

```python
%%timeit
g = sns.displot(diamonds, x=""price"", row=""cut"", col=""color"")
```

```python
g = sns.displot(diamonds, x=""price"", row=""cut"", col=""color"")
print({rect.get_linewidth() for rect in g.fig.findobj(mpl.patches.Rectangle)})
```

### This branch

```
0.10.1.dev198+ga365acc
4.08 s ± 60.8 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
{0.0, 0.37466112012984926}
```

### master

```
0.10.1.dev197+g66b4783
5.03 s ± 82.5 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
{0.0, 0.37466112012984926}
```

## TODO

- [x] Tests (manual?)",4,1,['mod:distributions']
28,617246783,2558,4704710,2021-04-17 04:37:26,2021-04-17 12:29:05,closed,DOC: misc fixes.,"Typos, non-existing parameters, and the fact that space before colon in
parameters is necessary for numpydoc to correctly parse the name and
type",2,1,['docs']
29,613695960,2548,4704710,2021-04-12 14:48:01,2021-04-14 11:22:02,closed,DOC: Clarify how to derive dodge parameter value for aligning pointplot in stripplot,"Coming from Twitter: https://twitter.com/michaelwaskom/status/1376595092014833667

This PR clarifies an example. Previously there was the magic number `.532`, which is now replaced by `.8 - .8/3` and an accompanying comment-explanation.

- 0.8 is the default width allotted to each category
- `0.8 - 0.8 /3` equals `.532` but will allow users to adjust the example to their need if they have different numbers of hues",2,2,['docs']
30,610079450,2546,4704710,2021-04-06 18:30:31,2021-04-07 12:04:48,closed,Add JOSS paper to docs/README,,1,3,['docs']
31,609947500,2545,4704710,2021-04-06 15:28:41,2021-04-06 15:48:23,closed,interquartile range errorbars,"When making categorical plots with median estimator, it would sometimes be useful to show the interquartile range as errorbars similar to the boxes in boxplots. 

What do you think of an option for the confidence interval parameter comparable to the ""sd"" option such as ci=""iqr""?

```
import seaborn as sns
import numpy as np

tips = sns.load_dataset(""tips"")
ax = sns.pointplot(x=""time"", 
                   y=""total_bill"",
                   data=tips,
                   hue=""smoker"",
                   estimator=np.median, 
                   ci=""iqr"")
```

I'm not sure if this really is a valuable feature and it adds another option to the ci parameter which I think is not optimal. Feel free to close if you think it is unnecessary or can be achieved in another simple way without changes to the codebase (which I did not find out at least).",4,1,[]
32,609566472,2544,4704710,2021-04-06 07:11:26,2021-04-06 10:53:36,closed,Minor bibtex changes.,EOM,0,1,[]
33,609025044,2542,4704710,2021-04-05 15:40:08,2021-04-05 15:43:25,closed,minor changes in bib,,0,1,[]
34,608135922,2540,4704710,2021-04-02 17:15:19,,open,x_estimator bars now inherit scatter_kws alpha,"x_estimator error bars were previously always opaque, but now inherit alpha parameter from scatterplot settings (if present), since the error bars replace the scatterplot.

Fixes #2538 ",5,1,['mod:regression']
35,604452681,2533,4704710,2021-03-30 21:12:55,,open,Build documentation on Read the Docs,"Hi! This is a proposal to build the seaborn documentation on Read the Docs. Doing so has a bunch of interesting niceties, the best one for me being having the complete history of past seaborn versions (I've had to use Wayback Machine in the past to easily look for old documentation).

_Full disclaimer: I work as Developer Advocate at Read the Docs, with a mission to help scientific projects improve their documentation, and I am more than happy to hear feedback or complaints!_

This was proposed [a while back](https://github.com/mwaskom/seaborn/issues/958#issuecomment-253268750), but the build process requires some tweaks to make it work properly on Read the Docs. To that end, this pull request contains three things:

- A proper `.readthedocs.yaml` configuration
- A hack to build the notebooks if an environment variable is detected
- A little hack to create the thumbnails directory before the actual build starts (see #2532)

The end result can be seen here: https://astrojuanlu-seaborn.readthedocs.io/en/rtd/

Although nowadays parts of the seaborn documentation workflow, and in particular `tools/nb_to_doc.py`, could be rewritten using something like [nbsphinx](https://nbsphinx.readthedocs.io/) (which I personally use in other projects to create example galleries based on Jupyter notebooks), I wanted to keep things as simple as possible.

@mwaskom What do you think?

cc @ericholscher

_Edit: Simplified ""hacks"" after clarification, see discussion below_",5,2,"['docs', 'infrastructure']"
36,603771722,2531,4704710,2021-03-30 13:18:15,2021-03-30 14:59:30,closed,Add Read the Docs configuration,,4,1,[]
37,600143432,2522,4704710,2021-03-24 22:30:15,2021-03-25 16:56:43,closed,Fix histplot auto line width with log scale or categorical y axis,"Fixes #2513
Fixes #2523

With test case from #2513:

```python
fig, axs = plt.subplots(ncols=3, nrows=2, figsize=(12,6))

vals = np.random.randn(1000)
sns.histplot(x=vals, log_scale=False, ax=axs[0, 0])
sns.histplot(x=10**vals, log_scale=True,ax=axs[1, 0])

vals = np.random.randn(10000)
sns.histplot(x=vals, log_scale=False, ax=axs[0, 1])
sns.histplot(x=10**vals, log_scale=True, ax=axs[1, 1])

vals = np.random.randn(1000000)
sns.histplot(x=vals, log_scale=False, ax=axs[0, 2])
sns.histplot(x=10**vals, log_scale=True, ax=axs[1, 2])

plt.tight_layout()
```

![image](https://user-images.githubusercontent.com/315810/112391867-f070ad80-8cce-11eb-9d87-ae32ebba0ca1.png)

And #2523:

```python
f, axs = plt.subplots(2)
sns.histplot(y=[0, 1, 1], discrete=True, edgecolor=""r"", ax=axs[0])
sns.histplot(y=[""a"", ""b"", ""b""], discrete=True, edgecolor=""r"", ax=axs[1])
```

![image](https://user-images.githubusercontent.com/315810/112512022-5b6ec280-8d69-11eb-97a5-b860dac860b2.png)

Thanks @mgab for the very clear bug report!",1,2,"['mod:distributions', 'bugfix']"
38,591649074,2504,4704710,2021-03-12 12:44:00,2021-03-24 21:54:10,closed,Fix log scaling in distribution plots,"Fixes #2502 

This is a huge development footgun; see #2409 for thoughts on how this can be made automatic to reduce the risk of such bugs",2,3,"['mod:distributions', 'bugfix']"
39,580945643,2490,4704710,2021-02-26 15:37:30,2021-03-06 22:26:33,closed,Don't pass a set to ListedColormap in clustermap,"Avoids the issue in https://github.com/matplotlib/matplotlib/issues/19544

Matplotlib is going to revert the problematic release candidate behavior, but this PR should make seaborn robust to future such changes.

Also handles an issue where it looks like passing `tree_kwargs={""color"": color}` will not work in matplotlib 3.4, due to some change in the resolution of `color`/`colors`.",1,3,['mod:matrix']
40,580006060,2489,4704710,2021-02-25 10:57:29,2021-02-25 15:54:40,closed,"Working ""hello world"" for non-notebook user","I was pretty confused by the intro docs. I wanted a ""hello world"" ASAP, but `sns.pairplot` was doing nothing. It just returns an object.

It turns out that behind the scenes, seaborn updates the pyplot context, and to see the plot, I needed to use `.show()`.

The current docs seem to assume the user is in a notebook environment. I do not believe this applies to everyone.",4,1,[]
41,576749314,2485,4704710,2021-02-19 21:42:47,,open,Replace version numbering interface,"As the `distutils.version` is deprecating, it was replaced
with the `packaging.version`. In order to give support for all
version numbering, according to PEP 440, parse was used.

Fixes #2466 ",3,3,['internals']
42,574542664,2482,4704710,2021-02-16 23:41:41,2021-02-17 00:10:15,closed,update matplotlib canonical...,.. this will help with inter sphinx warnings.,2,1,"['docs', 'infrastructure']"
43,570314253,2477,4704710,2021-02-09 13:49:32,2021-02-10 00:01:14,closed,Fix histplot shrink with non-discrete bins,"Fixes #2476

The code for shifting the shrunken bars assumed that discrete binning
was in effect. This is probably the only situation where shrinking
really makes sense, but there was no prevention or warning of getting
an innacurate result when using it with continuous bins.

It works properly now:

```python
sns.histplot(data=tips, x=""total_bill"", binwidth=8)
sns.histplot(data=tips, x=""total_bill"", binwidth=8, shrink=.6)
```
![image](https://user-images.githubusercontent.com/315810/107373188-3e7d7900-6ab4-11eb-9a35-821bd76fbfd0.png)

```python
sns.histplot(data=tips, x=""total_bill"", binwidth=8, color="".6"")
sns.histplot(data=tips, x=""total_bill"", hue=""time"", multiple=""dodge"", binwidth=8, shrink=.6)
```
![image](https://user-images.githubusercontent.com/315810/107373289-610f9200-6ab4-11eb-990d-727132a53526.png)
",1,1,"['mod:distributions', 'bugfix']"
44,568351789,2473,4704710,2021-02-05 13:24:46,2021-02-05 15:30:10,closed,Don't fail when docstrings have been stripped by -OO mode,Fixes #2470,1,3,['internals']
45,566752604,2468,4704710,2021-02-03 11:21:04,2021-02-05 01:20:17,closed,Fix faceted bivariate histogram normalization at displot,Fixes #2465,2,1,"['mod:distributions', 'bugfix']"
46,565171099,2462,4704710,2021-02-01 13:12:32,2021-02-03 02:45:09,closed,Fix multiple resolution when hue variable has no name,"Fixes #2452

Also simplifies the logic that disabled the `multiple` parameter when no hue was assigned (which caused the issue originally), instead allowing the default visual attributes to vary with multiple even if it has no effect on the position of the distributions.",1,5,"['mod:distributions', 'bugfix']"
47,564765054,2461,4704710,2021-02-01 00:39:37,2021-02-01 12:26:42,closed,Add percent-based normalization in histplot,"e.g.

```python
sns.histplot(
    data=tips,
    x=""day"", hue=""time"",
    stat=""percent"", multiple=""dodge"", shrink=.8
)
```
![image](https://user-images.githubusercontent.com/315810/106403319-02834d80-63fc-11eb-986b-c110e7a6bc83.png)
",1,2,"['enhancement', 'plots', 'mod:distributions']"
48,564693788,2460,4704710,2021-01-31 17:22:04,2021-01-31 19:39:03,closed,Set alpha properly on unfilled hist/kde plots,Fixes #2450,1,3,"['mod:distributions', 'bugfix']"
49,564530001,2458,4704710,2021-01-30 22:29:12,2021-01-31 13:03:20,closed,Fix rugplot with datetime data,Fixes #2451,1,1,"['mod:distributions', 'bugfix']"
50,564528670,2457,4704710,2021-01-30 22:18:52,2021-01-31 13:00:58,closed,Handle deprecation of ci=None in lineplot,Fixes #2441,1,1,['bugfix']
51,561467708,2449,4704710,2021-01-26 01:32:36,2021-01-30 21:55:29,closed,Generalize getting default color from color cycle,"Adds a general function, uses it in

- `stripplot`
- `swarmplot`
- `scatterplot`
- `lineplot`
- `histplot`
- `kdeplot`
- `ecdfplot`
- `rugplot`

Also has some reorganization of the new categorical plot tests.

Fixess #2133 ",1,21,['internals']
52,559616065,2447,4704710,2021-01-22 00:02:37,2021-01-24 13:21:42,closed,Refactor swarmplot,"See #2429 for context. This PR implements all of the new features/behaviors described in that issue. It also adds the `warn_thresh` parameter for control over the proportion of points that must overlap to trigger a warning.

Merging with the same incomplete components as the stripplot refactor (legend, color cycle, and docstring).

",2,19,"['refactor', 'plots', 'mod:categorical']"
53,558577688,2443,4704710,2021-01-20 22:15:52,2021-01-21 21:21:57,closed,Improve swarmplot algorithm,"Prior to a full refactor of `swarmplot`, this PR makes some targeted improvements to the implementation of the beeswarm itself:

- The function now overwrites the `draw` method on the matplotlib artists representing the swarms, meaning that points will be repositioned at draw time and always reflect the latest data transform. This makes the swarm layout robust to future changes in axes scaling or figure layout.
- The underlying data are no longer sorted, so the arrays in the matplotlib artists will match the order in the input dataframe.
- The algorithm now uses pointwise size information, so beeswarms can be drawn with points of varying sizes.",1,8,"['enhancement', 'mod:categorical']"
54,556040812,2436,4704710,2021-01-16 00:26:20,2021-01-16 13:41:12,closed,Restrict comparison values for variable type strings,"This should avoid subtle bugs that could crop up when comparing against
the wrong form (e.g. ""category"" instead of ""categorical"").

There might be a built-in way to do this, but I couldn't find it...",1,1,['mod:core']
55,555308911,2435,4704710,2021-01-15 00:27:41,2021-01-16 13:43:36,closed,"Support Float64Dtype in boxenplot, related to #2434","This PR solves the above issue.
Test added for when pandas >= 1.2.
",2,1,[]
56,553555625,2431,4704710,2021-01-12 15:38:05,2021-01-16 13:52:37,closed,Fix typo,Let's reduce the ambiguity on this one 😎 ,2,1,[]
57,552281496,2427,4704710,2021-01-10 13:13:04,2021-01-10 20:08:33,closed,boxplot whis keyword docstring clarification,"The docstring for the `whis` keyword in `boxplots` has an inaccurate description. That is, whiskers don't extend to 1.5*IQR, rather they extend to the furthest datum within 1.5*IQR. I propose a clearer wording.

Evidence for confusion caused by this inaccuracy can be found [here on Stackoverflow](https://stackoverflow.com/questions/49139299/whisker-is-defined-as-1-5-iqr-how-could-two-whikers-in-plot-from-python-seabor).",3,2,[]
58,552186009,2426,4704710,2021-01-09 21:00:29,2021-01-09 21:09:44,closed,Abstract logic of forcing figure draw with matplotlib backcompat,"See https://github.com/matplotlib/matplotlib/issues/19197 for context

Fixes #2343",1,1,['upstream']
59,549328611,2417,4704710,2021-01-05 17:48:29,2021-01-05 19:40:57,closed,Improve NA robustness in VectorPlotter.comp_data,"This PR avoids passing `nan` through the matplotlib converters used to obtain a numeric/computable representation of the data (i.e. `VectorPlotter.comp_data`).

It also
- codifies that the converted columns in `comp_data` have a float dtype
- converts `inf` to `nan`, in line with what matplotlib does

Fixes #2295 

Additionally this will implicitly address #1971 once the regression plots are refactored to use `comp_data` internally. (@mojones, funny that you opened both issues).",2,3,"['enhancement', 'bugfix', 'mod:core']"
60,549047397,2416,4704710,2021-01-05 13:36:37,2021-05-07 12:27:41,closed,make Freedman-Diaconis-rule NaN-agnostic,"This makes the function `_freedman_diaconis_bins` more robust.

As discussed in #2414 the arrays that are passed to the function in the seaborn code undergo are submitted to the `remove_na` function beforehand and the na removal is thereby mute.

@mwaskom Feel free to close the PR, if you disagree that this change adds value to the codebase. ",2,1,[]
61,547879501,2413,4704710,2021-01-03 13:31:22,2021-01-19 21:59:37,closed,Modernize categorical plotting and refactor stripplot,"This PR begins the process of refactoring the categorical plots; see https://github.com/mwaskom/seaborn/issues/2429 for context, including a list of enhancements and modified default features.

It implements much of the shared code supporting categorical plots (maintaining substantial, but not complete backwards compatibility) within the new core system, including some extensions within the core itself.

It also includes a re-implementation of `stripplot` and `catplot` with `kind=""strip""`.

",3,33,"['refactor', 'mod:categorical']"
62,547774210,2412,4704710,2021-01-02 16:50:24,2021-01-02 21:29:44,closed,Refactor tests and bump minimal pandas,"This PR mostly has housekeeping on the tests.

We're also raising the minimally supported pandas to 0.24. We'll pass inside the 2 year release window before 0.12 goes out, and 0.24 has a more standardized type conversion API that I want to be able to use.",1,4,"['refactor', 'testing']"
63,546657693,2408,4704710,2020-12-29 22:22:47,2020-12-29 22:33:19,closed,Revert change to forced draw command,"The change in #2399 inadvertantly broke seaborn on the macosx mpl backend.

See https://github.com/matplotlib/matplotlib/issues/19197

This PR reverts that change until the issue can be sorted out.",1,1,[]
64,546550886,2407,4704710,2020-12-29 16:24:32,2021-01-02 16:23:55,closed,Increase errorbar flexibility,"This PR adds a new internal statistics object for doing aggregation with an estimator function and expands the flexibility of the error bars that operation can produce.

This implements and closes #2403. More logic is given there. Briefly, the new errorbars can be:

- ""ci"", for a bootstrap confidence interval of a given width (default 95)
- ""pi"", for a percentile interval of the data with a given width (default 95)
- ""se"", for +/- the standard error, scaled by a given factor (default 1)
- ""sd"", for +/- the standard deviation, scaled by a given factor (default 1)
- an arbitrary callable that maps a vector to a (min, max) interval

To Dos:
- [x] Use this function within the relational module (other modules will need to come after refactor)
- [x] Address TODOs in bootstrap function, making it a bit easier to work with
- [x] Deprecate old `ci=` parameter
- [x] Decision about raising on `errorbar=""se""` when `estimator` is not `mean`
- [x] Handle log-scaled axes properly
- [x] Write out a stub for a user guide page on this (completion will need integration in other modules)
- [x] Write out a stub for the release notes

This (partly) addresses several longstanding issues. It won't fully address them until the logic is integrated into the other modules; doing so will happen after they are refactored to use the new core objects. But I will close the open issues now, and then link back here when the downstream work is implemented. Relevant issues include #331, #1501, #1427, #1492, #1892, #2283, #2332, ",2,14,"['enhancement', 'refactor', 'statistics']"
65,544921019,2399,4704710,2020-12-23 16:16:13,2020-12-23 16:23:28,closed,Use modern canonical way of drawing the figure,Closes #2343,1,1,[]
66,543812658,2398,4704710,2020-12-22 01:28:05,2020-12-23 16:10:17,closed,Make scipy an optional dependency,"This PR transitions scipy to an optional dependency. The reasons are that scipy is a heavy, complex library and seaborn only uses a small piece of it. Additionally, issues relating to scipy installation problems are relatively common (or at least, disproportionate to issues with other dependencies), indicating that its requirement has some cost to users.

Of the changes in the PR, there should be minimal user-facing implications. The following functions will have slightly changed behavior with a default install:

#### `kdeplot` and `violinplot`

This PR vendors part of scipy's `gaussian_kde` implementation in seaborn. It is limited to the pure Python bits in the `scipy.stats.kde` module, which required removing a few methods. Most of these were unused by seaborn, but the integration methods, which are necessary for evaluating a cumulative KDE, involved numerical routines that I did not want to implement in pure Python. So (for now at least), `kdeplot(... cumulative=True)` will raise if `scipy` is not installed. All other features should work, with scipy continuing to be used if available.

#### `clustermap`

`clustermap` requires scipy and will now raise if it's not available.

#### `boxenplot`

Using `k_depth=""trustworthy""` involves the normal distribution quantile function. This is now in the standard lib, but only on Python 3.8+. So this option requires 3.8+ OR scipy to be available, otherwise it will raise.

#### Utility functions

Several utility functions that had been deprecated in the 0.10 release cycle (`iqr`, `pmf_hist`, `percentiles`, and `sort_df`) are removed here, as some of them used scipy.

#### Installing

Going forward, there will be two ways to install seaborn through pip:

    pip install seaborn

will require only the mandatory dependencies (numpy, pandas, and matplotlib), while

    pip install seaborn[all]

will also pull in scipy and statsmodels.

Closes #2182 ",1,24,"['infrastructure', 'statistics']"
67,543477348,2397,4704710,2020-12-21 13:15:20,2020-12-21 15:35:33,closed,Corrects typo in the diverging palette doc sub-section title,"This pull request corrects a typo in the [color palette tutorial](https://seaborn.pydata.org/tutorial/color_palettes.html#perceptually-uniform-divering-palettes).

```diff
- Perceptually uniform divering palettes
+ Perceptually uniform diverging palettes
```",2,2,['docs']
68,543138695,2396,4704710,2020-12-20 22:05:05,2020-12-21 23:44:59,closed,Raise minimal supported Python to 3.7 and bump requirements,Following NEP29 and upstream libraries,1,8,['infrastructure']
69,543124858,2394,4704710,2020-12-20 20:07:04,2020-12-20 20:25:47,closed,Reduce doc CI parallelization,Can't parallelize over notebooks/html steps without breaking things,1,1,[]
70,543094747,2393,4704710,2020-12-20 16:46:29,2020-12-20 19:38:51,closed,Docs tidying for v0.11.1 release,,1,9,['docs']
71,543086052,2392,4704710,2020-12-20 15:41:26,2020-12-20 16:01:38,closed,[DO NOT MERGE] Test pandas 1.2 release candidate,"Not to merge, but just to test the pandas release candidate on your CI.",3,2,[]
72,542736929,2389,4704710,2020-12-18 19:35:43,2020-12-19 14:52:32,closed,Allow clustermap row/col colors to be categorical,"Currently providing `row_colors` or `col_colors` as categoricals is impossible and clustermap raises upon such input (see #1872). With this PR, pandas categorical input is converted to object-typed data structure before setting the color for nan data, in a way that supports categorical input.

Fixes #1872. 
",2,4,"['mod:matrix', 'bugfix']"
73,542540698,2388,4704710,2020-12-18 13:22:33,2020-12-19 18:47:12,closed,Reduce usage of global matplotlib state in axisgrid objects,"Most of the axisgrid objects (`FacetGrid`, `PairGrid`, `JointGrid`) were written before there were many axes-level seaborn functions and were originally designed to interface with `pyplot` functions. They make use of matplotlib global state to allow a generic interface for spreading a plot across multiple Axes instances. Because they control the state internally, this ends up not being a huge problem, but one potential source of issues would arise in the context of parallel execution (cf. #2380).

All seaborn-axes level functions accept `ax=` for explicit placement, so this PR special-cases seaborn functions to pass the relevant `Axes` around explicitly rather than setting and using the global state.

It would probably be fine to more generically pass `ax` explicitly when the function signature for the to-be-mapped function includes `ax`. But while there are some esoteric corner cases there that might case issues, just handling seaborn functions should (?) be completely transparent. So that is what we will do for this point release.",1,4,"['enhancement', 'mod:axisgrid']"
74,540831830,2386,4704710,2020-12-16 01:48:24,2020-12-17 13:05:31,closed,Add/restore functionality to long-form data processing,"The variable processing refactor made long-form argument processing more strict, allowing only string(y) types as keys to the `data` object. While this is basically what was documented, many functions previously worked properly with numeric arguments or even tuples (i.e. as keys for multi-index columns).

This PR makes the processing of named variables with long-form data more flexible.

It introduces a couple minor ambiguities, e.g. when `data` is present and a variable is specified with a number or a tuple, the variable could be interpreted as a key for `data` or as a data value itself (preferring the former). But I think in most cases, the expected behavior it to interpret it as a key.

~Needs tests, but I wanted to get CI going.~

Fixes #2279
Fixes #2263

Wide-form data objects with hierarchical column index still don't work properly, and making that work is nontrivial, so those remain unsupported (for now at least).",4,4,"['api', 'mod:core']"
75,540113135,2385,4704710,2020-12-15 09:39:52,2020-12-15 12:08:37,closed,Update README.md,"Added Links for Python 3.6, Python 2 and PyPI so that someone who is not familiar with either of them can check them out easily.",3,1,[]
76,538477752,2383,4704710,2020-12-12 21:07:05,2020-12-12 23:24:25,closed,Run tests on github actions,"Changes in the Travis policies for open-source projects made their builds take interminably long (and possibly mean there's a hard limit on build-time), so it's necessary to transition over to github actions. We'll see how it goes.",1,1,['infrastructure']
77,538287988,2382,4704710,2020-12-12 16:30:14,2020-12-12 23:42:14,closed,Assorted fixes for small problems,Addressing a number of minor issues on the v0.11.1 tag. See commit log for details.,1,12,"['mod:axisgrid', 'bugfix']"
78,535342189,2379,4704710,2020-12-09 17:29:56,2020-12-12 14:22:35,closed,FIX: Infer categorical dtypes before boolean resolution,"Fixes #2317, with small changes to the docstring of `variable_type`.",2,3,"['bugfix', 'mod:core']"
79,535166077,2378,4704710,2020-12-09 13:06:39,2020-12-09 16:50:34,closed,Fix faceted bivariate KDE normalization,Fixes #2377,1,1,"['mod:distributions', 'bugfix']"
80,533661271,2375,4704710,2020-12-07 13:14:13,,open,fix for an OverflowError,Libraries like PyFolio still use this function and in some cases it might lead to an OverflowError: cannot convert float infinity to integer. Here is a quick fix for these cases returning just a default value of bins.,7,1,[]
81,530280947,2368,4704710,2020-12-01 12:52:08,2020-12-01 20:48:45,closed,Fix pairgrid off-diagonal plots with non-string column names,"Fixes #2307

Working reprex from original issue:

![image](https://user-images.githubusercontent.com/315810/100743239-108c0200-33aa-11eb-8885-9c61d89b3acc.png)
",1,2,"['mod:axisgrid', 'bugfix']"
82,527479977,2363,4704710,2020-11-25 14:20:03,2020-11-25 18:12:11,closed,TST: FIX: Consider array length in artist arrays comparison,Fixes #2329 .,3,3,"['testing', 'bugfix']"
83,523456633,2359,4704710,2020-11-18 20:38:18,2020-11-23 22:23:56,closed,Fix jointplot reference syntax in distributions tutorial.,"Hi! I caught a typo in the Sphinx syntax of this page: https://seaborn.pydata.org/tutorial/distributions.html
This PR fixes the missing colon, which will make the reference render.

I also fixed one other rST syntax error, there was a missing space that prevented the Sphinx double-backtick code block from rendering correctly.

Thanks for the wonderful package. 😄",2,2,['docs']
84,521160815,2353,4704710,2020-11-15 08:08:04,,open,Allow independent variable to be plotted on y-axes in lineplot,"In lineplots, seaborn assumes the independent variable to be drawn on the x-axis and thus sorts the x-dimension first. If we want the independent variable to be drawn on the y-axis and therefore swap the axes by using the x and y arguments of `lineplot`, we do not get a mirror image of the former plot. Instead, the values are still ordered along the x dimension. Drawing error bars or bands, then will not work at all.
To allow producing such a mirror image, the `vals` and `grouper` variables for the `aggregate` function need to be swapped. I introduced the argument `sort_dim` to allow the user to decide which dimension should be sorted first.
To draw the errors correctly in the case of `sort_dim=""y""`, `fill_betweenx` is used for band style and `xerr` is used instead of `yerr` for bar style.
I find this feature important when plotting e.g. meteorological variables as a function of height. Apart from [this](https://stackoverflow.com/questions/55362200/switch-seaborn-x-and-y-axes-but-compute-standard-deviation-on-original-orientati) stackoverflow question, I couldn't find any information on this issue.

example code:

```
import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

height= np.arange(0, 6.3, 0.1)
height_ind = np.repeat(height, 200)
rand = np.random.normal(scale=0.1, size=200*len(height))
vals = np.sin(height_ind) + rand

df = pd.DataFrame()
df[""height""] = height_ind
df[""vals""] = vals

#independent variable on x-axis
plt.figure()
g = sns.lineplot(x=""height"", y=""vals"", ci=""sd"", data=df)
plt.show()

#independent variable on y-axis with data still sorted along x
plt.figure()
g = sns.lineplot(y=""height"", x=""vals"", ci=""sd"", data=df)
plt.show()

#independent variable on y-axis with data sorted along y
plt.figure()
g = sns.lineplot(y=""height"", x=""vals"", ci=""sd"", sort_dim=""y"", data=df)
plt.show()

```
",1,1,[]
85,519936443,2347,4704710,2020-11-12 14:49:29,2020-11-23 22:25:10,closed,better checks for `sharey` and `sharex` in `axesgrid.py`,"better checks for `sharey` and `sharex` in `axesgrid.py`

closes #2346 ",2,2,"['mod:axisgrid', 'bugfix']"
86,513555682,2341,4704710,2020-11-01 05:40:14,2020-11-04 02:23:25,closed,add sem error band option to lineplot ,Currently only standard deviation (SD) and confidence interval (CI) are allowed when specifying error band in lineplot. This PR add an option to use standard error of mean (SEM) as error band. ,2,1,[]
87,510348111,2335,4704710,2020-10-26 22:40:37,2020-10-29 12:10:55,closed,Force doc CI to use Python 3.8,Relevant matplotlib issue https://github.com/matplotlib/matplotlib/issues/18718,1,1,"['testing', 'infrastructure']"
88,509298750,2332,4704710,2020-10-24 01:03:33,2021-01-23 16:30:04,closed,Added option for ci to be a callable.,"Added the option for ci to be a callable in relational.py. If ci is a callable, it should take a list of values representing multiple observations of the ``y`` variable at the same ``x`` level and return a list [lower_bound, upper_bound] where lower_bound is the lower value for the shaded region and upper_bound is the upper value for the shaded region. ci can also return a different length-two array-like object. A ValueError exception is raised if ci is callable but doesn't satisfy these conditions. I also modified the documentation to reflect this change. Also fixed a comment typo.

Why I think this is a good idea: (1) It mirrors the functionality of estimator, (2) it doesn't change the way the code works when ci isn't passed as a callable, and (3) it allows the user to make error bars based off of any criteria they choose.",8,1,"['wishlist', 'statistics']"
89,507048358,2328,4704710,2020-10-20 19:35:48,2020-11-23 23:03:24,closed,MAINT: Drop nose and test on python==3.9,"This PR drops the obsolete `nose` package, and rewrites all nose-style tests as modern `pytest`-style tests. Most changes are simple translations of nose asserts to their equivalent pytest `assert` expressions. In a few places pytest parameterization was utilized as well. I did my best to keep the changes to the minimum, but I also changed a few variable names occasionally and removed subclassing from object when I encountered such cases (leftovers from py2-style code).

This PR also adds python==3.9 to the CI tests matrix.",2,12,"['testing', 'infrastructure']"
90,504982162,2323,4704710,2020-10-16 17:08:40,2020-10-26 22:24:49,closed,Fix: do not annotate clustermap w/ annot=False,Fixes #2319 the `clustermap` function was not catching False as it should have been.,3,1,"['mod:matrix', 'bugfix']"
91,500974453,2313,4704710,2020-10-10 13:10:34,2020-10-29 12:12:55,closed,Error if row/col colors are indexed but data isn't,"Closes #1550 . With this PR, an appropriate `TypeError` is raised if one of `{row/col}_colors` are pandas data types but the data isn't, where indices can't be matched. Also contains small changes to some matrix docstrings. ",2,6,['mod:matrix']
92,494341422,2304,4704710,2020-09-28 19:01:44,2020-10-26 22:25:44,closed,Fix `adjust_subtitles` when `legend_out=False`.,Fixes #2292 . ,1,3,"['mod:axisgrid', 'bugfix']"
93,493705247,2302,4704710,2020-09-27 10:53:56,2020-10-26 22:08:04,closed,throw a meaningful error message in lmplot in case  kwarg is missing,"`lmplot` de facto requires a `data` keyword argument. Currently, not specifying it throws the following error.
```
TypeError: NoneType is not suscriptatble
```

This patch improves the error message as
```
TypeError: Missing required keyword argument `data`.
```",5,1,"['enhancement', 'mod:regression']"
94,488911862,2287,4704710,2020-09-17 20:24:12,2020-10-26 22:07:12,closed,Fix: use linewidth in boxenplot elements,"Fixes #2285 . Prior to this change, the `linewidth` argument is only used to frame the legend elements and is not applied to boxes and medians.",1,1,"['mod:categorical', 'bugfix']"
95,487513542,2281,4704710,2020-09-15 19:29:05,2020-10-26 22:05:33,closed,TST: fix colors and paths comparison in relational tests,"There are some `scatterplot` tests which compare wrong collection against expected paths and colors. The reason the tests have passed so far is that `colors_equal` and `paths_equal` use `zip` to compare arrays elements but in the case of unequal array length `zip` iterates over the first `min(m,n)` elements, so if the first `min(m,n)` elements are all equal it returns `True`. 

This PR tests colors and paths using the correct collections; moves to test color arrays equality using matplotlib's `same_color` function (introduced in matplotlib 2.2); and fixes the behavior of `paths_equal`.",1,3,['bugfix']
96,486013201,2273,4704710,2020-09-12 20:18:35,2020-12-12 14:16:43,closed,Fix NA propagation in lineplot,"Fixes #2272

This now drops NA internally (basically restoring the previous behavior) so that NAs don't propagate and erase the confidence intervals. It also uses `np.nanpercentile` which better matches the previous behavior, which used the (apparently NA aware) `scipy.stats.percentileofscore`.

A related issue I would like to address here is #1552, but on a first stab I ran into some complexities and that may need to be handled separately with more thought.

Ideally the aggregation could use pandas NA-aware mean when `estimator=""mean""` and then we would need to do less NA bookkeeping. But the bootstrapping algorithm converts data to numpy arrays because sampling with replacement is about an order of magnitude slower with pandas objects. One possibility would be to use `np.nanmean` if the estimator is `""mean""` and there are NAs in the data, but that is not fully general. It's possible I'm missing something about how to do fast positional row indexing of pandas objects, but I can't figure it out.",1,3,"['mod:relational', 'bugfix']"
97,485575327,2270,4704710,2020-09-11 23:53:48,2020-10-26 22:04:09,closed,Fix PairGrid with non-square grid and non-marginal diagonal axes,"Fixes #2260

```python
g = sns.pairplot(data=iris, hue=""species"", y_vars='sepal_width')
```
![image](https://user-images.githubusercontent.com/315810/92981593-8007ea80-f468-11ea-8de5-c95e92b6cb9d.png)
",1,2,"['mod:axisgrid', 'bugfix']"
98,482851897,2262,4704710,2020-09-09 13:38:23,2020-09-11 23:54:55,closed,Pass `col_order` and `row_order` to FacetGrid in displot,Resolves #2261.,2,1,['bugfix']
99,481987256,2256,4704710,2020-09-08 11:51:26,2020-09-08 13:34:22,closed,Improve PairGrid tight_layout,"- Track the layout_pad parameter and use whenever tight_layout is called
- Call tight_layout at the end of pairplot

Closes #2251 ",1,1,['mod:axisgrid']
100,481743406,2255,4704710,2020-09-08 03:10:21,2020-09-08 11:35:17,closed,Fix non-default color arguments in displot,,1,3,"['mod:distributions', 'bugfix']"
101,481628482,2253,4704710,2020-09-07 20:23:24,2020-09-08 11:18:29,closed,Add set_theme() to replace set(),"Back when importing seaborn called set() implicitly, it would only be used with specific arguments like `set(style=""white"")` which made it clear what it was doing. Now that it need to be explicitly invoked, however, most script start with a confusing `sns.set()`, and it's not clear what that might accomplish.

Because it's a small, innocuous function, `set()` will remain as an alias for now, although it may be deprecated in the future.

Closes #2241 ",1,6,['themes']
102,480575760,2250,4704710,2020-09-05 19:54:55,2020-09-07 19:59:16,closed,Pre-release docs updates,,1,22,['docs']
103,480553482,2248,4704710,2020-09-05 17:22:00,2020-09-05 18:01:16,closed,Better documentation of FacetGrid's access to underlying matplotlib objects,"Subsumes, builds on, and closes #2246.",1,2,['docs']
104,480521702,2247,4704710,2020-09-05 13:42:58,2020-09-05 17:02:24,closed,Fix discrete string-specified light/dark palettes,,1,1,"['mod:palettes', 'bugfix']"
105,480473699,2246,4704710,2020-09-05 07:34:25,2020-09-05 18:01:16,closed,DOC: document `FacetGrid.axes_dict`,This PR makes `FacetGrid.axes_dict` publicly documented as a read-only attribute and corrects the example demonstrating it.,2,1,['docs']
106,480132345,2245,4704710,2020-09-04 21:23:43,2020-09-04 22:36:29,closed,Add proper logos to docs,Closes #2243 ,1,3,['docs']
107,478822391,2242,4704710,2020-09-03 18:46:40,2020-09-05 17:25:33,closed,DOC: minor fixes,This PR fixes an internal broken link in the tutorial and a typo. It's great to see 0.11 RC!,5,5,['docs']
108,477939372,2239,4704710,2020-09-02 16:20:02,2020-09-02 21:23:54,closed,Pre-release docs enhancements,,1,25,['docs']
109,476576664,2237,4704710,2020-08-31 22:11:50,2020-09-01 18:39:19,closed,Add new palette functionality and new colormaps,"Several enhancements here related to color palettes:

---
## New perceptually-uniform colormaps

This PR adds two new colormaps, ""flare"" and ""crest"". They were created in viscm and are perceptually uniform, roughly corresponding to the ""rocket"" and ""mako"" colormaps in seaborn (and the ""magma"" and ""viridis"" colormaps in matplotlib).

But they have a more restricted luminance range, making them better suited for showing a numeric mapping of a scatter or line plot. Correspondingly, they also have a reversed default luminance ramp.

The colormaps look like this:

flare: 
![image](https://user-images.githubusercontent.com/315810/91773492-e2353580-ebb4-11ea-8aec-d9c83c94de36.png)

crest:
![image](https://user-images.githubusercontent.com/315810/91773514-efeabb00-ebb4-11ea-90d7-b246f2cd25aa.png)

and in use, look like this:

![image](https://user-images.githubusercontent.com/315810/91773784-6be50300-ebb5-11ea-880b-17c795ad585c.png) 

![image](https://user-images.githubusercontent.com/315810/91773750-612a6e00-ebb5-11ea-9ad4-233d453320b6.png)

---
## Access to colormap objects through `seaborn.color_palette`

There's a new `as_cmap` parameter for `color_palette` that will return a `matplotlib.colors.Colormap` subclass. This may be useful for getting a circular colormap:

```python
sns.color_palette(""husl"", as_cmap=True)
```
![image](https://user-images.githubusercontent.com/315810/91882776-77860780-ec51-11ea-9c4a-49e33283f3f0.png)

but it's especially useful when combined with the next new feature.

---
## String-based access to light/dark/blend palettes

`color_palette` also now understands inputs like `""light:{color}""` which will use `light_palette` with the seed `""{color}""`. e.g.:
```python
sns.color_palette(""light:b"", as_cmap=True)
```
![image](https://user-images.githubusercontent.com/315810/91882932-b320d180-ec51-11ea-972d-11d0bfa860f4.png)

This lookup route is new used when the `palette` argument for numeric hue mapping is resolved, e.g.:

```python
sns.relplot(
    data=penguins,
    x=""bill_length_mm"", y=""bill_depth_mm"",
    hue=""flipper_length_mm"", size=""sex"",
    palette=""dark:#8ca"",
)
```
![image](https://user-images.githubusercontent.com/315810/91883454-74d7e200-ec52-11ea-9ab4-50903c271254.png)

Closes #2220 

---
## Tweaks to existing palette functions

- Tweaked the `light_palette` and `dark_palette` functions to use very desaturated versions of the input colors, rather than a pure gray, which gives a smoother ramp. Use `blend_palette([gray, color])` where gray is either `"".13""`, or `"".95""` to exactly reproduce previous results
- Fixed the `""{palette}_d""` code to use the correct direction of the color ramp and allow dark reversed palettes.
- Changed the default value for `sep` in `diverging_palette` from `10` to `1` to avoid a large zone of constant color.",1,10,"['enhancement', 'mod:palettes']"
110,476350012,2236,4704710,2020-08-31 14:53:20,2020-08-31 18:46:22,closed,MAINT: avoid deprecation warnings with future numpy releases,"The next minor numpy version (1.20) [deprecated](https://github.com/numpy/numpy/pull/14882) the usage of numpy types that are just aliases to python builtin types. This includes `np.bool`, `np.int`, `np.float` and others. This PR replaces these occurrences with the native types to avoid deprecation warnings on future numpy versions. I changed `np.object` to `np.object_` and not the builtin type since it resulted with slight differences in the relevant test suit (`test_matrix.py`).",2,1,[]
111,475833955,2234,4704710,2020-08-29 22:08:35,2020-08-31 01:04:44,closed,Delegate hue in PairGrid to plotting functions,"The main enhancement here is that `PairGrid` will pass `hue` down to the axes-level functions if they accept it, giving better visuals and more flexibility.

A few other things were cleaned up:

- Added `kind=""kde""` and `kind=""hist""` in `pairplot`
- Added public access to the `PairGrid` (and `FacetGrid`) legend object
- Made it possible to pass only one of `x_vars` and `y_vars`
- No longer pass `color` or `label` in `PairGrid` when not using `hue` (fixes #1301)
- No longer cast pandas data to a numpy array before plotting on the diagonal (fixes #1663)
- Converted `PairGrid` and `pairplot` API examples to notebooks and updated them


These changes need to be noted in the release notes, using the `docs_cleanup` branch to avoid a merge conflict.

Closes #2198 ",1,15,"['enhancement', 'mod:axisgrid']"
112,475774132,2233,4704710,2020-08-29 13:00:08,2020-08-29 14:29:08,closed,Don't try to set attributes on removed axes,Fixes #2228,1,1,['bugfix']
113,475041207,2229,4704710,2020-08-28 01:54:58,2020-08-28 23:36:53,closed,Reduce surprise about relational plot legends,"- [x] Add an ""auto"" mode that chooses between ""brief"" and ""full"" legends and uses the latter when there are <= 6 levels of a numeric variable. This is the new default
- [x] Increase the number of possible legend ""ticks""
- [x] Don't show legend ticks outside the range of the data
- [x] Use the normal legend title when a single variable is used for semantic mapping
- [x] Left-align ""subtitle"" text and set to legend title fontsize
- [x] Improve the docs
- [ ] ~Tweak the default numeric colormap for better contrast at extremes~ Deferring to another PR
- [ ] ~Add new glyph-oriented perceptually uniform colormaps~ Deferring to another PR
- [x] Document roadmap for better legends (#2231)

By setting the legend title artist to invisible, this also fixes #2194 ",1,14,['mod:relational']
114,474103428,2225,4704710,2020-08-26 19:16:55,2020-08-27 13:31:04,closed,Add a rich HTML representation of color palette objects,"e.g, in a notebook:

![image](https://user-images.githubusercontent.com/315810/91346615-1bce0100-e7af-11ea-9394-8c3bc60c8b0f.png)
",1,2,"['enhancement', 'mod:palettes']"
115,473998239,2224,4704710,2020-08-26 15:49:23,2020-08-27 13:32:07,closed,Reverse direction of default distributions sequential colormap,"I think the contrast properties of a light-to-dark ramp are somewhat less desirable than dark-to-light, but it's a bit more intuitive and, decisively, is more internally consistent with the old defaults. So it wins out.

![image](https://user-images.githubusercontent.com/315810/91326296-2c23b300-e792-11ea-8e09-3d47cc9d641d.png)


Fixes #2211 ",1,1,['mod:distributions']
116,473581565,2222,4704710,2020-08-26 00:58:51,2020-08-26 15:07:55,closed,Use core axis labeling method in relational plots,"This will prevent relational plots from overwriting existing axis labels:

```python
f, ax = plt.subplots()
ax.set(xlabel=""Price ($)"", ylabel=""Carat"")
sns.scatterplot(data=diamonds.sample(frac=.1), x=""price"", y=""carat"")
```",1,1,['mod:relational']
117,473551239,2221,4704710,2020-08-25 23:06:35,2020-08-26 00:44:29,closed,Use decreasing values for categorical size mapping,Fixes #2122,1,1,"['bugfix', 'mod:core']"
118,473305477,2219,4704710,2020-08-25 15:59:58,2020-08-25 17:01:24,closed,Update err_style parameter documentation.,,3,1,[]
119,472815779,2218,4704710,2020-08-24 22:17:07,2020-08-25 22:51:02,closed,Add user guide documentation on plotting functions and data structures,"Expands the tutorial to include longer discussions of:

- seaborn function types (the modular organization, and especially the figure-level/axes-level distinction)
- data structure (defining long-form, wide-form, and messy data, and giving overview of flexible options for how to pass both long and wide data

Both points were briefly covered in the introduction previously; that text has been removed.",1,15,['docs']
120,472153144,2217,4704710,2020-08-23 17:24:50,2020-08-23 23:17:48,closed,Remove deprecated JointGrid annotation code,Deprecated in 0.9 and removed now as it conflicts with the legend that ``hue`` mapping requires.,1,1,"['api', 'mod:axisgrid']"
121,472056845,2216,4704710,2020-08-23 00:38:26,2020-08-23 12:06:13,closed,Adjust swarmplot overlap warning and avoid in examples,,1,2,"['docs', 'mod:categorical']"
122,472038713,2215,4704710,2020-08-22 20:55:23,2020-08-22 21:40:55,closed,Change 'culmen' to 'bill' in all examples using penguins,"Mirrors changes in the R penguins dataset, saves characters, and
it's easier to remember how to spell 'bill'

If you have the penguins data cached, you'll need to re-download it.",1,1,['docs']
123,472019685,2214,4704710,2020-08-22 18:22:37,2020-08-22 20:43:58,closed,Scale `legend.title_fontsize` when scaling fonts,"This is something that I missed in #2025. With this PR, `set_context(font_scale=factor)` will also scale the `""legend.title_fontsize""` rcparam. Sorry for the inconvenience. Should I add an entry to the release notes?",3,3,['themes']
124,471217732,2210,4704710,2020-08-20 20:14:25,2020-08-22 20:45:53,closed,"Add hue as parameter in JointGrid and ""hist"" as a kind in jointplot","Now that distribution plots natively support `hue`, it's possible to add this without too much disruption.

Note that unlike `FacetGrid` or `PairGrid`, `JointGrid` itself does not do any iteration over the `hue` levels and only passes it down to the axes-level functions. That means the axes-level functions themselves must support `hue`. As a result, it is currently not possible to use with `kind=""reg""` or `kind=""hex""` in `jointplot`. Adding `hue` to `regplot` is on the roadmap for 0.12.

Examples:

```python
sns.jointplot(data=penguins, x=""culmen_length_mm"", y=""culmen_depth_mm"", hue=""species"")
```
![image](https://user-images.githubusercontent.com/315810/90930957-ac7c9980-e3c9-11ea-9cdd-8cfd0fcee123.png)

```python
sns.jointplot(
    data=penguins, x=""culmen_length_mm"", y=""culmen_depth_mm"",
    hue=""species"", kind=""kde"",
)
```
![image](https://user-images.githubusercontent.com/315810/90821240-948d1300-e300-11ea-972c-139f189040ab.png)


```python
sns.jointplot(data=penguins, x=""culmen_length_mm"", y=""culmen_depth_mm"", kind=""hist"")
```
![image](https://user-images.githubusercontent.com/315810/90821130-69a2bf00-e300-11ea-9c7f-e8052998ed73.png)

Additionally, this PR

- updates the internal variable processing to use the new core infrastructure, meaning that `jointplot`/`JointGrid` now share the same broad flexibility w/r/t input types.
- adds the `marginal_ticks` parameter, a boolean that controls whether the count/density axis ticks are suppressed on the marginal plots

Remaining tasks:
- [x] Decision on `fill=` default for `kind=""kde""`
- [x] Ease transition away from `distplot` as the marginal plot for most `jointplot` modes. 
- [x] Propagate hue mapping parameters appropriately
- [x] Update API examples (convert to notebooks)
- [x] Tidy up other aspects of the docstrings
- [x] Add an example in the distribution plots user guide
- [x] Update at least one example gallery image
- [x] Update release notes",1,29,"['enhancement', 'plots', 'mod:axisgrid']"
125,470274562,2208,4704710,2020-08-19 16:14:27,2020-08-19 17:16:31,closed,Address various warnings raised within the tests,Mostly related to changes in numpy (warning on creating a ragged array without explicit object dtype) and matplotlib (warning on setting ticklabels without setting ticks).,1,5,"['testing', 'upstream']"
126,469863312,2206,4704710,2020-08-19 01:05:14,2020-08-19 11:56:16,closed,Avoid kde when variance is almost 0,Fixes #2186,1,1,['mod:distributions']
127,469789463,2205,4704710,2020-08-18 23:06:53,2020-08-19 00:53:22,closed,Improve variable assignment feedback,"- Adds an error message when assigning semantics with wide-form data
- Improves the error message when mixing a `DataFrame` and non-`Series` vector and the lengths don't match
- Improves the error message when a key cannot be parsed with long-form data


Closes #2082
",1,3,['mod:core']
128,469776379,2204,4704710,2020-08-18 22:22:51,2020-08-18 23:04:41,closed,Change dropna default to False in axisgrid.py,"This parameter is somewhat of a relic from the days when seaborn and matplotlib had spotty missing-data handling. I'm not currently aware of any functions that fail when they get data with missing values, but dropping na by default can cause problems (e.g. see #2143). On balance, I think this change is likely to have minimal negative consequences, but will help on more edge cases than it will hurt.

Closes #2143",1,2,[]
129,469738586,2203,4704710,2020-08-18 20:46:41,2020-08-18 21:59:38,closed,Always set private despine variable in PairGrid,Fixes #2166,1,1,"['mod:axisgrid', 'bugfix']"
130,469594993,2202,4704710,2020-08-18 16:04:56,2020-08-18 18:31:59,closed,Support wide data with categorical columns,"Previously this would fail:

```python
flights = sns.load_dataset(""flights"")
flights_wide = flights.pivot(""year"", ""month"", ""passengers"")
sns.lineplot(data=flights_wide)
```
![image](https://user-images.githubusercontent.com/315810/90537198-058aca00-e14b-11ea-9365-278b9b322f9f.png)

Also changes the (internal) wide structure spec to use `@columns`, `@index`, `@values` to decrease chance of collisions with actual dataframe keys.",1,1,"['api', 'mod:core']"
131,469155877,2201,4704710,2020-08-18 02:05:51,2020-08-18 21:52:26,closed,Convert relational model API examples to use notebooks,"See #2110 

The `relplot` examples could use some improvement.",1,10,['docs']
132,469121825,2200,4704710,2020-08-17 23:46:13,2020-08-18 00:23:30,closed,Fix and modernize aspects of relational plot docs,"Fixes #2145, Fixes #2065, Fixes #2187",1,4,"['docs', 'mod:relational']"
133,469088888,2199,4704710,2020-08-17 22:00:42,2020-08-18 00:24:50,closed,Handle matplotlib 3.3 deprecations,Supersedes and closes #2193 (rebased on master and merge conflict fixed),2,1,['upstream']
134,468473672,2197,4704710,2020-08-16 17:40:09,2020-08-16 17:58:35,closed,Don't test on matplotlib 3.3.1 to avoid scatter bug,"xref #2194, matplotlib/matplotlib#18254",0,1,"['testing', 'upstream']"
135,468462850,2196,4704710,2020-08-16 16:03:03,2020-08-20 15:41:38,closed,FIX: allow un-sharing categories in catplot,"Fixes #1702. With this PR, the same categorical axis (and order) for all facets is only enforced by `catplot` if `sharex` (or `sharey`) are not `False` (on master, in any case the categorical axis is shared between facets). Note that `sharex` and `sharey` can also accept `""row""` or `""col""` but this use case is not handled within this PR.",22,12,"['enhancement', 'mod:categorical']"
136,466925691,2193,4704710,2020-08-12 18:06:16,2020-08-18 00:24:50,closed,Handle matplotlib==3.3 deprecations,"* Adapts to a recent change in matplotlib where `basex/basey` parameters of `axis.set_scale` are now just `base`.
* Adapts to another change affecting `heatmap` where passing `norm` to `ax.pcolormesh` accompanied with `vmin/vmax` is deprecated. `norm` is not a `heatmap` parameter, so this PR avoids setting `vmin/vmax` if `norm` is given as a kwarg.",5,1,['upstream']
137,465749172,2190,4704710,2020-08-10 21:50:01,2020-08-11 00:21:22,closed,Use only stdlib in get_dataset_names,"Previously, this function involved an (optional) dependency on BeautifulSoup, but the HTML is trivial to parse with a regular expression, so let's just do that.",1,2,[]
138,465196648,2188,4704710,2020-08-09 20:09:35,2020-08-10 21:52:28,closed,Improve matrix functions docstrings,This PR adds intersphinx links to `heatmap` and `clustermap`. It also updates a url in the installation guide to its most recent version. ,2,3,['docs']
139,457816443,2173,4704710,2020-07-28 13:40:01,2020-08-22 21:02:29,closed,Fix object-typed numeric hue/size input to relational plots,Fixes #2101 by inferring the underlying numeric data type using pandas' `infer_objects()`.,2,5,['mod:relational']
140,453584681,2168,4704710,2020-07-20 15:51:53,2020-08-02 17:39:45,closed,grammatical correction,Grammatical correction the inline documentation of `seaborn/categorical.py`,1,1,[]
141,451078204,2167,4704710,2020-07-17 12:04:41,2020-08-17 22:14:44,closed,Elaborate on how to test seaborn and build the docs,This PR makes it easier for users to understand how to test seaborn and/or build the docs (mostly making [https://github.com/mwaskom/seaborn/issues/2117#issuecomment-637499230](https://github.com/mwaskom/seaborn/issues/2117#issuecomment-637499230) more visible).,1,1,"['docs', 'infrastructure']"
142,449443085,2165,4704710,2020-07-15 12:16:08,2020-08-02 17:37:13,closed,remove magic number in examples,"in the faceted lineplot example, the number of lines used for palette definition should not be a magic number. Instead, it should be derived from from the dataset itself via len(). This makes it easier to understand the example without knowledge of the underlying dataset.",0,1,['docs']
143,446661787,2160,4704710,2020-07-09 07:04:30,2020-08-02 17:26:50,closed,Improve seaborn discoverability,This PR updates the pypi trove classifiers list to improve package discoverability. This includes adding the new matplotlib framework classifier and OS-independent classifier (since no OS-specific code or extension is used directly by seaborn).,4,2,['testing']
144,444471244,2157,4704710,2020-07-05 22:51:55,2020-08-17 21:37:58,closed,"Add displot, a figure-level distribution function ","This PR contains the last major piece of the distribution plot overhaul for v0.11. It introduces a new *figure-level* function, `displot` which provides a `FacetGrid`-enabled interface to `histplot`, `kdeplot`, `ecdfplot`, and `rugplot`. `displot` and `histplot` jointly replace `distplot` — the former by reproducing the multi-kind flexibility with the modern approach of `catplot`, `relplot`, etc., and the latter by offering histograms as part of the seaborn API. As such, this PR also deprecates `distplot`. Goodbye to the current oldest function in the library.

The name of `displot` is unfortunately close to `distplot` and is likely to cause some confusion in the transition. This is regrettable. The work in this PR pushed pretty far on trying to transition `distplot` rather than replace it, but that ultimately proved unmanagable. There is no other obvious name for a figure-level distribution plot. But: ""distribute"" is derived from the latin ""dis"" (apart) and ""tribuere"" (to assign), so at least the new function splits the root word in the right place.

The default plot kind is a simple histogram:

```python
sns.displot(penguins, x=""culmen_length_mm"")
```
![image](https://user-images.githubusercontent.com/315810/89471372-fcadf780-d74b-11ea-929d-75a4133fdfec.png)

I think this is preferable to doing KDE smoothing by default (as in `distplot`), as many datasets are misrepresented by a KDE. But it is only a parameter away:

```python
sns.displot(penguins, x=""culmen_length_mm"", kde=True)
```
![image](https://user-images.githubusercontent.com/315810/89471435-249d5b00-d74c-11ea-93dd-14e5a923f65a.png)

Any plot kind can be enhanced with `rug=True`. Here is a more complex example.

```python
sns.displot(
    penguins,
    x=""culmen_length_mm"", y=""culmen_depth_mm"",
    col=""sex"", hue=""species"",
    kind=""kde"", rug=True,
)
```
![image](https://user-images.githubusercontent.com/315810/89472317-29fba500-d74e-11ea-9e22-dc64fa45f523.png)

Small multiples are fun:

```python
sns.displot(
    diamonds,
    x=""price"", hue=""cut"", col=""clarity"",
    kind=""ecdf"", palette=""viridis"", linewidth=2.5,
    col_wrap=4, height=3, aspect=.9

)
```
![image](https://user-images.githubusercontent.com/315810/89473498-fc642b00-d750-11ea-92c8-ac8af93c148d.png)

And with the categorical histogram handling, allow for some perhaps unexpectedly powerful plots:

```python
sns.displot(diamonds, x=""color"", y=""clarity"", col=""cut"", height=3.5, aspect=.6)
```
![image](https://user-images.githubusercontent.com/315810/90303303-e7874600-de7a-11ea-843a-7b43a9bbcd1d.png)


Otherwise, there are not really new features beyond the enhancements already present in the new `histplot`, `kdeplot`, and `ecdfplot`. As an implementation detail, `displot` uses a different approach than `catplot` or `relplot` and does not use the ""public"" `FacetGrid` API with `.map_dataframe`. This would be too complicated to sync across facets for task like shared normalization. Instead, the PR adds a bunch of internal changes to loop over the facets along with the `iter_data` generator. This exposed a bunch of complications, and as it stands, the PR borrows on technical debt. It is likely a better path going forward than the contortions to sync semantic mappings in `relplot` and `catplot`. But it remains to be seen whether it is better to tie all of `FacetGrid` into the `VectorPlotter` class or to make an intermediate level object that just manages the facets themselves, and not the whole figure that they live in.

## Remaining tasks:

- [x] Clear residual TODO items from code (But note lack of support for unshared categorical axes)
- [x] Unit tests
- [x] Docstring
- [x] API docs
- [x] Gallery examples
- [x] User guide docs
- [x] Release notes
- [ ] ~Remove `distplot` from internal functions (e.g. `JointGrid`)~ (Punting to a different PR).",1,59,"['enhancement', 'plots', 'mod:distributions']"
145,443964519,2155,4704710,2020-07-03 09:47:48,2020-07-03 11:43:48,closed,adding option for parametric (t-based) confidence intervals,"In some common cases (e.g. for comparison with other statistics and plots) it is desirable to display parametric confidence intervals, typically based on a T-distribution. Usually, these will be very similar to the bootstrapped CI, but I think it's good to have the option for exact parametric intervals as well. This PR adds this functionality.

Currently there is no option for `ci_estimator` or so, and I thought implementing such a thing would be too big an API overhaul without discussing. I think the following is a lightweight enough option that it might be useful to many:

```python

sns.pointplot(data, ci=(""parametric"", 95))
```

for a parametric CI. This is how the current PR exposes the functionality.",3,3,[]
146,442657480,2151,4704710,2020-07-01 12:10:41,2020-07-05 16:54:11,closed,"DOC: enable Sphinx rules for linking to GitHub issues, PRs and users","This PR adds the ability to easily link to GitHub issues, PRs and users (e.g. for release notes), to easily provide broader context and credit. This is achieved by adding `sphinx-issues` extension (as done in scikit-learn, see [here](https://github.com/sloria/sphinx-issues)). Rules examples:
- ``:issue:`2062` `` links to #2062 
- ``:issue:`2052,2081` `` will link to both issues
- ``:pr:`2151` `` links to PR #2151
- ``:user:`MaozGelbart` `` links to user @MaozGelbart 

It can also link to other repos: ``:issue:`user/repo#12345` `` 

This PR also removes what seems like an unnecessary matplotlib import from sphinx conf file ('agg' is already the default backend in modern matplotlibs)

Closes #2062 

",5,3,"['docs', 'infrastructure']"
147,440253935,2148,4704710,2020-06-25 20:58:04,2020-06-28 11:35:09,closed,Dont add null columns in plot_data for unassigned semantics,Closes #2135 ,1,2,['mod:core']
148,438770186,2146,4704710,2020-06-23 19:20:04,2020-06-28 11:34:29,closed,TST: Increase testing speed by utilizing multiple cores,"pytest is capable of running multiple CPUs in parallel if `pytest-xdist` plugin is installed. This should improve tests speed on multi-core systems. Each Travis-CI process has 2 CPUs available and currently only one is utilized. This PR introduces multi-core testing, hopefully improving local and CI tests speed. On my 6-core system, the full test suit is completed in less than 60 seconds, compared to ~330 seconds using a single core.

To overcome race conditions on datasets pulls, I added a script to cache test datasets before actual running test suits. 

I also removed unnecessary qt pulls from non-interactive travis builds; this reduced ~1m from such travis builds. ",4,4,"['testing', 'infrastructure']"
149,437410667,2144,4704710,2020-06-20 13:11:07,2020-06-23 12:25:23,closed,MNT: fix some failures with matplotlib=3.3.0rc1,"Matplotlib 3.3.0rc1 has been released and results with several failing tests. This PR addresses some of them:

* FixedLocator now requires that `set_ticklabels()` inputs are equal to the number of ticks ([https://github.com/matplotlib/matplotlib/pull/17266](https://github.com/matplotlib/matplotlib/pull/17266)). This is an issue for `palplot` as well as categorical plots using unnamed groups, and fails several smoke tests and documentation examples. The proposed changes pass empty ticklabels in such cases (e.g. `[""""]` instead of `[]`).

* `ax.get_aspect()` now returns `1` instead of `""equal""` when aspect was set to `""equal""` ([https://github.com/matplotlib/matplotlib/pull/16012](https://github.com/matplotlib/matplotlib/pull/16012)). ""equal"" aspect input is still valid. This affects matrix tests. The proposed change involves testing for both `""equal""` and `""1""` aspect values. 

Two remaining test failures are under investigation. While still unclear, these may not require seaborn code changes so I didn't include them here.",6,3,[]
150,434789352,2141,4704710,2020-06-15 20:59:09,2020-06-17 11:14:14,closed,Add ecdfplot function,"This PR adds a new function in the distributions module, `ecdfplot`.

Simple example:

```python
sns.ecdfplot(diamonds, x=""price"", hue=""cut"")
```
![ecdf](https://user-images.githubusercontent.com/315810/84705271-26efef80-af29-11ea-94c5-252e4c1504db.png)

There's some motivation for it in #1536 
There was an initial attempt in #1621, but the overhaul to the distributions module made it unfortunately impossible to pull those commits into the history

There's really not too much to the implementation.

We could add more semantics than just `hue` fairly easily, but because the other distribution plots don't support them well, I have deferred for the moment. They can always be added later.

We could also do a bivariate ECDF plot. But I am not sure this is very useful. The main advantage of the ECDF over histogram/kde is that it lends itself better to comparing distributions. But that is less true in the bivariate case. Still nothing here blocks it from being added later.

## To do:

- [x] Unit tests for `ECDF` estimator
- [x] Unit tests for `ecdfplot` function
- [x] Docstring content
- [x] API examples
- [x] Release notes",12,11,"['enhancement', 'plots', 'mod:distributions']"
151,434518037,2140,4704710,2020-06-15 12:47:58,2020-06-15 18:21:36,closed,Clarified documentation of despine,"When `fig` and `ax` are both specified, `ax` is ignored and all axes in `fig` are despined. Took me a while to figure out, so I clarified the documentation.

I think in this case it would be better to despine `ax` and ignore `fig`, but I realize this is undesirable as it might break some code out there.

I also thought of adding an explicit warning, would this be excessive? For example:

```
    elif fig is not None:
        axes = fig.axes
        if ax is not None:
            warnings.warn('ax parameter ignored when fig is specified')
```",2,2,['docs']
152,434253632,2138,4704710,2020-06-15 02:45:23,2020-06-15 18:21:14,closed,Improve support for datetime (and categorical) data in relational plots,"Fixes #2130

Also addresses the `lineplot` example in https://github.com/mwaskom/seaborn/issues/2056; lineplot can now have a datetime (or categorical) `y` variable and aggregate across it.

Eventually, a similar approach can be used in all the categorical plots. (But it will take more refactoring).

This ran into some issues with an old conflict between pandas and matplotlib, summarized here and in various linked issues: https://github.com/matplotlib/matplotlib/issues/9610

Pre pandas 1.0 (I think?), they registered their own datetime converters, but those converters are less powerful than what matplotlib added in 2.2 (and what seaborn needs to make e.g. `comp_data` work).

I think seaborn wants to avoid mucking with the matplotlib converter registry, which unfortunately means that users on older versions of pandas won't get to take full advantage of the new features here unless they run

```python
pd.set_option(""plotting.matplotlib.register_converters"", False)
```

But disabling all of the pandas converters runs into: https://github.com/pandas-dev/pandas/issues/27036

So a better thing for seaborn to do is to add the pandas converters we need, but only when setting up the tests.

This is a mess ... but I don't think it's *our* mess.",1,3,"['enhancement', 'refactor', 'mod:relational', 'upstream']"
153,434205582,2136,4704710,2020-06-14 21:36:17,2020-06-15 00:00:12,closed,Fix default color in histplot with datetime variable,,1,2,['bugfix']
154,431777699,2129,4704710,2020-06-09 13:01:29,,open,Adding first principal component to regplot instead of y ~ x regression,"The first PC is more appropriate to plot than either a y ~ x or x ~ y regression line when there is no clear distinction between predictor and predicted variable.

See [this blog post](https://benediktehinger.de/blog/science/scatterplots-regression-lines-and-the-first-principal-component/) and [this eLife paper](https://elifesciences.org/articles/00638) explaining why this is the case.

This PR implements this option for `regplot`. The orientation of the PC1 line is more or less arbitrary when there is no actual correlation between x and y, which can look strange, especially with confidence intervals plotted. There might be a better way to compute CIs (they should be circular in the case of zero correlation, this is now not accounted for), but I think the code more or less does what it should do.",8,2,"['plots', 'algorithms', 'wishlist', 'mod:regression']"
155,429449276,2125,4704710,2020-06-06 21:20:56,2020-06-14 21:16:02,closed,Add histplot function,"This PR adds a new function in the `distributions` module, `histplot`.

It is broadly similar to the existing `distplot` and is intended to be an axes-level replacement when `distplot` is promoted to a figure-level function. But also adds a number of new features.

Some of the interesting features / behaviors are highlighted in this notebook: https://gist.github.com/mwaskom/8e1a25c8c7519fabf15845408c15e9a7

I have also uploaded the current version of the API examples here: https://gist.github.com/mwaskom/5c492d53af3f90098eb6f61fca595e1b

They include:

- Full support for the `hue` semantic (closes #861)
- KDE smoothing that is agnostic to the bin statistic (closes #479)
- Bin selection in `discrete` mode that avoids surprising gaps (closes #327)
- Experimental support for datetime and category variables (closes #1059)
- Weighted univariate and bivariate histograms (closes #783)
- Bivariate histograms with an `x=, y=` signature (closes #321) 
- Bin parameterization with reference rules, bin edges, bin widths, and/or bin range
- Proper log-space binning
- Density or probability normalization
- Simple parameterization of appearance with `segment`/`fill`
- Adaptive default edge width  for patch artists

The API is broadly similar to the new `kdeplot`. Both functions will be able to use as complementary `kind=` arguments in a forthcoming revamp of `distplot` to make it a figure-level, facet-enabled function.

### To Do:

#### Infrastructure

- [x] General code cleanup
- [x] Unit tests for `seaborn._statistics.Histogram`
- [x] Unit tests for `histplot`
- [x] Change functions that use `distplot` internally to use `histplot`, where feasible
- [x] Abstract out some of the duplicated code between `kdeplot` and `histplot`
- [x] Document roadmap for improving colorbar support

#### Features

- [x] Improve default linewidth scaling
- [x] Decision on function signature (`data`-first or `x`-first)
- [x] Decision on control over kde line attributes
- [x] Support for datetime/categorical variables
- [x] Decision on bivariate histogram
- [x] Complete bivariate histogram implementation
- [x] Standardize bivariate histogram and density
- [x] Decision on how to handle matplotlib datetime autoscale issue
- [x] Decision on default element with a hue semantic
- [x] Fix normalization with missing data
- [x] Decision on name for `element`

#### Documentation

- [x] API docs for `histplot`
- [x] Docstring examples for `histplot`
- [x] Add one or more gallery examples
- [x] Draft release notes
",2,67,"['enhancement', 'plots', 'mod:distributions']"
156,428024646,2123,4704710,2020-06-04 18:48:26,2020-06-04 21:24:10,closed,Store code examples in API docs using notebooks,"xref #2110

This PR adds the basic infrastructure for notebook API docs and converts the two new distribution functions (`kdeplot` and `rugplot`).

`distplot` is left as is due to impending rewrite.",1,11,"['docs', 'testing', 'infrastructure']"
157,426179191,2116,4704710,2020-06-01 19:47:36,2020-06-01 20:18:04,closed,Fix dud test in test_utils.py,,2,1,"['testing', 'bugfix']"
158,425648976,2109,4704710,2020-05-31 18:13:52,2020-05-31 22:05:16,closed,Test docs during CI,Closes #2061 ,2,8,"['docs', 'testing', 'infrastructure']"
159,425531520,2108,4704710,2020-05-30 22:29:25,2020-05-31 22:51:29,closed,"Add custom formatting of hue and size legend labels in `scatterplot`, `lineplot` and `relplot`","Sometimes the default formatting of hue or size legend labels in `scatterplot`, `lineplot` and `relplot` leaves something to be desired, for example in some cases I was getting a label ""120.000000001"", while it would obviously be better to have just ""120"". One might also want to format size labels as percentages, for example.

This PR adds two new parameters to the above plot functions:
- `hue_fmt`: New-style formatting string (e.g. '.2f') for legend tick levels of the `hue` variable when it is numeric. Not relevant if it is categorical.
- `size_fmt`: New-style formatting string (e.g. '.2f') for legend tick levels of the `size` variable when it is numeric. Not relevant if it is categorical.

I wanted to use the same way of specifying custom formatting as with the `fmt` parameter in `heatmap` function.

Unit tests are included. I also cleaned up some linter warnings (unused variables) and fixed 1 test which seemed to be [testing the wrong variable](https://github.com/mwaskom/seaborn/commit/92de1d7ded921f322365c7fe483c6939edc5ce72#diff-aa765aac3f5ebabf440c888c666886caL282) because of a copy-paste error, probably.",5,8,"['wishlist', 'mod:relational']"
160,424083890,2104,4704710,2020-05-27 19:58:28,2020-06-02 16:22:16,closed,Modernize kdeplot and rugplot,"`kdeplot` and `rugplot` are two of the oldest parts of the library and predate the common API adopted for almost all other functions. This limits them and causes inconsistencies. They also were not well-tested or organized, making it difficult to add or modify even small features.

With the core refactoring done in #2090 and elsewhere, it's now time to bring these functions in line with the rest of the library. This PR accomplishes that. Doing so is necessarily disruptive. I have tried to minimize breakage, while still implementing a number of substantial changes that are important to understand.

I hope that, on balance, both the better API and numerous new features outweigh the costs of dealing with the API breaks.

# Standardized API

The most obvious new feature is that the functions can now be invoked with the same syntax as in the rest of seaborn, including drawing densities and rugs for subsets of the data in different colors using `hue` mapping. For example:

```python
import seaborn as sns
tips = sns.load_dataset(""tips"")
semantics = dict(x=""total_bill"", y=""time"")
sns.kdeplot(data=tips, **semantics)
sns.rugplot(data=tips, **semantics)
```
![image](https://user-images.githubusercontent.com/315810/83066615-5484ff80-a033-11ea-8b39-dbd2b47a98be.png)

Note how we have assigned variables from a long-form data structure to multiple semantic roles in each plot: `x` and `hue`.

To draw the density on the y axis, rather than use the `vertical` parameter, simply change the assignment of variables:

```python
semantics = dict(y=""total_bill"", hue=""time"")
sns.kdeplot(data=tips, **semantics)
sns.rugplot(data=tips, **semantics)
```
![image](https://user-images.githubusercontent.com/315810/83070125-0410a080-a039-11ea-9630-d49f15ebec47.png)

Passing both x and y estimate and plot a bivariate kernel density estimate:

```python
iris = sns.load_dataset(""iris"")
sns.kdeplot(data=iris, x=""sepal_width"", y=""petal_width"", hue=""species"")
```
![image](https://user-images.githubusercontent.com/315810/83304436-dd836e80-a1cc-11ea-8c58-cb138ab3f225.png)

`rugplot` can also now draw a ""bivariate"" rug in a single function call:

```python
semantics = dict(x=""total_bill"", y=""tip"", hue=""time"")
sns.scatterplot(data=tips, **semantics)
sns.rugplot(data=tips, **semantics)
```
![image](https://user-images.githubusercontent.com/315810/83074594-6d47e200-a040-11ea-96c1-3e02a53ddd1b.png)

It's also possible to plot wide-form data, which draws a separate distribution for each column in the dataframe, using hue-mapping.

```python
sns.kdeplot(data=iris)
```
![image](https://user-images.githubusercontent.com/315810/83066840-ac236b00-a033-11ea-8021-d80d227ba090.png)

There is a deprecation layer that should catch the old keyword argument names and related parameters.

Currently the function signatures are disorganized, because all new parameters have been added at the end. When keyword-only arguments are enforced (after the 0.11 release), these parameters can be reorganized.

Positional `x` is allowed because `kdeplot(x=x)` does the same thing as `kdeplot(data=x)`. In 0.12, `data` will become the first and only valid positional argument.

Closes https://github.com/mwaskom/seaborn/issues/595

### API changes

In `rugplot`:
```diff
+ x, y, hue, data
-a, axis, vertical
```

In `kdeplot`:
```diff
+ x, y, hue, data
- data, data2, vertical
```
(Previously, `data` was the name for the `x` vector in `kdeplot`. Because of how ""flat"" data are processed by the distribution plots, there is no difference between `kdeplot(data=x)` and `kdeplot(x=x)`. But `data` is now interpreted differently in the context of any additional semantics.

# Dropping the statsmodels KDE backend

`kdeplot` has always been able to use both `statsmodels` and `scipy` to compute the density estimate. The `statsmodels` backend would be used if it was installed, with `scipy` serving as a fallback.

There are a number of differences between the `statsmodels` and `scipy` interfaces that caused subtle issues for non-default plots in seaborn. Additionally, statsmodels offered three primary advantages (1) non-gaussian kernel (2) FFT-based computation (3) cumulative densities. For (1), it does not seem that non-gaussian kernels are especially useful for visualization. I looked through the github search results for `kdeplot kernel` and it seemed this feature was used almost exclusively in a pedagogical context. (""These are what the different kernels look like""). For (2) the FFT computation can be a *lot* faster on a dense grid, but there is minimal difference between the two methods on the size of the default grid used in seaborn. For (3), it was not difficult to implement cumulative densities on top of what scipy gives you.

Therefore, I made the decision to drop the `statsmodels` backend; the new `kdeplot` uses only `scipy`. This has the effect of addressing several outstanding issues.

If this decision is going to cause substantial problems to downstream users/libraries, please open an issue to discuss.

Closes https://github.com/mwaskom/seaborn/issues/796
Closes https://github.com/mwaskom/seaborn/issues/938

### API changes

```diff
- kernel
```

# Other enhancements/changes

With the rewrite cleaning up the code, a number of new and long-desired features could be added. These mostly pertain to `kdeplot`

## Normalization of hue levels

The KDE is computed on each hue-based subset independently. But the default behavior is to scale the resulting densities by the proportion of each category in the full dataset, such that the total area under all of the curves sums to 1.

```python
sns.load_dataset(""diamonds"")
ax = sns.kdeplot(data=diamonds, x=""carat"", hue=""cut"")
```
![image](https://user-images.githubusercontent.com/315810/83069266-97e16d00-a037-11ea-9003-c30cf0d9b6c4.png)

This can be controlled with the `common_norm` parameter.

Fixes #61 (the oldest open issue in seaborn!)

### API changes

```diff
+ common_norm
```

## Multiple ways to visualize the hue subsets

The default behavior is to ""layer"" each curve, but it is also possible to stack them:

```python
ax = sns.kdeplot(data=diamonds, x=""carat"", hue=""cut"", multiple=""stack')
```

![image](https://user-images.githubusercontent.com/315810/83069426-dc6d0880-a037-11ea-8cce-45946b5124d5.png)

and the stack can be normalized so that the curves give the conditional frequency at each `x` level:

```python
ax = sns.kdeplot(data=diamonds, x=""carat"", hue=""cut"", multiple=""fill')
```

![image](https://user-images.githubusercontent.com/315810/83069492-f3135f80-a037-11ea-98ef-d3dcec997a88.png)

### API changes

```diff
+ multiple, common_grid
```

## Better control over bandwidth

The old version of `kdeplot` had a `bw` parameter which defaulted to the implementation in the compute backend when given a scalar: for `statsmodels` it set the actual width of the kernel, whereas `scipy` set the width of the kernel as a scaling factor multiplied by the data standard deviation.

Neither approach is especially helpful for visualization. Therefore, this PR deprecates the confusing `bw` and adds two new parameters

- `bw_method`, which is passed directly to `scipy`
- `bw_adjust`, which scales the bandwidth that `scipy` choses.

This means that you can let scipy use a reference rule but then nudge the kernel to be narrower or wider in a completely distribution-independent way.

### API changes
```diff
+ bw_method, bw_adjust
- bw
```

## Useful parametrization of bivariate contours

Previously the selection of contour level sets was delegated to the matplotlib contour algorithm, meaning they were evenly spaced densities, but essentially arbitrary.

There is a new external API for drawing contour at levels [p_0, p1, ... p_n] such that the proportion of the density lying below the ith contour level is p_i. The contours can be chosen by setting `thresh` (aka p_0) and passing an integer n to `levels`, which draws evenly spaced iso-proportion contours. Or you can pass a sequence of proportion values to `levels`.

```python
semantics = dict(x=""sepal_length"", y=""sepal_width"", hue=""species"")
sns.kdeplot(data=iris, **semantics, thresh=.5, levels=5)
```
![image](https://user-images.githubusercontent.com/315810/83304813-84680a80-a1cd-11ea-83d0-cb5d4ebe2d3f.png)

This has the effect of obviating the `shade_lowest` parameter, because x, y values will not be shaded if they are below `thresh`. Set `thresh=0` to fill the available space with color:

```python
sns.kdeplot(data=iris, **semantics, fill=True, thresh=0, levels=100, cmap=""mako"")
```
![image](https://user-images.githubusercontent.com/315810/83305382-a2823a80-a1ce-11ea-940a-5b73c44a6df8.png)

Currently, if a colorbar is added, it will correspond to iso-densities and not iso-propotions, but I would like to improve this (possibly by dropping colorbar support and moving that information into a legend).

### API changes
```diff
+ levels, thresh
- shade_lowest
```

## Weighted kernel density estimate

A popular feature request, the refactoring and code cleaning made this very easy to add, even in the case of `hue` subsetting. It is now possible to pass weights to `weights`, which is processed with respect to `data=` like any other variable (i.e. it can be a vector of values or a name of a column in `data`).

This does require `scipy` >= 1.2, which is newer than the minimally supported version.

Closes https://github.com/mwaskom/seaborn/pull/1747
Fixes https://github.com/mwaskom/seaborn/issues/1364

### API changes

```diff
+ weights
```

## Fitting/evaluating the KDE in log space

This PR adds the ability for the KDE computation to be done in log space and then plotted correctly. The default behavior is to detect a log-scaled axis, but there is also a new parameter that sets the axis scale and then uses it during computation:

```python
x = np.random.lognormal(2, 2, size=1000)
sns.kdeplot(x=x, log_scale=True)
```
![image](https://user-images.githubusercontent.com/315810/83069867-93698400-a038-11ea-99ee-606921c2c418.png)

Fixes https://github.com/mwaskom/seaborn/issues/731

### API changes

```diff
+ log_scale
```

## Changes to color-handling in bivariate KDE plots

To ease the integration of `hue` mapping, unfilled bivariate plots default to showing all of the lines for each contour blob in the same color. It is still possible to pass a colormap object to `cmap`, but only when hue-mapping is not used. Additionally, the direction of the colormap ramp has been reversed for filled contours, to give better definition at the `thresh` level.

## Changes to the artist used to draw filled plots

Plots with multiple line and collection elements are not layered intuitively in matplotlib: all lines are drawn after all collections with the same zorder. Therefore, when ``fill=True``, *only* `fill_between` is used to draw the plot.

## Soft deprecation of `shade=` in favor of `fill=`

The `shade` parameter was not using that term properly, and the term `fill` is strictly superior. But unlike some of the other parameters affected by this rewrite, `shade` is very commonly used.

Therefore, this PR adds `fill`, and `shade` has become an alias. The old parameter does not currently issue a warning, but will likely be gradually deemphasized and then eventually formally deprecated. (There is no corresponding `fill_lowest`; see section on new bivariate API).

### API changes
```diff
+ fill
- shade
```

# Remaining tasks

- [x] Implement new bivariate `kdeplot`
- [x] Test new bivariate `kdeplot`
- [x] Refactor KDE estimation
- [x] Enhance tests for `rugplot`
- [x] Improve legend or clearly document roadmap for doing so
- [x] Implement legend for rugplot
- [x] Decision on terminology for `cut_by_hue`/`scale_by_hue`
- [x] Review and finalize other parameter names
- [x] Decision on `multiple` terminology
- [x] Decision on sticky edges for `multiple=""fill""`
- [x] Set `fill=True` with `multiple=""stack""` or `multiple=""fill""`
- [x] Input checking on parameters that take ambiguous arguments
- [x] Change usage of `shade` to `fill` everywhere else in the library
- [x] Update `jointplot`/`pairplot`
- [x] Document inconsistencies with `violinplot`
- [x] Draft release notes
- [x] Write new docstrings
- [x] Add one or more new gallery examples
- [x] Remove old code and tests",4,69,"['enhancement', 'refactor', 'api', 'plots', 'mod:distributions']"
161,423355144,2103,4704710,2020-05-26 17:45:59,2020-06-02 16:26:32,closed,FIX: don't fail on heatmap with int data and mask,"`heatmap` on integer data and a mask fails when calculating cmap limits (#2102). This bug was introduced by #1956 so should work on any version prior to 0.10.1 (I tested on 0.9.0 and it works there). This PR fixes the issue by casting the data input to float before filling with `np.nan`.

Fixes #2102",1,1,"['mod:matrix', 'bugfix']"
162,422725022,2100,4704710,2020-05-25 12:24:28,2020-05-25 14:02:05,closed,Fix typo and dud test,Actual fix for #2099 ,1,1,"['bugfix', 'mod:core']"
163,422521491,2099,4704710,2020-05-25 03:07:51,2020-05-25 12:07:47,closed,Fix ordering bug by maintaining category metadata,"#1695 converted data vectors to lists before semantic mapping to avoid errors related to datetime dtypes, but it  introduced a bug in that it stripped pandas category metadata, which is used for default ordering of categorical semantic maps.

Fortunately, this is now easy to work around.",1,1,[]
164,422467915,2098,4704710,2020-05-24 20:43:40,2020-05-25 12:08:06,closed,DOC: small fixes,"This PR contains two small fixes to seaborn docs:
* Update kdeplot example to use keyword-only arguments, avoiding a warning
* Update intersphinx path to new numpy docs location",2,1,['docs']
165,422467774,2097,4704710,2020-05-24 20:42:24,2020-05-25 00:17:44,closed,Refactor method for getting semantic subsets down to core,This makes it easy to use in all downstream plotters.,1,2,"['refactor', 'mod:core']"
166,422333133,2095,4704710,2020-05-23 22:08:31,2020-05-24 00:13:56,closed,Improve lineplot handling of mpl kwargs,Fixes #1526,1,2,"['mod:relational', 'bugfix']"
167,422164273,2090,4704710,2020-05-22 22:48:56,2020-05-23 21:37:55,closed,Refactor semantic mapping operations,"This PR moves the semantic mapping operations originally developed for the relational plots down to the core level and substantially changes how those operations are implemented. Much of the logic has been moved out of the `Plotter` classes and into new `Mapping` classes. This makes the body of the `*plot` functions a bit more verbose (but only a bit) while significantly streamlining the `Plotter` classes. (It also hints at the makings of an expressive alternate external API. Currently all `_core` functionality remains private.)

I don't believe there are any intentional changes to the external API vis a vis the relational plots. Once other modules are moved onto this infrastructure, there may be changes in behaviors that are inconsistent across the library.

There is a significant challenge in totally decoupling the `Plotter` and `Mapping` classes that arises with the `size` semantic. Whereas hue values are artist-independent and style values are specified in terms of specific artist attributes, the size values are externally abstract but internally map onto different attributes depending on what artist ends up being used. Currently this means that the `SizeMapping` needs to access default size information from the `Plotter` object it is attached to. This is not ideal, because we'd like the `Plotter` to become generic and have all artist-specific logic live downstream from the semantic mappings. But the downstream abstraction is not currently well-defined, so we have to live with this for now.

Possible solutions include:

- Internally storing a normalized range that gets resolved at draw time. This proved very confusing.
- Work more like `StyleMapping` where the customization API involves specific attributes (`width`, `radius`, etc.) while maintaining all relevant defaults at the `Mapping` level.
- Some as-yet-to-be determined interactions at draw time, e.g. the lookup is lazy and doesn't happen until the Mapping is attached to some drawing-related class that knows what defaults to use.

This PR also does not refactor or improve the legend creation, which remains challenging.

Also note that the PR started with an attempt to rewrite the distribution plots on top of the new core infrastructure and some of the products from that effort are included in the changeset, but not as live code.",3,48,"['refactor', 'mod:core']"
168,420312665,2087,4704710,2020-05-19 19:13:19,2020-05-19 19:55:18,closed,Deprecate iqr and axlabel; improve deprecation warning class,,1,2,['api']
169,419966805,2086,4704710,2020-05-19 08:39:53,2020-06-04 14:09:50,closed,"Boxenplot bug fixes, small features and style changes","This PR incorporates several bug fixes, small features and style improvements to `boxenplot`:

- [x] Fixes a bug ([https://github.com/mwaskom/seaborn/pull/2086#issuecomment-630914580](https://github.com/mwaskom/seaborn/pull/2086#issuecomment-630914580)) where an extra box was erroneously added to `boxenplot`.
- [x] When only a single box is drawn, `boxenplot` uses the input color and not just white (revealed after resolving the previous bug).
- [x] `boxenplot` now autoscales the axes to make sure that all boxes are visible in the absence of outliers (#2085)
- [x] Allows `k_depth` to take a number and not only one of the predefined methods. 
- [x] Defaults `outlier_prop=0.007` also for the public `boxenplot` and not only for the private `_LVPlotter`. As a result this will be shown in the documentation page.
- [x] Specifying `k_depth=""full""` now generates `int(log(n))+1` boxes (presumably covers all data points). Perhaps sufficient to address #2063 ? Due to the nature of order statistics this won't cover exactly all points for some datasets. 
- [x] `boxenplot` style now better matches `boxplot`. This includes the following changes: 
  - Use `self.gray` for plotting outliers instead of the color of first boxes.
  - Use `self.gray` for plotting boxes lines. This is also important since `Patch` objects are styled by seaborn default with white edges and when plotting on white background it obscures some boxes. This also matches the legend. 
  - The boxes are sequentially colored from the input color all the way to white. Now they use at least some color from their original color to distinguish between different hues. 
  - Use `""butt""` capstyle for medians to prevent the caps from extending beyond box edges.
- [x] Adds some arguments validation and remove internal unused arguments when class members are used. 
- [x] Avoids calling `ax.scatter` when there are no outliers to show.
- [x] Deprecates `lvplot`.
- [x] Adds tests to make sure all use cases are covered.
- [x] Improve example plot that shows swarmplot on top of boxenplot.
- [x] `""trustworthy""` method uses `outlier_prop` but this is not documented and probably misuse ([https://github.com/mwaskom/seaborn/pull/2086#issuecomment-632042987](https://github.com/mwaskom/seaborn/pull/2086#issuecomment-632042987)). Opened #2118 to track this. This is now fixed and also correctly parameterized with the addition of `trust_alpha` new parameter.
- [x] Change default `k_depth` to ~~`trustworthy` or `auto`~~ `tukey`. (#803 )
- [x] Improve docstring to emphasize the relationship between `k_depth` and `outlier_prop`.
- [x] Restrict `outlier_prop` to be in the range of (0,1]. Closes #2063 
- [x] Draft a release notes entry. 

Example of the new style, compare with the current one [https://seaborn.pydata.org/_images/seaborn-boxenplot-2.png](https://seaborn.pydata.org/_images/seaborn-boxenplot-2.png)
![2086d](https://user-images.githubusercontent.com/13831112/82752924-38caf080-9dca-11ea-90ab-468a723a322e.png)


Will be happy for any comment!

Fixes #2086 (comment)
Fixes #2085 
Fixes #803 
Fixes #2118 
Closes #2063 ",19,28,"['mod:categorical', 'bugfix']"
170,419769121,2084,4704710,2020-05-18 22:15:02,2020-05-19 18:37:31,closed,Centralize and modify variable type inference,"This PR refactors the code that infers the type of a variable in `plot_data`. It also changes the way that seaborn handles object-typed data.

Seaborn has traditionally distinguished between two variable types: numeric and categorical. The standard way of discriminating was to ask whether a vector could be coerced to a float dtype without error.

The idea is that seaborn is trying to duck-type here: we don't care about data storage, just what we can do with the data (for instance, whether we can use a quantitative color map). The typing API in pandas treats object-typed data (including Python lists) as non-numeric, but it's not uncommon to end up with a Series that has an object dtype despite being full of numbers.

One consequence of this approach is that numbers explicitly represented as strings would be treated as numeric. This was surprising to some, and lead to downstream errors (#1515 ) that were fixed with a hack (#1905).

The new approach is to introspect object-typed vectors and consider them numeric only when their contents are actually numbers.

The PR also adds explicit identification of datetime data, although we do not yet do anything specific to handle them and they are generally treated as ""not numeric"" in the current codebase. This does affect the behavior identified in #2056; now categorical plots raise if they get one categorical and one datetime variable and would otherwise fail (but the categorical scatter plots do not).

Finally, the PR improves the error messages that one sees related to specifying the orientation of a categorical plot.",1,11,"['refactor', 'api']"
171,419490613,2083,4704710,2020-05-18 13:09:13,2020-05-18 15:16:48,closed,Improve FacetGrid margin titles to not show previous texts,"<details><summary>Open to see code</summary>

```python
import seaborn as sns
tips = sns.load_dataset(""tips"")
g = sns.FacetGrid(tips, row=""sex"", col=""time"", margin_titles=True)
g.map(sns.kdeplot, ""total_bill"")
g.set_titles(col_template=""{col_name}"", row_template=""{row_name}"")
```

</details>

New behavior:

![image](https://user-images.githubusercontent.com/315810/82216631-3a3a7b80-98e7-11ea-96ee-d7a9775a6850.png)

Previous behavior:

![image](https://user-images.githubusercontent.com/315810/82216533-10815480-98e7-11ea-8e25-8455a665165b.png)

",1,2,"['enhancement', 'plots', 'mod:axisgrid']"
172,419179258,2081,4704710,2020-05-17 21:49:10,2020-05-18 20:11:08,closed,Require keyword arguments almost everywhere,"In #2052, a warning was added that keyword-only arguments would be enforced for all parameters except `x` and `y` (or `data`, for those functions where `data` is the first parameter).

Thinking further, and based on the work in #2071 to improve wide-form data handling, I think it makes sense to require explicit keywords arguments for *all* semantics. Then, the parameters can be rearranged so that `data` comes first in every function. This has several benefits:

- every function will have the same basic signature
- easier to pipe pandas dataframes into seaborn plots
- calling `func(data)` will do something useful for almost any kind of `data`, which is not true if `x` is the first parameter.

Fixes #2066",0,6,"['api', 'plots']"
173,419144576,2079,4704710,2020-05-17 17:23:01,2020-05-17 18:03:56,closed,Allow vectors for c= or s= in scatterplot,"Stricter input checks in matplotlib caused this to start failing; now it should work again.

```python
import seaborn as sns
x = y = [1, 2, 3]
s = [100, 200, 300]
c = sns.color_palette(""bright"", 3)
style = ""a"", ""b"", ""c""
sns.scatterplot(x=x, y=y, s=s, c=c, style=style)
```

![image](https://user-images.githubusercontent.com/315810/82155258-83d08b00-9841-11ea-8ef6-b80d3a573b1e.png)
",0,2,[]
174,419027144,2078,4704710,2020-05-16 21:48:09,2020-05-17 17:01:38,closed,Scale the default scatterplot edge width by the point radius,"`scatterplot` defaults to a thin white edge around each point; but for small points, this can dominate the points themselves.

This PR changes the default behavior to scale the line widths based on the actual sizes of the points that are drawn.

Here's an example using `diamonds`:

<details><summary>Open to see code</summary>

```python
import numpy as np
import pandas as pd
import seaborn as sns; sns.set()
import matplotlib as mpl
import matplotlib.pyplot as plt

diamonds = sns.load_dataset(""diamonds"")

f, ax = plt.subplots(figsize=(6.5, 6.5))
clarity_ranking = [""I1"", ""SI2"", ""SI1"", ""VS2"", ""VS1"", ""VVS2"", ""VVS1"", ""IF""]
sns.scatterplot(x=""carat"", y=""price"",
                hue=""clarity"", size=""depth"",
                palette=""ch:r=-.2,d=.3_r"",
                hue_order=clarity_ranking,
                sizes=(1, 8),
                rasterized=True,
                data=diamonds, ax=ax)
```

</details>



Old behavior:

![image](https://user-images.githubusercontent.com/315810/82130833-f0457e80-979c-11ea-8ec5-2d2951021e12.png)

New behavior:

![image](https://user-images.githubusercontent.com/315810/82153851-06ece380-9838-11ea-9035-f5fc47d0f596.png)

At the same time, ""bubble"" plots still have nicely-defined edges:

<details><summary>Open to see code</summary>

```python
import seaborn as sns
sns.set(style=""white"")

# Load the example mpg dataset
mpg = sns.load_dataset(""mpg"")

# Plot miles per gallon against horsepower with other semantics
sns.relplot(x=""horsepower"", y=""mpg"", hue=""origin"", size=""weight"",
            sizes=(40, 400), alpha=.6, palette=""muted"",
            height=6, data=mpg)
```

</details>

![image](https://user-images.githubusercontent.com/315810/82153763-8332f700-9837-11ea-8399-f30a26f36374.png)

It also has the effect of slightly reducing the width of the default edge. 

The exact values used (percentile and scaling constant) are subject to revision as I get a sense for how this looks across a range of applications.

It may also be wise to parameterize. For example, we could define `linewidth` in the function signature and accept a string like `""10%""` to scale the linewidth by 0.1 of the radius. But maybe that's too fussy.",0,3,[]
175,418873820,2075,4704710,2020-05-15 23:17:42,2020-05-16 19:27:19,closed,Programmatically define arbitrarily large style mappings,"The relational plots raise an error when the number of levels on the `style` semantic exceeds the number of dash or marker styles provided. There are only 8 default markers and 6 default dashes.

This is especially surprising with wide-form data, where the style semantic is used implicitly.

See https://github.com/mwaskom/seaborn/issues/1513 for more discussion.

The challenge is that there is no ideal approach. Either you a) error, b) cycle, or c) generate markers/dashes that are difficult to visually discriminate.

The errors are annoying, and in some situations, perplexing. I am opposed to having semantic attributes cycle; I don't believe that happens anywhere in seaborn. So we have to do our best to generate discriminable mappings.

This PR implements programatic generation of arbitrarily large numbers of dash and marker specs. Although these will be difficult to visually discriminate beyond a specific point, some thought has gone into making them reasonably distinct. I am also open to future improvements to the algorithm.

The first 16 dashes look like this:

![image](https://user-images.githubusercontent.com/315810/82125454-0a1e9b80-9774-11ea-82f2-0b84fd980d9b.png)

<details><summary>Code to generate</summary>

```python
n = 16
lw = 3
with sns.axes_style(""dark""):
    f, ax = plt.subplots(figsize=(9, n / 3))
f.subplots_adjust(0, 0, 1, 1)
ax.set(xticks=[], yticks=[])
ax.invert_yaxis()
for i, dashes in enumerate(sns.core.unique_dashes(n)):
    ax.axhline(i, dashes=dashes, color="".2"", lw=lw)
```

</details>

The first 18 markers look like this:

![image](https://user-images.githubusercontent.com/315810/82126197-0ccfbf80-9779-11ea-845b-072cfa7fe3e6.png)

<details><summary>Code to generate</summary>

```python
n = 18
w = 9
s = 300
linewidth = .05 * np.sqrt(s)
f, ax = plt.subplots(figsize=(w, n // w))
f.subplots_adjust(0, 0, 1, 1)
ax.set(xticks=[], yticks=[])
ax.margins(y=.5, x=.1)
ax.invert_yaxis()
for i, marker in enumerate(sns.core.unique_markers(n)):
    ax.scatter([i % w], [i // w], marker=marker, c="".2"", linewidth=linewidth, edgecolor=""w"", s=s, clip_on=False)
```

</details>

---

Closes https://github.com/mwaskom/seaborn/issues/1513 ",1,6,[]
176,418143063,2073,4704710,2020-05-14 17:25:32,2020-05-14 18:27:10,closed,Add tight_layout method on FacetGrid and PairGrid,"The matplotlib `tight_layout` algorithm ignores figure-level legends, which causes problems with `FacetGrid` and `PairGrid` if you need to tighten the layout after adding the legend:

```python
mpg = sns.load_dataset(""mpg"")
g = sns.relplot(
    x=""horsepower"",
    y=""mpg"",
    size=""weight"",
    sizes=(40, 400),
    alpha=0.5,
    height=6,
    data=mpg,
)
g.fig.tight_layout()
```
![image](https://user-images.githubusercontent.com/315810/81965380-fba27980-95e5-11ea-82d6-bec37c99cb7f.png)

This PR adds a `tight_layout` method on the `Grid` class that keeps the axes from overlapping with the legend:

```python
g = sns.relplot(
    x=""horsepower"",
    y=""mpg"",
    size=""weight"",
    sizes=(40, 400),
    alpha=0.5,
    height=6,
    data=mpg,
)
g.tight_layout()
```
![image](https://user-images.githubusercontent.com/315810/81965429-0b21c280-95e6-11ea-96ef-72cbb77d04c6.png)
",3,2,[]
177,417003769,2071,4704710,2020-05-12 22:23:15,2020-05-15 22:45:58,closed,Refactor variable processing,"### Summary and new features

This PR adds centralized and abstracted logic for processing both ""long-form"" and ""wide-form"" data inputs. The new code is currently used by the relational plotting functions (`relplot`, `scatterplot`, and `lineplot`). It will be extended to other modules in future PRs.

The relational plot capabilities are a superset of previous behavior. Several new things are possible:

- Named variables for long-form data can refer to named levels of a pandas `Index` or `MultiIndex`. Previously it was necessary to call `reset_index` before plotting.
- The `data` parameter can be a `dict` for wide-form data. Long-form `dict` was previously supported but not documented.
- A `DataFrame` used in wide-form mode can have a mixture of types; the non-numeric types will be removed before plotting. Previously this caused an error.
- Only one of `x` or `y` can be specified with long-form data, although this will produce an empty plot. Previously it produced an error.
- `relplot` now accepts all of these formats too, whereas previously it was limited to a long-form dataframe and named variables.

---

### Wide-form data handling

A major innovation here is writing abstracted code for handling wide-form data, where the semantics relate to the dimensions of the data object rather than the variables collected within it. That will make it easy to leverage this code in modules that handle wide-form data differently, and it will potentially allow control over how wide-form data is mapped to the vectors that define a plot.

Here is an example showing the new behavior of relational plots with ""wide-form"" inputs:

![image](https://user-images.githubusercontent.com/315810/81852950-cdf7fa80-9529-11ea-8b83-0b231c5030c1.png)

<details> <summary>Code for generating plot</summary>

```python
import numpy as np
import pandas as pd
import seaborn as sns; sns.set()
import matplotlib.pyplot as plt

df = pd.DataFrame(np.arange(12).reshape(3, 4), columns=list(""abcd""), index=[0, 2, 4])
s = pd.Series([0, 10, 20], index=[1, 3, 5], name=""s"")

data_objects = {
    ""wide_df"": df,
    ""wide_array"": df.values,
    ""list_of_series"": [df[""a""], s],
    ""list_of_array"": [df[""a""].values, s.values],
    ""list_of_list"": [df[""a""].tolist(), s.tolist()], 
    ""list_of_dict"": [df[""a""].to_dict(), s.to_dict()],
    ""dict_of_series"": {""a"": df[""a""], ""s"": s},
    ""dict_of_array"": {""a"": df[""a""].values, ""s"": s.values},
    ""dict_of_list"": {""a"": df[""a""].tolist(), ""s"": s.tolist()},
    ""dict_of_dict"": {""a"": df[""a""].to_dict(), ""s"": s.to_dict()},
    ""flat_series"": s,
    ""flat_array"": s.values,
    ""flat_list"": s.tolist(),
    ""flat_dict"": s.to_dict(),
}

def show_wide_to_long(data_objects, module):

    fig, axes = plt.subplots(
        nrows=2, ncols=len(data_objects) // 2,
        figsize=(2 * len(data_objects) // 2, 2 * 2),
        constrained_layout=True
    )

    plot_func = {""rel"": sns.lineplot}
    plot_manager = {""rel"": sns.relational._RelationalPlotter}
    
    func = plot_func[module]
    p = plot_manager[module]()
    
    for ax, (kind, data) in zip(axes.T.flat, data_objects.items()):

        plot_data, variables = p.establish_variables(data)
        func(x=""x"", y=""y"", hue=""hue"", data=plot_data, ax=ax)
        ax.set_title(kind)

        
show_wide_to_long(data_objects, ""rel"")
```

</details>

---

### Future changes

Once keyword-only arguments are strictly enforced, the common API may become `func(data=None, *, x=None, y=None, ...)`. The advantage is that calling `func(data)` should now do something useful for many different ways that `data` can be defined.

Once the refactoring is complete, it will be necessary to rewrite the API documentation for the impacted functions. I would also like to write a more narrative document in the user guide/tutorial explaining how seaborn thinks about long-form and wide-form data.

Note that the relational plot tests very thoroughly exercise the new core code, but I haven't migrated those tests to the `test_core` module itself. I will rethink this while refactoring the categorical plots.",1,29,[]
178,416650182,2069,4704710,2020-05-12 11:01:26,2020-08-20 00:28:35,closed,Prefer scatterplot over plt.scatter in examples and plotters,"This PR sets `scatterplot` to be the joint plotter for `jointplot(kind=""scatter"")`, instead of `plt.scatter`. It also simplifies examples for `FacetGrid`, `PairGrid` and `jointplot` by using `sns.scatterplot` instead of `plt.scatter`. This improves jointplot appearance and these example plots. ",1,2,"['docs', 'mod:relational']"
179,415602418,2064,4704710,2020-05-09 17:01:42,2020-05-09 17:35:57,closed,Stricter code linting,"- Define fewer PEP8 exceptions
- Define flake8 config centrally
- Fix existing issues",1,1,[]
180,415447408,2060,4704710,2020-05-08 21:46:10,2020-05-09 16:40:56,closed,Standardize parameter names in distributions module,"The distribution plots (`distplot`, `kdeplot`, and `rugplot`) are the oldest functions in seaborn and predated the common API, so their input parameters had unusual names.

This PR deprecates the old names and replaces them with `x` and `y` like in other functions.

Ultimately, there will be a full refactoring of these functions to accept input data like all the other seaborn plotters, either as vectors or names that index into a data object. This is the first step of that process.",1,3,[]
181,414298301,2052,4704710,2020-05-06 19:48:19,2020-05-08 19:49:58,closed,Require keyword arguments for most parameters,"This PR is a major and long-desired change that leverages Python 3 functionality to require most parameters to be defined with keyword arguments.

Most of the functions in the seaborn plotting API have a signature that looks roughly like:

```python
def plot(x, y, [semantic_vars, ...], data=None, [other_params, ...], **passthrough_kwargs):
    ...
```

Where `semantic_vars` are `hue`, `style`, etc.

This PR will enforce that ~~`data` and all subsequent params~~ most parameters, aside from those that specify data positions, be specified with explicit keyword arguments.

The motivation for requiring keyword arguments is that, when functions have long signatures, one would like to order the parameters in ways that are more meaningful than chronology. This is very much the case in seaborn, where a single function call has subsets of parameters that, e.g., control statistical aggregation or change the aesthetics of the plot.  In theory, inserting new parameters or reordering existing ones to achieve this has the potential to break user code, potentially in damaging ways (i.e., an argument might get passed to a parameter it is technically valid for but that produces an incorrect plot).

Seaborn has in the past sometimes inserted new parameters towards the end of the `other_params` under the sincere hope that people are not writing out 10+ positional arguments; this change will let us do that more safely in the future. But the real benefit of this change is the ability to define new `semantic_vars` while making it obvious what arguments can or cannot be used to extract values from the ``data`` object.

With this change, we will be able to

- standardize the signatures of the oldest functions that predated this convention (e.g., `lmplot`, where `hue` comes after `data`)
- add core semantics to older functions (i.e, `hue` or `style` for `kdeplot` or `regplot`)
- add new semantics going forward (e.g., `style` in categorical plots).

## Outstanding questions

- Should there be a grace period with a deprecation warning? scikit-learn has taken that approach and, we could borrow [their decorator](https://github.com/scikit-learn/scikit-learn/pull/13311/files) to do so. **A: Yes. 0.11 will warn; 0.12 will error.**

- Where should the `*` go? ~**A: For vector-oriented function, it goes after `x, y` (so before semantic variables and data. For multi-axes grid and matrix-oriented plotting functions, it goes after `data`).**~ **A: this was revised by #2081**

- What should the signature for the `*map` functions (`heatmap` and `clustermap` be?). **A: It will remain `func(data, ...)`, but this change will make it easier to add both location and semantic arguments to these functions (i.e. to pass long-form data with arguments to pivot into a matrix; #2054 ) with a signature like `heatmap(data, *, x, y, hue, ...).** 

- What should the signature be for the `*Grid` objects? These are naturally long-form but don't have ""leading semantics"".  **A: ``data, ...``**.

- Are there other places we want to enforce keyword arguments? Maybe in `palettes.py`? **A: Perhaps, but this can be deferred**.",1,8,[]
182,413664755,2050,4704710,2020-05-05 17:53:17,2020-06-18 07:22:03,closed,Disable autoscaling on categorical axes. Closes #2049,"As discussed in issue. 

This PR changes the `auto=None` to `auto=False` in the set_{x,y}lim calls for the stripplot. This will prevent matplotlib rescaling the image to limits that just contain data, but instead will not rescale and keep the provided limits. 

Previously `auto=None` did not rescale as well, but this changed in matplotlib version 3.2.2. As this might be considered a bug this is possible reverted in next releases. See matplotlib/matplotlib#17331",4,1,"['plots', 'mod:categorical']"
183,412500767,2046,4704710,2020-05-02 19:58:24,2020-05-06 16:36:51,closed,Make FacetGrid a bit more convenient,"- Add the `FacetGrid.axes_dict` attribute which allows name access to the axes.
- Calling `FacetGrid.set_axis_labels` will turn off the labels on the interior of the grid in addition to setting the ones on the exterior.",1,3,[]
184,411840477,2045,4704710,2020-04-30 21:16:05,2020-05-01 15:47:53,closed,Add explicit warning in swarmplot about gutters,"Currently set to warn when > 2% of the points overlap; with a little playing
around, this seemed like where the distribution started to get obscured.

But it is ad hoc.",1,1,[]
185,410688505,2042,4704710,2020-04-29 12:42:33,,open,Use dodge to scale offset between nested plots,"Unfortunately, there is no way to scale the offset between nested, grouped plots. By using the existing ```dodge``` variable as a float, one can easily now change the distance between individual plots.",8,2,"['enhancement', 'plots', 'mod:categorical']"
186,409137988,2041,4704710,2020-04-26 18:53:01,2020-04-26 20:02:25,closed,Handle some small housekeeping items prior to releasing v0.10.1,"Document functions supporting example data

Add v0.10.1 release notes to whatsnew page

Avoid matplotlib deprecation warning in boxplot example",1,1,[]
187,408992755,2040,4704710,2020-04-26 00:36:25,2020-04-26 16:27:21,closed,Avoid seeing an error from statsmodels in kdeplot when data IQR == 0,"Fixes #1990
Related to https://github.com/statsmodels/statsmodels/issues/5419

This PR takes the same approach to making kdeplot robust to statistical corner cases as when the variance of the data is 0.

The current behavior is to warn and plot an empty line only when statsmodels raises a `RuntimeError` *and* the IQR of the data is 0. Therefore, we shouldn't ignore other unrelated `RuntimeError` instances, and if the statsmodels behavior changes in the future not to throw an error, the code won't take this path. The test for this behavior tries to anticipate a change in statsmodels by asserting that a warning appears only when the statsmodels bandwidth selection raises.

This PR also removes a conditional that added compatibility for an older, no-longer supported version of scipy.",1,3,[]
188,406975317,2036,4704710,2020-04-22 00:24:53,2020-04-22 01:36:01,closed,Update algorithms.py,mine doesn't work,1,1,[]
189,406716501,2035,4704710,2020-04-21 14:36:00,2020-04-24 19:08:06,closed,Housekeeping in utilities module,"- Deprecates several `utils` functions that have no internal use (`sig_stars`, `percentiles`, `pmf_hist`, `sort_df`)
- Improves some docstrings

Closes #2034",1,8,[]
190,405722812,2030,4704710,2020-04-19 19:47:36,2020-04-24 19:38:59,closed,Examples of ways to have the same mapping between facets,Following discussion in issue https://github.com/mwaskom/seaborn/issues/2028,1,1,[]
191,403881177,2025,4704710,2020-04-15 17:02:44,2020-04-24 19:34:04,closed,ENH: Handle`legend.title_fontsize` rcparam,"`legend.fontsize` rcparam is a part of seaborn context. However the legend title isn't, and the title font size is taken as 85% of `axes.labelsize` rcparam. `legend.title_fontsize` rcparam [has been added](https://github.com/matplotlib/matplotlib/pull/11172) in 
`matplotlib==3.0`. This PR incorporates `legend.title_fontsize` rcparam into seaborn, for both plotting functions and rcmod context (which was set to 12, one point above `legend.fontsize` which currently equals 11). 

The change, if accepted, affects categorical plots, `lmplot` and `pairplot` but not relational plots, as they currently use an empty handle to draw a title-like line. ",2,3,[]
192,400102835,2019,4704710,2020-04-07 07:56:37,2020-04-09 21:15:47,closed,Added fix for minor typos in 0.9.1 release notes,"varaible -> variable
diffent -> different
passig -> passing",3,1,[]
193,399817721,2017,4704710,2020-04-06 18:12:30,2020-04-06 18:29:50,closed,Autoscale in swarmplot to get valid transform,Fixes #2013,1,1,[]
194,395537425,2010,4704710,2020-03-30 09:53:47,2020-04-06 20:24:13,closed,Add optional argument showfliers for boxenplot,"If a big datasets contains a few extreme outliers, the axis is scaled to that extremes which makes the boxenplot hard to interpret. In that case, it would make sense to hide the outlier markers completely.

I want to propose a solution similar to the `matplotlib.pyplot.boxplot` API with an optional boolean argument `showfliers`.

Example:
```
import seaborn as sns
import pandas as pd

import matplotlib.pyplot as plt

iris = sns.load_dataset(""iris"")

# create big data set by concatenating 10 iris data sets
iris_big = pd.concat([iris for _ in range(10)])

# add stupid outlier row
iris_big = iris_big.append(
    dict(sepal_length=100, sepal_width=30, petal_length=25, petal_width=10),
    ignore_index=True,
)

# plot with/without outlier markers (showfliers)
_, axes = plt.subplots(2, tight_layout=True)
sns.boxenplot(data=iris_big, showfliers=True, ax=axes[0])
sns.boxenplot(data=iris_big, showfliers=False, ax=axes[1])

plt.show()
```
![showfliers](https://user-images.githubusercontent.com/36054362/77899800-5f165900-727d-11ea-98be-bd202d8a580f.png)


",5,5,[]
195,390104822,2000,4704710,2020-03-17 22:14:39,2020-03-17 22:44:00,closed,Avoid floating point error with maximum husl sat/lum,"Incorporates and closes #1998 
Fixes #1994",1,4,[]
196,389776286,1999,4704710,2020-03-17 11:21:28,2020-03-17 21:42:28,closed,Fix `add_legend` to always populate `_legend`,"It gets populated when `legend_out` is `True`, but not when it is `False`.
This patch fixes this consistency problem.",5,1,[]
197,389651297,1998,4704710,2020-03-17 06:34:03,2020-03-17 22:44:00,closed,output normalization for husl_to_rgb,"This fix #1994. Note that I needed to add
```python
npt.assert_almost_equal(rgb_got, rgb_want, decimal=4)
```
in the tests with 4 decimal places because the library have poor precision, i.e.
```python
husl.husl_to_rgb(250, 100, 50)
>>> [1., 1.00004, 0.9999]
```

I emphasize that this is a good reason to consider #1995.",1,2,[]
198,388944679,1995,4704710,2020-03-16 02:42:55,2020-03-17 17:38:08,closed,FIX: migration from husl to hsluv,"As said in docs 

>  seaborn provides an interface to the husl system (since renamed to HSLuv)

and in #1361, it is prudent to migrate all references from husl to hsluv maintaining backwards compatibility. This PR resolves #1361.

I tried to maintain all backwards compatibility possible. Any advice please comment down.",7,5,[]
199,388400051,1992,4704710,2020-03-14 18:51:52,2020-03-17 21:37:44,closed,FIX: avoid error when prop_cycle has no color,"* No longer fail when the global property cycler has no color configured- ~~use ""k"" instead (as matplotlib does)~~ use ""0.15"" instead (""dark gray"" as set in ``sns.set()``)

* Improved ``get_color_cycle`` docstring and added tests

Fixes #1977",5,3,[]
200,388315989,1991,4704710,2020-03-14 14:07:29,2020-03-17 21:38:21,closed,Avoid error in despine when axis has matplotlib categories,Fixes #1978,1,1,[]
201,386771726,1988,4704710,2020-03-11 15:48:42,2020-03-17 21:38:49,closed,"Make remaining links use https:// (issue #1984, follow-up to #1985)","As a result of https://github.com/axismaps/colorbrewer/issues/28 URL https://colorbrewer2.org/ is working now :tada: so here's one last update regarding https. Best! :beers: 

Related to:
- issue #1984
- pull request #1985",2,1,[]
202,385664867,1985,4704710,2020-03-09 15:44:27,2020-03-10 12:04:13,closed,Make all links possible use https://,"Related to #1984

PS: For colorbrewer2 https is not yet available, so I raised awareness upstream at https://github.com/axismaps/colorbrewer/issues/28 .",5,1,[]
203,382040719,1979,4704710,2020-03-01 12:57:37,2020-03-17 21:40:44,closed,MNT: simplify to_utf8,"Within python3 all strings are unicode strings, so this function can be simplified with the removal of python2 support. Note that this PR also removes unicode-specific grid labels tests, because they test that unicode strings are supported and now all strings are unicode strings. See [here](https://docs.python.org/3/library/stdtypes.html#str) for information on how str(obj) is handled in python3.",3,3,[]
204,380229535,1973,4704710,2020-02-26 12:50:10,2020-02-27 15:38:51,closed,Add deprecation notice for sig_stars,This utility is leftover from a previously removed function and is a candidate for removal.,1,1,[]
205,379118219,1972,4704710,2020-02-24 17:40:08,2020-02-26 12:19:28,closed,added tests for sig_stars() function,Since the `sig_stars()` function in utils.py doesn't have tests. I added the tests to increase the coverage test.,7,4,[]
206,378611152,1969,4704710,2020-02-22 17:17:13,2020-02-22 22:29:03,closed,"Don't fail in regplot on singletons, don't fit regression either","Follow up to #1958 

cc @MaozGelbart ",1,4,[]
207,378609563,1968,4704710,2020-02-22 17:00:47,2020-02-22 17:48:27,closed,Use numpy's indexing dtype in bootstrap,Follow-up to #1952 that uses the correct dtype,1,1,[]
208,376493554,1965,4704710,2020-02-18 09:00:41,2020-02-27 16:26:15,closed,MNT: Remove unused code paths,"With the update of minimal supported versions, some code paths may be removed. This PR removes such code paths for unsupported ``pandas``, ``matplotlib`` and ``scipy`` versions. It also modifies some tests to ensure ``pandas==1.0.0`` compatibility. 

Fixes #1942 ",5,7,[]
209,375607967,1962,4704710,2020-02-14 23:02:39,,open,Add support for per-category width on boxplot.,"Support per-category width on boxplot. As discused on https://github.com/mwaskom/seaborn/issues/1668, this is done by passing an array of widths on the sns.boxplot(width) argument.

Please let me know if this makes sense. I can add further testing.",4,4,"['enhancement', 'mod:categorical']"
210,375203252,1961,4704710,2020-02-14 04:14:20,2020-02-22 16:43:05,closed,DOC: update truncate parameter string to reflect new default,The docstring for `truncate` is out of date given the new default is `True`,4,1,[]
211,373654354,1958,4704710,2020-02-11 13:19:56,2020-02-22 22:29:29,closed,FIX: avoid squeezing singleton vectors in regression plotter,"As reported in #1949 , ``regplot`` fails when its array-like input is single-valued. This may be pandas series, python list or numpy array (although different errors may appear according to the input type). For example, the following code fails on master with recent ``numpy`` and ``pandas`` packages:
```python
import seaborn as sns
sns.regplot([1.5], [2])
```
with ``IndexError: too many indices for array`` raised in ``_RegressionPlotter.dropna()``. This is because the input vector is reduced by ``np.squeeze`` and singletons lose that dimension and no longer support select operations. 
The proposed fix avoids squeezing singletons, so ""array-like"" properties are retained. This means that the single point will be plotted and (if ``fit_reg==True``) a regression will be fitted (although, no line will be plotted).

Fixes #1949 ",3,1,[]
212,372870181,1956,4704710,2020-02-09 20:32:36,2020-02-26 12:44:48,closed,FIX: Ignore masked cells when finding heatmap data limits,"Masked cells are ignored from heatmap annotations and are not color-mapped, however they currently participate in cmap limits calculation. This is not documented, and seems surprising to some users (#1622 , #1617). Furthermore, Matplotlib's ``pcolormesh`` (used by heatmap) does not use masked cells in cmap limits calculation. This PR makes data limits calculation ignore masked cells. 

Fixes #1617 
Fixes #1622 ",2,3,[]
213,369751180,1952,4704710,2020-01-31 20:07:41,2020-02-22 16:39:36,closed,Use the correct platform integer type,"`np.array.take` requires that the index be the platform integer type (`int32` for 32bit and `int64` for 64bit), but `np.random.RandomState.randint` returns an `int64` on any platform by default.  This makes sure it returns the right type of integer for the current platform.

Fixes mwaskom#1950",4,1,[]
214,369749980,1951,4704710,2020-01-31 20:04:18,2020-02-05 16:41:59,closed,Use the correct platform integer type,"`np.array.take` requires that the index be the platform integer type (`int32` for 32bit and `int64` for 64bit), but `np.random.RandomState.randint` returns an `int64` on any platform by default.  This makes sure it returns the right type of integer for the current platform.",1,1,[]
215,367482365,1948,4704710,2020-01-27 13:11:46,2020-02-22 23:00:52,closed,Copy props from old cmap when creating new cmap in heatmap,"When ``heatmap`` is fed with both ``cmap`` and ``center`` arguments, it creates a new colormap but the props of the input cmap are not copied (colors for under/over/bad values). The proposed PR copies the props of the input cmap to the new cmap internally used within the heatmapper. 

Fixes #1729 ",7,2,[]
216,366227777,1944,4704710,2020-01-23 07:53:07,2020-01-24 12:08:30,closed,Make dogplot more tolerant,"I really like this easter egg :-)

However, when you suggest someone to use `dogplot` instead of `catplot`, they will receive a `TypeError` explaining that they provided too many arguments. This kind of spoils the fun. What about making it more tolerant?",2,1,[]
217,366003279,1943,4704710,2020-01-22 18:35:55,2020-01-22 20:03:52,closed,Remove previously deprecated modules,"- Final removal of `seaborn.timeseries` (and correspondingly `tsplot`)
- Final removal of `seaborn.linearmodels` (which just pointed to seaborn.regression`)
- Final removal of `seaborn.apionly`
- Final removal of `smooth=` in `seaborn.algorithms.bootstrap` (not actually used in any seaborn function)",1,5,[]
218,365650791,1941,4704710,2020-01-22 03:57:07,2020-01-22 20:02:04,closed,Drop Python 2 support,"- Removes support for Python 2
- Removes official support for Python 3.5
- Increases minimal versions of dependencies to versions from circa 2017.",1,6,[]
219,365476729,1939,4704710,2020-01-21 19:42:11,2020-01-22 01:10:10,closed,More improvements to clustergrid layout,"This enables use of tight_layout within clustermap. Ideally most plots will
now have everything in the figure and looking nice out of the box. It uses
a somewhat hacky approach that should be revisted as constrained_layout matures.

e.g., here is what a QT window looks like for the following code, with no other adjustments:

```python
import seaborn as sns
iris = sns.load_dataset(""iris"").drop(""species"", axis=1)
g = sns.clustermap(iris,
                   col_cluster=False,
                   yticklabels=False,
                   figsize=(7, 6),
                   dendrogram_ratio=(.15, .12),
                   cbar_pos=(.3, .95, .55, .04),
                   cbar_kws={""orientation"": ""horizontal"",
                             ""label"": ""Measurement (mm)""})
```
<img width=""768"" alt=""Screenshot 2020-01-21 20 09 00"" src=""https://user-images.githubusercontent.com/315810/72856907-fbbee800-3c89-11ea-8347-f50c74860b3e.png"">


Also updates the docs a little bit and adds a rule where cbar_pos=None implies
that no colorbar will be drawn.",1,3,[]
220,364570234,1936,4704710,2020-01-19 19:33:46,2020-01-21 11:58:58,closed,Housekeeping,,1,23,[]
221,364472652,1935,4704710,2020-01-18 22:34:33,2020-01-18 23:10:53,closed,Control dendrogram properties in clustergrid,"Builds on #1426 with some nomenclature changes and tests.

Closes #1426 ",1,7,[]
222,364462017,1934,4704710,2020-01-18 20:28:33,2020-01-18 21:09:09,closed,Allow colors= in bivariate kdeplot,"This adds onto #1777, but simplifies the error checking. Disallowing color= and colors= breaks in a Grid context (hence the failing tests in #1777), and the other checks just duplicate what happens in matplotlib. It also adds a test that would have failed before the change.

I also updated a couple of examples and changed a few issues in the examples that I caught while doing so.

Closes #1777 
Fixes #1748",1,9,[]
223,364455247,1933,4704710,2020-01-18 19:11:09,2020-01-18 19:33:01,closed,Avoid altering input dicts,"Some plotting functions alter input dicts. Example:
```python
import seaborn as sns; sns.set(color_codes=True)
tips = sns.load_dataset(""tips"")
empty_dict={}
g = sns.jointplot(x=""total_bill"", y=""tip"", data=tips, joint_kws=empty_dict)
print(empty_dict) 
>>> {'color': (0.2980392156862745, 0.4470588235294118, 0.6901960784313725)}
```
The proposed PR makes sure the original dict input for such functions remains unaltered by shallow copying these dictionaries.",2,2,[]
224,364432377,1932,4704710,2020-01-18 14:39:44,2020-01-18 16:42:18,closed,Avoid error/warning in lineplot when x is categorical with empty levels,Fixes #1628,1,1,[]
225,363930038,1931,4704710,2020-01-17 02:07:45,2020-01-18 13:21:07,closed,Improvements and fixes to clustermap,"- Adds more control over the layout of the grid and improves how the default layout scales with different sizes/shapes of the figure. This follows up on the work done in #1393, but it changes the parameterization to work in terms of ratios instead of inches. It also lets row/col ratios be specified independently. And it adds a parameter for the location of the colorbar (#1598).

- Fixes a bug where the annotation array was not clustered to match the heatmap (#1752) 

- Avoids printing the fastcluser ImportError when an exception is raised from within scipy clustering, which confused people who don't read entire stacktraces and lead to errant bug reports (#1370)

Needs
- [x] Explicitly disable `square=True`
- [x] Unit tests
- [x] Parameter documentation
- [x] Docstring example
- [x] Release notes

Fixes #437
Closes #891
Closes #1393
Fixes #1752 
Closes #1753",1,18,[]
226,363275947,1929,4704710,2020-01-15 18:27:55,2020-01-16 12:24:43,closed,MNT: Fix Travis-CI tests with latest conda,"The proposed PR allows for conda4.8 to install and run, including tests on python3.5. Builds for python3 are also faster by ~15% by downloading the proper miniconda. The only test mode that requires conda4.6.14 is python2.7 with pinned dependencies. ",5,7,[]
227,362705246,1926,4704710,2020-01-14 15:46:39,2020-01-16 23:40:59,closed,Expose RNG seed where bootstrapping is used,"Alternative to #1925 that exposes a seed argument on a per-function basis and has no global state.

Closes #1924",3,5,[]
228,362400776,1925,4704710,2020-01-14 01:27:49,2020-01-15 15:05:42,closed,Use a persistant internal random number generator for boostrapping,"Fixes #1924 

This provides part of a stop-gap solution for deterministic bootstrapping.

As written, it affords control over the random state for those who are willing to use a hack by assigning a `RandomState` object to `seaborn.algorithms._rng`.

The open question is whether expose a proper mechanism for setting the seed in the public API. I think this is kind of a hacky approach either way, so I'm not wild about doing so. There's not much precedent that I am aware of for libraries having their own private but internally-global random state. Punting would allow me to decide later on to add a parameter to every function that does bootstrapping such that users could pass a `RandomState` there, which is ""best practices"".",3,3,[]
229,361882087,1923,4704710,2020-01-12 23:07:17,2020-01-16 12:30:07,closed,DOC: Fix broken/misleading links and add catplot cross-refs,"* corrected a few links under catplot examples in boxplot and pointplot
* corrected residplot ""see also"" link to jointplot
* added some cross-refs to catplot (""see also"") 
* added kwargs description for stripplot, as this is directly shown in the code examples below. Notably, several categorical plots accept kwargs in their signature but it is not described below them, perhaps because they don't use the kwargs input - this may needs to be looked at (examples: boxenplot, violinplot, pointplot). 
",3,1,[]
230,361462771,1920,4704710,2020-01-10 13:59:06,2020-01-16 12:28:21,closed,Correct typo,At least I think that `a.namel` should be `a.name`...,1,1,[]
231,359344431,1915,4704710,2020-01-05 22:49:13,2020-01-06 12:31:28,closed,Allow presence of norm to force numeric interpretation of hue/size,"Follow-up fix to #1515. (#1905 avoided the error but lead to some cases where the plot would appear with no data. Oops).

The problem was that relplot internally sets up  the palette dictionary and then passes it to the axes-level  functions, causing them to treat the variable as categorical. (The palette is always made and used internally, but this is a good heuristic for avoiding the numeric mapping). The solution is to treat the presence of `hue_norm` or `size_norm` as a signal that the respective semantic variable should be treated as numeric, superseding the inference related to the palette.",1,1,[]
232,359335135,1914,4704710,2020-01-05 20:49:06,2020-01-05 21:45:46,closed,Warn and ignore when passing ax= to figure-level function,,1,1,[]
233,359326047,1913,4704710,2020-01-05 18:45:26,2020-01-05 21:06:25,closed,Improve robustness to missing data in distribution plots,"Fixes #1908 
Closes #1910 

Also improves general test coverage of distribution plots",1,8,[]
234,359323452,1912,4704710,2020-01-05 18:09:39,2020-01-05 19:01:32,closed,Improve color palette robustness,"- Address upcoming numpy type-check strictness (fixes #1907)
- Standardize output of color palette functions as rgb tuples",1,1,[]
235,358216898,1910,4704710,2019-12-30 21:09:56,2020-01-05 21:06:25,closed,Remove NaN values from input array before passing it into statsmodels…,"... for KDE fitting. Avoids roundoff error in CDF fitting.

This pull request modifies 
```
seaborn.distplot(a, bins=None, hist=True, kde=True, rug=False, fit=None,
             hist_kws=None, kde_kws=None, rug_kws=None, fit_kws=None,
             color=None, vertical=False, norm_hist=False, axlabel=None,
             label=None, ax=None)
```
such that if there are any NaN values the input array, `a`,  then those values are removed prior to `a` being passed to `statsmodels` for KDE fitting. This avoids roundoff error in the CDF KDE fitting, which results in `statsmodels` returning an array of NaNs, and a blank CDF plot. 

This is the proposed solution to issue #1908 ",4,1,[]
236,358176817,1909,4704710,2019-12-30 17:57:30,2019-12-30 22:29:20,closed,Allow FacetGrid legend to work with nested labels,Fixes #1560,1,3,[]
237,357783817,1905,4704710,2019-12-29 18:30:08,2019-12-29 21:49:58,closed,Avoid errors with numeric data stored as strings,Closes #1515,1,13,[]
238,357597556,1902,4704710,2019-12-29 01:11:55,2019-12-29 16:44:05,closed,Allow named categorical palette to force interpretation of hue variable in relational plots,"e.g. 

```python
sns.lineplot(x=[0, 1, 0, 1], y=[0, 1, 1, 2], hue=[0, 0, 2, 2], palette=""deep"")
```
![image](https://user-images.githubusercontent.com/315810/71551155-3052c300-29ae-11ea-8cfa-fa425ef0b0ad.png)

Also added some more information to the relational plot docstrings about what's going on here.

Addresses #1653 and others",1,6,[]
239,356118751,1900,4704710,2019-12-22 20:35:54,2019-12-29 00:32:16,closed,Improve pandas index-based alignment,"Fixes #1867
Fixes #1139 ",1,9,[]
240,355127392,1898,4704710,2019-12-19 12:47:38,2019-12-19 16:01:21,closed,Two small fixes in regplot,"- Check dimensionality of input and error out when net vectors
- Don't crash when partialling variables are passed as pandas series",1,3,[]
241,354163667,1896,4704710,2019-12-17 15:24:26,2019-12-18 15:05:53,closed,Prevent multiple regplots from adding expanding x margins to the plot,Fixes #1814,2,4,[]
242,353301239,1895,4704710,2019-12-15 18:25:44,2019-12-15 21:42:14,closed,add the ability to change the figure dpi.,"The default is 100:
https://matplotlib.org/3.1.1/users/dflt_style_changes.html
so it would not change the behavior. This is important for jupyter-notebook and jupyterlab",2,1,[]
243,353231546,1893,4704710,2019-12-15 02:14:46,2019-12-15 03:38:00,closed,Fix exception on missing hue levels in pointplot,"Adapts to a recent change in matplotlib.

Closes #1737
Closes #1602",1,1,[]
244,353167896,1892,4704710,2019-12-14 11:41:16,2021-01-23 16:41:24,closed,included parametric CIs and updated help,"Dear MIchael,

Thanks for creating seaborn - it's been of tremendous help in my daily work.

However, I have not found an easy way to create confidence intervals parametrically based on the standard error of the mean (sem): ""ci"" let's you specify ""sd"" in order to plot standard deviations or perhaps ""68"" to plot something >>like<< sem via one (of numerous possible) bootstrap methods.

There has been an increasing interest in quantifying measurement error in the form of confidence intervals (CI) over the last few years (""The New Statistics: Why and How"", Cumming, 2014) and it is probably advisable to be consistent across studies about the way confidence intervals are constructed (or - if there is variability across fields - to have more flexibility).

Since most research surely uses parametric confidence intervals, I have added the possibility to (1) easily plot sem CIs by setting the ""ci"" parameter to ""sem"" (similar to the ""sd"" option) and (2) to calculate CIs parametricelly (and deterministically) for any desired level of estimation error simply from the sems without having to run any bootstraps. In order to use this functionality, the n_boot parameter simply has to be None. This results in confidence intervals that in my experience are just as ""good"" as the previous ones while preserving consistency across studies, which commonly rely on parametric CIs as well. 

I have updated the function help accordingly.

Cheers,
Michael",4,3,"['plots', 'algorithms']"
245,350273671,1889,4704710,2019-12-07 04:07:08,2019-12-10 02:02:48,closed,Fix simple typo: weidness -> weirdness,"Closes #1888

",2,1,[]
246,345457733,1879,4704710,2019-11-25 22:55:58,2019-12-10 02:03:18,closed,Spelling Corrections,"Varaible -> Variable
subets -> subsets
paramter -> parameter",2,1,[]
247,344952394,1877,4704710,2019-11-24 21:44:06,2019-12-10 02:03:49,closed,Fix default color codes.,"The default colors in `set_color_codes()` (used for `palette = ""reset""`) uses the wrong color code for m (magenta) and instead duplicates yellow. Fixing this only requires changing the RGB numbers for the array entry associated with magenta.",2,1,[]
248,339894886,1871,4704710,2019-11-12 12:54:23,2019-11-12 19:18:29,closed,Support Python3.8,"In addition to ``python=3.8`` CI support, this PR also adds ``conda-forge`` channel when resolving dependencies (removed by [previous commit](https://github.com/mwaskom/seaborn/commit/24542c79aafd6d59795204cd7ceeb1a5c5192053)) - this ensured ``matplotlib=3.1.2`` support as well (still not available through the ``defaults`` conda channel). ",4,5,[]
249,325525879,1850,4704710,2019-10-07 22:45:26,2019-10-07 22:46:17,closed,spelling correction,,1,1,[]
250,318661459,1837,4704710,2019-09-18 07:07:32,2019-09-18 11:22:03,closed,ENH: Store references to regression outputs in plotter._data and to plotter in ax.__dict__['_plotter'],"I notice that #655 suggests that it would be infeasible to store `yhat`, `yhat_boots`, `grid`, and `err_bands` and hereby propose a simple underscore-prefixed `plotter._data` dict and also an `ax.__dict__['plotter']` in order that the parameters of these excellent charts are accessible to curious chart-implementers.

Note the commented `self._data['func']`. Also, I've run the test suite locally but haven't written any tests for this pending feedback regarding its merit.",4,1,[]
251,315208916,1831,4704710,2019-09-07 16:40:37,2019-09-07 18:22:11,closed,Avoid error when calling set() with list of colors,"Closes #1546
Closes #1809 ",0,4,[]
252,315200299,1830,4704710,2019-09-07 14:36:15,2019-09-07 16:02:20,closed,Exclude norm from clustermap color kwargs,Fixes #1816,2,1,[]
253,313822363,1824,4704710,2019-09-04 01:26:43,2019-09-05 18:31:08,closed,Enhancements and fixes to PairGrid,"A number of small enhancements are combined here:

- Added the ``corner`` option to :class:`PairGrid` and :func:`pairplot` to make a grid with only the lower triangle of bivariate axes. (I don't believe there is an open issue about this but there's a [popular SO question](https://stackoverflow.com/questions/34087126/plot-lower-triangle-in-a-seaborn-pairgrid).)

```python
iris = sns.load_dataset(""iris"")
g = sns.pairplot(iris, height=1.5, corner=True)
```
![image](https://user-images.githubusercontent.com/315810/64357251-52c16a80-cfd2-11e9-87b9-2186ac09ed2a.png)


- Generalized the idea of ""diagonal"" axes in :class:`PairGrid` to any axes that share an x and y variable. (Closes #1125)

```python
iris = sns.load_dataset(""iris"").drop(""species"", axis=1)
g = sns.PairGrid(iris, height=1.5, x_vars=iris.columns, y_vars=iris.columns[:3])
g.map_diag(sns.kdeplot)
g.map_offdiag(sns.scatterplot)
```
![image](https://user-images.githubusercontent.com/315810/64357289-61a81d00-cfd2-11e9-881d-c6db59663b83.png)

- In :class:`PairGrid`, the ``hue`` variable is now excluded from the default list of variables that make up the rows and columns of the grid. (Supersedes and closes #1525 

- Exposed the ``layout_pad`` parameter in :class:`PairGrid` and set a smaller default than what matptlotlib sets for more efficient use of space in dense grids.

- Fixed the behavior of ``dropna`` in :class:`PairGrid` to properly exclude null datapoints from each plot when set to ``True``.  This is relatively less necessary these days as matplotlib is generally better about handling nans, but still potentially useful. This also prompted a helpful refactor of the `PairGrid` code. Closes #407, closes #409 (!), and supersedes and closes #1718.



",2,15,[]
254,313755222,1823,4704710,2019-09-03 20:35:43,2019-09-04 00:32:10,closed,Don't error on singular data in kdeplot,"The approach here is to fire a warning and add an empty line artist to the axes rather than let the statistical machinery barf when the input data are singular. This will keep `pairplot` from being non-functional, although the warnings might be confusing or annoying. Perhaps best considered a stop-gap measure. Another option might be to plot a delta function at the singular value. But that's kind of wrong, because really the delta function should be convolved with the kernel. But then *that* would be very misleading about what's going on too. So I guess I've convinced myself this is best for now.

Fixes #1502
Fixes #1699",2,3,[]
255,312482024,1819,4704710,2019-08-29 20:29:33,2019-08-29 20:53:23,closed,"added ""fixed"" option for the scale parameter for violinplot","For anyone who wants to make multiple violin plots that share the same scaling parameter, but want the appearance to follow scale=""counts"" mode, I have added a ""fixed"" option that allows for overriding the maximum counts determination that is made in ""counts"" mode, since this latter value cannot be transferred to other plots.",1,2,[]
256,309075303,1811,4704710,2019-08-20 14:19:24,2019-12-10 02:05:00,closed,fix typo in a docstring,"Couldn't stand it anymore, so here, fixed.",3,2,[]
257,309033072,1809,4704710,2019-08-20 12:46:23,2019-09-07 18:23:10,closed,Avoid mapping color codes for non-string palettes in sns.set(),"Running ``sns.set(palette=pal)`` with ``pal`` created through ``color_palette()`` fails without specifying ``color_codes=False``(#1546 ). The proposed PR uses ``color_codes=False`` in case of a non-string palette input.

Fixes #1546 
",1,1,[]
258,308299252,1807,4704710,2019-08-17 15:25:48,2019-08-17 17:06:54,closed,Small fix onnibus,"Merging several PRs onto v0.9

- https://github.com/mwaskom/seaborn/pull/1796
- https://github.com/mwaskom/seaborn/pull/1795
- https://github.com/mwaskom/seaborn/pull/1794
- https://github.com/mwaskom/seaborn/pull/1772/
- https://github.com/mwaskom/seaborn/pull/1762
- https://github.com/mwaskom/seaborn/pull/1736
- https://github.com/mwaskom/seaborn/pull/1728
- https://github.com/mwaskom/seaborn/pull/1716",2,24,[]
259,307463314,1801,4704710,2019-08-14 19:19:27,2019-08-14 21:11:06,closed,Declare xvfb as a Travis service (fixes #1798) and fix other travis issues,Trying the solution from here: https://docs.travis-ci.com/user/gui-and-headless-browsers/,2,4,[]
260,306052825,1796,4704710,2019-08-09 16:12:19,2019-08-17 17:08:32,closed,Fix documentation on distplot bins,"Distplot bins documentation is misleading. If Freedman-Diaconis rule gives a value greater than 50, 50 will be used as the bin size.",3,2,[]
261,305514677,1795,4704710,2019-08-08 10:38:18,2019-08-17 17:08:32,closed,Handle matplotlib 3.1.0 tick1On/tick2On deprecation warnings,Matplotlib 3.1.0 introduced deprecation warnings to ``tick1On`` and ``tick2On``. The proposed PR fixes these (and also fixes a typo in the test method's name).,0,2,[]
262,305124891,1794,4704710,2019-08-07 12:26:02,2019-08-17 17:08:31,closed,Fix horizontal boxenplot warning,"Horizontal boxenplots log warnings from ``matplotlib`` due to incorrect color input to scatterplot of the outliers (see #1629 ). The proposed PR makes horizontal plots color usage equal to vertical plots. 

Fixes #1629 ",0,1,[]
263,304219041,1790,4704710,2019-08-05 09:33:55,2019-09-07 19:14:36,closed,Remove nan/inf-containing data points from relational plots data,"Issue #1761 describes a behavior where relational plots continuous numeric semantics (``hue``/``size``) are calculated based on all available data points for the semantic, even if for points that are not plotted (i.e. nan- or inf-containing points). This PR removes such points from participation in relational plots, so the ``hue`` and ``size`` ranges will be calculated based on valid data points only. 

Fixes #1761 ",1,2,[]
264,302408812,1785,4704710,2019-07-30 09:27:13,2019-12-10 02:08:04,closed,Treat scatter size variable as categorical on list/dict sizes input,"Providing dict/list ``sizes`` input on numeric column for ``scatterplot`` fails on missing ``norm`` at the time of legend drawing. This PR treats numeric size variable as categorical if dict/list ``sizes`` input is provided and so the ``norm`` lookup is avoided. This is consistent with the current ``hue`` treatment for dict/list palette input. 

Fixes #1570 ",1,1,[]
265,297407562,1777,4704710,2019-07-14 15:53:12,2020-01-18 21:09:09,closed,Kdeplot color clarification,"* Closes https://github.com/mwaskom/seaborn/issues/1748
* Add `colors` kwarg handling for contour plotting, based on matplotlib docs (which now say to pick either `colors` or `cmap`)
* Modify kdeplot to accept one of `color`, `colors`, or `cmap` and raise an error if more than 1 is provided",1,2,[]
266,294932798,1772,4704710,2019-07-05 16:35:49,2019-08-17 17:08:30,closed,"Fix doc typing error : ""an grid"" --> ""a grid""","In documentation of ""distplot"", argument ""fit"", Fix typing error : ""an grid"" --> ""a grid""",0,1,[]
267,287840049,1762,4704710,2019-06-13 09:33:42,2019-08-17 17:08:30,closed,Remove access to private legend field,Categorical plots use a private ``matplotlib.legend`` field for setting the legend title size when ``hue`` is used. The proposed PR uses the public API to do so.,0,1,[]
268,285321733,1755,4704710,2019-06-05 10:50:04,2019-12-19 16:01:25,closed,"handled bug in regress_out function when using {x,y}_partial argument…","… in lmplot

Motivated by this post  -> https://stackoverflow.com/questions/56419714/series-object-has-no-attribute-reshape-when-using-x-partial-argument-in-l",1,1,[]
269,283870519,1753,4704710,2019-05-31 01:59:49,2020-01-18 13:21:06,closed,Add annotation support to clustermap. Fixes #1752.,,7,1,[]
270,281733819,1747,4704710,2019-05-23 18:32:21,2020-06-02 16:22:15,closed,Add the ability to weight samples when using kdeplot or joint plot,"For jointplot, additional arguments must be given like:
    jointplot(...,joint_kws={'weights':weights}, marginal_kws={'weights':weights},...)
For kdeplot, it is simply an extra argument:
    kdeplot(...,weights=weights,...)

This pertains to/resolves issue  #1364 ",3,3,"['plots', 'algorithms', 'mod:distributions']"
271,280280338,1744,4704710,2019-05-20 08:04:20,2020-11-15 08:09:38,closed,Allow independent variable to be plotted on y-axes in lineplot,"In lineplots, seaborn only allows the independent variable to be drawn on the x-axis. Trying the force seaborn to swap the axes by using the x and y arguments of `lineplot` does not produce a mirror image of the former plot.
To allow producing such a mirror image, I included the keyword argument `switch_axes` in `lineplot`. If set to `True`, the `vals` and `grouper` variables for the `aggregate` function are swapped and `fill_betweenx` is used for the confidence intervals.
I find this feature important when plotting e.g. meteorological variables as a function of height. Apart from [this](https://stackoverflow.com/questions/55362200/switch-seaborn-x-and-y-axes-but-compute-standard-deviation-on-original-orientati) stackoverflow question, I couldn't find any information on this issue.
I will be glad, if that is somehow included in seaborn.

example code:

```
import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

height= np.arange(0, 6.3, 0.1)
height_ind = np.repeat(height, 200)
rand = np.random.normal(scale=0.1, size=200*len(height))
vals = np.sin(height_ind) + rand

df = pd.DataFrame()
df[""height""] = height_ind
df[""vals""] = vals

#independent variable on x-axis
plt.figure()
g = sns.lineplot(x=""height"", y=""vals"", switch_axes=False, ci=""sd"", data=df)
plt.show()

#independent variable on y-axis with switch_axes argument
plt.figure()
g = sns.lineplot(y=""height"", x=""vals"", switch_axes=True, ci=""sd"", data=df)
plt.show()

```
",0,5,"['enhancement', 'plots', 'mod:relational']"
272,280237359,1742,4704710,2019-05-20 04:40:58,2019-05-20 04:48:26,closed,Meaningless change to re-trigger CI with matplotlib 3.1.0,My testing suggests that Seaborn's test suite fails with matplotlib 3.1.0. This will reveal is this is true on CI or merely a quirk of our local setup.,1,1,[]
273,274984650,1736,4704710,2019-05-01 08:52:56,2019-08-17 17:08:29,closed,Fix typo,,1,1,[]
274,271624683,1728,4704710,2019-04-18 09:57:15,2019-08-17 17:08:28,closed,Update stripplot docs and examples with jitter=True default,PR #1490 made ``jitter=True`` the default for ``stripplot()``. This PR incorporates the change into the docs and examples. ,1,2,[]
275,270465635,1727,4704710,2019-04-15 10:53:29,2019-12-10 02:16:38,closed, Consider binary hue data with one unique value categorical (#1722),"The current behavior of relational plots considers binary values as categorical for ``hue`` or ``size`` purposes, but only if both 0 (or ``False``) and 1 (or ``True``) values present in the data (see #1722). This PR makes relational plots consider single-valued binary data in the ``hue`` and ``size`` columns of relational plots as categorical.
![1722](https://user-images.githubusercontent.com/13831112/56126670-2a35c700-5f84-11e9-8a6c-cc9e435e7879.png)

Fixes #1722 ",3,2,[]
276,270328621,1726,4704710,2019-04-14 21:28:17,2019-12-29 00:33:50,closed,Format numeric legend entries in relational plots,"Issues #1653 and #1703 describe relational plots legend entries that look affected by some floating point calculations. This is due to non-rounded values returned by matplotlib's ``ticker`` used for obtaining the hue/size legend entries. The proposed PR fixes this behavior by using matplotlib formatters on the obtained tick values to get a nice string representation.
![1703-a](https://user-images.githubusercontent.com/13831112/56099324-38e49580-5f14-11e9-9079-5e17b5f61755.png)
![1703](https://user-images.githubusercontent.com/13831112/56099326-3c781c80-5f14-11e9-87ab-a4fd38f1bc69.png)
Fixes #1653 
Fixes #1703 ",7,6,[]
277,270326976,1725,4704710,2019-04-14 21:02:16,2019-04-15 00:01:20,closed,Issue omnibus,Pulling multiple open PRs into one and retargeting into v0.9 branch.,2,27,[]
278,268778156,1718,4704710,2019-04-09 14:59:27,2019-09-05 18:31:37,closed,Implemented dropna bug fix for pairplot,"Issue #407 describes an issue where creating a PairGrid on data with `NA`s raises an error even when `dropna=True`. This is an issue only with pyplot's `hist` function and is discussed in [this issue](https://github.com/matplotlib/matplotlib/issues/6483). The NA filtering case does not apply during a `scatter` call as matplotlib already filters out NA data. There is a fix that is supposed to go into matplotlib version 3.0.0 that addresses the issue, but unless seaborn wants to make that restriction on versioning, this PR addresses the issue. 

There is already a [PR](https://github.com/mwaskom/seaborn/pull/409) in progress, but looks stale and figured I'd pick it up and give it a shot.",1,3,[]
279,268226428,1716,4704710,2019-04-08 08:08:23,2019-08-17 17:08:27,closed,Fix grid ticklabels rotation,"Issue #1598 describes a bug where using ``g.set_xticklabels(rotation=rotation)`` on an FacetGrid that has ``row`` faceting (with ``sharex=True``) makes the xtick labels (that are on the bottom row only) disappear. This is due to local variable overriding with the xtick labels from hidden empty labels introduced by #1384 and is fixed by this PR:

<img src=""https://user-images.githubusercontent.com/13831112/55707336-09053180-59ec-11e9-9635-de75ca95c3fa.png"" width=200>

See the conversation in #1313 regarding the possibility of adding a rotation function to the FacetGrid API. 

Fixes #1598 
Fixes #1743 ",1,2,[]
280,267863060,1713,4704710,2019-04-05 15:13:43,2019-04-05 15:39:44,closed,Omnibus typo fixes,Pulling in a lot of PRs with small typo fixes and merging them into the v0.9 branch instead of directly into master.,1,11,[]
281,267671109,1712,4704710,2019-04-05 02:29:19,2019-04-05 14:47:29,closed,Get travis running cleanly again,Also touches a few related issues in the tests,2,9,[]
282,267434509,1711,4704710,2019-04-04 12:51:13,2019-04-04 13:01:13,closed,removing unnecessary semicolons from docs,Just a simple cleanup of extra ;s in the documentation,2,1,[]
283,265226026,1708,4704710,2019-03-28 08:13:41,2019-03-28 16:15:49,closed,Add 'mean' option to 'inner' for violin plots,"This allows a single line to be drawn at the location of the mean in a violin plot, rather than the median as when inner='quart'. This would make the figure more versatile.

Line dashing currently follows that for the median line when inner='quart'. I have tried it without dashing (i.e., a solid line), however, the end of the solid line sometimes overruns the pdf boundary.",1,2,[]
284,260708000,1695,4704710,2019-03-13 10:34:38,2019-12-12 17:09:22,closed,Support numpy datetime64 datatype in scatter hue/style (fixes #1693),Issue #1693 describes a bug where providing ``hue`` (or ``style``) with a pandas column of type ``np.datetime64`` to scatterplot results in no points plotted. This PR fixes both ``hue`` and ``style``.,2,5,[]
285,260067631,1694,4704710,2019-03-11 17:36:24,2019-04-05 15:40:58,closed,Spelling correction in docs.,Fixing a small typo in regression.py,1,1,[]
286,259645003,1692,4704710,2019-03-09 00:11:20,2019-04-15 00:02:05,closed,MNT: tweak access to tick label to avoid warning,"The Tick.label property will be deprecated and begin warning in a
future version of Matplotlib.  Explicitly using the correct property
will avoid this.

See https://github.com/matplotlib/matplotlib/pull/10088 and
https://github.com/matplotlib/matplotlib/pull/13631",0,1,[]
287,259138377,1689,4704710,2019-03-07 14:39:20,2019-04-05 15:41:26,closed,Fix typos on distplot documentation.,Minor typo correction and update.,1,1,[]
288,258277133,1686,4704710,2019-03-05 10:55:48,2020-01-05 17:22:41,closed,Don't fail on 'loc' kwarg for Grid.add_legend(),"This fixes #1561  , and handles both cases where ``Grid.add_legend(loc=""location"")`` is provided where the grid was either initialized with ``legend_out=True`` (currently the default) or ``legend_out=False``. ",2,4,[]
289,257102773,1683,4704710,2019-02-28 14:59:04,2019-04-05 15:43:05,closed,[Doc] swarmplot update,Update the `swarmplot` documentation to include a description of the `kwargs` argument which is currently missing. ,1,1,[]
290,252881723,1676,4704710,2019-02-13 23:11:45,2019-02-14 20:18:01,closed,Fixes issue with string array input to hue and size in relplot,"> Treats all non-numeric array inputs to hue and size as categorical. This prevents a string array from being passed to `numeric_to_palette` and causing the error in issue #1653 

When an array (`data`) is passed to the `hue` or `size` argument of  a `_RelationalPlotter` object, it is passed on to the method [`_semantic_type`](https://github.com/mwaskom/seaborn/blob/fe172c44777f87159e9e2b00e919bbd055d6f696/seaborn/relational.py#L523), which determines the array's data type (either `'categorical'` or `'numeric'`). If the array is made up of numeric-like strings (those that can be converted into floats), then the `'numeric'` type is returned, but the original `data` array variable is not converted to a numeric type and is passed to [`numeric_to_palette`](https://github.com/mwaskom/seaborn/blob/fe172c44777f87159e9e2b00e919bbd055d6f696/seaborn/relational.py#L230), which is expecting an array of numeric type.

It is possible to overwrite the `data` variable within the scope of `parse_hue` and `parse_size` with a numeric-converted array returned by `_semantic_type`, but this change would need to be propagated outside of the method to the object for use by other methods.

I think an easier solution is to treat only array types that can be parsed by `numeric_to_palette` as `'numeric'` and the rest as categorical. This change is made by checking the dtype of the passed `data` array against the options in `numpy.sctypes`.

This shouldn't contradict the documentation, which specifies that the array to the `hue` or `size` argument:
>Can be either categorical or numeric, although size mapping will behave differently in latter case.
",2,2,[]
291,251865537,1671,4704710,2019-02-11 10:39:05,2019-04-05 15:43:28,closed,Minor example improvement,Simpler code to create mask for upper triangle,1,1,[]
292,251716256,1670,4704710,2019-02-10 04:18:31,2019-02-10 04:20:10,closed,Update utils.py 376 line: ,,0,3,[]
293,251715209,1669,4704710,2019-02-10 03:45:20,2019-02-10 03:55:11,closed,Update utils.py 376 line: ,"get_dataset_names()
Passing parser into BeautifulSoup on line:376 will remove the UserWarning.",0,1,[]
294,243683905,1649,4704710,2019-01-10 13:19:40,2019-12-10 02:25:02,closed,Proposal of nonsymmetrical violin plots (#1648),"Here is my proposal of the feature requested in #1648.
It is naively implemented but works perfectly fine.
I can add a demo/example script, or a test case (if needed, could someone please show me where to put it? thanks)

Here are two tiny demos, for a single violin or more violins, for horizontal (top/bottom) or vertical (left/right) cases:
![proposal nonsymmetrical violin plots 1](https://user-images.githubusercontent.com/11994719/50970591-1771a900-14e2-11e9-9b49-8ee9346daa1e.png)
![proposal nonsymmetrical violin plots 2](https://user-images.githubusercontent.com/11994719/50970594-19d40300-14e2-11e9-9ca3-fdd4531525cf.png)",1,1,[]
295,242856326,1643,4704710,2019-01-08 04:46:44,2019-04-15 00:02:04,closed,Catch and discard MatplotlibDeprecationWarning in reset_orig(),"## What

Closes https://github.com/mwaskom/seaborn/issues/1642",2,1,[]
296,237961424,1628,4704710,2018-12-12 09:12:48,2020-01-18 16:42:18,closed,"Error raised in lineplot, but not barplot, when certain grouped bins have NaN values","Code to reproduce the error with current `master` branch:

```python
from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns


if __name__ == '__main__':
    main('plot.png', 10, 'line')  # change 'line' to 'bar' and the error disappears!


def main(outfile, conf_bins, plot_type):
    df = generate_data()
    fig, ax = confplot(df, conf_bins, plot_type)
    fig.savefig(outfile)


def generate_data():
    def prob_round(x):
        return (np.random.random(x.shape) < x).astype(int)
    conf = np.random.rand(200)
    df1 = pd.DataFrame({'correct': prob_round(conf), 'confidence': conf * 100})
    df1['type'] = 'type1'
    conf = np.random.rand(200)
    df2 = pd.DataFrame({'correct': prob_round(conf), 'confidence': conf * 50 + 50})
    df2['type'] = 'type2'
    return pd.concat([df1, df2], ignore_index=True)


def confplot(df, conf_bins, plot_type):
    bins = np.linspace(0, 100, conf_bins + 1)
    labels = [f'{int(x)}-{int(y)}' for x, y in zip(bins, bins[1:])]
    df['confidence'] = pd.cut(df['confidence'], bins, labels=labels)

    plotargs = {'y': 'correct', 'x': 'confidence', 'hue': 'type', 'data': df}

    fig, _ = plt.subplots(figsize=(8, 4))
    if plot_type == 'bar':
        ax = sns.barplot(**plotargs)
    elif plot_type == 'line':
        ax = sns.lineplot(**plotargs)

    return fig, ax
```

Traceback:
```
Traceback (most recent call last):
  File "".../site-packages/pandas/core/groupby/groupby.py"", line 918, in apply
    result = self._python_apply_general(f)
  File "".../site-packages/pandas/core/groupby/groupby.py"", line 936, in _python_apply_general
    self.axis)
  File "".../site-packages/pandas/core/groupby/groupby.py"", line 2273, in apply
    res = f(group)
  File "".../site-packages/seaborn/relational.py"", line 699, in bootstrapped_cis
    boots = bootstrap(vals, func=func, n_boot=n_boot)
  File "".../site-packages/seaborn/algorithms.py"", line 86, in bootstrap
    resampler = rs.randint(0, n, n)
  File ""mtrand.pyx"", line 993, in mtrand.RandomState.randint
ValueError: low >= high

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""seaborn-bug.py"", line 53, in <module>
    main()
  File "".../site-packages/click/core.py"", line 764, in __call__
    return self.main(*args, **kwargs)
  File "".../site-packages/click/core.py"", line 717, in main
    rv = self.invoke(ctx)
  File "".../site-packages/click/core.py"", line 956, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "".../site-packages/click/core.py"", line 555, in invoke
    return callback(*args, **kwargs)
  File ""seaborn-bug.py"", line 20, in main
    fig, ax = confplot(df, conf_bins, plot_type=plot_type)
  File ""seaborn-bug.py"", line 47, in confplot
    ax = sns.lineplot(**plotargs)
  File "".../site-packages/seaborn/relational.py"", line 1084, in lineplot
    p.plot(ax, kwargs)
  File "".../site-packages/seaborn/relational.py"", line 775, in plot
    x, y, y_ci = self.aggregate(y, x, units)
  File "".../site-packages/seaborn/relational.py"", line 718, in aggregate
    cis = grouped.apply(bootstrapped_cis)
  File "".../site-packages/pandas/core/groupby/groupby.py"", line 3469, in apply
    return super(SeriesGroupBy, self).apply(func, *args, **kwargs)
  File "".../site-packages/pandas/core/groupby/groupby.py"", line 930, in apply
    return self._python_apply_general(f)
  File "".../site-packages/pandas/core/groupby/groupby.py"", line 936, in _python_apply_general
    self.axis)
  File "".../site-packages/pandas/core/groupby/groupby.py"", line 2273, in apply
    res = f(group)
  File "".../site-packages/seaborn/relational.py"", line 699, in bootstrapped_cis
    boots = bootstrap(vals, func=func, n_boot=n_boot)
  File "".../site-packages/seaborn/algorithms.py"", line 86, in bootstrap
    resampler = rs.randint(0, n, n)
  File ""mtrand.pyx"", line 993, in mtrand.RandomState.randint
ValueError: low >= high
```

This PR fixes this error for me and the code above produces the following plot:

![bug](https://user-images.githubusercontent.com/21051830/49858861-6a9c0180-fe39-11e8-9b3c-64c325021440.png)",0,1,[]
297,235563527,1621,4704710,2018-12-03 19:25:42,2020-06-15 21:00:42,closed,ECDF plotting proposal per issue #1536,"Following some of the discussion from #1536, here is a strawman API for adding ECDF plotting -- essentially it would be an extra option of what you view is a distplot. I've tried to hew as closely to the existing API for such things, but would be happy to discuss. I am sure you are currently very busy, and I have no expectations for this PR; I merely wanted to provide a basic strawman in case you were interested.",2,5,"['enhancement', 'mod:distributions']"
298,232801592,1615,4704710,2018-11-21 21:24:16,2019-04-05 15:43:41,closed,Fixed spelling,Fixed spelling: changed paramter to parameter,1,1,[]
299,230867691,1611,4704710,2018-11-14 15:04:33,2018-11-19 15:41:36,closed,"The ""test plot"" to determine the color is now performed without actualy plotting anything","
This solves #1609 and prevents the regplot function from updating properties of the wrong axes in case an `ax` object is provided, which is not equal to the currently active axes",1,1,[]
300,230813899,1610,4704710,2018-11-14 12:14:48,2018-11-14 14:28:47,closed,"The ""test plot"" to determine the color is now performed in the correct axes","This solves #1609 and prevents the regplot function from updating properties of the wrong axes in case an `ax` object is provided, which is not equal to the currently active axes",5,1,[]
301,229933863,1607,4704710,2018-11-11 06:19:34,2019-04-05 14:56:13,closed,GH1571 Fix test_cbar_ticks in test_matrix.py,"Closes #1571 

This test has been causing many failures in PR's. Printing the ticks given in the test gives
```
Text(1, -2.0, '−2')
Text(1, -1.0, '−1')
Text(1, 0.0, '0')
Text(1, 1.0, '1')
Text(1, 2.0, '2')
```
so although in this case the ticker returns the correct number of ticks (-2 and 2 are not visible) calling len on this returns 5 while only 3 are visible, as the figure below (test output) demonstrates.

![test_cbar_ticks](https://user-images.githubusercontent.com/29615021/48309835-8b212500-e536-11e8-952c-9774fc09faa6.png)

Unfortunately, the python2 tests behave as intended, so changing the expected answer would only cause those to start failing instead. This PR replaces the test in question with a similar one that works on both versions, but still tests the intended functionality.",2,1,[]
302,229875835,1606,4704710,2018-11-10 07:24:55,2019-04-05 20:31:56,closed,Update tests to new pandas API,Closes #1498 and fixes pandas API warnings in `test_matrix.py`,1,1,[]
303,229450629,1604,4704710,2018-11-08 17:34:23,2019-04-05 15:43:56,closed,correct lineplot documentation for err_kws,The variable `err_band` isn't used by lineplot. This seems to be a typo for `err_kws`.,1,1,[]
304,229381396,1602,4704710,2018-11-08 14:23:36,2019-12-15 03:38:00,closed,BUGfix for kind 'point' in catplot,"When one of the data points is NaN there is a mismatch between color array and position arrays. 

`ValueError: 'c' argument has 2 elements, which is not acceptable for use with 'x' with size 0, 'y' with size 0.`

For those cases, emptying the color array fixes the error.",4,2,[]
305,223117288,1589,4704710,2018-10-16 05:14:24,2018-10-16 13:57:34,closed,Create pair_line_heatmap.py,An example for pairing the line plot and heat map,2,1,[]
306,222597563,1588,4704710,2018-10-12 22:03:33,2018-10-12 22:28:10,closed,Differentiated contours and inner lines and parameterized line color for violinplots.,"It used to be that the contours of violinplots could not be removed without removing inner elements as well (since they would disappear at a `linewidth` of zero). Consequently the `linewidth` parameter was a bit misleadingly summarized as controling the outer lines.

This is now improved with the `linewidth` parameter in fact controlling only the outer lines, and `inner_linewidth` controling the line width for inner parameters.

Additionally, it used to be that dark colours could not be used for the violin plot, as the gray color for the outlines was hard coded. This is addressed by adding the `linecolor` parameter.

These modest improvements enable beautiful figures such as the following (note the white lines, which avoid adding another shade of gray to the spectrum, and the contours being thinner than the inner delimiters --- the can, of course, now also be removed entirely).

![article](https://user-images.githubusercontent.com/950524/46896024-5f4d4980-ce7b-11e8-8b9d-6fa35c6ad022.png)
  ",2,1,[]
307,222378798,1587,4704710,2018-10-12 07:51:06,2020-01-21 11:59:03,closed,Add setup.cfg for the wheel distribution,"setup.cfg contains information relevant to the creation of the wheel distribution (when running `python setup.py bdist_wheel`).
* `universal = 1` means create a universal wheel, i.e. one that is not only ""pure Python"" but matches both Python 2 and 3 versions. Currently the [wheel on PyPI](https://pypi.org/project/seaborn/#files) is for Python 3 only although this package is compatible with both versions.
* `license_file` is the directive for including the license file in the ""dist-info"" folder inside the wheel (the manifest makes the license included in the sdist, but not the wheel).",1,1,[]
308,221526038,1585,4704710,2018-10-09 17:39:55,2018-10-09 18:02:17,closed, Added More Comments and explanation to imports,Was a great Documentation on seaborn the best i could ask for ,1,1,[]
309,220772099,1579,4704710,2018-10-05 17:29:17,2018-10-05 17:44:04,closed,Prevent _finalize_grid from breaking legend_out.,"Hi!

In 0.9.0, using the FacetGrid.map or FacetGrid.map_dataframe functions breaks the alignment on legend_out=True. This is shown in the plot below, in which the ""grouped_barplot.py"" example has g.map() called with a dummy function before rendering. 

![original_grouped_barplot](https://user-images.githubusercontent.com/3657774/46549947-79d66000-c888-11e8-9c77-83d383dda833.png)

This is came from the function _finalize_grid, which was calling tight_layout as a final step. This pull-request removes that line.

![new_grouped_barplot](https://user-images.githubusercontent.com/3657774/46549946-79d66000-c888-11e8-81f3-cb7c6616157d.png)

Thanks for such an awesome package! ✨ 

Code to reproduce: 

`
import seaborn as sns

sns.set(style=""whitegrid"")

titanic = sns.load_dataset(""titanic"")

g = sns.catplot(x=""class"", y=""survived"", hue=""sex"", data=titanic,
                height=6, kind=""bar"", palette=""muted"")
g.despine(left=True)
g.set_ylabels(""survival probability"")

def f(*args, **kwargs):
    pass

g.map(f)
`
",4,1,[]
310,220055509,1577,4704710,2018-10-03 14:19:50,2019-04-14 20:26:31,closed,Add example with dictionary-specified colors for catplot.,"I've added an example demonstrating how to specify colors of a catplot using a dictionary of – it was something I've struggled with, and previously posted an issue about [#1573](https://github.com/mwaskom/seaborn/issues/1573).

The example use artificial randomly generated data showing wine ratings, and coloring each type of wine in an associated color:

![wine_example](https://user-images.githubusercontent.com/2641327/46416572-1e8d5c00-c728-11e8-9359-9524bd49a367.png)
",2,1,[]
311,219448242,1575,4704710,2018-10-01 17:05:49,2019-04-15 00:02:03,closed,[WIP] Add check for categorical hue variable (fixes #1515),"To fix the issue I was seeing on #1515, I added a check that overrides the variable type returned by `_semantic_type()` if the data is a Pandas categorical type. I agree that it makes sense to convert numeric strings into numbers since, as you said in #1515,

>it is not uncommon in pandas (i.e. the data library most commonly used with seaborn) to have numeric data stored with an object datatype, for example if you have integers and missing data.

but I can't think of a case where a series would be a categorical variable if the user didn't explicitly do that. Please let me know if I'm mistaken.

Let me know if you're open to a change like this, and I can look into adding necessary tests for this.",3,2,[]
312,216718299,1569,4704710,2018-09-19 17:29:55,2019-04-15 00:02:03,closed,fixing regplot to work with multiple subplots,"The proposed change in this PR is to replace a call to `plt.plot()` with `ax.plot()` in `_RegressionPlotter` in regression.py. The reason for the change is to solve problems that emerge when `regplot()` is used to plot data on a figure with multiple axes. (See issue #1568) 

A side effect of this change is that multiple calls to `regplot`, each on a different axes, will now be plotted in the same colour by default, as opposed to each using different colours, as is the case now. However, using the same colour will also be more consistent with `lmplot`.

The behaviour of `regplot` when not using multiple subfigures, or not specifying an `ax` is unchanged.",2,1,[]
313,213046655,1557,4704710,2018-09-04 17:15:51,2019-04-05 15:44:14,closed,Fix error message,"The strings are simply concatenated, so without explicit spaces, they print the following:

```
ImportError: Cumulative distributions are currentlyonly implemented in statsmodels.Please install statsmodels.
```",2,1,[]
314,212616995,1555,4704710,2018-09-02 23:29:49,2019-04-05 15:47:24,closed,small typo fix,fix 'paramter' typo,2,1,[]
315,212348357,1554,4704710,2018-08-31 11:00:41,2018-08-31 15:21:43,closed,"Added ci=""range"" option to lineplot","Added ci=""range"" option to lineplot in order  to show the max/min values, in alternative to (""sd"")",3,1,[]
316,209197499,1544,4704710,2018-08-17 16:27:05,2018-08-17 17:15:34,closed,Allow specifying a function to calculate confidence intervals,This change allows users to specify their own function to calculate the confidence interval.  For example someone could use [`scipy.stats.sem`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.sem.html).,1,1,[]
317,208346548,1543,4704710,2018-08-14 16:53:06,2019-02-06 03:48:48,closed,Handle missing values within distplot automatically,"As the title suggests, the proposed change is to remove missing values automatically within `distplot` and issue a warning instead of an error. Fixes #1542.",4,3,[]
318,207887857,1541,4704710,2018-08-13 07:12:52,2019-04-05 15:47:51,closed,Fix some typos in example gallery,This PR is just some typo fixes in the comments in the examples gallery.,2,1,[]
319,206166003,1531,4704710,2018-08-04 00:51:25,2019-04-05 15:48:14,closed,Fix deprecation warning typo,Fixed two typos.,2,1,[]
320,204686890,1525,4704710,2018-07-30 03:45:33,2019-09-05 18:31:38,closed,remove hue from pairplot variables (fix #1502),"This will fix #1502, at least the case I reported.",3,1,[]
321,204483031,1522,4704710,2018-07-27 16:40:12,2018-07-27 21:54:57,closed,Implement standard error bars in categorical plots,"In psychology we tend to use SE over SD (or CI). I added it for a project I'm working on, hopefully it's good enough to be merged.",4,1,[]
322,204244039,1519,4704710,2018-07-26 19:31:32,2020-08-28 23:40:16,closed,ENH: adv subtitled legends,"Added in `align_subtitle_legends` function to utils.py (along with 3 other helper functions) to allow the user to customize legends into subtitled legends. This function requires a legend to be passed, edits it in place, to allow the user to:

* Change the alignment of the subtitle headers and levels
* Change whether the subtitled sections are stacked vertically or horizontally
* Add in/change subtitles header labels and restructure the groupings of levels
* Manipulate the spacing between subtitled sections
* Remove subtitles completely

Example legends:

![subtitle_example](https://user-images.githubusercontent.com/31414128/43284035-9dd32d62-90e8-11e8-9ad0-6c7b41cd2247.png)

Scatterplot example

    import seaborn as sns
    import matplotlib.pyplot as plt

    sns.set()
    tips = sns.load_dataset('tips')
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12,6))

    #scatter plot on left side
    sns.scatterplot(x=""total_bill"", y=""tip"",
                         hue=""sex"", style=""smoker"", size=""size"",
                         data=tips, ax=ax1)
    ax1.legend(loc='upper left')
    ax1.set_title('Original Scatter plot legend')

    #scatter plot on right side
    sns.scatterplot(x=""total_bill"", y=""tip"",
                         hue=""sex"", style=""smoker"", size=""size"",
                         data=tips, ax=ax2)
    legend = ax2.legend(loc='upper left')
    sns.utils.align_legend_subtitles(legend, align='center', orient='h') # subtitle legend
    ax2.set_title('Scatter plot with horizontal subtitle legend')

![scatter_example](https://user-images.githubusercontent.com/31414128/43284052-ac45a758-90e8-11e8-8d9e-895226e94422.png)


Edit: Included incorrect scatter plot example.",2,4,"['enhancement', 'plots', 'mod:relational']"
323,202947334,1510,4704710,2018-07-20 20:22:01,2019-04-15 00:02:02,closed,Reduce navbar padding to resemble top level links,"Minor suggestion. Reduce the padding between the navbar and section headings so that it is more similar to how close top level headings are to the navbar.

## Before
![image](https://user-images.githubusercontent.com/4560057/43023446-e84a9556-8c38-11e8-8488-3d8d1b8f763d.png)


## After
 ![image](https://user-images.githubusercontent.com/4560057/43023422-d2684fa8-8c38-11e8-9413-90d6f65a8816.png)

## Top level heading
![image](https://user-images.githubusercontent.com/4560057/43023457-f61b729a-8c38-11e8-916e-511d08a237ae.png)

",1,1,[]
324,202943278,1509,4704710,2018-07-20 20:01:38,2019-04-15 00:02:02,closed,Reference with :doc: to avoid hiding titles under the navbar,"Clicking the introduction, installation and API links on the front page causes the section heading to be hidden under the navbar. Linking to the page with `:doc:` instead of the specific heading with `:ref:` does not have this problem. The example gallery and tutorial links were working fine with `:ref:` so I didn't touch those.",6,2,[]
325,202932481,1508,4704710,2018-07-20 19:08:08,2019-04-15 00:02:01,closed,Format doc tables similar to the Jupyter Notebook,"I added the [css from the jupyter-notebook](https://github.com/jupyter/notebook/blob/c8841b68c4c0739bbee1291e0214771f24194079/notebook/static/notebook/less/renderedhtml.less#L59-L90) to style the tables in the documentation. I modified it slightly to left-align instead of center (to be consistent with what you had previously) and removed a couple of references to `@rendered_html_border_color`.


## Old style
![image](https://user-images.githubusercontent.com/4560057/43020439-fadd641a-8c2d-11e8-80ad-564148299982.png)

## New style
![image](https://user-images.githubusercontent.com/4560057/43020462-0717dd8c-8c2e-11e8-8979-7830f0f5fdec.png)
",1,1,[]
326,202909241,1507,4704710,2018-07-20 17:20:44,2019-04-15 00:02:01,closed,Minor documentation fixes and suggestions,"Thanks for all your work on v0.9.0! I was just reading through what's new and it looks really exciting!

As I read through the documentation again, I noticed a few typos so I thought might as well make a PR for those. I include a few suggestion for clarification as well. I think these are all related, but let me know if you want me to remove or split some of these commits into a separate PR.

To clarify the violinplot commit, I think it might not be clear to people reading the docs why there is a vertical line for ""Thur"" [here](https://seaborn.pydata.org/tutorial/categorical.html#violinplots).",1,4,[]
327,201614750,1496,4704710,2018-07-16 11:56:41,2018-07-16 12:21:06,closed,Add catplot companion,Woof,3,1,[]
328,201498394,1495,4704710,2018-07-15 13:31:49,2018-07-15 13:55:31,closed,Update .ix to .loc for pandas compat,,1,1,[]
329,201491410,1494,4704710,2018-07-15 10:30:44,2020-01-18 21:49:37,closed,Added legend (label) to pointplot,"import pandas as pd
import seaborn as sns
df = pd.DataFrame([[1,2,3,4,5],[2,4,5,6,8]],index=['one','two']).transpose()
splot = sns.pointplot(x='one',y='two',data=df,label='1v/s2 ')
splot.legend()
 would throw a warning from matplotlib, as no labels were passed

 one way of adding legend would be
 initliase fig,ax = plt.subplots()
 pass ax to pointplot function
 then ax.legend(handles=ax.lines[::len(df)+1], labels = ['1v/s 2'], loc = 1)

 thus to simplify it, i have added label :
 1) added label parameter to def pointplot (line no : 3333)
 2) adding label to constructor (__init__), set self.label = label in other plot components of _PointPlotter (3338, 1675, 1705)
 3) in _PointPlotter.draw_points(), added label=self.label while plotting plot (1740, 1743)
 4) to display legend if label self.label is not None, call legend. (1816, 1817)",3,5,[]
330,200860632,1490,4704710,2018-07-12 00:37:30,2018-07-13 10:53:07,closed,Rename factorplot to catplot and change the default plot kind to strip,"Moderately disruptive but well-intentioned changes herein:

First:

I've decided to abandon the original R-inflected name for `factorplot` and change it to `catplot`, which better corresponds to the appropriate terminology in pandas (and the terminology that is used more broadly in seaborn).

Along with a better name, it gives the opportunity for a less-disruptive approach to changing the default kind to ""strip"", which is a much better place to start with categorical plotting. (Originally factorplot *only* drew what are now called point plots, and it kept that default when it was expanded to a more general interface to categorical plots).

The other part of the change is to make `jitter=True` the default in `stripplot`. I found myself setting this 98% of the time I made a stripplot, which is a strong argument for making it a default.

Also as part of the change, the default `height` is increasing to `5` to match `lmplot` and the default for the new `relplot`.

`factorplot` will issue a warning but otherwise pass its arguments down to `catplot` (setting `kind=""point""` and `height=4` as defaults) so existing code won't break. I don't plan to remove the `factorplot` stub any time soon.

Second:

To try to pack most of the disruptive changes I've had in mind into the same release, I've also changed the name of `lvplot` to `boxenplot`. `lvplot` was never a good name because it's not clear what it stands for, and even when it does, ""letter value plot"" was not a good name because the concept of letter values is (at least in my experience) quite obscure. So I expect that a name that describes what the plot looks like will make it fit in better with ""box"" and ""violin"" plot. (If you're wondering, ""boxen"" is of course the plural of box).",4,11,[]
331,199944697,1487,4704710,2018-07-08 14:27:21,2018-07-09 21:50:34,closed,Near-finalization of relational plots,"- Renamed module and standardize language across docs/code
- Added a tutorial",1,6,[]
332,199580340,1483,4704710,2018-07-05 20:34:16,2018-07-05 21:12:34,closed,First approach to relational plot legends,"This PR adds invisible artists to the axes that can be used as subtitles in a legend for a plot with multiple semantics:

![image](https://user-images.githubusercontent.com/315810/42346556-0ce305a2-8071-11e8-9d77-445c802d8cc1.png)

The downside is that the subtitles are stuck in the right column with other labels. See planned enhancements in #1440, but I'm also interested in other, better long-term solutions. (First-class support for sectioned legends in matplotlib would be ideal).

Closes #1440",1,2,[]
333,199359422,1480,4704710,2018-07-05 04:58:01,2018-07-05 17:21:10,closed,Intersphinx,"Adds intersphinx to the documentation configuration. 

Also: changes to the introduction notebook to link to MPL and Pandas documentation.",5,2,[]
334,199310685,1479,4704710,2018-07-04 18:56:53,2018-07-04 19:43:14,closed,Fix relplot legend,,1,1,[]
335,198551912,1477,4704710,2018-07-02 00:43:03,2018-07-03 00:33:27,closed,Add relplot function,"This PR adds the `relplot` function, for combining `scatterplot` or `lineplot` with a `FacetGrid`, similar to the relationship between `factorplot` and the axes-level categorical plots. This makes it easy and robust to facet relational plots with multiple semantic variables:

```python
diamonds = sns.load_dataset(""diamonds"")
clarity_ranking = [""I1"", ""SI2"", ""SI1"", ""VS2"", ""VS1"", ""VVS2"", ""VVS1"", ""IF""]
g = sns.relplot(x=""carat"", y=""price"",
                hue=""clarity"", size=""depth"", col=""color"",
                height=3.5, aspect=.9, col_wrap=3,
                palette=""ch:.2,-.2,d=.3_r"",
                hue_order=clarity_ranking,
                linewidth=0, sizes=(5, 20),
                data=diamonds.sort_values(""color""))
```
![image](https://user-images.githubusercontent.com/315810/42140522-a8b22068-7d6e-11e8-86d0-7dc093140a48.png)

```
fmri = sns.load_dataset(""fmri"")
sns.relplot(x=""timepoint"", y=""signal"",
            hue=""event"", style=""event"",
            col=""region"", units=""subject"",
            kind=""line"", estimator=None,
            height=5, aspect=.8, data=fmri)
```
![image](https://user-images.githubusercontent.com/315810/42140548-f583db98-7d6e-11e8-8abf-7a5364a2b68c.png)

This addition necessitated an API change in `FacetGrid`, because there was a conflict with the `size` parameter name. This prompted a uniform substitution of `height` for `size` across grid functions, which has the benefit of being more explicit about what that parameter does. It also fixes a problem in `factorplot` where there was an existing conflict where `size` was used for the marker radius. The change should not break existing code, as `size` is handled and converted set to `height`. with a warning issued.",1,11,[]
336,198377572,1476,4704710,2018-06-29 17:24:16,2018-06-29 18:13:13,closed,Change so that seaborn.lvplot can take alpha argument.,,1,1,[]
337,197886289,1475,4704710,2018-06-28 00:16:33,2018-06-28 11:05:41,closed,Additional enhancements to basic plots,"These enhancements clean up some open issues in `scatterplot`/`lineplot`:

- Renamed `{hue,size}_limits` to `{hue,size}_norm` and allowed them to accept and use a matplotlib `Normalize` object. There is some support for using the LogTicker to generate brief legend ticks (but see https://github.com/matplotlib/matplotlib/issues/11518); other kinds of normalization are not associated with other ticks, but are less likely to be used.
- Binary data (i.e. data with only 0s or 1s) is treated as categorical by default instead of getting the ends of the default numeric colormap and weird legend ""ticks""
- Raise on getting a mixture of  filled and unfilled markers, otherwise the unfilled markers will be drawn with the edgecolor (white by default, causing them to appear invisible).
- Changed the default numeric hue colormap to the default cubehelix palette for more contrast against the background.

Additionally, this PR includes a commit that makes the `""ch:""` string specification of cubehelix more convenient by allowing single-letter shorthands for keyword arguments.

Closes #1470, closes #1441",1,11,[]
338,197102361,1474,4704710,2018-06-25 12:51:28,2018-06-25 13:25:21,closed,Small changes/fixes to kdeplot,"Small changes addressing a couple of bugs related to the bandwidth and updates to color handling.

The default behavior is now to follow the color cycle and choose either a light or dark palette based on whether the KDE is shaded:

```python
x, y = np.random.randn(2, 1000)
ax = sns.kdeplot(x, y)
sns.kdeplot(x + 4, y + 4)
```
![image](https://user-images.githubusercontent.com/315810/41851560-4df3efc0-7856-11e8-9ac4-835607ed6309.png)

```python
x, y = np.random.randn(2, 1000)
ax = sns.kdeplot(x, y, shade=True, shade_lowest=False)
sns.kdeplot(x + 4, y + 4, shade=True, shade_lowest=False)
```
![image](https://user-images.githubusercontent.com/315810/41851636-919291aa-7856-11e8-8aac-920b776fbd6f.png)

Otherwise the colormap is set by either the `color` or `cmap` that gets passed

```python
sns.kdeplot(x, y, color=""r"")
sns.kdeplot(x + 4, y + 4, cmap=""mako"")
```
![image](https://user-images.githubusercontent.com/315810/41851813-25d8796a-7857-11e8-8230-b6eb0e0c2be5.png)

The function also handles a `label` kwarg without passing it to `ax.countour`, so it it overall works better when faceted with a `hue`.


",1,4,[]
339,196923961,1472,4704710,2018-06-23 22:53:04,2018-06-24 15:56:27,closed,Update color palettes to 10 colors,"This PR changes the named seaborn color palettes (i.e. ""deep"", ""muted"", ""pastel"", ""bright"", ""dark"", and ""colorblind""). It expands them to 10 colors that correspond to the 10 colors in the new matplotlib default palette (""tab10"").

The old palettes can be used by appending ""6"" to the name (e.g. ""muted6"").

There's also a new image in the tutorial docs showing off all the color palettes with some information about how they're related:

![palettes](https://user-images.githubusercontent.com/315810/41814522-20db0940-771d-11e8-8480-41778e045b2e.png)

(If of interest, I've also generated this image while simulating [various forms of color deficiency](https://gist.github.com/mwaskom/b35f6ebc2d4b340b4f64a4e28e778486).)

Additionally, a few colors in the non-default seaborn palettes have been tweaked for better aesthetics/consistency/colorblind accessibility.

The other change here is that calling `sns.color_palette` (or `sns.set_palette`) with a named qualitative palette that seaborn knows about will now set *all* colors for that palette by default. In other words, `sns.color_palette(""Blues"")` will return a 6 color palette but `sns.color_palette(""Set2"")` will return an 8 color palette.

~~I think it would be nice if `color_palette` also behaved this way, but it seems more likely that having that function return a list with a different length than previously expected would cause code to break. (These changes are alreadhy ""breaking"" in the sense that plots will look different, but I view that as a smaller cost than having code fail to run).~~

I determined that there is enough precedence for `color_palette` returning a flexible number of colors when none is specified that it ultimately makes more sense to have that logic live there.
",1,8,[]
340,196863353,1471,4704710,2018-06-22 23:05:35,2018-06-23 16:16:00,closed,Allow interface to cubehelix through color_palette,"e.g.

```python
sns.palplot(sns.color_palette(""cube:.1,-.2,hue=1,dark=.3""))
```
![image](https://user-images.githubusercontent.com/315810/41802529-666220da-764f-11e8-9e8c-1de24d220024.png)

This means it can be used in any seaborn function with a `palette` kwarg:

```python
sns.boxplot(x=""subject"", y=""signal"",
            palette=""cube:.1,-.2,hue=1,dark=.3"",
            data=fmri)
```

Needs:
- [ ] Documentation (including release notes)
- [x] Decision about best prefix
- [x] Special handling of colormap case in basic plots",1,6,[]
341,196644810,1469,4704710,2018-06-22 06:02:18,2018-06-24 00:31:42,closed,seaborn/distributions.py,Fixed a typo in the docstring of the distplot(),2,1,[]
342,196608923,1468,4704710,2018-06-22 00:19:03,2018-06-25 00:25:27,closed,Update style and context parameters,"This PR implements a reorganization and update of the parameters that control seaborn aesthetics.

The changes are aim to make long-needed improvements that are now facilitated by the updates in the matplotlib 2.0 style overhaul.

The overall aesthetic changes should be minor but the underlying parameter sets have changed somewhat substantially.

## Parameter reorganization

The biggest change involves using several new params in the ""style"" spec while moving parameters that used to implement the corresponding aesthetics to the ""context"" spec. For example, axes spines and ticks are now off instead of having their width/length zeroed out for the darkgrid style. That means the width/length of these elements can now be scaled in different contexts. The effect is a more cohesive appearance of the plots, especially in larger contexts.

There is only minimal support for the matplotlib 1.x series. Those versions are special-cased to not set new rcParams, avoiding errors, but the reorganization of parameters means not all styles will look roughly the same on older matplotlibs. On at least the 1.5 series, it should be possible to set the old seaborn style/scaling through the matplotlib stylesheet system.

## Context scaling

The context scaling has also been changed. The baseline font size has increased a point, and the scaling factors for both the talk and poster contexts have been increased.

## Other changes 

Calling `sns.set` will now call `sns.set_color_codes` to re-assign the single letter color codes by default.

Line marker edge widths are no longer zeroed-out, fixing a long-standing issue where line art markers would be invisible.

White edges were added to patch artists.",1,11,[]
343,196599546,1467,4704710,2018-06-21 23:08:34,2018-06-22 00:18:14,closed,Fix rugplot autoscaling,,1,1,[]
344,196599069,1466,4704710,2018-06-21 23:05:23,2018-06-22 00:18:22,closed,Deprecate JointGrid statistical annotation,,2,2,[]
345,196569486,1465,4704710,2018-06-21 20:41:18,2018-07-05 18:04:09,closed,Omnibus documentation updates for v0.9,,4,44,[]
346,196569419,1464,4704710,2018-06-21 20:41:03,2018-06-21 22:23:43,closed,Remove special-cased stacked diagonal histograms in PairGrid,"Also changes the `pairplot` defaults:

```python
sns.pairplot(iris, hue=""species"")
```
![image](https://user-images.githubusercontent.com/315810/41746079-1c1fe292-7577-11e8-8733-49ee8e82ac46.png)
",1,5,[]
347,195384870,1460,4704710,2018-06-17 16:34:14,2018-06-17 16:55:29,closed,Avoid error when backend has no canvas renderer,Closes #1397,2,1,[]
348,195381440,1459,4704710,2018-06-17 15:06:06,2018-06-17 15:47:51,closed,Assorted compatability fixes,Small changes addressing various issues; see commit texts.,1,12,[]
349,195339917,1458,4704710,2018-06-16 16:52:21,2018-06-16 17:52:53,closed,Allow control over the error representation in lineplot,Adds the `err_kws` parameter; also renames `errstyle` to `err_style` for consistency.,1,1,[]
350,194730560,1454,4704710,2018-06-13 22:15:52,2018-06-13 22:43:56,closed,Accept list inputs in regplot,Closes #28,1,1,[]
351,194727289,1453,4704710,2018-06-13 21:59:41,2018-06-13 22:20:27,closed,Fix FacetGrid bug with single facet level,Fixes #890 and fixes #1296,1,1,[]
352,193791089,1450,4704710,2018-06-09 18:43:55,2018-06-09 19:50:49,closed,Making the error message for jet more informative,"Just stumbled upon discussions regarding the rather brief error message when a user attempts to use 'jet' as a color map. To make the `ValueError` more informative, and to provide some basic information to people who are not (yet) aware of jet's issues, I modified the error message.",1,1,[]
353,192815363,1448,4704710,2018-06-05 19:41:49,2018-06-12 00:54:55,closed,Tutorials minor fixes,"I was rereading the docs and noticed a few things so I went through them all briefly and include some minor fixes here. Let me know if you want to remove any of the commits. A couple of general comments:

1. In the [categorical data tutorial](https://seaborn.pydata.org/tutorial/categorical.html) you are referring to the *previous* tutorial on linear regression visualization. However, they way these are [ordered on the tutorial page](https://seaborn.pydata.org/tutorial.html), the categorical data tutorial comes before the linear regression tutorial.
2. Whenever I click a link from the tutorial page to get into one of the headings of a specific tutorial, the section heading is hidden by the page banner when that page loads. Subsequent clicks on the headings inside a specific tutorial renders the respective heading just below the banner as expected. Refreshing the page makes the banner cover the section heading again. Not sure if this is a simple fix that is worth the effort. ",5,8,[]
354,192812501,1447,4704710,2018-06-05 19:30:02,2018-06-12 00:57:03,closed,Add 'swarm' and 'lv' as possible plots with factorplot in the doc,,2,1,[]
355,192545885,1445,4704710,2018-06-04 22:32:35,2018-06-04 22:56:36,closed,Remove mention of deprecated corrplot in color tutorial,,3,2,[]
356,189243803,1436,4704710,2018-05-20 17:36:34,2018-05-29 20:53:03,closed,Add scatterplot function,"This PR adds a scatterplot function that can set the color, size, and marker of the points based on semantic variables. Simple obvious example:

```python
sns.scatterplot(
    x=""total_bill"", y=""tip"",
    hue=""sex"", style=""smoker"", size=""size"",
    data=tips,
)
```
![image](https://user-images.githubusercontent.com/315810/40587264-c4c82210-619a-11e8-9b3b-9961885a58d9.png)

More examples to come.

Possible functionality to be added in future development:
- Jittering
- Automatic point opacity for large datasets
- Aggregation and estimation similar to `lineplot`

Ultimately, this should also replace the underlying scatter plotter in `regplot` (and therefore `lmplot`), and perhaps more pressingly, should be used by default in `pairplot` and `jointplot`.

In principle the API here will work fine in `FacetGrid` but, similar to the case with the categorical plots, the ordering and limits for the various semantic variables will need to be explicitly defined so it can be shared across the facets. There should be a higher-level function similar to `factorplot` to draw these plots onto a `FacetGrid`. It will need a name. One would be `facetplot` but that is very easily confused with `factorplot`.

The presence of this function will make it awkward that size/style semantics cannot be used in the categorical scatterplot functions (`stripplot`/`swarmplot`), but adding them would probably be too disruptive.

Closes #315 

## To Do:

- [x] Handle to-be-implemented functionality
- [x] Tests
- [x] API documentation
- [x] Gallery examples
",1,17,[]
357,188522151,1434,4704710,2018-05-16 18:32:59,2018-05-31 02:13:24,closed,allow for combinations of stick/box/point/quart,"I wanted to make a violin plot with inner quartiles and points so I made these changes to allow users to specify combinations of stick/box/point/quart. Useful combinations are `pointstick`, `boxstick`, `boxquart`, and `quartpoint`.",1,1,[]
358,187850133,1433,4704710,2018-05-14 14:41:28,2018-05-19 18:23:52,closed,Make 'units' in lineplot functional,"This PR adds some missing functionality from #1285. It makes the `unit` parameter functional for drawing replicate lines with the same semantics:

```python
fmri = sns.load_dataset(""fmri"").query(""region == 'parietal'"")
ax = sns.lineplot(x=""timepoint"", y=""signal"", hue=""event"", units=""subject"",
                  estimator=None, linewidth=1, data=fmri)
```

![image](https://user-images.githubusercontent.com/315810/40003858-667628de-5762-11e8-9c14-7b427a5bb99b.png)

This overloads the ""units"" parameter that is used elsewhere to do a hierarchical bootstrap. The hierarchical bootstrap is not currently implemented in `lineplot`. I think this makes sense because the parameter picks out the same dataset element in both cases. For the time being we're going to force specification of `estimator=None` when using `units`.

## TODO

- [x] Raise when we have `units` and `estimator`
- [x] Tests
- [x] API example",1,5,[]
359,187715168,1432,4704710,2018-05-14 04:03:08,2018-05-14 12:25:45,closed,Replace np.ceil() with a faster operation,"This is approx. 88 times faster on my machine.
Plus no need to explicitly convert to `int` because `len(col_names)` and `col_wrap` are guaranteed to be integers. 

```
$ python -m timeit -s ""import numpy as np"" ""int(np.ceil(100 / 3))""
1000000 loops, best of 3: 0.949 usec per loop
$ python -m timeit -s ""import numpy as np"" ""(10 + 3 - 1) // 3""
10000000 loops, best of 3: 0.0108 usec per loop
```
",2,1,[]
360,187644537,1431,4704710,2018-05-12 23:18:28,2018-05-12 23:45:56,closed,Update infrastructure for docs and install,"- Explicitly declare required dependencies (with minimal versions) in setup.py
- Removed some unused sphinx extensions (closes #1421)
- Switched to matplotlib's version of `plot_directive`
- Renamed our gallery generator extension to be less confusable with `plot_directive`
- Renamed the joyplot example to ""ridgeplot""",1,4,[]
361,187360019,1426,4704710,2018-05-11 03:41:27,2020-01-18 23:10:53,closed,Control dendrogram line properties.,"Adds the parameter `dgline_kws` to the `clustermap` call and adds the property `line_kws` to the `DendrogramPlotter` class to allow for editing of the dendrogram line attributes.

Addresses the issue raised on Stack Overflow [here](https://stackoverflow.com/a/33242067/7336561). 

Default properties of a black, 0.5 pt line width are maintained unless explicitly changed.

Example of use:
```
>>> import seaborn as sns
>>> iris = sns.load_dataset(""iris"")
>>> species = iris.pop(""species"")
>>> g = sns.clustermap(iris, dgline_kws=dict(linewidths=1.5, colors=(0.2, 0.2, 0.4))
```
![test](https://user-images.githubusercontent.com/24383562/39920663-d9f07dac-54e5-11e8-9eff-4e91d5b5dce0.png)
",1,4,[]
362,186432759,1421,4704710,2018-05-07 18:52:12,2018-05-12 23:45:56,closed,Fix doc building for sphinx >= 1.6,"I get the following error when building the documentation:

```
$ make html 
sphinx-build -b html -d _build/doctrees   . _build/html
Running Sphinx v1.7.4

Extension error:
Could not import extension ipython_directive (exception: cannot import name 'Directive')
make: *** [html] Error 2
```

According to the release notes of [Sphinx 1.6](http://www.sphinx-doc.org/en/master/changes.html#id35):

> sphinx.util.compat.Directive class is now deprecated. Please
> use instead docutils.parsers.rst.Directive

Please not that in order to successfully build, I also [downgraded matplotlib](https://github.com/matplotlib/matplotlib/pull/10881) for now with

```
pip uninstall matplotlib
pip install -Iv https://github.com/matplotlib/matplotlib/archive/v2.2.1.tar.gz
```",7,1,[]
363,186057964,1419,4704710,2018-05-04 17:51:27,2018-05-04 18:00:59,closed,ENH: add stacked option to barplot,"I know you're not a fan of stacked bar plots, but they do have their uses and I feel that seaborn is more than capable of supporting them. I've added a ""stacked"" kwarg to the `barplot` function as well as the underlying code to properly plot stacked bars. I've kept in plotting of confidence intervals on top of the stacked bars (even though if you want CI's, then you probably shouldn't be using stacked bars…).

The biggest issue I see is that if you want to use a FacetGrid with the stacked barplot, then you need to partial `sns.barplot` with `stacked=True`. This also means that `factorplot` is unable to support stacked barplots while `stacked` is merely an argument. A remedy to this would be to make a separate `stacked_barplot` function, but I'm not sure if its worth copying/pasting all that code as of right now.


A quick test to see how stacked barplots come out with this PR:

    import seaborn as sns
    import matplotlib.pyplot as plt

    df = sns.load_dataset('tips')

    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))
    sns.barplot(x='day', y='tip', hue='sex', data=df, ax=ax1)
    sns.barplot(x='day', y='tip', hue='sex', data=df, ax=ax2, stacked=True)

    plt.show()

",3,1,[]
364,183542414,1415,4704710,2018-04-23 20:04:50,2018-06-03 00:25:09,closed,Speed up rugplot for large inputs,"Hi, I recently noticed that rugplot is extremely slow when the input array is large. On my computer, I can't plot any series with more than 20k datapoints. This PR should address the issue.

**Problem:**
I found out that ax.axvline() / axhline() both call ax.autoscale_view(), so calling these functions for every datapoint in the series causes the runtime of rugplot to become quadratic.

**Proposed fix:**
Use ax.plot() to draw the entire array of lines at once. This delivers the same result and is much faster. To the best of my knowledge the calls should be equivalent, but I'm not a Matplotlib expert (yet). So if a different solution would be preferable - I'd appreciate your feedback.",12,8,[]
365,181509670,1407,4704710,2018-04-13 14:45:43,2018-06-12 00:57:30,closed,Fix typo in regplot x_ci parameter docs,Just a basic typo fix.,2,1,[]
366,181000609,1405,4704710,2018-04-11 19:12:41,2018-04-11 19:33:59,closed,Don't fail when function does not have __module__ attribute,"Closes #1398 
Closes #1399 ",0,1,[]
367,180994674,1404,4704710,2018-04-11 18:48:05,2018-04-11 19:06:17,closed,Fix color_cycle test,,0,1,[]
368,180079004,1399,4704710,2018-04-07 00:19:03,2018-04-11 19:33:59,closed,Make facetgrid's map robust to functools.partial,"This PR is a proposed fix for issue #1398 
",0,1,[]
369,179924498,1397,4704710,2018-04-06 11:38:57,2018-06-17 16:55:29,closed,PDF backend not compatible with using get_renderer,"I introduced a check on the backend, so that PDF backend can still be used.

See https://github.com/mwaskom/seaborn/issues/1262",12,2,[]
370,178437273,1394,4704710,2018-03-29 20:46:31,2019-08-17 17:12:06,closed,`sns.scattermap` implementation,"One more PR from me today.

Here I propose a `sns.scattermap` function, which behaves in the same way as heatmap, but instead of filled ""boxes"" that heatmap uses, it plots dots using `plt.scatter`. In R community this is sometimes called a `dotplot`.

Some example usage below:

Heatmap:

```python
flights = sns.load_dataset(""flights"")
flights = flights.pivot(""month"", ""year"", ""passengers"")
ax = sns.heatmap(flights)
```
![image](https://user-images.githubusercontent.com/108413/38112400-1c3fdc9e-33a2-11e8-8f3e-a2beb2f5678e.png)

Scattermap:

```python
flights = sns.load_dataset(""flights"")
flights = flights.pivot(""month"", ""year"", ""passengers"")
ax = sns.scattermap(flights)
```

![image](https://user-images.githubusercontent.com/108413/38112414-2636d66c-33a2-11e8-98a9-9888747f1ee0.png)

Heatmap (no `size` option):

```python
with sns.axes_style('white'):
    corr = np.corrcoef(np.random.randn(10, 200))
    ax = sns.heatmap(corr, vmax=.3, square=True, 
                     linewidth=.5, linecolor='black')
```

![image](https://user-images.githubusercontent.com/108413/38112547-925e509a-33a2-11e8-83ff-6783a670c423.png)


Scattermap (with dynamic `marker_size`, and marker set to square):

```python
with sns.axes_style('white'):
    corr = np.corrcoef(np.random.randn(10, 200))
    ax = sns.scattermap(corr, vmax=.3, square=True, 
                        linewidth=.5, linecolor='black',
                        marker_size=np.abs(corr)*300,
                        marker='s')
```
![image](https://user-images.githubusercontent.com/108413/38112615-d9492818-33a2-11e8-95ab-20441e15604c.png)

",13,1,[]
371,178375024,1393,4704710,2018-03-29 16:11:12,2020-01-18 13:21:06,closed,ClusterGrid layouts: fixing longstanding issues,"This PR fixes a few of annoying things with `sns.clustermap` that have been there for since I remember.

Here's a detailed list with some examples

## Fix 1: Fix the clustermap scaling with size: dendrogram should not scale

The heatmap scaling has been completely broken since forever.
The code claims that it is set up so only the heatmap scales, not the dendrogram, but this is not the case:

```python
import seaborn as sns; sns.set(color_codes=True)
iris = sns.load_dataset(""iris"")
species = iris.pop(""species"")
lut = dict(zip(species.unique(), ""rbg""))
row_colors = species.map(lut)
```

```python
g = sns.clustermap(iris, row_colors=row_colors, figsize=(5, 5))
g = sns.clustermap(iris, row_colors=row_colors, figsize=(10, 5))
g = sns.clustermap(iris, row_colors=row_colors, figsize=(5, 10))
```

5,5:

![image](https://user-images.githubusercontent.com/108413/38099433-e00c32f8-337a-11e8-909f-c9e27bf38b79.png)

10,5:
![image](https://user-images.githubusercontent.com/108413/38099443-e681e7e0-337a-11e8-9f6f-55aa42b77394.png)

5,10:
![image](https://user-images.githubusercontent.com/108413/38099456-ed7e4d36-337a-11e8-8d45-133822ab1efa.png)

With this PR, 10,5:

![image](https://user-images.githubusercontent.com/108413/38099499-0b8bdc12-337b-11e8-952d-96eef3e6deec.png)

With this PR 5, 10:
![image](https://user-images.githubusercontent.com/108413/38099511-13b91242-337b-11e8-84fd-4feecb0a2ea6.png)

## Fix 2: prevent squashing of row_colors when multiple annotations are given

```python

row_colors_multiple = pd.DataFrame({'foo': species.map(dict(zip(species.unique(), sns.color_palette('Set1', 3).as_hex()))),
                                    'bar': species.map(dict(zip(species.unique(), sns.color_palette('Set2', 3).as_hex()))),
                                    'baz': species.map(dict(zip(species.unique(), sns.color_palette('Set3', 3).as_hex()))),
                                    'boo': species.map(dict(zip(species.unique(), sns.color_palette('Dark2', 3).as_hex())))})
g = sns.clustermap(iris, row_colors=row_colors_multiple, figsize=(5, 5))
```

Before:

![image](https://user-images.githubusercontent.com/108413/38099734-acb49a5c-337b-11e8-88a1-a1d50ed2f7ec.png)


After:

![image](https://user-images.githubusercontent.com/108413/38099749-b316184e-337b-11e8-8f2e-43ff59e2192f.png)

## Fix 3: Extend colorbar through the whole length of dendrogram and row_colors if provided

```python
g = sns.clustermap(iris.T, col_colors=row_colors_multiple, figsize=(5, 5))
```

Before:

![image](https://user-images.githubusercontent.com/108413/38099874-024e6e20-337c-11e8-8c40-41039057bdfd.png)

After:

![image](https://user-images.githubusercontent.com/108413/38099880-07749708-337c-11e8-991d-235a0353fffc.png)

## Other things that are new

I've also added parameters to clustermap to allow to change the size of dendrogram and colors.

Unfortunately I didn't manage to fix clustermaps with `square=True`, these are still broken beyond repair.
",8,7,[]
372,172995614,1384,4704710,2018-03-05 21:46:15,2018-03-05 22:06:21,closed,Apply ticklabels kwargs to inner FacetGrid axes,Closes #1313,1,2,[]
373,172970397,1383,4704710,2018-03-05 19:58:17,2018-03-05 20:15:28,closed,Make JointGrid/jointplot accept lists as data input,Supersedes #1358 and closes #1352,1,4,[]
374,171188458,1380,4704710,2018-02-24 17:33:48,2018-03-05 20:24:22,closed,"Use new ""density"" kwarg for histograms on later matplotlibs",,3,1,[]
375,171182117,1379,4704710,2018-02-24 15:00:12,2018-03-01 00:37:14,closed,attempt to adapt to  https://github.com/matplotlib/matplotlib/pull/10033,"https://github.com/mwaskom/seaborn/issues/1378
coming from this (apparently nice) change from Matplotlib-2.2.0
https://github.com/matplotlib/matplotlib/pull/10033",3,2,[]
376,170646060,1377,4704710,2018-02-22 03:04:11,2018-03-05 20:19:01,closed,Update docstring parameters from split to dodge for swarmplot and str…,"Fixes https://github.com/mwaskom/seaborn/issues/1278 (closes https://github.com/mwaskom/seaborn/pull/1279 , which fixes it partially, only for stripplot) by renaming the split->dodge in doctring for swarmplot and stripplot.",1,1,[]
377,167637071,1371,4704710,2018-02-07 09:24:02,2018-03-05 20:37:52,closed,DOC: Fix typo in distplot docstring,"fixes a ""kenel"" vs ""kernel"" typo",1,1,[]
378,163071983,1358,4704710,2018-01-16 01:39:16,2018-03-05 20:15:17,closed,Jointgrid and dependency fix,"This PR supersedes PR #1356 which addressed issue #1352 as well as two dependency issues found along the way. This pull request was created to organize the three commits in a feature branch. More details can be found in the original PR, #1356. ",8,3,[]
379,162285871,1356,4704710,2018-01-11 03:34:40,2018-01-16 15:21:00,closed,Fix for list inputs to JointGrid,"This fix should address issue #1352. In particular, the x and y parameters are converted to arrays earlier, preventing an indexing bug in the case that they are lists. ",6,3,[]
380,158881168,1349,4704710,2017-12-18 10:45:10,2017-12-18 13:44:41,closed,Add option for probability mass function to distplot(),"[On](https://stackoverflow.com/questions/5498008/pylab-histdata-normed-1-normalization-seems-to-work-incorrect) [popular](https://stackoverflow.com/questions/3866520/plotting-histograms-whose-bar-heights-sum-to-1-in-matplotlib) [demand](https://stackoverflow.com/questions/22241240/how-to-normalize-a-histogram-in-python) a lot of people want to plot the probability mass function instead of the probability density function, i.e. the height of the histogram bars should sum up 1 instead of the integral (height * width) sum up to 1.

This patch adds the option `sns.distplot(norm_hist='mass')` to achieve this.",5,2,[]
381,156702949,1342,4704710,2017-12-06 11:18:09,2017-12-06 12:30:29,closed,allow custom string annotations for matrix,"This allows to pass `np.array(dtype=np.str)` as annotations for matrix, ie fully custom string annotations for every cell

Without this fix there would be an error `unknown format code 'g' for object of type numpy.str_`",3,1,[]
382,156003730,1338,4704710,2017-12-02 07:36:20,2020-01-18 21:50:23,closed,Pair grid as subplot,"The PR allows you to create PairGrid type plots as a nested subplot within a pre-existing figure e.g.
```python
from matplotlib import gridspec
import seaborn as sns
import matplotlib.pyplot as plt

fig = plt.figure(figsize=(16,8))
gs = gridspec.GridSpec(1,2, wspace=.2)

fig.add_subplot(gs[0])
iris = sns.load_dataset(""iris"")
g = sns.PairGrid(iris, subplot_spec=gs[1])
g = g.map(plt.scatter)
```

This feature has been frequently requested (https://stackoverflow.com/questions/35042255/how-to-plot-multiple-seaborn-jointplot-in-subplot)(#399). This would have been an overhaul in the past, but recent changes in the structure of matplotlib make this change now rather straightforward. The key change is that subplots() is now a method of Figure, which means you can call it on a pre-existing figure. The code submitted is mostly
* finding or creating a figure
* parsing a subplot_spec into gridspec_kwargs
* passing fig and gridspec_kwargs to Figure.subplots()

I'm new to contributing to open source, so let me know if there is anything else needed in this PR",3,6,[]
383,152914261,1328,4704710,2017-11-15 23:35:03,2018-05-10 14:24:29,closed,set_figwidth in add_legend should forward its change,"Using `add_legend`, the legend overlaps with the axes. This should be prevented by enlarging the figure width via `self.fig.set_figwidth`. However, this will only take effect if the figure is actually saved, else, one would need to call `set_figwidth(..., forward=True)`.

Example code:

```
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

df = pd.DataFrame(np.random.rand(20,2), columns=['x', 'y'])
df[""class""] = np.random.choice([""Class A"",""Class B""], size=20)

fg = sns.FacetGrid(data=df, hue='class')
fg.map(plt.scatter, 'x', 'y').add_legend()

plt.show()
```

produces 

![forwardfalse](https://user-images.githubusercontent.com/23121882/32865906-7a4b8500-ca65-11e7-9038-340429d591ef.png)

If instead `forward=True` is set in Line 101 of seaborn/axisgrid.py the output would be

![forwardtrue](https://user-images.githubusercontent.com/23121882/32865936-9b12bb6e-ca65-11e7-8b8c-c9899e7d4db0.png)

as expected. This concerns only cases where the figure is not being saved beforehands, so it will not affect the inline images in notebooks or saved images. However the issue is present when showing the figure or e.g. using the `%matplotlib notebook` backend.

This PR simply adds `forward=True` in the line setting the figure width, such that the expected behaviour known from inline images is also seen in standalone figures and in the interactive notebook backend.",5,3,[]
384,152503028,1326,4704710,2017-11-14 13:22:37,2018-03-05 20:31:43,closed,fix AttributeError that occurs when using with ci='sd' and err_style='ci_bars',"`sns.tsplot(data=all_data_frames, condition=..., unit=..., time=...,value=..., err_style=""ci_bars"", ci='sd')` will throw an AttributeError in seaborn version 0.8.1. This is caused by the _plot_ci_bars function which assumes that ci has a transpose.
With err_style=""ci_bars""  this is not the case as ci is a tuple.

This pull request fixes said problem.",2,1,[]
385,149697254,1317,4704710,2017-10-31 05:03:55,2018-03-05 20:30:13,closed,DOC different metrics for axes in clustermap,I think this brief comment may help users even conceive of the idea that rows and columns need not cluster with the same metric.,6,2,[]
386,149401162,1316,4704710,2017-10-29 19:07:39,2018-03-05 20:28:42,closed,Add snap_axis parameter to kde plot,"Currently, when using `sns.kdeplot`, the minimum limit on the value axis is ""snapped"" to zero. This is great when using the kde plot alone, but might be undesirable when combining it with other plot types, e.g. `sns.rugplot`, since there will be overlapping plot elements.

In addition, when using `sns.kdeplot` in a `FacetGrid` with a defined `ylim`, the impression becomes that the `ylim` parameter is not working as expected, since the y-min is readjusted to zero by `sns.kdeplot`.

The motivation with this PR is to make it explicit that kdeplot modifies the value axis min, and to provide a parameter to turn off this behavior to make kdeplots work as expected with the FacetGrid axes limit parameters.

## Examples

```python
# Create sample data for overlapping rug / kdeplot
import numpy as np
import pandas as pd
import seaborn as sns

np.random.seed(4)
dists = {}
dists['lognormal'] = np.random.lognormal(size=100)
dists['chisquare'] = np.random.chisquare(5, size=100)
dists['uniform'] = np.random.uniform(0, 12, size=100)
df = pd.DataFrame.from_dict(dists).melt()
```

### Current behavior

```python
g = sns.FacetGrid(df, hue='variable', aspect=1.8, ylim=(-0.03, 0.5))
g = g.map(sns.kdeplot,'value')
g = g.map(sns.rugplot,'value')
```
![image](https://user-images.githubusercontent.com/4560057/32147180-7e0408b6-bcb9-11e7-934b-5a1b7e2b9f5f.png)

### Suggested behavior

The proposed parameter `snap_axis` could be set to `False` to respect the y-limits specified in the call to FacetGrid. This option might also increase awareness that `sns.kdeplot` is automatically adjusting the y-min.

```python
g = sns.FacetGrid(df, hue='variable', aspect=1.8, ylim=(-0.03, 0.5))
g = g.map(sns.kdeplot,'value', snap_axis=False)
g = g.map(sns.rugplot,'value')
```
![image](https://user-images.githubusercontent.com/4560057/32147183-85dfb684-bcb9-11e7-8eb1-22594435b38f.png)

## Notes

Note that the same results could currently be achieved by changing the y-limits manually between the calls to `FacetGrid.map`.

```python
g = sns.FacetGrid(df, hue='variable', aspect=1.8)
g = g.map(sns.kdeplot,'value')
g.ax.set_ylim(-0.03, None, auto=None)
g = g.map(sns.rugplot,'value')
```
However, it could still be a good idea to be explicit about that `sns.kdeplot`  snaps y-min to zero, and adding the `snap_axis` parameter would also make the suggested behavior possible with `sns.distplot` in a `FacetGrid`:

```python
g = sns.FacetGrid(df, hue='variable', aspect=1.8, ylim=(-0.03, 0.5))
g.map(sns.distplot, 'value', rug=True, hist=False, kde_kws={'snap_axis':False})
```

*On a side note, let me know if you prefer that I open an issue to discuss a topic before submitting a PR*",4,1,[]
387,149087747,1313,4704710,2017-10-27 02:29:29,2018-03-05 22:06:21,closed,Rotate all axis labels when setting ticklabels,"This would change `g.set_xticklabels` and `g.set_yticklabels` to not only apply to bottom and left axes.

I recently came across [this SO post](https://stackoverflow.com/questions/41434126/rotate-x-axis-ticks-for-all-facetgrid-plots), where the `g.set_xticklabels` only rotates the bottom x-axis labels when there are x-axis labels on multiple rows in the plot. I would also expect that all visible x-axis labels are rotated when using `g.set_xticklabels`, what is your opinion on this?

The suggested fix in this PR always applies `g.set_xticklabels` to all labels instead of only the bottom labels. I did not see any immediate drawbacks to applying this to hidden labels, but if you do, I can add a condition to only apply it to visible xticklabels. I also included the same suggested fix for the y-labels.


## xticklabels

```python
tips = sns.load_dataset('tips')
g = sns.FacetGrid(tips, col='day', col_wrap=2, sharex=False)
g.map(sns.barplot, 'sex', 'tip')
g = g.set_xticklabels(rotation=45)
```
### Current behavior

![image](https://user-images.githubusercontent.com/4560057/32085339-5d593a92-ba9c-11e7-9b99-c57ca29b7061.png)

### Suggested new behavior

![image](https://user-images.githubusercontent.com/4560057/32085347-680f2172-ba9c-11e7-9709-86215537359f.png)

## yticklabels

```python
tips = sns.load_dataset('tips')
g = sns.FacetGrid(tips, col='day', col_wrap=2, sharey=False)
g.map(sns.barplot, 'tip', 'sex')
g = g.set_yticklabels(rotation=45)
```

### Current behavior

![image](https://user-images.githubusercontent.com/4560057/32085361-7c43ca3a-ba9c-11e7-9726-5d0a3884536a.png)

### Suggested new behavior

![image](https://user-images.githubusercontent.com/4560057/32085368-83dddd1c-ba9c-11e7-8d65-7e2ad4a825a2.png)
",2,1,[]
388,149082220,1312,4704710,2017-10-27 01:30:28,2018-03-05 21:10:35,closed,Avoid turning off kde axes autoscaling,Moved #1308 here,2,2,[]
389,147953595,1308,4704710,2017-10-21 17:21:02,2017-10-27 01:31:28,closed,Avoid turning off axes autoscaling in kdeplot,"This related to #1272 .

The reason the maximum axes limits were not being updated correctly is that `set_ylim` and `set_xlim` [turn off axes autoscaling by default](https://github.com/matplotlib/matplotlib/blob/master/lib/matplotlib/axes/_base.py#L2857-L2859). So the axes would be scaled to the first data set that was plotted with `sns.kdeplot`, but then remain at that level for all following plots into the same axes. By passing `auto=None`, the axes' current autoscaling setting is kept intact and there is no need to specify the max value.

 I initially didn't realize you already fixed this since I was running 0.8.0, but the approach in this PR might avoid future issues related to turning off the axes autoscaling, so I am posting it here in case you prefer it.",4,1,[]
390,146203792,1304,4704710,2017-10-12 13:06:48,2017-10-12 13:23:05,closed,Include colors submodule,Fixes #1303 ,1,1,[]
391,145181141,1297,4704710,2017-10-06 15:25:16,2018-03-05 20:34:04,closed,Typo lvplot docstring,,2,2,[]
392,144037529,1292,4704710,2017-09-30 17:45:33,2017-09-30 19:34:12,closed,Final removal of coefplot and interactplot,"These were deprecated a while ago, and have not been part of the public API for several releases.",1,2,[]
393,144001975,1290,4704710,2017-09-29 23:58:56,2017-09-30 17:35:22,closed,Update tests/linting to run with pytest/flake8,Also adds codecov reports and updates other aspects of the repository infrastructure.,1,19,[]
394,141502105,1285,4704710,2017-09-17 20:51:19,2017-11-30 22:03:12,closed,Add lineplot function,"This PR adds a major new function, `lineplot`, that replaces `tsplot` while behaving much more like other seaborn functions (the categorical plotters) and adding some new capabilities (subsetting with different visual semantics on up to three dimensions, mapping the `hue` variable numerically, and handling dates properly). 

The basic signature is similar to other functions:

`lineplot(x, y, <semantic mappers>, data, <control kwargs>)` 

but with three parameters that determine subsetting/semantic mapping: `hue`, `size`, and `style`. These operate independently, so you can in principle show up to five variables on one plot (but be careful: many such plots will be very hard to interpret). The multiple semantics should also make it easy to generate plots that are accessible (i.e. using more than just color to map some variable) without much effort.

Here are some quick examples. For more information, I've copied the new tutorial notebook source to a [gist](https://gist.github.com/mwaskom/bfb56b5754db27721e9fa98b61c15551).

```python
fmri = sns.load_dataset(""fmri"")
sns.lineplot(x=""timepoint"", y=""signal"", data=fmri)
```
![image](https://user-images.githubusercontent.com/315810/33353998-a845c4fc-d47e-11e7-8d4e-1d5ab033416b.png)

```python
sns.lineplot(x=""timepoint"", y=""signal"", hue=""event"", style=""event"",
             markers=True, dashes=False, data=fmri)
```
![image](https://user-images.githubusercontent.com/315810/33354218-d3fac9de-d47f-11e7-8cff-c9b9d377a4c1.png)

```python
sns.lineplot(x=""timepoint"", y=""signal"", hue=""region"", style=""event"", data=fmri)
```
![image](https://user-images.githubusercontent.com/315810/33354037-cd4d9de2-d47e-11e7-9b9d-f9f8a5b90091.png)

```python
sns.lineplot(x=""time"", y=""firing_rate"",
             hue=""choice"", size=""coherence"",
             legend=""full"", data=dots)
```
![image](https://user-images.githubusercontent.com/315810/33454246-3e291ba0-d5e6-11e7-8f8c-000cca6e8f25.png)

```python
values = np.random.randn(365, 4).cumsum(axis=0)
dates = pd.date_range(""1 1 2016"", periods=365, freq=""D"")
data = pd.DataFrame(values, dates, columns=[""A"", ""B"", ""C"", ""D""]).rolling(7).mean()

sns.lineplot(data=data, palette=""tab10"", linewidth=2.5)
```
![image](https://user-images.githubusercontent.com/315810/33354158-70a5daea-d47f-11e7-8aad-947154a8414e.png)


What's more, most of the underlying architecture is going to be re-used to support a forthcoming `scatterplot` function that will behavior similarly while drawing scatterplots instead of line plots. However because that's not implemented yet, it's possible that doing so will force some small changes in `lineplot` behavior. That means I wouldn't use `lineplot` in production quite yet, but definitely start throwing some real datasets at it.

## TODO

- [x] Clean up style- and size-related code
- [x] Clean up estimation code
- [x] Axes labeling
- [x] Legends
- [x] Decisions about default estimator/ci behavior
- [x] Update `tsplot` deprecation message
- [x] Unit tests
- [x] Release notes
- [x] Docstring / API examples
- [x] Gallery examples
- [x] Tutorial documentation

## Related TODOs outside the scope of this PR:

- Implement `scatterplot`
- Improve colormap handling with numeric ``hue`` data: current behavior uses the rcParams image colormap (like matplotlib functions), but this is often suboptimal for lines/points because it often includes high luminance colors that give very low contrast with the background. Ideally matplotlib 2.0 would have had different colormaps for image/object data, but this was unfortunately rejected.
- Improve ""ticking"" for brief legends
- Implement `units` for faster bootstrapping in the case of repeated measures data
- Also allow `units` to draw multiple unconnected lines with the same semantics (e.g. to plot individual subject data without differentiating) #",3,76,[]
395,141306288,1284,4704710,2017-09-15 13:05:04,2018-03-01 15:35:44,closed,Fix error message whitespace,,0,1,[]
396,141169887,1283,4704710,2017-09-14 20:30:20,2017-09-15 00:40:25,closed,update comments in regression example,"comments were about the tips dataset, but the examples users iris.",1,1,[]
397,140182965,1279,4704710,2017-09-09 20:04:51,2018-03-05 20:19:00,closed,rename `split` to `dodge` in stripplot documentation,It seems the split parameter is renamed to `dodge` in stripplot. This should then be reflected by the documentation as well (..lib\site-packages\seaborn\categorical.py:: UserWarning: The `split` parameter has been renamed to `dodge`.),0,1,[]
398,139214989,1273,4704710,2017-09-04 22:37:36,2017-09-06 18:27:06,closed,fixed typo,,1,1,[]
399,139028551,1272,4704710,2017-09-02 22:30:44,2017-09-02 22:46:18,closed,Fix kdeplot density axis limits on matplotlib 2.0,,0,1,[]
400,138530574,1270,4704710,2017-08-30 21:17:55,2017-08-31 02:27:29,closed,typo,observerations should be observations,0,1,[]
401,138314171,1269,4704710,2017-08-30 00:41:17,2017-08-30 01:09:39,closed,Two small clustermap fixes,"- Fix annotations + side colors (closes #1150)
- Fix rotation of yticklabels to avoid overlap",0,2,[]
402,137847283,1268,4704710,2017-08-27 20:36:33,2017-08-27 21:28:18,closed,Add warning in FacetGrid when drawing categorical plots,"It is risky to pass a categorical plotting function into `FacetGrid.map()` without providing order information. If category levels are not consistently present across all facets, the plot order and/or labeling is likely to be incorrect. `sns.factorplot` exists in part to handle this bookkeeping for people, but I still see lots of questions about unexpected behavior when using `sns.FacetGrid` directly. This change tries to predict when users are doing something risky and fire a warning to inform them.",0,2,[]
403,137845646,1267,4704710,2017-08-27 19:46:25,2017-08-27 20:28:00,closed,"Several small fixes, changes, and improvements",,0,16,[]
404,133317496,1255,4704710,2017-07-31 19:24:27,2017-08-27 20:28:30,closed,fix typo,,1,1,[]
405,130797996,1241,4704710,2017-07-17 07:38:20,2017-08-27 20:28:02,closed,Remove usage of pandas remove_na function,"Title is self-explanatory.

Closes #1240.",3,1,[]
406,130690247,1238,4704710,2017-07-14 23:09:44,2017-07-15 12:11:06,closed,Add example script making a Joy Divsion plot,"People seem really interested in these lately, anyway, it's not too hard `¯\_(ツ)_/¯`

![image](https://user-images.githubusercontent.com/315810/28235267-5cf9ff0c-68d8-11e7-9af1-e27a7c1e62ca.png)
",8,5,[]
407,130484887,1237,4704710,2017-07-13 22:58:04,2017-07-14 18:45:33,closed,Enhance scope of CI tests,"This PR primarily expands CI testing to test multiple matplotlib backends. (Currently it covers Agg and Qt5Agg. It would be nice to figure out OSX too, but I'm not sure how to work OSX-based travis tests into the mix). It also reorganizes how the tests are parameterized a bit.",0,1,[]
408,129834293,1236,4704710,2017-07-11 06:45:21,2017-07-13 22:43:06,closed,Fix legend_out with GUI backend,"There was a bug that FacetGrid.add_legend() with legend_out=True did not
work when the backend was ""GUI""-based ones such as Qt5Agg and
NbAgg (checked with matplotlib 2.0.2).  Note that it was working
correctly with Agg backend.  This is likely because pyplot.draw calls
canvas.draw_idle() which may not force re-draw [1].

[1] https://github.com/matplotlib/matplotlib/blob/v2.0.2/lib/matplotlib/pyplot.py#L691


You can check the bug with the following script.

```python
def plot_with_backend(backend):
    import matplotlib as mpl
    mpl.use(backend)
    import seaborn as sns

    tips = sns.load_dataset('tips')
    g = sns.lmplot('total_bill', 'tip', tips, hue='smoker', fit_reg=False)
    g.savefig(backend + '.png')

# plot_with_backend(Agg')  # works fine w/o this PR
plot_with_backend('Qt5Agg')
```

Before this patch, it produces:
![image](https://user-images.githubusercontent.com/29282/28054150-b46e2046-65c8-11e7-9a91-b2971ae7e852.png)

After this patch, it produces:
![image](https://user-images.githubusercontent.com/29282/28054176-cb768094-65c8-11e7-802f-3a982e282a65.png)
",4,1,[]
409,129812181,1235,4704710,2017-07-11 02:36:30,2017-08-27 20:28:03,closed,added check for empty array in distplot before ax creation,Moved `distplot` array creation above `ax` instantiation and raises a `ValueError` if array is empty. ,0,1,[]
410,129749414,1233,4704710,2017-07-10 18:58:25,2017-07-10 19:17:48,closed,Fix error in clustermap with no yticklabels,Closes #1231,0,1,[]
411,129733930,1231,4704710,2017-07-10 17:37:06,2017-07-10 19:17:48,closed,fix IndexError in ClusterGrid when x/yticklabels is set to False,"If you try to create a clustermap with x or yticklabels set to False, you get an IndexError:

    >>> import seaborn as sns; sns.set(color_codes=True)
    >>> iris = sns.load_dataset(""iris"")
    >>> species = iris.pop(""species"")
    >>> g = sns.clustermap(iris, yticklabels=False)

```
/home/me/Virtualenvs/py35/lib/python3.5/site-packages/seaborn/matrix.py in clustermap(data, pivot_kws, method, metric, z_score, standard_scale, figsize, cbar_kws, row_cluster, col_cluster, row_linkage, col_linkage, row_colors, col_colors, mask, **kwargs)
   1299                         row_cluster=row_cluster, col_cluster=col_cluster,
   1300                         row_linkage=row_linkage, col_linkage=col_linkage,
-> 1301                         **kwargs)

/home/me/Virtualenvs/py35/lib/python3.5/site-packages/seaborn/matrix.py in plot(self, metric, method, colorbar_kws, row_cluster, col_cluster, row_linkage, col_linkage, **kws)
   1140 
   1141         self.plot_colors(xind, yind, **kws)
-> 1142         self.plot_matrix(colorbar_kws, xind, yind, **kws)
   1143         return self
   1144 

/home/me/Virtualenvs/py35/lib/python3.5/site-packages/seaborn/matrix.py in plot_matrix(self, colorbar_kws, xind, yind, **kws)
   1117 
   1118         xtl_rot = self.ax_heatmap.get_xticklabels()[0].get_rotation()
-> 1119         ytl_rot = self.ax_heatmap.get_yticklabels()[0].get_rotation()
   1120 
   1121         self.ax_heatmap.yaxis.set_ticks_position('right')

IndexError: list index out of range

```

This pull request is a simple fix to that problem, if not very elegant.",1,1,[]
412,129583651,1230,4704710,2017-07-09 23:57:59,2017-07-11 01:52:41,closed,Distplot emptycheck issue1227,"added a check to make sure array-like argument of `distplot` is not empty, raises `ValueError` if it is. I moved the array creation and check before  the `ax`  gets created so it errors before instantiating an axis. 

Fixes #1136 . ",3,4,[]
413,129550644,1227,4704710,2017-07-09 03:51:35,2017-08-27 20:28:01,closed,type check for pairplot,"added a check for the `data` argument in the pairplot function . Raises a `TypeError` if it is not a `DataFrame` . 

Fixes issue #1067 ",1,2,[]
414,129547080,1226,4704710,2017-07-09 00:40:29,2017-07-09 02:31:30,closed,Run travis tests on Python 3.6,,0,1,[]
415,128683603,1222,4704710,2017-07-03 19:27:31,2017-07-03 19:36:45,closed,Account for DPI in swarmplot spacing (closes #1008),Also closes #1215 ,0,1,[]
416,128671911,1221,4704710,2017-07-03 17:43:13,2017-07-03 17:51:41,closed,Set density axis minimum to 0 in kdeplot (closes #1218),,0,1,[]
417,128513716,1219,4704710,2017-07-02 08:43:57,2017-07-02 22:27:07,closed,Don't depend on ticks for heatmap annotations,"Will now show annotations on all cells regardless of what value
x/yticklabels take. Fixes #837.",7,1,[]
418,128498067,1217,4704710,2017-07-01 19:13:42,2017-07-07 20:31:31,closed,WIP: Pre 0.8 housekeeping,"- Deprecations of some functions (initial and final)
- Internal reorganization of some code
- Overhaul of the documentation style and some documentation organization
- Various small changes that were easier to throw into one big bucket",0,61,[]
419,128497542,1216,4704710,2017-07-01 18:52:05,2017-07-03 17:52:22,closed,Don't set seaborn style on import,"In recognition of the substantial improvements in the matplotlib style defaults in 2.0, importing seaborn will no longer change the rcParams. It is now necessary to explicitly invoke ``sns.set()`` to get the default gray grid style. Correspondingly, the ``seaborn.apionly`` module has been deprecated.

Additionally, this PR updates a couple of style defaults for better compatibility with matplotlib 2.0+.",0,5,[]
420,127812489,1213,4704710,2017-06-27 23:14:38,2017-06-27 23:33:16,closed,Validate inputs to JointGrid when using data,Closes #1204,0,1,[]
421,127640192,1211,4704710,2017-06-27 08:43:53,2017-06-27 23:33:52,closed,Added checks for input types for distributions.jointplot,"Added a couple of checks for `distributions.jointplot`:
* Check if `data` is a `pandas.DataFrame` (if passed)
* Check if `x` and `y` are valid column names in `data`

Added a test unit as well",8,5,[]
422,127339356,1208,4704710,2017-06-24 18:44:54,2017-06-26 15:57:59,closed,Show standard deviation of observations in error bars,"It's now possible to do `ci=""sd""` in functions that draw error bars and the error bars will show the standard deviation of observations instead of boostrapped confidence intervals.

A little semantically confused, but better than adding new keyword arguments.",0,8,[]
423,123582656,1195,4704710,2017-06-01 20:06:54,2017-07-07 20:31:35,closed,Avoid comparison of numpy arrays to [] for equality.,"Avoids current warning

```    
seaborn/matrix.py:144: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison
```

and presumably avoids future failure in seaborn.clustermap.  Reproducer is included as an automatic test.  (The warning appears to have changed between FutureWarning and DeprecationWarning across versions of numpy, so the automatic test to confirm the warning and its absence covers both.)

From Feras Saad.",0,2,[]
424,122954793,1191,4704710,2017-05-30 00:14:25,2017-07-07 20:31:35,closed,added warning to matrix input for kdeplot.,Closes #1162 . ,0,1,[]
425,122747201,1189,4704710,2017-05-27 04:58:44,2017-05-27 13:59:40,closed,updated docs and added test to examples of kdeplot.,as @mmagnuski  pointed out this should have been in #1186 ,2,3,[]
426,122700816,1188,4704710,2017-05-26 18:54:11,2017-05-26 22:35:11,closed,added list input support for kdeplot,"added `np.asarray` for input if it is a list. works with 1d and 2d lists , fixes #1186",2,3,[]
427,121786720,1184,4704710,2017-05-22 14:11:48,2017-07-01 16:25:28,closed,Improvements and changes to defaults in heatmap,"A few changes are wrapped up in here:

- Changed the behavior of `heatmap` (and by extension `clustermap`) when plotting divergent dataesets (i.e. when the ``center`` parameter is used). Instead of extending the lower and upper limits of the colormap to be symettrical around the ``center`` value, the colormap is modified so that its middle color corresponds to ``center``. This means that the full range of the colormap will not be used (unless the data or specified ``vmin`` and ``vmax`` are symettric), but the upper and lower limits of the colorbar will correspond to the range of the data. Here is an example:

```
sns.heatmap(corrmat, square=True, center=0, cmap=""RdBu_r"", ...)
```

![image](https://user-images.githubusercontent.com/315810/27391364-d267f2fe-5671-11e7-8664-6848cc148da0.png)

Note how the colorbar stops at -.4 and does not include dark blue values. The recentering also respects custom colormap limits:

```
sns.heatmap(corrmat, square=True, center=0, cmap=""RdBu_r"", vmin=-.15, vmax=.6, ...)
```

![image](https://user-images.githubusercontent.com/315810/27392109-c26be14c-5673-11e7-95af-02c11203f429.png)

- Removed automatic detection of diverging data in `heatmap` (and by extension `clustermap`). If you want the colormap to be treated as diverging (see above), it is now necessary to specify the ``center`` value. When no colormap is specified, specifying ``center`` will still change the default to be one that is more appropriate for displaying diverging data.

- Added four new colormaps, created with `viscm` for perceptual uniformity. There are two new sequential colormaps (""rocket"" and ""mako"") and two new diverging colormaps (""icefire"" and ""vlag""). The colormaps and reversed (""_r"") variants are automatically registered in matplotlib on seaborn import. They look like this:

![colormaps](https://user-images.githubusercontent.com/315810/27441572-f2a4ea70-573b-11e7-8b36-37faf09b5ad5.png)

- Changed the default heatmap colormaps to ""rocket"" and ""icefire"" for sequential and diverging data, respectively.

- Changed the default tick labels in `heatmap` to `""auto""`, which estimates how many ticks can be labeled without overlap.

- Changed the `clustermap` API examples to use the brain networks dataset which is a little bit closer to the kind of dataset you would be using it with.

Closes #1169 
Closes #1192",3,24,[]
428,121665830,1183,4704710,2017-05-21 15:52:44,2017-05-21 16:34:42,closed,Handle new qualitative matplotlib palettes,Closes #1170,0,1,[]
429,121664293,1182,4704710,2017-05-21 15:08:10,2017-05-21 15:24:34,closed,Restore clustermap label rotation, (closes #870),0,1,[]
430,121641716,1180,4704710,2017-05-20 23:20:14,2017-05-21 14:14:17,closed,Fix test failures on matplotlib 2.0.2,"Matplotlib apparently changed how barplot patches are defined so that they start at 0 and have a signed height instead of starting at the minimum value and having a positive height.

Fair enough, but that broke some seaborn tests. This PR updates the tests.",0,3,[]
431,120467293,1179,4704710,2017-05-13 23:47:20,2017-05-21 15:23:27,closed,two minor issues in the docs,,1,2,[]
432,120139911,1178,4704710,2017-05-11 15:46:23,2017-05-21 14:38:40,closed,Small changes to clustermap,"Remove 'robust' from kwargs before plotting clustermap colors  (#1173)
Don't label clustermap colors when Series has no name (#1177)",0,2,[]
433,119005237,1167,4704710,2017-05-04 15:45:09,2017-05-04 16:25:34,closed,Test against pandas 0.20.0rc2,,8,1,[]
434,117248856,1163,4704710,2017-04-24 12:02:52,2017-05-02 01:30:23,closed,CI: Test against pandas 0.20.0rc1,"Time for another game of let's see what broke!

Just one failure locally (though probably some warnings, I'll followup with a PR).

Pandas issue for the thing causing the failure https://github.com/pandas-dev/pandas/issues/16107 (`pd.unique` with strings and NaN casts the NaN to a string).",6,6,[]
435,117129517,1161,4704710,2017-04-22 23:34:36,2017-04-24 14:19:27,closed,Add optional colorbar for bivariate KDE plots,I think this is of somewhat dubious informational value but many people seem quite keen on it (#312) and it's reasonably compatible with the API for `heatmap` (though I still dislike how many arguments to `kdeplot` depend on the form of the input).,0,4,[]
436,117123854,1159,4704710,2017-04-22 20:22:13,2017-04-24 14:19:43,closed,Omnibus documentation changes,,0,5,[]
437,115169711,1156,4704710,2017-04-10 19:04:49,2017-07-07 20:42:21,closed,Fix incorrect indent level in tsplot,"The variable `x` is only set when multiple traces are plotted via `data.groupby(...)`; this causes the later call to `ax.set_extent()` to fail, because it relies on that `x`. I intermittently and inconsistently ran into a bug here when analyzing a dataset, and this fix worked fine. An alternative would be to be sure to set `x` outside of the groupby loop, if for some reason it isn't entered.",1,1,[]
438,113053005,1145,4704710,2017-03-28 19:54:07,2017-04-02 19:23:52,closed,Don't fail on PerfectSeparationError in regplot logistic regression,"Instead, return an array of nans as yhat which will propogate through to no regression plot (when the data have a perfect separation) or no error bands (when at least one bootstrap sample has a perfect separation).

Arguably the nans should be pruned from at least the bootstraps, but this seems like a good way to indicate ""something isn't quite right with the confidence intervals"".",0,3,[]
439,112566808,1144,4704710,2017-03-25 01:03:42,2017-03-25 21:13:05,closed,Fix typos in regression tutorial docs,,1,1,[]
440,111692497,1140,4704710,2017-03-21 02:47:59,2017-03-21 02:50:41,closed,Addition of new options to palplot(),The addition of a 'title' and 'titlesize' arguments makes it possible to add a title to a palette plotted with palplot() and change it's size.,0,70,[]
441,109555923,1132,4704710,2017-03-07 19:44:33,2017-03-25 21:15:04,closed,Fix typo,,1,1,[]
442,108817198,1129,4704710,2017-03-02 18:03:56,2017-03-25 21:46:45,closed,`sns.swarmplot` that scales better,"This PR changes the way swarmplot checks for point overlaps.

The way it currently works:
1. Swarmplot tries placing each of the swarm points one-by one.
2. Each time finding all the points the newly-placed point could be overlapping (i.e. points that are within one diameter from the point [NB: I suspect code uses ""diameter"" when it actually means ""radius"" but it doesn't matter here]).
3. Then it proposes new locations for points to be to the left/right of these points.
4. The algorithm then loops through all of these proposed points and check if they overlap with any of the previously found neighbours. If they do, these points are removed (leaving only non-overlapping points).
5. The algorithm then selects the middle-most point of the remaining points and places the new point there. Repeating everything.

Since overlap checking was the bottleneck, 
I changed the algorithm parts [4-5]  to pre-sort the candidate points by how close to the mid-point they are before checking for overlaps. In this scenario we need to only find one point that is good and thus can terminate early (a6ffdee)
I also moved some of the computations to numpy layer (4c4a29d). 
Tried out additional optimisations (other commits) but they did more bad than good so they were reverted.

To test the performance, I used the following script:

```python
import pandas as pd
import numpy as np
import click
import seaborn as sns
from matplotlib import pyplot as plt
import timeit

print(sns.__version__)

N = 1000
KS = ['a', 'b', 'c']


def generate_plot(n, close=True):
    values = np.random.randn(n)
    facets = np.random.choice(KS, size=n)

    data = pd.DataFrame({'x': facets, 'y': values})

    sns.swarmplot(x='x', y='y', data=data)
    if close:
        plt.close()


@click.command()
@click.option('-n', type=int, default=N)
@click.option('--show-plot', is_flag=True)
def main(n, show_plot):
    np.random.seed(2317)
    print('N = {}'.format(n))
    if show_plot:
        generate_plot(n, close=False)
        plt.show()
    else:
        n_loop = 10
        times = timeit.repeat('generate_plot(n)',
                               setup='from __main__ import generate_plot; n = {!r}'.format(n),
                               number=n_loop,
                               repeat=3)

        import pint
        ureg = pint.UnitRegistry()

        for time in sorted(times):
            time /= n_loop
            print('{:.2f~} per iter ({!r} s)'.format((time * ureg.seconds).to_compact(), time))


if __name__ == '__main__':
    main()
```

Before (993c6a2) and after images of the generated swarm with N=1000 (`python swarm_example.py -n 1000 --show-plot`).

Before:

![swarm-before](https://cloud.githubusercontent.com/assets/108413/23520163/a438c5a4-ff71-11e6-8f98-9b93d24de10f.png)

After:

![swarm-after](https://cloud.githubusercontent.com/assets/108413/23520170/a96612b6-ff71-11e6-82fa-13f6aa569011.png)

(there should be no difference in how they look)

On the other hand, here are the stats for runtimes.
It is clear that the performance scales better now (yellow line vs red line):

![image](https://cloud.githubusercontent.com/assets/108413/23520025/14d00e22-ff71-11e6-84bb-95acc738d5fb.png)


| Commit	| N |	Best	| Best (s) |
| --------- | --- | -----------| -------- |
| 993c6a2 | 10 | 77.05 ms | 0.077048394 |
| 993c6a2 | 100 | 103.49 ms | 0.103489597 |
| 993c6a2 | 1000 | 1.17 s | 1.173759292 |
| 993c6a2 | 2000 | 7.89 s | 7.894506943 |
| a6ffdeef7 | 10 | 77.98 ms | 0.077982094 |
| a6ffdeef7 | 100 | 108.26 ms | 0.108259719 |
| a6ffdeef7 | 1000 | 713.11 ms | 0.713108945 |
| a6ffdeef7 | 2000 | 3.35 s | 3.349439375 |
| 4c4a29da | 10 | 77.75 ms | 0.077749728 |
| 4c4a29da | 100 | 110.44 ms | 0.110443773 |
| 4c4a29da | 1000 | 641.97 ms | 0.641972809 |
| 4c4a29da | 2000 | 1.84 s | 1.835392294 |
| ed06906 | 10 | 81.05 ms | 0.08104773 |
| ed06906 | 100 | 109.21 ms | 0.109209078 |
| ed06906 | 1000 | 770.27 ms | 0.770273886 |
| ed06906 | 2000 | 2.27 s | 2.27069 |
| 684725e43186 | 10 | 80.99 ms | 0.080990762 |
| 684725e43186 | 100 | 113.14 ms | 0.113138432 |
| 684725e43186 | 1000 | 785.46 ms | 0.785456822 |
| 684725e43186 | 2000 | 2.23 s | 2.228930535 |
| 41afc3fa952e2 | 10 | 79.99 ms | 0.079991932 |
| 41afc3fa952e2 | 100 | 110.46 ms  | 0.110459668 |
| 41afc3fa952e2 | 1000 | 650.15 ms | 0.650152328 |
| 41afc3fa952e2 | 2000 | 1.80 s | 1.795588099
",1,7,[]
443,107931949,1123,4704710,2017-02-25 00:02:27,2017-02-25 21:30:50,closed,Specify violin facecolor not color,"Closes #1122.

See originally #678, this was missed in #782.",0,2,[]
444,106655370,1119,4704710,2017-02-17 02:11:56,2017-02-17 15:31:37,closed,Ensure that array size is an int,Closes #1118 ,0,1,[]
445,105246523,1116,4704710,2017-02-08 15:58:59,2017-02-22 17:30:59,closed,Fixes availible typo,Small typo fix. :),1,1,[]
446,104679083,1113,4704710,2017-02-04 22:51:31,2017-02-05 13:28:26,closed,Update internally packaged six version,Closes #966 ,1,2,[]
447,104677175,1112,4704710,2017-02-04 21:50:29,2017-02-04 22:34:37,closed,Allow side-specific offsets in despine,Closes #1104 ,0,1,[]
448,104676010,1111,4704710,2017-02-04 21:16:28,2017-02-04 21:42:07,closed,Turn dendrogram axes off instead of using white background,Closes #1109 ,0,4,[]
449,104675857,1110,4704710,2017-02-04 21:12:01,2017-02-04 21:30:02,closed,Put a cap on the default number of bins for hex jointplot,Closes #960,0,2,[]
450,103706954,1109,4704710,2017-01-30 10:10:50,2017-02-04 21:42:07,closed,Change MPL keyword 'axisbg' to 'facecolor',#1108,5,1,[]
451,103379175,1104,4704710,2017-01-26 20:06:25,2017-02-04 22:34:37,closed,offset option for individual spines,I wanted the offset to be set for each spine individually. So allowed offset to be a dict of ints.,3,2,[]
452,102932017,1102,4704710,2017-01-24 14:46:54,2017-01-24 14:57:42,closed,Fix palette test,"I suspect Travis failures involve some change in colormap generation in matplotlib 2.0.

Also closes #1101 ",0,2,[]
453,102920468,1101,4704710,2017-01-24 13:44:44,2017-01-24 14:57:42,closed,Fixed broken link in doc/installing.rst,I've also replaced the sourceforge link (that only redirects to matplotlib.org) with it's redirect target. It's a small but annoying issue :),1,1,[]
454,102737811,1100,4704710,2017-01-23 15:17:46,2017-01-23 15:30:54,closed,Update tests for matplotlib 2.0 change,"Matplotlib changed the axisbg parameter in 2.0. Test the projection instead (which is probably more useful).

Fixes #1098 
Fixes # #1025",0,1,[]
455,100558983,1088,4704710,2017-01-07 05:20:00,2017-02-04 20:57:50,closed,Replace str with to_utf8 methods,"Replaced str function calls with utils.to_utf8 to avoid unicode errors when labels had unicode in them. Tested with python 2.7.
",2,2,[]
456,99392149,1085,4704710,2016-12-26 22:00:40,2016-12-27 16:34:35,closed,fixing husl int bug,"this fixes a bug that popped up when I was trying to use the `husl` module. Basically it's converting numbers to a scale of 255 and then calling `np.round`, but they're left as floats. This means that when they are converted to something like hex with `%02x`, it was returning an error because it required an int, not a float. This PR just explicitly turns RGB values into `int` after calling `np.round`.",3,1,[]
457,97533174,1077,4704710,2016-12-12 11:05:53,2017-02-04 21:02:34,closed,Ignore warnings when importing widgets,"Ignore the `ShimWarning` raised by IPython when importing widgets from IPython instead of ipywidgets. This warning only confuses the user - ""I didn't import `IPython.html`!"" - and the dev already knows that he's using a deprecated API.

Fixes #892, #874.",1,1,[]
458,97412548,1075,4704710,2016-12-10 04:09:34,2017-01-23 19:57:01,closed,Fixed documentation issue on load_dataset,"I edited a comment on load_dataset() in seaborn/utils.py, correcting the default path. A very small pull request, but the incorrect default data path caused me some confusion while I was trying to debug an issue with retrieving the iris data set behind a firewall.",1,1,[]
459,94428671,1069,4704710,2016-11-18 20:11:33,2017-07-07 20:31:34,closed,Better error message when using 'split' with less than 2 hues.,"My dataset had less than two hue levels, and the resultant error message was confusing. Hopefully, this helps. ",2,1,[]
460,92002225,1063,4704710,2016-11-02 16:10:40,2017-01-23 19:56:44,closed,Fix typo in module attribute: __call__ to __all__,,0,1,[]
461,90512679,1060,4704710,2016-10-23 11:39:50,2017-01-23 19:59:02,closed,Fix typo,"'to just the jointplot function' -> 'to just use the jointplot function'
",0,1,[]
462,89363528,1054,4704710,2016-10-14 10:48:29,2017-07-07 20:49:32,closed,Add option ``fitted_kws`` in ``distplot``,"This option alo=lows to pass some kw_args arguments to the 
`fit( )` function, such as `floc=0`.
",5,1,[]
463,89290992,1052,4704710,2016-10-13 22:03:09,2016-10-14 00:06:01,closed,DOCS: update docs links and remove dev docs link,"Couldn't find the dev docs on the github pages, so I deleted those few lines.
#958
",1,1,[]
464,89009428,1040,4704710,2016-10-12 12:48:56,2016-10-12 13:08:07,closed,Use six.exec_ to mimic execfile on Python 3,"This is a quick fix for #1039. This implements `execfile` in terms of `six.exec_` which should work on Python 2 and 3 alike. There are no tests for this part of the code, but I verified that docs build cleanly on Python 2 and 3 with this.

As an aside, I noticed that installing the docs requires quite a bit of extra packages (numpydoc, numexpr, ...). Is there a requirements file that describes what additional packages are needed to build the docs?
",0,1,[]
465,87165761,1026,4704710,2016-09-28 17:38:02,2017-01-23 20:02:07,closed,decrepancy warning patch for matplotlib-2.0.0b4,"indirectly related to this https://github.com/mwaskom/seaborn/issues/1025
",1,1,[]
466,86597940,1020,4704710,2016-09-23 23:49:16,2017-07-07 20:42:08,closed,modify puppyplot to only use standard libraries,"Removes the dependency for BeautifulSoup. Tested using Python 3.5.
",1,2,[]
467,85722230,1017,4704710,2016-09-18 20:44:12,2016-09-18 21:10:26,closed,Allow use of hue without nesting bars/boxes/violins,"A lot of people got confused by this and it didn't end up being that hard to change. Now this is possible:

``` python
sns.boxplot(x=""day"", y=""total_bill"", hue=""weekend"", data=tips, dodge=False)
```

![image](https://cloud.githubusercontent.com/assets/315810/18619003/d6747d30-7dbf-11e6-828a-879ea0b03cab.png)

See many previous issues, e.g. #1007, #987, #970, #824, #871, #404
",0,1,[]
468,84974831,1010,4704710,2016-09-13 02:09:57,2016-09-18 21:10:34,closed,BF(TST): explicitly request .values for sorter to stay compatible with older numpys," while indexing hue_vals

debian <= jessie and ubuntu <= 15.10 were failing this test 
",0,1,[]
469,83468221,1001,4704710,2016-08-31 14:52:50,2016-08-31 15:00:44,closed,ENH for heatmap: adds invert_yaxis to flip the y axis,"Often times in my statistical visualizations with `sns.heatmap`, it'd be nice to have invert the y-axis. This is possible through `ax.invert_yaxis` as found in [this StackOverflow answer](http://stackoverflow.com/a/34444939) but it'd be nice to have a new default option -- I'd rather not have to search for this.

A basic test (really a use case):

<img width=""479"" alt=""screen shot 2016-08-31 at 9 51 03 am"" src=""https://cloud.githubusercontent.com/assets/1320475/18133499/7a765854-6f60-11e6-9307-510e6e80ed83.png"">
",3,2,[]
470,79791745,984,4704710,2016-08-02 19:12:59,2016-08-03 18:04:05,closed,Support for different fmt strings in heatmap,"## Rationale

Sometimes one may wish to annotate a heatmap with a different string formatting codes per column.
Here is a simple example I personally had:

| ID | Some Value | Some Percentage |
| --- | --- | --- |
| 0 | 340 | .76312 |
| 1 | 933 | .43351 |
| 2 | 127 | .72982 |

I'd like a heatmap with colors normalized per column, and then annotated based on the type of data.
I think the easiest way to do this is to just let the user pass in their dataset with the annotations formatted just the way they want it with the `annot` keyword.
Then the user explicitly passes in `None` for the `fmt` keyword.

In this simple example I'd like to format the `Some Value` column with `{:0f}` and the `Some Percentage` column with `{:.2%}`.
With my pull request I can do this:

```
>>> import pandas as pd
>>> import seaborn as sns

>>> df = pd.DataFrame({'Some Value': [340, 933, 127], 'Some Percentage': [.76312, .43351, .72982]})
>>> norm_df = df / df.max()  # normalize DataFrame by column
>>> annot_df = df.copy()
>>> annot_df['Some Value'] = annot_df['Some Value'].apply(lambda x: '{:.0f}'.format(x))
>>> annot_df['Some Percentage'] = annot_df['Some Percentage'].apply(lambda x: '{:.2%}'.format(x))
>>> sns.heatmap(norm_df, annot=annot_df, fmt=None)

```

![column_annot_fmt](https://cloud.githubusercontent.com/assets/11843940/17342094/36f4676a-58bd-11e6-917b-a62969020adb.png)

This is just my solution. It's fairly simple and of course still preserves previous functionality.
Both of these still work fine, for example:

```
>>> sb.heatmap(norm_df,annot=True)
>>> sb.heatmap(norm_df,annot=True, fmt='f')
```

![default_params](https://cloud.githubusercontent.com/assets/11843940/17342125/506d48ce-58bd-11e6-92f5-e84575889a47.png)
![universal_param](https://cloud.githubusercontent.com/assets/11843940/17342139/64dc4922-58bd-11e6-8fce-e2ad7fcb60c0.png)

Maybe this is a bit of an edge case, but I think it's an easy way to let the user do some more custom formatting with their plots.
I think it would be much harder to have to manually change each annotation text through matplotlib after the fact.
Running `make test` after this change passes.
",1,1,[]
471,75955136,961,4704710,2016-07-01 09:54:35,2016-09-04 15:41:39,closed,Fixed typo,"paletes -> palettes
",0,1,[]
472,74273015,952,4704710,2016-06-17 16:54:11,2016-09-04 15:41:57,closed,Fix typo,,0,1,[]
473,74183827,950,4704710,2016-06-17 03:20:40,2016-09-18 21:17:43,closed,Python 3 compatibility for generation of docs,"Python 3-compliant generators.

Closes #947 
",0,2,[]
474,73761960,944,4704710,2016-06-14 15:30:40,2016-06-16 21:36:40,closed,Logscale kde,"I have found it nice to sometimes plot p(log(x)) from samples of x, automatically log-ing the x-axis.  This branch adds a `logspace=` optional argument to the KDE density plots which does exactly this.  
",5,3,[]
475,72639772,939,4704710,2016-06-05 20:39:17,2016-09-18 21:13:09,closed,made usage of string module in one example compatible to Python3,"In Py3k, `string` does not contain `letters` any more, only `ascii_letters`. It is also available in Python 2.7 with the same content as `letters`.
",1,1,[]
476,70953278,932,4704710,2016-05-21 16:10:41,2016-05-21 16:16:18,closed,"Stylish class, equivalent to mpl.rc_context","See [this question](http://stackoverflow.com/questions/31191063/using-with-sns-set-in-seaborn-plots/37365095) on SO.

(probably worth merging with a more serious name - or maybe just transforming `set` itself in a context manager?)
",2,1,[]
477,70952626,931,4704710,2016-05-21 15:44:31,2016-06-05 00:34:40,closed,Fix #929: FacetGrid with unused categories,"Calculates correct number of subplots to draw when unused categories are present

The test confirms the fix solves the ValueError.

It also asserts that the number of axes drawn by FacetGrid should be equal to the number of categories in `.cat.categories`, not the number of unique values that are present in the series.
",5,3,[]
478,70902410,930,4704710,2016-05-20 19:03:16,2017-07-07 20:31:34,closed,Use one-step linkage calculation with both scipy and fastcluster,"Trying to solve https://github.com/mwaskom/seaborn/issues/909, do linkage calculation in one step rather than two because of a weird compatibility issue with `scipy` 0.17 (https://github.com/scipy/scipy/issues/6180)
",4,1,[]
479,70565051,928,4704710,2016-05-18 17:05:59,2017-07-07 20:50:24,closed,Add hist2d to allowed joint plots,"Notice that the grid is hidden because otherwise it appears over the squares, [as reported here](https://github.com/mwaskom/seaborn/issues/321#issue-44908636). So a better fix could be introduced eventually.
",2,1,[]
480,70076068,922,4704710,2016-05-14 00:42:52,2016-06-05 00:32:16,closed,"Fix header interference in doc linking, fixes #610","Title says all, simply some CSS that fixes the anchor link to doc pages
",1,1,[]
481,69277765,918,4704710,2016-05-08 19:56:16,2016-06-05 00:41:55,closed,Fix scale bug in _scipy_univariate_kde,"There is a missing scale factor in `bw` in `_scipy_univariate_kde`.  This patch fixes it.  The bug becomes evident when the scale of the data to which the KDE is applied is much smaller than 1.  I have attached two `kdeplot`s from before and after the fix.  The data were created as `data = 0.01*randn(1000)`; you can see that the scale is properly tracked post-fix.
[pre-fix.pdf](https://github.com/mwaskom/seaborn/files/254088/pre-fix.pdf)
[post-fix.pdf](https://github.com/mwaskom/seaborn/files/254089/post-fix.pdf)
",1,2,[]
482,68503520,914,4704710,2016-05-01 18:47:05,2016-05-03 15:14:27,closed,Optimize pruning of candidates in SwarmPlotter,"Exit the for-loop when the first overlap with a neighbor is found.
",3,1,[]
483,67914931,912,4704710,2016-04-26 16:16:10,2016-04-26 16:31:59,closed,Clean up top-level seaborn namespace,"Add explicit `__all__` declarations in seaborn modules to avoid importing cruft.

With this change, `python -c 'import seaborn; print(len(dir(seaborn)))` shows 85 objects in contrast to 143 before the change.

It's possible that this could break some code if people are using objects in the top level namespace that aren't really part of the public API (in terms of what is documented and used in examples), but those functions still exist they just need to be explicitly imported.

Closes #904
",0,1,[]
484,67657225,911,4704710,2016-04-25 01:33:30,2016-04-25 01:41:10,closed,Capture original rcparams at import time and use to reset,"Fixes #695
",0,2,[]
485,64738991,898,4704710,2016-03-31 06:02:39,2016-04-24 23:01:09,closed,End caps on barplot confidence intervals #606 update,"I think this fixes the end cap addition to barplot and scatterplot confidence intervals. Let me know what you think. It should pass all the automated tests. Let me know if there is anything wrong. I've attached some images, along with the python script I used to generate them. This should show you what the different parameters look like for different capsize and conf_lw. Major thanks to jat255 who did the initial work on this. This is my very first contribution to an open source project that is not my own. Let me know if there is anything else that needs to be done as far as style and/or code cleanup.

``` python
import seaborn as sns

##LINEPLOTS

g=None
sns.set(style=""whitegrid"")
df = sns.load_dataset(""exercise"")
g = sns.factorplot(x=""time"", y=""pulse"", hue=""kind"", col=""diet"", data=df,
                   palette=""YlGnBu_d"", size=6, aspect=.75)
g.despine(left=True)
g.savefig(""test1.png"")

g=None
sns.set(style=""whitegrid"")
df = sns.load_dataset(""exercise"")
g = sns.factorplot(x=""time"", y=""pulse"", hue=""kind"", col=""diet"", data=df,
                   palette=""YlGnBu_d"", size=6, aspect=.75, conf_lw=1, capsize=0.3)
g.despine(left=True)
g.savefig(""test2.png"")

g=None
sns.set(style=""whitegrid"")
df = sns.load_dataset(""exercise"")
g = sns.factorplot(x=""time"", y=""pulse"", hue=""kind"", col=""diet"", data=df,
                   palette=""YlGnBu_d"", size=6, aspect=.75, conf_lw=4, capsize=0.3)
g.despine(left=True)
g.savefig(""test2b.png"")

g=None
sns.set(style=""whitegrid"")
df = sns.load_dataset(""exercise"")
g = sns.factorplot(x=""time"", y=""pulse"", hue=""kind"", col=""diet"", data=df,
                   palette=""YlGnBu_d"", size=6, aspect=.75, conf_lw=1, capsize=0.1)
g.despine(left=True)
g.savefig(""test3.png"")

g=None
sns.set(style=""whitegrid"")
df = sns.load_dataset(""exercise"")
g = sns.factorplot(x=""time"", y=""pulse"", hue=""kind"", col=""diet"", data=df,
                   palette=""YlGnBu_d"", size=6, aspect=.75, conf_lw=2, capsize=0.3)
g.despine(left=True)
g.savefig(""test4.png"")

##BarPlots

g=None
sns.set(style=""whitegrid"")
titanic = sns.load_dataset(""titanic"")
g = sns.factorplot(x=""class"", y=""survived"", hue=""sex"", data=titanic,
                   size=6, kind=""bar"", palette=""muted"")
g.despine(left=True)
g.set_ylabels(""survival probability"")
g.savefig(""test5.png"")

g=None
sns.set(style=""whitegrid"")
titanic = sns.load_dataset(""titanic"")
g = sns.factorplot(x=""class"", y=""survived"", hue=""sex"", data=titanic,
                   size=6, kind=""bar"", palette=""muted"", conf_lw=1, capsize=0.3)
g.despine(left=True)
g.set_ylabels(""survival probability"")
g.savefig(""test6.png"")

g=None
sns.set(style=""whitegrid"")
titanic = sns.load_dataset(""titanic"")
g = sns.factorplot(x=""class"", y=""survived"", hue=""sex"", data=titanic,
                   size=6, kind=""bar"", palette=""muted"", conf_lw=1, capsize=0.1)
g.despine(left=True)
g.set_ylabels(""survival probability"")
g.savefig(""test7.png"")

g=None
sns.set(style=""whitegrid"")
titanic = sns.load_dataset(""titanic"")
g = sns.factorplot(x=""class"", y=""survived"", hue=""sex"", data=titanic,
                   size=6, kind=""bar"", palette=""muted"", conf_lw=2, capsize=0.3)
g.despine(left=True)
g.set_ylabels(""survival probability"")
g.savefig(""test8.png"")
```

`

![test1](https://cloud.githubusercontent.com/assets/1033706/14166575/45fb4e8a-f6da-11e5-9721-a8386090ef68.png)
![test2](https://cloud.githubusercontent.com/assets/1033706/14166576/45fc33ea-f6da-11e5-81f9-0cb5c3220495.png)
![test2b](https://cloud.githubusercontent.com/assets/1033706/14166578/45ffec92-f6da-11e5-927d-0299589f5286.png)
![test3](https://cloud.githubusercontent.com/assets/1033706/14166577/45ffec9c-f6da-11e5-84ae-bc7e0a9c1371.png)
![test4](https://cloud.githubusercontent.com/assets/1033706/14166580/4600eca0-f6da-11e5-8638-0aeb20007ad8.png)
![test5](https://cloud.githubusercontent.com/assets/1033706/14166579/4600e3fe-f6da-11e5-8cc3-f5d251a85697.png)
![test6](https://cloud.githubusercontent.com/assets/1033706/14166581/4603d17c-f6da-11e5-9ec1-f866a8376a66.png)
![test7](https://cloud.githubusercontent.com/assets/1033706/14166582/46055cfe-f6da-11e5-8275-8e3d1d494c1b.png)
![test8](https://cloud.githubusercontent.com/assets/1033706/14166583/46094d46-f6da-11e5-9af9-41a8e50e80e3.png)
",9,13,[]
486,64697057,897,4704710,2016-03-30 21:05:41,,open,Clustermap: Automatic conversion of row/column annotation data to colors,"In this pull-request I would like to propose an initial approach to automatically convert any given annotation to row/col_colors that can be used in plotting. This would allow us to avoid manually converting annotations to colors before plotting a clustermap (which many people are probably frequently doing).

The current implementation is just a loose example of the code that I have currently been using to convert annotations in a dataframe format to row/col_colors for clustermap. Ideally this type of conversion would be used internally by clustermap to be transparent for the user.

Example with different types of annotation:

``` python
import pandas as pd
import numpy as np
import seaborn as sns

from seaborn.matrix import _color_annotation

sns.set_style('white')

np.random.seed(0)

# Generate data.
data = pd.DataFrame(np.random.randn(10, 10),
                    index=['F{}'.format(i) for i in range(10)],
                    columns=['S{}'.format(i) for i in range(10)])

# Generate annotation.
col_ann = pd.DataFrame({'Col 1': (['a'] * 5) + (['b'] * 5),
                        'Col 2': np.random.rand(10),
                        'Col 3': [True, False, True, True, False] * 2},
                       index=data.columns)
# col_ann.ix[1, 'Col 1'] = np.nan

# Color annotation and draw clustermap.
colors = [sns.color_palette(),
          sns.color_palette('Set1')[0],
          sns.color_palette('Set1')[1]]
col_colors, color_maps = _color_annotation(col_ann, colors=colors)

sns.clustermap(data, col_colors=col_colors)
```

![unknown-2](https://cloud.githubusercontent.com/assets/307739/14157193/429ee0cc-f6ca-11e5-8ede-3ce10940f211.png)

Example of how legends might be added:

``` python
from matplotlib import patches as mpatches

def draw_legend(color_map, ax, name, **kwargs):
    """"""Helper for drawing custom legends.""""""

    patches = [mpatches.Patch(color=color, label=label)
               for label, color in color_map.items()]
    legend = ax.legend(handles=patches, frameon=True,
                       title=name, **kwargs)

    return legend

# Generate annotation.
col_ann = pd.DataFrame({'Col 1': (['a'] * 5) + (['b'] * 5)}, index=data.columns)

# Color annotation and plot clustermap.
col_colors, color_maps = _color_annotation(col_ann, colors=[sns.color_palette()])
g = sns.clustermap(data, col_colors=col_colors)

for i, (name, color_map) in enumerate(color_maps.items()):
    leg = draw_legend(color_map, ax=g.ax_heatmap, name=name,
                      loc=1, bbox_to_anchor=(1.2, 1 - (0.13 * i)))
```

![unknown-1](https://cloud.githubusercontent.com/assets/307739/14157152/15ab7648-f6ca-11e5-93fa-b1716012b32c.png)

I would be interested to hear if there is any interest in integrating this kind of functionality in Seaborn. Critique on the current implementation is also welcome.

As it stands, I think we would at least have to overcome the following issues:
- Decide how to best pass colors if this is to be used in clustermap. Currently I use a (nested) list of color palettes, with nesting mainly being used to support categorical/string columns which require multiple colors.
- Determine if row/col_colors are already plottable colors or are data that need to be converted. Any idea on how to reliably determine this?
- Decide on how to handle numeric values. Currently I am linearly interpolating colors from min/max between a foreground color and a background color. Maybe it would be desirable to allow for more flexibility in the conversion. Alternatively, we could leave more complex cases up the to user to convert themselves.
- Determine how/where to plot legends. Maybe constraint solving libraries such as cassowary would be an interesting/suitable approach for solving the where issue. This might also allow us to place the colorbar in a better place to address that issue in #891. I have zero experience with cassowary however.
",1,1,"['enhancement', 'mod:matrix']"
487,64067490,893,4704710,2016-03-24 17:14:58,2016-03-24 17:20:54,closed,doc: Add URL links to 2.7 and 3.3 version.,"### Single change to README.md
- Made python version numbers 2.7 and 3.3 as hyperlinks.
",2,1,[]
488,63472344,891,4704710,2016-03-19 16:50:21,2020-01-18 13:21:06,closed,"Clustermap: collapse dendrograms, side_colors and colorbar if not given, make ratios configurable.","This pull request addresses some issues that were originally discussed in #437. More specifically, I have introduced the following changes:
- Added col_color_ratio and row_color_ratio arguments that allow the user to specific a ratio for the side_colors when building the axes for clustermap. This allows users to adjust the size of the colors if needed (to prevent overlapping labels, or colors that are too compressed to view). I think it is best that this can be overridden by the user, as I don't see a sensible default that will always work (for example, choosing the same height as the rows will not work in heatmaps with many rows/columns, as is generally the case for gene expression matrices etc.)
- Refactored the setting up of axes into a single function _setup_axes. The function accounts for the presence of row/column clustering and row/column colors when setting up the axes, avoiding adding axes of no clustering is performed or no colors are provided.  
- Made the colorbar optional, which as a bonus allows for dropping whitespace if dendrograms are omitted. 

I am not quite happy with the colorbar, as it results in some considerable whitespace when dendrograms are omitted. We could choose to drop the colorbar down to where the row dendrogram would be if no dendrograms are needed, which would avoid at least the vertical whitespace. I don't however see a cleaner option without moving the colorbar to the right, which then runs into issues with the labels of the heatmap.

Some examples are shown below.

Full plot:

![unknown](https://cloud.githubusercontent.com/assets/307739/13899941/9819b4ce-edfa-11e5-9f6a-a30089f34d1b.png)

No col_cluster:

![unknown-1](https://cloud.githubusercontent.com/assets/307739/13899942/9f14db32-edfa-11e5-8a7d-d37df92d1c13.png)

No col/row_cluster:

![unknown-2](https://cloud.githubusercontent.com/assets/307739/13899945/a5477ac8-edfa-11e5-92a0-19f91825b128.png)

No clustering + no colorbar:

![unknown-3](https://cloud.githubusercontent.com/assets/307739/13899951/af748d1a-edfa-11e5-96b6-020ce3e31f56.png)
",13,5,[]
489,62935533,887,4704710,2016-03-15 16:29:52,2016-03-15 18:21:30,closed,apionly no longer calls reset_orig() - fixes #695,,2,1,[]
490,62921240,886,4704710,2016-03-15 15:10:00,2016-04-25 00:48:18,closed,Heatmap annotate values with other dataframe,"The `annot=True` flag in `sns.heatmap()` is very helpful:

``` python
import seaborn as sns
import numpy as np
np.random.seed(314)

values = np.random.randint(low=0, high=1e6, size=20).reshape(4, 5)
values[2, 3] += 1000000
sns.heatmap(values, annot=True)
```

![image](https://cloud.githubusercontent.com/assets/806256/13782554/dbe45ec6-ea84-11e5-921b-987da67ce5fa.png)

But sometimes I want to plot the percentages as the heatmap, but annotate with the original values. This is especially when some of the percentages are very low but I'd still like the raw value to tell them apart.

``` python
percentages = 100*values/values.sum()
sns.heatmap(percentages, annot=True, annot_data=values, vmin=0, vmax=100)
```

![image](https://cloud.githubusercontent.com/assets/806256/13782605/04c6fa60-ea85-11e5-82c9-b6adc390b5e9.png)

This PR adds the keyword argument `annot_data=None` and allows the user to pass a dataframe/numpy array to use as the annotation. It doesn't check for whether the `annot_data` and `data` are the same size but it probably should.

[Here](http://nbviewer.jupyter.org/gist/olgabot/c9d87392ac4f1b44564b) is an nbviewer notebook with the code above.
",4,4,[]
491,62681443,885,4704710,2016-03-13 20:04:38,2016-03-13 22:22:19,closed,Fix #719: UnicodeEncodingError in FacetGrid,"These commits fix the Unicode-related issue #719 (see the commit messages for details). It may be possible that there are still more places in the code in which a conversion to Unicode is necessary.
",5,6,[]
492,61839084,883,4704710,2016-03-06 10:13:58,2016-03-06 18:50:36,closed,Fix missing labels in clustermap col_colors when row_colors not given,"Small adjustments to #877. I discovered a small typo in checking for col_label_colors, which resulted in column color labels not being drawn if no row_label_colors were given. I also changed preprocess_colors to ensure that labels are now a simple list instead of a pandas Index object. Finally, I added some documentation of clustermap to reflect the addition of the Series/Dataframe functionality.

Sorry for the late changes, I didn't expect the pull request to be accepted that quickly after the first revision!
",1,2,[]
493,61317467,877,4704710,2016-03-01 22:12:10,2016-03-05 19:39:18,closed,Support dataframes as col/row_colors in clustermap and use columns as annotation,"Includes the proposed changes from #441 for supporting dataframe row_colors and col_colors in cluster map and using the column names as labels in the resulting plot. The current implementation allows supplying colors as dataframes, in which case columns as used as labels, or as a (named) series, in which case the name of the series is used as label (if the name is not None). 

The current implementation also matches the index of row_colors and col_colors to the data index/columns, to ensure that the order of the colors is coherent with the data. This may break current behaviour, but I personally feel that it is a welcome addition, as it ensures that your colors correspond properly with your data (this has bitten me before) and makes good use of the index/column annotation to do so. I do not currently check for missing entries, and the torgb code breaks on NaNs at the moment. My initial solution to NaNs with be to replace them with the background color (white?) effectively omitting them from the annotation.

I have not written any extra unit tests yet, but the existing tests all pass. If there is legitimate interest in the feature, I am happy to add the extra unit tests.

A basic example:

``` python
import pandas as pd
import numpy as np
import seaborn as sis

np.random.seed(0)

# Generate data.
data = pd.DataFrame(np.random.randn(10, 10),
                    index=['F{}'.format(i) for i in range(10)],
                    columns=['S{}'.format(i) for i in range(10)])

# Generate colors.
col_colors = pd.DataFrame({'Annotation 1': (['red'] * 5) + ['blue'] * 5},
                          index=data.columns)

row_colors = pd.DataFrame({'Annotation 2': (['green'] * 5) + (['black'] * 5)},
                          index=data.index)

# Draw example.
sns.clustermap(data, col_colors=col_colors, row_colors=row_colors)
```

![unknown](https://cloud.githubusercontent.com/assets/307739/13443547/bf5c7f78-e001-11e5-96b9-ca2f144a40d1.png)

A shuffled example (where colors are shuffled):

``` python
np.random.seed(0)

# Generate colors
col_colors = pd.DataFrame({'Annotation 1': (['red'] * 5) + ['blue'] * 5},
                          index=data.columns)

row_colors = pd.DataFrame({'Annotation 2': (['green'] * 5) + (['black'] * 5)},
                          index=data.index)

# Shuffle col_colors.
samples = list(data.columns)
np.random.shuffle(samples)
col_colors = col_colors.ix[samples]

# Shuffle row_colors
features = list(data.index)
np.random.shuffle(features)
row_colors = row_colors.ix[features]

# Shuffled example, without proper matching.
sns.clustermap(data, col_colors=col_colors.T.values, row_colors=row_colors.T.values)

# Shuffled example, now matched by index/column.
sns.clustermap(data, col_colors=col_colors, row_colors=row_colors)
```

![unknown-1](https://cloud.githubusercontent.com/assets/307739/13443561/d9302b16-e001-11e5-9288-0b3f86e292aa.png)
![unknown-2](https://cloud.githubusercontent.com/assets/307739/13443567/dde502a8-e001-11e5-978b-31378bbc0b0e.png)

And using the network example:

``` python
import pandas as pd
import seaborn as sns
sns.set(font=""monospace"")

# Load the brain networks example dataset
df = sns.load_dataset(""brain_networks"", header=[0, 1, 2], index_col=0)

# Select a subset of the networks
used_networks = [1, 5, 6, 7, 8, 11, 12, 13, 16, 17]
used_columns = (df.columns.get_level_values(""network"")
                          .astype(int)
                          .isin(used_networks))
df = df.loc[:, used_columns]

# Create a custom palette to identify the networks
network_pal = sns.cubehelix_palette(len(used_networks),
                                    light=.9, dark=.1, reverse=True,
                                    start=1, rot=-2)
network_lut = dict(zip(map(str, used_networks), network_pal))

# Convert the palette to vectors that will be drawn on the side of the matrix
networks = df.columns.get_level_values(""network"")
network_colors = pd.Series(networks).map(network_lut)

# Create a custom colormap for the heatmap values
cmap = sns.diverging_palette(h_neg=210, h_pos=350, s=90, l=30, as_cmap=True)

# Convert colors to dataframe.
colors_df = pd.DataFrame({'colors': network_colors})
colors_df.index = df.columns

# Draw the full plot
sns.clustermap(df.corr(), row_colors= colors_df, linewidths=.5,
               col_colors= colors_df, figsize=(13, 13), cmap=cmap)
```

![unknown-4](https://cloud.githubusercontent.com/assets/307739/13443608/0f4ce3d8-e002-11e5-9b59-2d3229fbf117.png)

Supplying as (named) Series:

``` python
# Draw the full plot
sns.clustermap(df.corr(), row_colors=colors_df['colors'], linewidths=.5,
               col_colors=colors_df['colors'], figsize=(13, 13), cmap=cmap)
```

![unknown-5](https://cloud.githubusercontent.com/assets/307739/13443626/282c26fc-e002-11e5-853b-c6e11a0c916e.png)
",5,4,[]
494,60386702,869,4704710,2016-02-23 18:32:37,2016-03-05 18:42:43,closed,Add option to specity heatmap tick locator,"Right now, if you want to `n_ticks != 6` for the heatmap colorbar ticks, e.g. 4 then you can try:

```
locator = mpl.ticker.MaxNLocator(4)
sns.heatmap(basewise_statistics_2d, cmap=cmap, ax=ax, vmin=0, vmax=10,
                    cbar_kws=dict(label='$-\log_{10}(q)$', ticks=locator), 
                    cbar_ax=cbar_ax)
```

But then there's a `TypeError`:

```
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-131-6996a9c91914> in <module>()
      2 sns.heatmap(basewise_statistics_2d, cmap=cmap, ax=ax, vmin=0, vmax=10,
      3                     cbar_kws=dict(label='$-\log_{10}(q)$', ticks=locator),
----> 4                     cbar_ax=cbar_ax)

/home/obotvinnik/anaconda/lib/python2.7/site-packages/seaborn/matrix.pyc in heatmap(data, vmin, vmax, cmap, center, robust, annot, fmt, annot_kws, linewidths, linecolor, cbar, cbar_kws, cbar_ax, square, ax, xticklabels, yticklabels, mask, **kwargs)
    461     if square:
    462         ax.set_aspect(""equal"")
--> 463     plotter.plot(ax, cbar_ax, kwargs)
    464     return ax
    465 

/home/obotvinnik/anaconda/lib/python2.7/site-packages/seaborn/matrix.pyc in plot(self, ax, cax, kws)
    253             ticker = mpl.ticker.MaxNLocator(6)
    254             cb = ax.figure.colorbar(mesh, cax, ax,
--> 255                                     ticks=ticker, **self.cbar_kws)
    256             cb.outline.set_linewidth(0)
    257             # If rasterized is passed to pcolormesh, also rasterize the

TypeError: colorbar() got multiple values for keyword argument 'ticks'
```

To get around this, you can do some extra work:

```
cbar_ax.locator_params('y', nbins=4)
cbar_ax.yaxis.set_ticklabels([0, 5, 10])
```

but who wants to do that?

This uses `set_default` for `'""ticks""` in `cbar_kws` instead of overwriting it outright and not giving the user the option at all.

this PR is preliminary, hasn't been fully tested yet.
",5,5,[]
495,59684036,868,4704710,2016-02-17 18:05:14,2016-03-05 19:17:24,closed,Ability to override histtype when plotting PairGrid histograms,"This change gives the ability to pass in a specific histtype to map_diag to override the default behavior. The default barstacked behavior is retained if no histtype is passed into the function. This feature gives added functionality to map_diag without having to write a custom hist function just to use a different histtype. 

As a side note I wonder if barstacked is the best default behavior, barstacked has the annoying behavior that when passing in an array of samples the histograms are normalized to the total sample size instead of each histogram being independently normalized. Thus distributions with larger numbers of samples are larger in the resulting histogram. For my use cases this seems backwards, since a point of normalization is to compare distribution shape independent of sample size. 

A simple working example of this

``` python
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# make some test data with a boolean label of unequal sample size
df = pd.DataFrame({'data1':np.random.randn(2000), 
                   'data2':np.random.randn(2000), 
                   'label': np.random.randn(2000) > 0.2})

# Default seaborn/barstacked behavior
g = sns.PairGrid(df, x_vars= ['data1', 'data2'], 
                 y_vars= ['data1', 'data2'], 
                 hue = ""label"", diag_sharey = False, 
                 palette = ""Set1"")

g.map_diag(plt.hist, normed = True, bins = np.arange(-10,10,.5))


# Updated custom histtype, and also illustrate how normalization should appear
g = sns.PairGrid(df, x_vars= ['data1', 'data2'], 
                 y_vars= ['data1', 'data2'], 
                 hue = ""label"", diag_sharey = False, 
                 palette = ""Set1"")

g.map_diag(plt.hist, normed = True, 
                     alpha = 0.8, 
                     histtype = 'step',
                     linewidth = 3, 
                     bins = np.arange(-10,10,.5))

```

Default seaborn/barstacked normalization behavior
![image](https://cloud.githubusercontent.com/assets/4388231/13119189/d65e6c2c-d575-11e5-8699-b6f5eb16e220.png)

Updated function to illustrate stepped histogram, and also highlight correct normalization of distributions with different sample sizes.
![image](https://cloud.githubusercontent.com/assets/4388231/13119197/e96d493c-d575-11e5-8bb0-43a473cb5d0a.png)
",3,5,[]
496,57658224,845,4704710,2016-01-29 15:05:49,2016-01-29 16:02:04,closed,Remove color_list from dendrogram call in tests,"Fixes #844
",1,1,[]
497,57155375,838,4704710,2016-01-26 00:55:26,2016-03-05 18:57:52,closed,Change luminance calculations for Annotation color choice,"### Adjustment to luminance calculation when annotating heatmaps

Currently when annotating heatmaps the color of the text annotation is either white or gray based upon a contrast calculation. This pull request contains an improved contrast calculation to address an issue when using the viridis heatmap.

Currently the luminance is calculated by conversion to HSL and extraction of the luminance term, which is simply [the average of the highest and lowest RGB values](http://www.niwa.nu/2013/05/math-behind-colorspace-conversions-rgb-hsl/). This is then compared to a 50% cutoff to decide when to use white or gray text.

I am proposing adherence to the WC3 standards for [luminance](https://www.w3.org/TR/WCAG20/#relativeluminancedef) and [optimal contrast](https://www.w3.org/TR/WCAG20/#relativeluminancedef). Importantly these take into account how people view luminance and contrast of different colors.

Excerpt describing relative luminance calculation:

> For the sRGB colorspace, the relative luminance of a color is defined as L = 0.2126 \* R + 0.7152 \* G + 0.0722 \* B where R, G and B are defined as:
> 
> if RsRGB <= 0.03928 then R = RsRGB/12.92 else R = ((RsRGB+0.055)/1.055) ^ 2.4
> if GsRGB <= 0.03928 then G = GsRGB/12.92 else G = ((GsRGB+0.055)/1.055) ^ 2.4
> if BsRGB <= 0.03928 then B = BsRGB/12.92 else B = ((BsRGB+0.055)/1.055) ^ 2.4
> 
> and RsRGB, GsRGB, and BsRGB are defined as:
> 
> RsRGB = R8bit/255
> GsRGB = G8bit/255
> BsRGB = B8bit/255

Excerpt for luminance calculation:

> (L1 + 0.05) / (L2 + 0.05), where
> L1 is the relative luminance of the lighter of the colors, and
> L2 is the relative luminance of the darker of the colors.

To calculate the text color, either grey (luminance = 0.15) or white (luminance = 1), I calculate which has the maximal contrast to the background luminance:

```
"".15"" if ((l+0.05)/(0.15+0.05))>((1+0.05)/(l+0.05)) else ""w""
```

This simplifies to 

```
text_color = "".15"" if l > .408 else ""w""
```

This fix was motivated by the following issue with the viridis heatmap (matplotlib 2.0 default) where 19 is difficult to read. 

![image](https://cloud.githubusercontent.com/assets/2424677/12569459/c187228c-c394-11e5-9ef8-fc3aa9236232.png)

This is addressed in this pull request.

![image](https://cloud.githubusercontent.com/assets/2424677/12569463/c735267a-c394-11e5-9620-f3d2501735d3.png)

To get a better undestranding of the change I ploted luminance of both viridis and RdBu_r compared to the cutoff. This shows the weird dip in viridis that gave rise to the previously described issue/
### Viridis

![image](https://cloud.githubusercontent.com/assets/2424677/12569483/f0b9d5f4-c394-11e5-827f-11bed47f6bb5.png)
### RdBu_r

![image](https://cloud.githubusercontent.com/assets/2424677/12569473/dd9601dc-c394-11e5-8706-e7d86c9a73b6.png)
",9,3,[]
498,56993474,834,4704710,2016-01-24 02:56:27,2016-01-24 03:24:22,closed,Update stripplot,"This changes `stripplot` to use some of the abstractions that were developed for `swarmplot`.

Also changes some of the `stripplot` default parameters to better match `swarmplot`.

Fixes #666
",0,6,[]
499,56789186,831,4704710,2016-01-21 18:26:59,2016-01-21 21:42:02,closed,Update mesh colors before drawing annotations,"This commit fixes Issue #830. Currently, `mesh.get_facecolors()` returns only the color code for one cell in the grid, but calling `mesh.update_scalarmappable()` changes this so that the color information is shown for all cells.
",8,4,[]
500,56635279,827,4704710,2016-01-20 16:54:06,2016-01-20 17:42:28,closed,Pass hex colors to regression scatterplot,"Avoids problem where matplotlib interprets rgb colors with three scatter
points as a variable to be colormapped.

Closes #802
",0,1,[]
501,54931227,814,4704710,2016-01-03 20:06:05,2017-07-07 20:42:37,closed,[WIP] Refactoring tsplot,"Hi,

to begin with, I want to thank you for developing such a great library! :)

Since I am interested in an extended version of `tsplot`, to visualize for example observational quantiles, I took a look at a number of issues:
- Extend tsplot to plot observation quantiles? #450
- adds ability to visualize distribution of data #643
- [Feature Request] Show SD in seaborn.tsplot() instead of SEM #763 
- implement err_style='std' and err_style='sem' for timeseries plots #764 
- ...

From the respective discussions and the current implementation of `tsplot` I understand the need for refactoring and providing tests to allow future developments.

I would like to contribute to your project and want to propose this PR as a **basis for a discussion** on how to possibly refactor and test `tsplot`.

Regarding the PR:
- For sake of simplicity, I created two new modules `timeseries_new` and `test_timeseries_new` instead of touching the original `timeseries` implementation since the old and new implementation are very different in their design. When we know how to proceed, the modules need to be renamed or their code being copied somewhere else.
- The code is the same as in the original `tsplot` (in particular there are no new features) but broken down into smaller pieces and formed into a class to facilitate testing (similar to other implementations in seaborn). While refactoring, I tried to stick to the design of the `categorical` module.
- The API and the function-interface is of course still the same but the main plotting task is now handled by the new `_TimeSeriesPlotter` class.
- `_TimeSeriesPlotter` has a number of methods to prepare and compute the data needed for plotting, e.g. `_init_from_df`, `_init_from_array`, `_set_up_color_palette`, `_compute_plot_data`, `_err_color`. The only public method is `plot` which carries out the work of drawing the figure.
- The subroutines for error-plotting such as `_plot_ci_band` are unchanged.
- Note that the majority of the tests deal with the refactored version but there are of course also some tests inspecting the produced figures (which are passed by both the old and new version...).

I am looking forward to hearing your opinion on this topic!
",2,30,[]
502,54438148,806,4704710,2015-12-23 03:43:26,2015-12-23 04:00:20,closed,Workarounds for matplotlib boxplot issues,"- Avoids blue outliers by setting the `markerfacecolor` property rather than `color`
- Avoids a strange bug where some properties would revert to default when setting others through property dictionaries

closes #794; closes #787
",0,3,[]
503,54192093,804,4704710,2015-12-20 03:28:10,2015-12-22 16:22:39,closed,Add swarmplot function (beeswarm plot),"Swarmplot draws a plot like `stripplot`, but the position of the points are adjusted along the categorical axis so that the points don't overlap. This provides a better representation of the distribution for small-medium sized data. This is also often called a ""beeswarm plot"". Naturally, the plot is based on seaborn's general categorical plot API, works as a`kind` in `factorplot`, etc.

Here is a simple example:

``` python
sns.swarmplot(x=""day"", y=""total_bill"", data=tips)
```

![image](https://cloud.githubusercontent.com/assets/315810/11920156/015617dc-a71c-11e5-85ad-15c59d22e088.png)

And an example showing hue-nesting:

``` python
sns.swarmplot(x=""class"", y=""age"", hue=""survived"", data=titanic, palette=["".75"", ""b""])
```

![titanic_swarmplot](https://cloud.githubusercontent.com/assets/315810/11920151/eeb91aac-a71b-11e5-8246-52d7560f2c2c.png)

This PR also adds some general code for categorical scatterplots that will end up relieving a few issues with `stripplot`, but changes to `stripplot` will probably be done in a different PR.
### Things that would be nice to have but won't be in this PR
- More options for what to do with points that extend too far along the categorical axis
- Clever default point size to optimize the use of categorical axis space
### Todo
- [x] Update release notes
- [x] Update categorical tutorial
- [x] Add example gallery script
- [x] Add cross-references in other categorical plot docstrings
",0,27,[]
504,53481987,798,4704710,2015-12-12 18:15:52,2015-12-12 18:36:35,closed,Avoid scatter issues,"Avoid the problem where matplotlib thinks a stripplot with 3 observations should be colormapped by passing hex-valued colors.

Closes #753
",0,2,[]
505,52701439,793,4704710,2015-12-04 18:04:49,2015-12-08 16:39:05,closed,PERF: Speed up test for empty facet (trivial),"Using the cached `size` property on an `ndarray` must be faster than converting the array to a list, and it's more obvious what's going on to boot.

I can't imagine this makes much difference, but it might speed up plotting large datasets.
",1,1,[]
506,52159445,789,4704710,2015-11-30 18:16:03,2015-12-08 16:39:39,closed,typo,,1,1,[]
507,52126808,788,4704710,2015-11-30 13:59:37,2017-07-07 20:31:33,closed,Force color of plot in grid diagonal,"Allows setting the `color` kwarg in `map_diag`, which then overrides seaborn's attempt to set the colors via the palette.
Example:

``` py
#1
g = sns.PairGrid(data)
g.map_diag(plt.hist, color=color)
#2
g.map_diag(sns.distplot, color=color)
```

The first (`plt.hist`) was possible before by giving `facecolor=color`; the second (`sns.distplot`) wasn't possible AFAIK.
",0,1,[]
508,51777799,782,4704710,2015-11-25 10:44:26,2015-12-08 16:45:00,closed,Use facecolor instead color keyword argument to avoid random behaviour,"This is a workaround the random behavior with python 3.4 as described in bug #756
",1,1,[]
509,51459152,779,4704710,2015-11-22 06:51:34,2015-12-08 16:45:16,closed,Fix deprecation warning for matplotlib >= 1.5.0,"```
modified:   seaborn/rcmod.py
modified:   seaborn/tests/test_palettes.py
modified:   seaborn/utils.py
```

Minor fix to replace all occurrences of `axes.color_cycle` with `axes.prop_cycle`. Fixes #778 
",2,2,[]
510,51443106,777,4704710,2015-11-21 15:16:12,2017-07-07 20:51:39,closed,Arbitrary function fitting in distplot,"Hi,

I wrote a small piece of code that allows fitting of arbitrary functions in distplot (for example, fitting of sum of 2 gaussians) using scipy.optimize.curve_fit. Hope you agree it's a useful feature. Let me know if you think something is wrong with the code (this is my first PR).
",4,6,[]
511,51432565,775,4704710,2015-11-21 03:40:01,2015-11-22 14:36:27,closed,AxesStyle & PlottingContext as contextdecorators.,"cf #774.
",2,2,[]
512,50902747,771,4704710,2015-11-17 04:18:14,2015-11-17 04:55:35,closed,Force number of bins to be an integer.,"I get an error if I try to use jointplot.  
np.ceil returns a float, which causes  np.histogram(x[i], bins, weights=w[i], **hist_kwargs) to throw an error.

This is probably because I am using numpy version 1.11.0.dev0+cbc14f0 and not whatever version seaborn is built for.  In any case this is a simple fix and should help with future compatibility.
",3,1,[]
513,50832695,767,4704710,2015-11-16 16:32:26,2015-11-16 17:46:03,closed,Pass 'rasterized' to colorbar in sns.heatmap,"This fixes white lines appearing in the rendered PDF. See #373 .

Rendered PDF before :
![sns_colorbar_pdf_before](https://cloud.githubusercontent.com/assets/506602/11187746/f0cf0d46-8c87-11e5-81f1-b9dcbc4c93f9.png)

Rendered PDF after :
![sns_colorbar_pdf_after](https://cloud.githubusercontent.com/assets/506602/11187749/f429c4e0-8c87-11e5-9c1e-cea55ddb3fa1.png)
",3,1,[]
514,50725835,764,4704710,2015-11-14 15:44:55,2017-07-07 20:43:04,closed,implement err_style='std' and err_style='sem' for timeseries plots,"Hi,

We use the timeseries plots extensively here (thanks for that!) and it would be useful to plot the standard deviation and standard error of the mean using the same interface.

Would something like this be within-scope for seaborn?
",7,2,[]
515,50162897,758,4704710,2015-11-09 19:04:17,2015-11-09 21:26:35,closed,Remove color_list from dendrogram call,"Addresses https://github.com/mwaskom/seaborn/issues/750
",1,1,[]
516,50021072,755,4704710,2015-11-07 00:22:32,2015-11-07 01:55:01,closed,Updating .travis to reflect recent miniconda changes,"Miniconda's default prefix changed recently causing all travis builds failing.
",1,1,[]
517,48815188,740,4704710,2015-10-27 00:22:25,2015-10-28 15:04:24,closed,Add compatability for IPython3/4/Jupyter in functions that use widgets,"Closes #699
",4,1,[]
518,48680972,739,4704710,2015-10-25 15:49:13,2015-10-26 01:52:55,closed,COMPAT: compat with mpl 1.5 color cycle,"Closes https://github.com/mwaskom/seaborn/issues/711 and #732 

One oddity here is if a user has modified their `axes.prop_cycler` to be a cycler that doesn't include the `color` key. In this case we just fall back to `axes.color_cycle` and they'll get the warning. I actually think the changes I made to pandas missed this possibility and will just break :shrug:.

For Travis, want me to modify one of the `testing/deps_modern`? https://anaconda.org/conda-forge/matplotlib/files has RC1... not sure about a more up to date version.

I've got a couple (seemingly unrelated) failures to cleanup too. They fail for me on master so I'm not sure if that's another mpl 1.5 thing or what. Not sure if I'll get to that any time soon.
For the record, those failures are

```
======================================================================
FAIL: seaborn.tests.test_matrix.TestDendrogram.test_dendrogram_ticklabel_rotation
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/Users/tom.augspurger/Envs/dev/lib/python3.4/site-packages/nose/case.py"", line 198, in runTest
    self.test(*self.arg)
  File ""/Users/tom.augspurger/Envs/dev/lib/python3.4/site-packages/seaborn/seaborn/tests/test_matrix.py"", line 579, in test_dendrogram_ticklabel_rotation
    nt.assert_equal(t.get_rotation(), 90)
AssertionError: 0.0 != 90

======================================================================
FAIL: seaborn.tests.test_matrix.TestHeatmap.test_heatmap_annotation_with_mask
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/Users/tom.augspurger/Envs/dev/lib/python3.4/site-packages/nose/case.py"", line 198, in runTest
    self.test(*self.arg)
  File ""/Users/tom.augspurger/Envs/dev/lib/python3.4/site-packages/seaborn/seaborn/tests/test_matrix.py"", line 244, in test_heatmap_annotation_with_mask
    nt.assert_equal(len(df_masked[::-1].compressed()), len(ax.texts))
AssertionError: 7 != 1

======================================================================
FAIL: seaborn.tests.test_matrix.TestHeatmap.test_heatmap_ticklabel_rotation
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/Users/tom.augspurger/Envs/dev/lib/python3.4/site-packages/nose/case.py"", line 198, in runTest
    self.test(*self.arg)
  File ""/Users/tom.augspurger/Envs/dev/lib/python3.4/site-packages/seaborn/seaborn/tests/test_matrix.py"", line 301, in test_heatmap_ticklabel_rotation
    nt.assert_equal(t.get_rotation(), 90)
AssertionError: 0.0 != 90
```
",19,3,[]
519,47415045,732,4704710,2015-10-12 12:41:48,2015-11-06 15:07:05,closed,Experimental patch for Matplotlib 1.5,,3,9,[]
520,47371584,730,4704710,2015-10-11 17:34:41,2015-12-13 01:30:35,closed,Fix typos and improve documentation consistency,"Fixed a couple typos and inconsistencies in the distribution docs
",0,2,[]
521,47074391,724,4704710,2015-10-07 19:59:55,2016-03-13 22:23:09,closed,Ensures compatibility of axisgrid labels with unicode objects.,"This PR makes the example from #719 to work without problems.
",1,1,[]
522,46112774,714,4704710,2015-09-28 00:33:07,2015-09-28 01:05:55,closed,Trivial typo fix in example (fix keyword pluralization),"Resolves issue #713, by fixing the keyword argument for the specification of markers from [`FacetGrid`](http://stanford.edu/~mwaskom/software/seaborn/generated/seaborn.FacetGrid.html) via the `hue_kws` parameter. The keyword `marker` was erroneously provided in singular, instead of plural form (i.e. `markers`).
",11,1,[]
523,44751458,701,4704710,2015-09-11 06:51:11,2017-07-07 20:43:18,closed,Fix for plotting series of only one point,"If interpolate=true and len(x)=1 padding the sides of the plot might caused an out of bounds exception (note that after the fix, it still can when interpolate=false)
",3,1,[]
524,44234198,698,4704710,2015-09-04 16:02:14,2015-09-06 17:55:31,closed,Fixed typo,"Saw a small typo when reading the doc, so here is a fix.
",1,1,[]
525,44116182,697,4704710,2015-09-03 14:49:28,2015-09-03 20:33:55,closed,Fixed an issue with factorplot when plotting data that contains different categories across columns,"Using the factorplot for plots with categorical data that contain different categories across columns (e.g. first column has categories 'A', 'B', 'C', and second column has categories 'A', 'B', 'D') would add all the categories to all subplots (e.g. all plots would have 'A', 'B', 'C', 'D' categories in spite of missing data). Hence, I have added a re-computation of the ""order"" variable (lines 793 - 796) for each subplot, if the sharex is set to false (Setting sharex = True already assumes that the data in all subplots contains same categories). I have also introduced a new private variable self._sharex.
",3,2,[]
526,44018783,696,4704710,2015-09-02 17:21:54,2015-09-03 15:22:08,closed,use teardown method in PlotTestCase for most tests,"Closes #694.

After this we have:

```
~/dev/seaborn/seaborn/tests $ grep ""plt.close"" *.py | wc
      98     196    4323
```

So `plt.close` shows up 98 times rather than 241. There are still so many because some tests call `plt.close` several times within one test method. Those can stay.

These tests are now more robust, since the `tearDown` method is called regardless of whether the test causes an unexpected exception.
",18,3,[]
527,43619789,690,4704710,2015-08-28 11:48:15,2015-09-06 17:57:12,closed,Do not draw ticks at all if ticklabels are disabled,"This PR actually does something I should have done in PR #683 that is already merged.

After PR #685 was merged, I ran the profiler again and noticed that quite peculiarly most of the time is now spent setting `yticks` when plotting a large number of rows. I never thought this would be the bottleneck, but disabling the ticks completely, when no ticklabels are given, brings down the runtime of the same test script as given in #685 to 5.7s (from around 30s, and from around 60s before dendrogram fix...). 

What is even better, `fastcluster` is now the biggest bottleneck of that example, not plotting!
As it should be! Woo-hoo!

Not really sure how I missed this when pushing #683. Anyway, it is an easy fix, and all tests seem to pass, so have yet  another PR (sorry for such a pile-up)!

Again, the plots are identical:
master:
![master](https://cloud.githubusercontent.com/assets/108413/9545489/8189e738-4d82-11e5-89d8-66839ad2f23b.png)

PR
![pr](https://cloud.githubusercontent.com/assets/108413/9545502/8db2fe6e-4d82-11e5-9371-c3cef7d715c6.png)
",1,1,[]
528,43422198,686,4704710,2015-08-26 16:24:11,2015-08-26 16:38:25,closed,Update linearmodels.py,"Fixes a bug in lmplot. When `sharex=True`, the `scatter` argument was being overwritten and evaluating as True. Therefore, when lmplot was called with `scatter=False` a scatterplot would be drawn unless `sharex=False`.
",1,1,[]
529,43392054,685,4704710,2015-08-26 11:38:48,2015-08-28 02:41:41,closed,Use `LineCollection` when plotting dendrograms.,"Instead of plotting the dendrogram lines one by one using standard `ax.plot()`, this PR makes use  of the `LineCollection` object from `matplotlib` to draw them all at once.

This has the effect of significantly speeding up the time needed to draw the clustermap.

For instance, the following script:

``` python
import numpy as np
import fastcluster
import pandas as pd
import seaborn
from matplotlib import pyplot as plt

ROWS, COLS = 10000, 10
np.random.seed(10)
random_data = np.random.randn(ROWS, COLS)
random_data[ROWS/5: 2*ROWS/5, :] *= 10
random_data = pd.DataFrame(random_data, 
                           index=['Row {}'.format(i) for i in range(ROWS)], 
                           columns=['Column {}'.format(i) for i in range(COLS)])
row_linkage = fastcluster.complete(random_data)
col_linkage = fastcluster.complete(random_data.T)
seaborn.clustermap(random_data,
                   row_linkage=row_linkage,
                   col_linkage=col_linkage, yticklabels=False)

plt.savefig('test.png')
plt.close()
```

Takes 0m35.323s on my computer when dendrogram is drawn as `LineCollection` (note that 10k rows are being plotted!)
Meanwhile code on master branch takes 0m53.243s on the same machine. Meaning we get 30% improvement with the new code.

If you look at the actual diff -- quite a few things had to change because of the new way of plotting.
Most notably, the axes do not autoscale when plotting using `LineCollection`, thus I had to manually put the scaling in. I used a similar approach to scaling that `scipy.cluster.hierarchy` use for their dendrogram plotting.

If we consider the `flights` example, that is given in the documentation:

``` python
>>> import seaborn as sns; sns.set()
>>> flights = sns.load_dataset(""flights"")
>>> flights = flights.pivot(""month"", ""year"", ""passengers"")
>>> g = sns.clustermap(flights)
```

The plots generated are identical, thus I believe I did not screw anything up with this new scaling.

master branch:
![flights master](https://cloud.githubusercontent.com/assets/108413/9492379/e646a82c-4bee-11e5-8294-4d29b4e39341.png)

my branch:
![flights faster_dendrograms](https://cloud.githubusercontent.com/assets/108413/9492382/ed007a80-4bee-11e5-9cf1-a9c4f1bbe43e.png)

The time improvement for this example is less severe, of course. 0m2.896s vs 0m2.987s on my machine (including the time to savefig). Nevertheless, it is still an improvement.
",1,5,[]
530,43106601,683,4704710,2015-08-22 17:04:31,2015-08-22 17:16:23,closed,"Do not create heatmap labels, when labels are false","This PR changes the behaviour of `xticklabels=False` (also `yticklabels=False`).
Instead of creating a list of empty tick labels (as it did before), it now just operates on an empty list.
This has the effect that `axis_ticklabels_overlap` does not do the expensive overlap calculation downstream. And thus the code runs faster.

For instance, try out the following code snippet:

``` python
import numpy as np
import fastcluster
import pandas as pd
import seaborn
ROWS, COLS = 1000, 10
np.random.seed(10)
random_data = np.random.randn(ROWS, COLS)
random_data = pd.DataFrame(random_data, 
                           index=['Row {}'.format(i) for i in range(ROWS)], 
                           columns=['Column {}'.format(i) for i in range(COLS)])
row_linkage = fastcluster.complete(random_data)
col_linkage = fastcluster.complete(random_data.T)
seaborn.clustermap(random_data, 
                   row_linkage=row_linkage, 
                   col_linkage=col_linkage, yticklabels=False)
```

Naively timing the `seaborn.clustermap` command at the end of the code, I get 5.7s using the code in master, whereas the PR drops it to roughly 3.8s.  Even more time is gained when the number of rows being plotted is even larger. This is quite important as in these situations one would want to have `yticklabels` off anyway (as nobody would be able to read them anyway...)

I am attaching figures as well to show that the outputs look identical visually.

master:

![master.png](https://cloud.githubusercontent.com/assets/108413/9424964/b0e9acbc-4908-11e5-8bab-601fd2f54213.png)

PR:
![pr.png](https://cloud.githubusercontent.com/assets/108413/9424967/bab6110e-4908-11e5-99dd-c5c4f140490d.png)
",5,2,[]
531,43056129,682,4704710,2015-08-21 16:30:27,2015-08-24 15:29:47,closed,changed handling of annot_kws so that standard values can be overwritten,"This fixes #681. I didn't add an extra test, I think the changes are small enough.
",3,2,[]
532,41987869,670,4704710,2015-08-10 05:11:16,2016-06-05 01:15:22,closed,BUG/TST: ax.legend needs to be explicitly called for patch labels.,"Pretty minor. If you pass a `label`, but don't explicitly call `ax.legend`, you won't get any type of legend labeling: 

https://gist.github.com/wrobstory/c990c94fc4598a440e7f
",8,2,[]
533,41926857,669,4704710,2015-08-07 19:49:42,2016-03-31 14:43:14,closed,Allow pandas objects to flow through tsplot,"I'm submitting this PR to try to kickstart the conversation around https://github.com/mwaskom/seaborn/issues/242. It's a surprisingly annoying error. 

My understanding is that, while matplotlib doesn't handle all instances of pandas objects correctly, it definitely does not handle processing dates passed merely as values correctly, going so far as to throw an overflow error if sns.tsplot is called while trying to represent the data as dates: 

```
fig, ax = plt.subplots()
ax.xaxis.set_major_locator(mdates.AutoDateLocator())
ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y.%m.%d'))
ax.xaxis_date()
fig.autofmt_xdate()
sns.tsplot(data=ph, time='signal_date',  
                    value='cum_ret', unit='key', condition='ticker', 
                    estimator=np.mean, interpolate=True, ax=ax)
plt.show() # Throws overflow error. 
```

I'm not sure if other things break with this PR, but I do know that at least one thing gets fixed. 

And relying on matplotlib to implement doesn't seem great either – the initial conversation on this was 3 years ago, and the last comment 6 months ago. 

What's the best way to move forward on this? 
",4,2,[]
534,41866975,667,4704710,2015-08-07 07:42:32,2016-01-24 03:24:33,closed,stripplot: always show all hue levels in legend fix #666,"Fix for issue #666
",0,1,[]
535,41780473,665,4704710,2015-08-06 12:07:11,2015-08-15 18:33:56,closed,DOC: correct some typos,"I corrected some typos I found, as well as one :ref: link that was not being parsed correctly.
",1,1,[]
536,41274718,661,4704710,2015-07-30 19:53:01,2015-11-15 01:10:47,closed,Letter Value Plots,"This pull request adds the `_LVPlotter` class, `lettervalueplot` function, documentation, and usage examples.
# TODO

---
- [x] PEP8 errors
- [x] Rename plotting function `lvplot`
- [x] Median lines should stay inside boxes
- [x] Change default scale to ""exponential""
- [x] Rename `box_widths` to `scale`
- [x] Put default values into function signature
- [x] Remove deprecation warnings
- [x] Rename `p` to `outlier_prop`
- [x] Change `outlier_prop` to take float, [0, 1].
- [x] Fix documentation
- [x] Change outlier plotting symbol to `d` for internal consistency
- [x] Make width functions class level functions
- [x] Write tests
",24,21,[]
537,40179324,650,4704710,2015-07-16 21:41:23,2015-07-16 23:43:46,closed,Divide by standard dev instead of variance for z-score,"Fixes https://github.com/mwaskom/seaborn/issues/649
",1,1,[]
538,39760515,643,4704710,2015-07-12 11:20:17,2017-07-07 20:40:58,closed,adds ability to visualise distribution of data,"Hi,

this PR is a discussion of #56, #450 and #583, and possibly related to #474. I've only implemented a proof-of-concept in the context of `tsplot`. The same could be done for `factorplot`, but it would require significantly more work and possibly an API change. The point of this PR is to demonstrate visually what the issue is and to start a discussion on whether a change is really needed (I am not convinced myself).

Let's generate time series with high variance and one with low variance. Both will have a very tight confidence interval of the mean.

``` python
import pandas as pd
import seaborn as sns
import numpy as np


samples_per_time = 500
time = np.repeat(np.arange(0, np.pi, 0.05), samples_per_time)
num_samples = len(time)
y = np.sin(time) + np.random.normal(0, .01, size=time.shape)
y1 = np.cos(time) + np.random.normal(0, .2, size=time.shape)
units = list(range(samples_per_time)) * (num_samples // samples_per_time)

df = pd.DataFrame(dict(
    cond=['low var'] * num_samples + ['high var'] * num_samples,
    unit=units * 2,
    value=np.hstack((y, y1)),
    time=np.hstack((time, time))))
```

The current version of `seaborn` (0.6) does not make it obvious that the variances are different.

``` python
sns.tsplot(df, time='time', value='value', unit='unit', 
           condition='cond', ci=[30, 68, 95])
```

![errorbars](https://cloud.githubusercontent.com/assets/937114/8637507/11ddb8a8-288c-11e5-9674-357e2b3a4178.png)

With the proposed change, one can write a custom bootstrap-like function:

``` python
def my_bootstrap(*args, **kwargs):
    return np.vstack(args) # can also bootstrap here if the sample is small

sns.tsplot(df, time='time', value='value', unit='unit', 
           ci=[30, 68, 95], condition='cond', bootstrap_func=my_bootstrap)
```

Now the error bars show the empirical distribution of the data. It is immediately obvious that the variances are different.
![errorbars2](https://cloud.githubusercontent.com/assets/937114/8637508/11fab796-288c-11e5-8c4a-03c7429ec029.png)

I do not know how many users (other than myself) would prefer to see the second figure instead of the first. Of course, both have their uses, I just find the latter more informative for exploratory work

In terms of implementation, passing in the bootstrap function as a parameter (similarly to how `estimator` is passed in) is the least invasive approach. If we think the feature would be commonly used, it may become an extra keyword, as I suggested in #583.
",7,1,[]
539,39636372,642,4704710,2015-07-09 22:43:09,2015-07-10 17:07:57,closed,Add font.size to plotting context,"Resolves #635. 

`font.size` was not being set by `rcmod`, which meant that text generated by `plt.text` and, e.g. tick labels in scientific notation were not scaled by `font_scale`. This is addressed by using matplotlib's default `font.size: 12` and scaling accordingly.
",1,3,[]
540,39318481,632,4704710,2015-07-06 22:37:30,2015-07-07 03:39:35,closed,"factorplot: Extend input check when kind=""count""","When kind is ""count"" for factorplot, raise ValueError if both x and y
are given.  Otherwise, x_ and _y will not be defined, leading to an
UnboundLocalError.
",2,1,[]
541,39318459,631,4704710,2015-07-06 22:37:12,2015-07-07 02:50:40,closed,Convert two tests to almost_equal variant,"Prevent the tests below from failing with very close values:

```
======================================================================
FAIL: seaborn.tests.test_categorical.TestCategoricalStatPlotter.test_nested_stats_with_missing_data
----------------------------------------------------------------------
[...]
Items are not equal:
 ACTUAL: -0.018721526986487352
 DESIRED: -0.018721526986487342

======================================================================
FAIL: seaborn.tests.test_categorical.TestCategoricalStatPlotter.test_single_layer_stats_with_missing_data
----------------------------------------------------------------------
[...]
AssertionError:
Items are not equal:
 ACTUAL: 0.082012970747837352
 DESIRED: 0.08201297074783731
```
",0,1,[]
542,39309720,630,4704710,2015-07-06 20:55:04,2015-07-06 21:28:37,closed,Fixed a typo,"A small fix indeed.
",1,1,[]
543,39262402,629,4704710,2015-07-06 12:27:09,2017-07-07 20:44:50,closed,Factor Heatmaps,"This pull request implements the ability to treat heatmap data as factors. 

Namely, the current implementation draws heatmaps as follows:

``` python
import numpy as np; np.random.seed(0)
import seaborn as sns; sns.set()
integer_data = np.round(np.random.rand(10, 12) * 2)
ax = sns.heatmap(integer_data)
```

![01-current](https://cloud.githubusercontent.com/assets/108413/8521929/da135bc6-23e0-11e5-83f0-ece7dafe31af.png)

This is visually nice, but the colorbar on the right hand side is a bit confusing as the values are purely in the set {0, 1, 2}.

This PR adds the `as_factors` option to `seaborn.heatmap`, which (1) treats values as qualitative, rather sequential (2) prints a legend, not colorbar.

``` python
ax = sns.heatmap(integer_data, as_factors=True)
```

![02-as-factors](https://cloud.githubusercontent.com/assets/108413/8521984/5d547132-23e1-11e5-8941-cc829a787732.png)

Boolean data is set to default to `as_factors=True` if not specified (but can be overriden with providing False explicitly):

``` python
boolean_data = np.random.rand(10, 12) > 0.5
ax = sns.heatmap(boolean_data)
```

![03-boolean](https://cloud.githubusercontent.com/assets/108413/8522010/a7d511f8-23e1-11e5-8e90-2002b7b2bf75.png)

This also allows one to plot non-numeric data. For instance, we can plot string data directly (defaults to `as_factor=True` too):

``` python
import string
_to_letters = np.vectorize(lambda x: string.uppercase[int(x)])
data_as_letters = _to_letters(integer_data)
sns.heatmap(data_as_letters, annot=True)
```

![04-string-data](https://cloud.githubusercontent.com/assets/108413/8522060/25ccfeb8-23e2-11e5-9d85-ea26a47dd186.png)

By default the factors are ordered using python's `sorted()`, but the sorting order (and colors) can be overriden directly:

``` python
sns.heatmap(data_as_letters, annot=True, 
                      as_factors=['C', 'A', 'B'], cmap=['red', 'purple', 'blue'])
```

![05-string-data-uglier](https://cloud.githubusercontent.com/assets/108413/8522107/a7fc16c6-23e2-11e5-8214-cc23c12c1359.png)

Well, that's pretty much it.
",9,24,[]
544,39225313,627,4704710,2015-07-05 19:10:56,2015-07-08 14:59:30,closed,Sort numerical category levels by default,"Adds an additional rule when determining category order in categorical plots.
Now, when numeric variables are used in a categorical role, the default
behavior is to sort the unique levels of the variable (i.e they will be in
proper numerical order). This can still be overriden by the appropriate
`{*_}order` parameter, and variables with a `category` dtype will still
follow the category order even if the levels are strictly numerical.

Closes #626
",0,2,[]
545,39071232,621,4704710,2015-07-02 11:06:11,2015-07-10 17:06:12,closed,Compute linkage correctly when fastcluster is not installed,"To reproduce the problem this PR tries to fix, create a virtualenv without fastcluster and run [the code in this clustermap example](http://stanford.edu/~mwaskom/software/seaborn/examples/structured_heatmap.html). The rows and columns will be sorted in a different way than what is shown on that page.

When fastcluster is not installed, `_calculate_linkage_scipy` is used to
compute linkages. It contains an erroneous call to squareform().
distance.pdist() already returns a condensed distance matrix that is
required as input for the linkage() function. Converting it to a matrix
with squareform() is possible and linkage() will accept the resulting
matrix, but consider it to be a list of vectors of observations and run
distance.pdist() again on it. Thus, we get a linkage based on distances
between distances.
",9,4,[]
546,38781916,615,4704710,2015-06-29 14:54:29,2016-06-05 01:13:47,closed,cbar_kws['ticks'] now possible for heatmap,"Can set cbar_kws['ticks'] now, fixing #459
",1,2,[]
547,38733423,614,4704710,2015-06-28 22:52:14,2015-06-28 23:05:02,closed,Fix issues in FacetGrid and factorplot,"This closes #600
",0,2,[]
548,38732949,613,4704710,2015-06-28 22:17:00,2015-06-28 22:31:59,closed,Validate violinplot inner param (closes #558),,0,1,[]
549,38731866,612,4704710,2015-06-28 21:03:24,2015-06-28 21:35:33,closed,Draw margin titles with ax.annotate instead of f.text,"This should keep the titles tighter to the axes when the figure
layout changes, such as adding a legend. This PR therefore fixes #303.

Also added a background to the text, which should prevent the issue
where adding multiple titles ""stacks"" the row titles (#509).

Also changed the default `savefig` `bbox_inches` to ""tight"" in Grid objects, so these texts won't get clipped when saving.
",1,3,[]
550,38731460,611,4704710,2015-06-28 20:36:55,2015-06-28 21:04:26,closed,Avoid crash in clustermap with matplotlib OSX backend,"Avoid a crash at the cost of having overlapping ticklabels in some plots when using the OSX backend.

This is a replacement for #546 and addresses the issues in #545 
",0,1,[]
551,38279100,606,4704710,2015-06-22 21:33:51,2016-04-24 23:01:49,closed,End caps on barplot confidence intervals,"This is something I have been using on my own plots, and I figured it might be of use to others. 

Added a simple switch to `barplot` that allows for perpendicular lines to be drawn on the confidence intervals (which could be nicer for display, depending on your preference).

This changes the default behavior from this:
![001-without_perp](https://cloud.githubusercontent.com/assets/1278301/8293614/ba28d8ea-1904-11e5-984d-e612ff798a6c.png)

To this:
![001-with_perp](https://cloud.githubusercontent.com/assets/1278301/8293616/bdc63bc8-1904-11e5-881a-6d38385ce9d0.png)

Since it's a totally optional argument, and I don't think it breaks anything, hopefully it's not too painful to incorporate :smiley:
- Josh
",18,13,[]
552,37563779,596,4704710,2015-06-12 13:34:03,2015-06-12 20:13:12,closed,ENH: allow local cacheing of datasets,"This PR introduces a couple extra arguments to the `load_dataset` utility; it allows datasets to optionally be cached locally for use without a network connection.
I think the doc string is pretty self explanatory, but let me know if it needs clarification!
",10,5,[]
553,35886069,572,4704710,2015-05-20 23:16:39,2015-05-20 23:56:32,closed,Fix bug in PairGrid missing data handling,"Fix a bug introduced in #547 (that caused PairGrid to crash on missing data).
",0,1,[]
554,35591052,566,4704710,2015-05-17 18:27:43,2015-06-28 20:02:27,closed,Update docs,"Main push here is to get usage examples into docstrings/API docs, but plenty of assorted changes going into this bucket.

Related issues:
#559, #545, #546, #456, #442, #427, #423, #406, #45 (!)
",1,57,[]
555,35391243,563,4704710,2015-05-14 03:27:05,2015-05-15 04:33:49,closed,Fix spine trimming with inverted axes or empty ticks,"Closes #560 
",1,2,[]
556,35388228,562,4704710,2015-05-14 02:04:33,2015-05-15 04:33:42,closed,Fix bug in boxplot where some level had only missing data,"Cf #560 (don't close the root issue there though)
",1,1,[]
557,35388152,561,4704710,2015-05-14 02:02:17,2015-05-14 02:02:54,closed,Fix bug in boxplot where all observations in some group were missing,"Cf #560 (doesn't close the root issue there though)
",1,3,[]
558,35168623,554,4704710,2015-05-11 20:57:13,2015-05-12 02:08:24,closed,Changes to seaborn color handling,"Several changes wrapped up here:
### Introduction of `set_color_codes` function.

This function will reach into matplotlib and change the interpretation of matplotlib color codes (i.e. `""b""`, ""`g""`) to match the colors from the seaborn palettes. This makes it easier to generate attractive figures when calling matplotlib functions directly. As this is borderline abuse of the matplotlib API, this doesn't currently happen by default when importing seaborn. It's possible that will change in the future. You can also pass `color_codes=True` to `set()` or `set_palette()` to do this in one step.

Closes #293
### Overhaul of how the length of the palette is determined

This addresses a surprising issue that comes up when you do something like

``` python
len(color_palette(color_palette(""Blues"", 8)))
```

Now, the length of the current color cycle or input palette is respected. This makes the code messier and the behavior of the function a bit less predictable (imo), but it produces behavior that seems to be closer to what most users expect.

Closes #314 
Closes #452
### Addition of the `as_hex` method to color palette objects.

``` python
        >>> pal = sns.color_palette(""muted"", 3)
        >>> pal.as_hex()
        [u'#4878cf', u'#6acc65', u'#d65f5f', u'#b47cc7']
```

Also includes some documentation enhancements to the color functions.
",0,11,[]
559,35103706,553,4704710,2015-05-11 07:35:01,2020-06-09 03:31:28,closed,add lowess bootstrap/ci functionality,"I gave #552 a quick try.  Comments, suggestions, and critiques are welcome.  

Fitting the `lowess` model is pretty slow when `n_boots` is large but I guess that is expected.  

[Example ipython notebook](http://nbviewer.ipython.org/urls/dl.dropbox.com/s/22n3ksv2cny7pd9/seaborn_bootstrap_lowess_example.ipynb/%3Fdl%3D0)

Fixes #552 
",17,1,"['enhancement', 'algorithms']"
560,35086678,551,4704710,2015-05-10 18:38:23,2015-05-10 18:59:11,closed,Some changes to help heatmap and clustermap plot large matrices,"- Changed the default `linewidths` to 0 so that large matrices don't have a confusing white-out from the cell lines. Ideally this would have been accomplished with an adaptive linewidth, but for reasonably sized matrices the smallest lines that could be drawn still messed up the plots in, at least, the notebook. Closes #455.
- Added the ability to pass an integer to `xticklabels` and `yticklabels` which will plot every `n` label to help with larger matrices.
- Fixed a bug where specified ticklabel arrays were not being reordered to reflect the clustering in `clustermap`. Closes #550.
",0,1,[]
561,35075685,548,4704710,2015-05-10 01:19:17,2015-05-10 01:49:13,closed,Extend new categorical ordering rules to FacetGrid,"`FacetGrid` now uses `utils.categorical_order` to determine default order for the `row`, `color`, and `hue` variables. This means that all categorical ordering in seaborn should follow the same rules. Please open an issue if you run into something that doesn't.

Closes #361 
",1,2,[]
562,35073319,547,4704710,2015-05-09 21:38:40,2015-05-09 22:08:39,closed,Fix hue_order in PairGrid,"This fixes #472.

This also changes the default `hue_order` to use the same `category_order`
rules as elsewhere in seaborn (cf #361).
",0,2,[]
563,35071132,546,4704710,2015-05-09 18:48:58,2015-06-28 20:37:23,closed,Two fixes to avoid matplotlib osx backend issues,"This changes some things in `FacetGrid` and `heatmap` to avoid two common and very annoying issues caused by the the matplotlib osx backend.

I believe this is the root matplotlib issue: https://github.com/matplotlib/matplotlib/issues/2654

This has come up a few times in seaborn: #545, #408, #231, and elsewhere.

The fix to `FacetGrid` should, I believe, simply make that work. The fix to `heatmap` is a compromise where the exception that is raised when trying to determine if the ticklabels overlap gets caught and the labels are not rotated. That means that the plots might not look as good for everyone, but this feels better than the plot simply not working.

I haven't tested this extensively, but I seem to be able to plot using the OSX backend without running into these common issues.
",3,2,[]
564,34646315,541,4704710,2015-05-04 15:22:58,2015-05-04 15:47:03,closed,Add savefig method to JointGrid (closes #477),,0,1,[]
565,34609643,539,4704710,2015-05-03 23:14:03,2015-05-03 23:23:49,closed,Add a ceiling to the default number of bins used in distplot,"This should help avoid confusing issues with certain datasets that cause the reference rule to return ridiculous values. It also in general avoids drawing too many bars, which usually isn't helpful and just slows things down. The ceiling is not applied when a specific number of bins is requested.

Fixes #503 
",0,1,[]
566,34596228,538,4704710,2015-05-03 04:29:47,2015-05-03 22:44:05,closed,Modified boxplot to take into account flierprops and other props kwargs. ,"Fixes at least the props side of #536, by updating artists' properties after restyling if the props kwargs are there. Thus even if a props kwarg is present, it will only override seaborn's styling if that's actually what the user intends.

This does not fix the sym kwarg. The best way I could see to do so would involve importing _process_plot_format from matplotlib.axes._base, and I'm not sure if it's worth it, as flyerprops allows the same settings to be made in a more reliable way.
",6,3,[]
567,34596010,537,4704710,2015-05-03 03:57:47,2015-05-03 04:15:32,closed,Modified boxplot to take into account flierprops and other props kwargs.,"Fixes at least the props side of #536, by updating artists' properties after restyling if the props kwargs are there. Thus even if a props kwarg is present, it will only override seaborn's styling if that's actually what the user intends.

This does not fix the `sym` kwarg. The best way I could see to do so would involve importing `_process_plot_format` from `matplotlib.axes._base`, and I'm not sure if it's worth it, as flyerprops allows the same settings to be made in a more reliable way.
",1,1,[]
568,34218994,526,4704710,2015-04-27 22:58:39,2015-05-03 22:35:40,closed,NF: get_dataset_names (overdo: test_load_datasets),"Was exploring functionality and realized that couldn't figure out what datasets you have available for demos.
I guess ideally you should just provide some .json or whatever file which would list all the .csv with descriptions or may be even proper dataset descriptors if you really like to.
",1,1,[]
569,34137448,524,4704710,2015-04-27 03:30:03,2015-05-03 19:41:27,closed,Check if mask is empty before attempting rearange,"If mask is empty, rearranging fails
",3,1,[]
570,34124702,523,4704710,2015-04-26 15:25:39,2015-05-03 20:51:39,closed,Better handling of masks in heatmap and clustermap,"The main change here is to reorganize the mask in `clustermap` using the dendrograms, which fixes the bug in #512.

This also automatically adds cells with missing values in `heatmap` (and hence) `clustermap` to the mask matrix, thus addressing the issue in #375 (yikes that's old).

Also adds some helpful validation of the mask to make sure it's the right shape and that the semantic information matches that in `data` if a pandas object is used.
",0,4,[]
571,34015588,522,4704710,2015-04-24 03:10:23,2015-04-24 16:51:58,closed,Fix kwarg issue with plot_marginals,"Current version requires that the user pass `vertical=False` for the plotting to work correctly.
",7,1,[]
572,32927513,507,4704710,2015-04-09 06:06:55,2017-07-07 20:41:42,closed,Don't crash tsplot on TimeSeries of length <2.,"Fixes #506.
",8,1,[]
573,32809364,504,4704710,2015-04-07 21:50:44,2015-04-07 22:29:26,closed,heatmap doc type -- closes #487,,1,1,[]
574,32730014,500,4704710,2015-04-07 03:04:16,2017-07-07 20:48:28,closed,Allow combining logx with other regplot fitting options.,"A quick attempt at allowing the combination of the `logx` option with other `regplot` fitting options (`logistic`, `lowess` and `robust`).
",2,1,[]
575,32485131,497,4704710,2015-04-02 06:01:23,2015-04-03 15:31:15,closed,Skip annotating masked values in heatmaps,"There is an issue with heatmap annotations when when there are masked values in the data. Formatting fails for these masked values. 
Discussed in #375.

http://nbviewer.ipython.org/github/JWarmenhoven/ipython_notebooks/blob/master/Seaborn_heatmap_issue.ipynb
",5,8,[]
576,32381832,496,4704710,2015-04-01 01:21:20,2015-04-01 04:15:25,closed,Heatmap mouseover,"Closes #495 for real.
",8,5,[]
577,32035668,492,4704710,2015-03-26 16:36:08,2015-07-01 03:09:52,closed,Plot joint plot with Gaussian fits to histograms,"This is a minor enhancement that added ability to plot a joint plot with Gaussians fitted to each of the x and y histograms.  This is helpful in assessing normalcy of the spread of a particle cloud.

A trivially simple example can be found at 

http://nbviewer.ipython.org/gist/pwolfram/d0250d84aec03de1045d
",2,1,[]
578,31983331,490,4704710,2015-03-26 01:59:20,2015-03-26 02:52:08,closed,Add seaborn.crayons and crayon_palette to use Crayola colors,"When I was a kid we didn't even _have_ 120 Crayola colors.

``` python
sns.palplot(sns.crayon_palette([""Denim"", ""Fern"", ""Brick Red"",
                                ""Plum"", ""Sunglow"", ""Cerulean""]))
```

![screenshot 2015-03-25 18 58 54](https://cloud.githubusercontent.com/assets/315810/6839106/056c3362-d321-11e4-8707-6741f26bedc3.png)

Thanks to Karl Broman's [crayonJS](https://github.com/kbroman/crayonsJS) library for the idea.
",5,1,[]
579,31375156,474,4704710,2015-03-17 20:35:21,2017-07-07 20:41:57,closed,More flexible tsplot,"Hi there!

By these small modifications, `tsplot` covers a wider range of applications:
- an error estimator function can be passed (the default is `utils.ci`, as before)
- bootstrapping can be disabled by passing `n_boot = 0`

Cheers,
Eno
",1,2,[]
580,31102467,468,4704710,2015-03-13 06:16:16,2015-03-13 06:50:42,closed,Fix two FacetGrid problems,"Fix bug in accessing side marginal axes with `col_wrap`, closes #464
Raise a better error when `row` and `col_wrap` are used together, closes #465
",0,3,[]
581,30789088,466,4704710,2015-03-09 18:56:18,2015-03-13 05:53:23,closed,Unify categorical plots,"This is a follow-on to #410. The majority of the changes are in terms of the implementation of things, but there are a few important new features and changes.

In short, the categorical distribution plots (`boxplot`, `violinplot` and `stripplot`) have been unified with the categorical estimation plots (`barplot`, `pointplot`, and `countplot`). From the user perspective, that means they all share a basic API. From the developer perspective, it means that as many common operations were abstracted out into the the underlying `_CategoricalPlotter` and `_CategoricalStatPlotter` classes. That means adding additional plot kinds in the future should be easier and more robust.
## Demonstration of major new features

The main highlight in terms of new functionality is that `barplot` and `pointplot` can now draw horizontally:

``` python
sns.barplot(x=""tip"", y=""day"", data=tips)
```

![seaborn-barplot-4](https://cloud.githubusercontent.com/assets/315810/6561790/25e05cd6-c651-11e4-99d7-97d5dc62d7fc.png)

Additionally, `factorplot` can use any of the categorical plot kinds:

``` python
sns.factorplot(x=""age"", y=""embark_town"", hue=""sex"", row=""class"",
               data=titanic[titanic.embark_town.notnull()],
               size=2, aspect=3.5, palette=""Set3"",
               kind=""violin"", split=True, cut=0, bw=.2)
```

![seaborn-factorplot-6](https://cloud.githubusercontent.com/assets/315810/6561809/4ac5755e-c651-11e4-976b-8a7d3529c6e6.png)
## API changes and new features
- The major API change in `{bar,point,factor}_plot` is that the `x_order` parameter has been renamed to `order` to reflect the fact that the categorical variable can be on the x or y axis.
- The ability to draw counts by passing only an `x` variable to `barplot` has been removed, but the new `countplot` function has been added to retain this functionality.
- In all places within the categorical plots, the representation and order of categorical levels is inferred from the data with an attempt to use pandas Categorical information if it exists. Otherwise, the default is now to use the order of levels as they appear in the dataframe rather than sorting by default. However, this behavior has not _yet_ been changed in `FacetGrid`. That will likely be a different PR.
- Two parameters have been removed from the estimation plots (with attempts to catch and warn): `hline` and `dropna`
- This PR adds a compatibility layer for some of the API breaks in #410 
- Added the `scale` parameter to pointplot, which scales the point size and linewidths by a single factor.
- Added the `errcolor` parameter to `barplot` and also now pass extra `**kwargs` down to `plt.bar`.
- Added the `ax` property to `FacetGrid`, which will give access to the main Axes in the case where there are no `row` or `col` facets.
- Added a more informative exception when string variables are named that don't appear in `data`.
- Fixed how the proxy artist used for generating the `violinplot` and `boxplot` legends is drawn to avoid errors when the first category has no data for a hue level.
- There are longer narrative explanations in the docstrings for all of the categorical plotting functions and copious examples for that will be executed and shown in the online API docs.
## Linked issues:

This PR addresses several issues: #361, #416, #425, #435, #445, #448 
## Outstanding issues
- [x] Update the release notes
- [x] Update and reorganize the API docs homepage
- [x] `countplot` needs some docstring examples
- [ ] Update the tutorials (may get punted on)
",5,48,[]
582,30594950,463,4704710,2015-03-05 20:59:12,2015-03-05 21:19:32,closed,Use IPython 2.X for testing,"There seems to be problems with IPython 3 and the testing workflow right now.

https://github.com/mwaskom/seaborn/pull/462#issuecomment-77439356
",1,1,[]
583,30589839,462,4704710,2015-03-05 19:56:53,2015-03-09 20:36:57,closed,Add gridspec_kws to FacetGrid,"I force-pushed #436 and now I can't reopen that issue. 

Anyway, I thought about this some more and here's a stab at handling old versions of MPL and instances when `col_wrap` is used. the TODO list still applies:
- [x] testing
- [x] docstring
- [x] documentation
- [x] refine the warning messages
- [x] clear up PEP8/linting stuff

Here's a rough example:

``` python
from io import StringIO

import pandas
import matplotlib.pyplot as plt
import seaborn


datafile = StringIO(""""""\
location,date,parameter,matrix,units,res
SHP-99-31C,2007-10-17 00:00:00,Iron,WG,ug/L,44000.0
SHP-99-31C,2007-10-17 00:00:00,Arsenic,WG,ug/L,292.1
SHP-99-31C,2009-10-01 00:00:00,Oxidation Reduction Potential,WG,mV,-84.0
SHP-99-31C,2009-10-01 00:00:00,pH,WG,SU,6.57
SHP-99-31C,2009-10-01 00:00:00,Arsenic,WG,ug/L,223.5
SHP-99-31C,2009-10-01 00:00:00,Iron,WG,ug/L,26000.0
SHP-99-31C,2010-10-13 00:00:00,Arsenic,WG,ug/L,239.4
SHP-99-31C,2010-10-13 00:00:00,Iron,WG,ug/L,22000.0
SHP-99-31C,2010-10-13 00:00:00,pH,WG,SU,6.46
SHP-99-31C,2010-10-13 00:00:00,Oxidation Reduction Potential,WG,mV,-80.0
SHP-99-31C,2011-10-05 00:00:00,Iron,WG,ug/L,22000.0
SHP-99-31C,2011-10-05 00:00:00,Arsenic,WG,ug/L,244.0
SHP-99-31C,2011-10-05 00:00:00,Oxidation Reduction Potential,WG,mV,-59.2
SHP-99-31C,2011-10-05 00:00:00,pH,WG,SU,6.5
SHP-99-31C,2012-10-18 00:00:00,Arsenic,WG,ug/L,206.4
SHP-99-31C,2012-10-18 00:00:00,Iron,WG,ug/L,17000.0
SHP-99-31C,2012-10-18 00:00:00,pH,WG,SU,6.75
SHP-99-31C,2012-10-18 00:00:00,Oxidation Reduction Potential,WG,mV,-117.1
SHP-99-31C,2013-10-23 00:00:00,Oxidation Reduction Potential,WG,mV,-95.7
SHP-99-31C,2013-10-23 00:00:00,pH,WG,SU,6.7
"""""")
df = pandas.read_csv(datafile, parse_dates=['date'])
seaborn.set_style('ticks')
fg = seaborn.FacetGrid(
    data=df, row='units', row_order=['ug/L', 'mV', 'SU'],
    hue='parameter', hue_kws={""marker"": [""o"", ""s"", '^', 'd']},
    sharey=False, size=2, aspect=4, margin_titles=True,
    gridspec_kws={'height_ratios': [3.5, 1, 1]}  # <---- right here
)
fg.map(plt.plot, 'date', 'res', linestyle='--', marker='o', clip_on=False)
fg.axes.flat[0].set_yscale('log')
fg.axes.flat[-1].set_ylim(bottom=4.75, top=9)
```

![test](https://cloud.githubusercontent.com/assets/1163939/5986026/39fb4776-a8a1-11e4-988a-38e9728249d1.png)
",10,1,[]
584,29954363,457,4704710,2015-02-25 01:42:32,2015-02-25 03:41:08,closed,Show a proper colorbar when as_cmap is True in the palette widgets,"![screenshot 2015-02-24 17 42 16](https://cloud.githubusercontent.com/assets/315810/6363344/8046db8c-bc4c-11e4-9ada-23c176849d41.png)
",0,2,[]
585,29505053,454,4704710,2015-02-18 06:59:28,2015-03-01 19:37:40,closed,"WIP: Add docs, examples re: mappable functions","Hey -- here's that documentation about writing custom mappable functions. Curious what you think about a) its content, b) its placement in the existing `FacetGrid` notebook (well, I guess that's everything).

Also, you're working some weird voodoo on the notebooks with the `In[null]` and whatnot. I need to figure that out.
",2,1,['docs']
586,29103752,447,4704710,2015-02-11 16:12:21,2015-02-11 18:49:28,closed,Do not attempt ordering unless it's needed,"Hi,

The point of this PR is to start a discussion rather than to introduce a change into the codebase.

I spotted an issue when mixing object types in a data frame. Here is an example:

```
df = pd.DataFrame({'name': [1] * 5 + ['b'] * 5 + ['c'] * 5,
                    'rep': [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5],
                    'score' : [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]})
sns.factorplot(x='name', y='score', hue='rep', data=df, kind='bar');
```

This fails because the `name`s cannot be sorted- which  think is reasonable. However, the same call fails when providing an explicit ordering like so:

```
df = pd.DataFrame({'name': [1] * 5 + ['b'] * 5 + ['c'] * 5,
                    'rep': [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5],
                    'score' : [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]})
xorder = 1, 'b', 'c'
sns.factorplot(x='name', y='score', hue='rep', data=df, kind='bar', x_order=xorder);
```

The problem seems to be that the unique values are sorted even though there isn't a need for that, as an explicit ordering is provided. I first tried to fixes the crash as shown in the diff. 

On second thought, this doesn't really resolve the underlying problem (`int` and `string` cannot be sorted).  Here is an example of why this PR isn't such a great idea:

```
df = pd.DataFrame({
    'name': ['a'] * 5 + ['b'] * 5 + ['c'] * 5,
    'rep': [1, 2, 3, 4, 'avg', 1, 2, 3, 4, 'avg', 1, 2, 3, 4, 'avg'],
    'score': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
})
order = 'avg', 4, 3, 2, 1
sns.factorplot(x='name', y='score', hue='rep',
               data=df, kind='bar', hue_order=order);
```

Note some bits are missing from the legend. I had a look and it seems this is because `matplotlib` converts all labels to str, so `_update_legend_data` in `axisgrid.py` builds the wrong dict (keys are of type `str`, but need to be `int` to match the ordering provided). 

I'm inclined to say the correct solution here is to document this behaviour and tell the user not to do what I've done, or to convert all names to string first.

![tmp](https://cloud.githubusercontent.com/assets/937114/6149372/53fbccbe-b200-11e4-8c0e-743b4ecc36eb.png)
",1,1,[]
587,29082595,446,4704710,2015-02-11 11:07:30,2015-02-11 15:45:54,closed,Fix broken reference in dataset_exploration.ipynb,"Replaced `:link:` with `:ref:` in [tutorial/dataset_exploration](http://web.stanford.edu/~mwaskom/software/seaborn/tutorial/dataset_exploration.html)

| Old | New |
| --- | --- |
| ![Before](https://cloud.githubusercontent.com/assets/4936897/6145706/094e6926-b1e5-11e4-8b5f-aa9de9744773.png) | ![After](https://cloud.githubusercontent.com/assets/4936897/6145713/1b9864ce-b1e5-11e4-9311-070c9e458aa1.png) |
",1,1,[]
588,28902054,441,4704710,2015-02-09 07:57:43,2015-10-21 14:49:22,closed,Fix clustermap annotation,"I added some changes to the generation of the clustermap axes, which now avoids excessive whitespace if any of the two dendrograms are omitted. Additionally, I added to extra parameters to the clustermap function, col_colors_ratio and row_colors_ratio, which essentially sets a relative size for the side_color axes in the generation of the overall grid. I also added a small update to include annotation from the index of a passed dataframe containing side_colors for rows and/or columns.

See issue https://github.com/mwaskom/seaborn/issues/437 for more details.
",18,13,['enhancement']
589,28713866,438,4704710,2015-02-05 10:34:21,2015-12-13 01:26:57,closed,Changed what qualifies as a 'numeric' type in PairGrid,"Instead of classing everything which can be converted
to a float as 'numeric' we now check the dtype.kind
attribute.

int, unsigned int, float and complex are numeric, but
bool has stopped being classed as numeric type.

Try out the following:

```
df = pd.DataFrame(dict(A=np.arange(3),
                       B=np.random.randn(3),
                       C=['foo','bar','bah'],
                       D=pd.Timestamp('20130101'),
                       E=[False, True, False]
                       ))
for (name,col) in df.iteritems():
    print name, col.dtype.kind,
    try:
        col.astype(np.float)
        print ""numeric""
    except:
        print ""not numeric""
```

With the old definition this prints:

``````
A i numeric
B f numeric
C O not numeric
D M not numeric
E b numeric```
``````

I am not sure if a bool should be a numeric or not. I propose this change as I often use bools to specify a category and then have to specify all columns by hand because `sns.pairplot(dataframe, hue=""boolean_col"")` classes the column boolean_col as numeric and will an extra row/col to the pair grid for that variable.

Maybe the better fix would be to remove the variable used for `hue` from the list of columns used in the pair plot?

I can not decide if I think a boolean should be numeric or not. In the case of `pairplot()` it seems you would not expect it to be ""numeric"" though.

Thoughts?
",8,2,[]
590,28405958,436,4704710,2015-01-31 01:00:11,2015-01-31 02:04:20,closed,WIP: add gridspec_kws to FacetGrid,"Just a quick idea to add a `gridspec_kws` to FactGrid.

Needs:
- [ ] testing
- [ ] docstring
- [ ] documentation
",5,1,[]
591,28190655,434,4704710,2015-01-28 12:46:46,2015-01-28 20:42:48,closed,Fixed inconsistent plurals ('sticks'->'stick'). ,"Also added documention default setting ('box')
",3,1,[]
592,27898787,431,4704710,2015-01-23 03:26:47,2015-01-24 21:43:24,closed,Fix bug in Grid legends,"Previously, `add_legend` was passing a list of handles for the plots that had been drawn and the list of all hue levels to the matplotlib legend code. Because matplotlib just zipped these and didn't raise
when they were of differenet lengths, this meant that sometimes the right colors but wrong labels were used.

This isn't globablly optimal, because I think the behavior we want is to show the hue levels that could have existed in the plot (because they are in `hue_order` but don't, because they weren't in the DataFrame.

However, doing that is a bit tricky because we'll have to make a proxy artist, you can't just pass `None` or something similar as a handle.

This fixes the bug identified in https://github.com/mwaskom/seaborn/issues/361#issuecomment-71140105. @shoyer, this does make the labels correct, but doesn't address the broader point that all levels of the variable should show up in the legend even when they're not in the plot data. Opening now but holding off on merge until I can think a little bit about what could be done to get a ""full legend"".

Thanks for the complete test case :+1:

```
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

def cut_diverging(array, n=9):
    mag = max(-array.min(), array.max())
    return pd.cut(array, np.linspace(-mag, mag, num=(n + 1)))

rs = np.random.RandomState(0)
df = pd.DataFrame({'x': rs.rand(100),
                   'y': rs.rand(100),
                   'z': 1 + rs.randn(100)})
df['z_cat'] = cut_diverging(df.z, 9)

categories = df.z_cat.cat.categories
palette = sns.color_palette('RdBu_r', 9)

g = sns.FacetGrid(df, hue='z_cat', hue_order=categories,
                  palette=palette, aspect=1.3, size=3)
g.map(plt.scatter, 'x', 'y', s=50)
g.add_legend()
```

![shoyer](https://cloud.githubusercontent.com/assets/315810/5869340/8bed01ae-a26c-11e4-89d8-5bfa936d6202.png)
",8,6,[]
593,27621205,422,4704710,2015-01-19 17:03:51,2015-01-19 17:14:57,closed,Import selectively from statsmodels,"This is intended to address https://github.com/statsmodels/statsmodels/issues/2184, an issue that is breaking the tests and causing problems for people.

This closes #418.

It also should make imports faster in the future, because importing
all of statmodels was overkill for most purposes. Closes #287.
",0,1,[]
594,27135200,415,4704710,2015-01-09 22:42:59,2015-01-10 19:11:33,closed,fixing issue where setting vmin/vmax affects row/col_colors,"When setting vmin/vmax and row/col_colors in clustermap, the row/col_colors are affected (I set vmax=0.5 here):
![ipython](https://cloud.githubusercontent.com/assets/381464/5688560/9285c622-980d-11e4-983f-12a668c42796.png)

This pull request should fix that.
",1,1,[]
595,26652452,410,4704710,2014-12-29 17:12:15,2015-01-22 05:30:02,closed,Overhaul of categorical distribution plots,"**TLDR:** The boxplot and violinplot APIs are changing, for the better, but in a way that will be mildly disruptive. There is also a new function, `stripplot`.

There's some examples below, but to really see these functions in action, check out the new API docs that take advantage of automated figure collection for docstring examples:

[`boxplot`](http://stanford.edu/~mwaskom/software/seaborn-dev/generated/seaborn.boxplot.html) | [`violinplot`](http://stanford.edu/~mwaskom/software/seaborn-dev/generated/seaborn.violinplot.html) | [`stripplot`](http://stanford.edu/~mwaskom/software/seaborn-dev/generated/seaborn.stripplot.html)
### Changes/enhancements to `boxplot` and `violinplot`

This PR updates and unifies the API for boxplot and violinplot. Both functions maintain backwards-compatibility in terms of the kind of data they accept, but the syntax has changed. These functions are now invoked with `x`, `y` parameters that are either vectors of data or names of variables in a long-form DataFrame passed to the new `data` parameter. You can still pass wide-form DataFrames or arrays to `data`, but it is no longer the first positional argument.

In other words instead of doing

``` python
sns.boxplot(tips.total_bill, groupby=tips.day)
```

You would now do

``` python
sns.boxplot(""day"", ""total_bill"", data=tips)
```

![seaborn-boxplot-2](https://cloud.githubusercontent.com/assets/315810/5806859/2c528864-9fd2-11e4-8ee9-7e1af8a59dfe.png)

Existing code that uses these functions will probably break, but can be easily updated. I don't like these kind of disruptive API changes, but in this case the new API has a lot of virtues and creating a smoother upgrade path would have been too complicated to reasonably handle.

The upshot of this is that both functions now work seamlessly in context of a FacetGrid. Additionally, by using named variables and a `data` object, it's much easier to apply transformations to the data in the body of the seaborn call. It also just generally decreases the cognitive overhead of remembering that the API for boxplot/violinplot is different from that for regplot and friends.

To sweeten this change, there are a variety of other enhancements (and a few other API breaks):
-  Added a `hue` argument to boxplot and  violinplot, which allows for nested grouping the plot elements by a third categorical variable. For violinplot, this nesting can also be accomplished by splitting the violins when there are two levels of the `hue` variable. To make this functionality feasible, the ability to specify where the plots will be draw in data coordinates has been removed. These plots now are drawn at set positions, like (and identical to) barplot and pointplot.

``` python
sns.violinplot(""day"", ""total_bill"", ""smoker"", data=tips, palette=""Set1"", split=True)
```

![seaborn-violinplot-4](https://cloud.githubusercontent.com/assets/315810/5806924/9996e0be-9fd2-11e4-98c0-5238b7d58e6e.png)
- These plots now accept ordered categorical-type variables as input, and infer the orientation of the plot from which argument gets the category. Additionally, the order of the categories will determine the order of the plot elements:

``` python
sns.violinplot(""orbital_period"", ""method"", data=planets.query(""orbital_period < 1000""))
```

![seaborn-violinplot-10](https://cloud.githubusercontent.com/assets/315810/5807585/a414a15a-9fd9-11e4-9e11-6015bbf35a13.png)
-   Added a `palette` parameter to boxplot/violinplot. The `color` parameter still exists, but no longer does double-duty in accepting the name of a seaborn palette. `palette` supersedes `color` so that it can be used with a FacetGrid.
-   Added the `scale` and `scale_hue` parameters to violinplot. These control how the width of the violins are scaled. The default is `area`, which is different from how the violins used to be drawn. Use `scale='width'` to get the old behavior. You can also use `scale=""count""` to scale by the number of observations in each bin.
-   Used a different style for the `box` kind of interior plot in violinplot, which shows the whisker range in addition to the quartiles. Use `inner='quartile'` to get the old style.
### New `stripplot` function

This PR also introduces the stripplot function, which draws a scatterplot where one of the variables is categorical. This plot has the same API as boxplot and violinplot. It is useful both on its own and when composed with one of these other plot kinds to show both the observations and underlying distribution.

``` python
sns.violinplot(""total_bill"", ""day"", data=tips, inner=None)
sns.stripplot(""total_bill"", ""day"", data=tips, jitter=True)
```

![seaborn-stripplot-10](https://cloud.githubusercontent.com/assets/315810/5806951/f10d5738-9fd2-11e4-8879-03fe87f334d5.png)
### Backend details

For the aficionados, this PR involves a complete rewrite of the code for these functions. It's much better organized, abstracted, and tested. That means it will be easier to keep these functions on a common API going forward, and to add enhancements with more confidence that they won't lead to regressions.

Next up will probably be to bring the `barplot`/`pointplot` code into this framework, which in some ways is better and more robust than what those run on. Also coming soon.... `swarmplot`.
",7,44,"['enhancement', 'plots']"
596,26565083,409,4704710,2014-12-24 17:27:33,2019-09-05 18:31:37,closed,ENH: Pairwise dropna in PairGrid. Closes #407.,"PR for #407.
",10,8,[]
597,26421011,405,4704710,2014-12-20 21:20:50,2014-12-20 21:28:33,closed,Add line_kws to residplot,"Closes #388
",0,1,[]
598,26346022,403,4704710,2014-12-19 01:37:11,2014-12-20 21:02:30,closed,stop _freedman_diaconis_bins returning inf,"This stops _freedman_diaconis_bins from returning inf when iqr of the data returns 0

see https://github.com/mwaskom/seaborn/issues/402 for details

Not sure if this is the best solution, I am definitely open to suggestions.
It does however stop seaborn from exploding ;-)
",2,1,[]
599,26159755,400,4704710,2014-12-16 16:36:29,2015-05-06 20:46:55,closed,Add hue to JointGrid,"This PR adds the hue option to JointGrid, enabling the representation of mixture models.

I'm totally unaware of the internals of seaborn, so I apologize in the case of hard-coded features (such as colors). 
",3,4,[]
600,25861294,397,4704710,2014-12-10 22:33:25,2014-12-24 15:04:05,closed,Redirect matplotlib config directory to avoid issues with easy install sanboxing,"Importing matplotlib at install time leads to the following error for me:

```
Getting distribution for 'seaborn==0.5.1'.
error: SandboxViolation: os.open('/Users/dimazest/.matplotlib/tmpovybswqd', 2818, 384) {}

The package setup script has attempted to modify files on your system
that are not within the EasyInstall build area, and has been aborted.

This package cannot be safely installed by EasyInstall, and may not
support alternate installation locations even if you run its setup
script by hand.  Please inform the package's author and the EasyInstall
maintainers to find out if a fix or workaround is available.
An error occurred when trying to install seaborn 0.5.1. Look above this message for any errors that were output by easy_install.
While:
  Updating fowler.corpora.
  Getting distribution for 'seaborn==0.5.1'.
Error: Couldn't install: seaborn 0.5.1
```

this fix is borrowed from https://code.google.com/p/mplh5canvas/source/diff?spec=svn32&r=32&format=side&path=/trunk/setup.py&old_path=/trunk/setup.py&old=29
",2,1,[]
601,25159683,385,4704710,2014-11-27 16:03:11,2014-12-05 09:14:14,closed,Fix missing shade label in kdeplot,"Here's a small fix:
The `_univariate_kdeplot` function doesn't set the shade label, which causes problems down the line when using labels for automated grouping. An example of such a problem is provided in [this notebook](http://nbviewer.ipython.org/urls/dl.dropbox.com/s/28s4ip4g63opmqi/Issue-seaborn-mpld3-legend.ipynb?dl=0). 
It uses `mpld3` (latest development version) to create an interactive legend, which toggles the transparency of plot elements by clicking on the corresponding legend item. The function `connect_sns` in the notebook relies on labels to connect plot elements to legend items, and clearly does something strange since the shade does not have a label.
",6,2,[]
602,25032150,381,4704710,2014-11-25 19:07:41,2014-11-25 19:49:46,closed,clustermap: side colors should ignore custom centering,"Currently the `center` keyword is passed to the side color heatmaps. This can cause some unexpected formatting of the side colors. Since `center` is defining a custom colormap and should only affect the heatmap, best to pop it off.

For example. using the `flight_rect` example from the documentation:

```
sns.clustermap(flights_rect, col_colors=col_colors, row_colors=row_colors)
```

![fig1](https://cloud.githubusercontent.com/assets/755664/5189369/49033082-74ab-11e4-8314-3db6d837d91f.png)

```
sns.clustermap(flights_rect, center=flights_rect.loc[""January"", 1955],
                    col_colors=col_colors, row_colors=row_colors)
```

![fig2](https://cloud.githubusercontent.com/assets/755664/5189372/4d91403a-74ab-11e4-93a4-e334d2d7cfc0.png)
",1,1,[]
603,24941209,380,4704710,2014-11-24 15:49:41,2014-11-24 16:34:19,closed,"Correctly show side colors when {row,col}_cluster=False","Addresses https://github.com/mwaskom/seaborn/issues/366#issuecomment-64209205

```
import seaborn as sns
import numpy as np

data = np.random.randn(20).reshape(4,5)

row_colors = sns.color_palette(n_colors=data.shape[0])
col_colors = sns.color_palette(n_colors=data.shape[1])

sns.clustermap(data, row_colors=row_colors, col_colors=col_colors, col_cluster=False, row_cluster=False)
```

![image](https://cloud.githubusercontent.com/assets/806256/5167623/80c64eee-73c7-11e4-84cf-327e24739e5c.png)
",2,2,[]
604,24909302,379,4704710,2014-11-24 00:23:38,2014-12-02 04:41:33,closed,List the files that go in the source distribution,"This PR addreses the problem in #378 
MANIFEST.in contains the list of files to be distributed. Initially MANIFEST.in contains all the files in the repository, with the exception of the dotfiles. If a file is not intended to be distributed, it's enough to remove it from MANIFEST.in
",3,1,[]
605,24857531,377,4704710,2014-11-21 18:03:52,2014-11-22 17:43:15,closed,Implement workaround for matplotlib 1.4.2 bug,"This is an unpleasant hack, but this is also a nasty bug and matplotlib apparently won't be releasing a fix for a few months: https://github.com/matplotlib/matplotlib/pull/3699

This closes #344
",0,1,['themes']
606,24804029,376,4704710,2014-11-20 22:36:46,2014-11-22 19:30:24,closed,Clustermap nested side colors,"Added functionality to allow for nested side colors, for figures like this:

![image](https://cloud.githubusercontent.com/assets/806256/5134388/9a054dea-70c2-11e4-8f10-60546bec6906.png)

There's a test too :)
Let me know if there's anything else I can do!
",0,3,[]
607,24774892,374,4704710,2014-11-20 15:53:24,2014-11-22 18:41:53,closed,Heatmap missing fixes,"This snippet shows a bug in the current implementation of heatmaps over masked arrays

``` python
import seaborn as sns
import numpy as np
import pandas as pd

cmap = sns.cubehelix_palette(light=.95, as_cmap=True)
cmap.set_bad('k', 1.)  # masked elements are black

df = pd.DataFrame(data={'a': [1, 1, 1],
                        'b': [2, np.nan, 2],
                        'c': [3, 3, np.nan]})

sns.heatmap(df, mask=df.isnull(), cmap=cmap)
```

With the current implementation, we get this inverted mask:

![mask-not-reversed](https://cloud.githubusercontent.com/assets/642252/5127578/60141c98-70d5-11e4-89a1-e6094f60ad3c.png)

These commits fix it, so we get the expected heatmap

![mask-properlly-reversed](https://cloud.githubusercontent.com/assets/642252/5127589/75f1e040-70d5-11e4-9034-83b08b66039b.png)

They also add a comment for the _mask_ parameter to heatmap.

A different issue is that, if no mask is passed, missing values seem to be represented by the color of the minimum, which arguably is not correct. I will open an issue to discuss.
",4,4,[]
608,24660726,369,4704710,2014-11-19 01:57:08,2014-11-19 02:04:41,closed,Fix violinplot with multiple identical values,"Closes #368
",0,1,[]
609,24389960,363,4704710,2014-11-13 18:37:38,2014-11-13 19:05:52,closed,Fix bug in colormap limit inference when input has nans,"Closes #336
",0,1,[]
610,24197766,359,4704710,2014-11-11 04:22:37,2014-11-11 04:32:15,closed,"Change clustermap and dendrogram default methods to ""average""","Also removed default arguments from internal plotting functions
so that it's easier to make changes without missing things in the
future.

Closes #356
",0,1,[]
611,24020762,354,4704710,2014-11-06 23:06:14,2014-11-06 23:15:55,closed,Finalize clustermap,"This closes #332 with a few tweaks.
",1,49,[]
612,23427919,345,4704710,2014-10-28 00:53:13,2014-10-28 01:02:11,closed,Fix failing matplotlib rc test,"At some point matplotlib started forcing the font.family parameter to be
a list, but they accept strings (doing the conversion internally), so
everthing was working but the rc parameter validation failed. This updated
the style definitions to be in line with the matplotlib spec.
",0,1,['testing']
613,23322154,343,4704710,2014-10-24 20:22:39,2014-12-03 16:26:02,closed,Set rcmod.py to create translucent legend frames,"As of 1.4.1, matplotlib includes a key for the default transparency of
legend frames: ""legend.framealpha"". _Personally,_ I prefer the look of
this when a plot doesn't have much free space for the legend to avoid
overlap with data, but I leave it to others to accept or not. I also
don't know how to best handle compatibility with earlier versions of
mpl.

Here's a contrived example of the current behavior vs. what this change would look like:

Default settings:
![default](https://cloud.githubusercontent.com/assets/6894112/4775769/62e6fb9a-5bbb-11e4-90c4-25e038102a97.png)

Frame on, Alpha=0.7
![framealpha](https://cloud.githubusercontent.com/assets/6894112/4775771/68da6aa0-5bbb-11e4-9800-4c4d21f55fdb.png)
",6,3,[]
614,23261243,341,4704710,2014-10-23 21:31:04,2015-07-21 22:09:07,closed,Letter Value plots,"I have added a letter value plot to the distributions module along with several helper functions.
",2,19,[]
615,23035672,337,4704710,2014-10-20 18:45:58,2014-10-20 18:59:15,closed,Don't compute significance for non-default corrplot methods,,0,1,[]
616,22895499,332,4704710,2014-10-16 23:52:46,2014-11-06 23:15:55,closed,Refactor of clusteredheatmap,"Here you go! Thanks for being patient with my awful code from before. This is a complete refactoring, so the dendrograms and linkage matrices are getting calculated separately, and `DendrogramGrid` is completely naive to all calculations.

So far this just has basic functionality, I removed some concepts for simplicity:
- `data_na_ok` or masked data, allowing for NAs.
- `{row,col}_labelsize`: fontsize of the row and column labels
- `fig` : user-provided fig. user can provide just `figsize`
- `title`, `title_fontsize`: user can do this on their own using the `DendrogramGrid` instance
- Multiple levels of color labels for rows and columns

If anyone is willing and able to figure out how to make these work elegantly, please do! I couldn't figure it out.

Other things of note:
- Added the feature of user-specified `{x,y}ticklabels` to `heatmap` and `_HeatMapper`.
- Moved all `{col,row}_kws` into explicit keyword arguments, e.g. `{col,row}_linkage` because I felt they were too hidden, and it's not like there's another function you can refer to, to see the possible inputs (like you can with `joint_kws` in `jointgrid`)
- Naming is fluid. I just came up with names that made sense on the spot, and am open to more explicit or understandable naming.
- I haven't completely tested all the combinations yet (!!) so any help here is very much appreciated

Todos (copied from https://github.com/mwaskom/seaborn/pull/325):
- [x] Tests
- [x] Tutorial documentation
- [x] Gallery example(s)
- [x] Release notes
",56,39,[]
617,22426390,325,4704710,2014-10-08 14:21:23,2014-10-11 22:45:17,closed,Add heatmap function for plotting rectangular data,"This builds off of @olgabot's work in #324. I refactored the big function into a Plotter object that is easier to test, added some functionality (including annotating each cell with the numeric value), and fixed a couple of bugs.

Here are the two new examples in the docs:

``` python
import seaborn as sns
sns.set()

flights_long = sns.load_dataset(""flights"")
flights = flights_long.pivot(""month"", ""year"", ""passengers"")
flights = flights.reindex(flights_long.iloc[:12].month)

sns.heatmap(flights, annot=True, fmt=""d"")
```

![heatmap_annotation](https://cloud.githubusercontent.com/assets/315810/4604365/5ba061ce-5197-11e4-9347-468fe9f55336.png)

``` python
import seaborn as sns
import matplotlib.pyplot as plt
sns.set(context=""paper"", font=""monospace"")

df = sns.load_dataset(""brain_networks"", header=[0, 1, 2], index_col=0)
corrmat = df.corr()

f, ax = plt.subplots(figsize=(12, 9))
sns.heatmap(corrmat, vmax=.8, linewidths=0, square=True)


networks = corrmat.columns.get_level_values(""network"").astype(int).values

start, end = ax.get_ylim()
rect_kws = dict(facecolor=""none"", edgecolor="".2"",
                linewidth=1.5, capstyle=""projecting"")

for n in range(1, 18):
    n_nodes = (networks == n).sum()
    rect = plt.Rectangle((start, end), n_nodes, -n_nodes, **rect_kws)                         
    start += n_nodes
    end -= n_nodes
    ax.add_artist(rect)

f.tight_layout()
```

![network_correlations](https://cloud.githubusercontent.com/assets/315810/4604366/718f63fe-5197-11e4-9703-118a6e86e9fe.png)
### Todo
- [x] Tests
- [x] Tutorial documentation
- [x] Gallery example(s)
- [x] Release notes
",7,20,[]
618,22360649,324,4704710,2014-10-07 15:26:00,2014-10-11 22:45:19,closed,heatmap/heatplot,"Initial work on heatmap

What's not supported: the `pcolormesh(X, Y, C)` arguments. So far this just works with a single `data` `pandas.DataFrame` input.
",2,5,[]
619,22256869,323,4704710,2014-10-05 17:46:52,2014-10-05 21:52:26,closed,Add hue_kws and markers to axis grids,"This lets the user map the hue variable with arbitrary additional plot
aesthetics in `FacetGrid`/`PairPlot`, and it provides an easy interface to map the
scatterplot marker when using `lmplot`/`pairplot`.

``` python
sns.lmplot(""total_bill"", ""tip"", tips, hue=""smoker"", markers=[""x"", ""o""], scatter_kws={""s"": 50})
```

![markers](https://cloud.githubusercontent.com/assets/315810/4519351/8e38aa2c-4cb7-11e4-9747-8d7d8f89379b.png)

``` python
g = sns.FacetGrid(attention, col=""subject"", col_wrap=5, hue=""attention"", 
                             hue_kws={""marker"": [""s"", ""D""], ""linestyle"": [""-"", ""--""],},
                             aspect=.75)
g.map(plt.plot, ""solutions"", ""score"", ms=10, lw=3)
g.set(xlim=(.5, 3.5), xticks=[1, 2, 3], ylim=[0, 10])
```

![facetgrid](https://cloud.githubusercontent.com/assets/315810/4520107/4c394a96-4cda-11e4-8df7-5205c8f69b9f.png)

``` python
sns.pairplot(iris, ""species"", markers=[""o"", ""D"", ""s""], size=2)
```

![pairgrid](https://cloud.githubusercontent.com/assets/315810/4519477/f685ea62-4cbd-11e4-9595-e357936fc213.png)

This also has a small enhancement to change the marker params depending on the
kind of marker so that line-based glyphs are not invisible (which would
otherwise be the case with the default seaborn rc Params). This is only in `lmplot`, pending the introduction of `sns.scatterplot`.

Closes #310
",2,4,"['enhancement', 'plots']"
620,22251625,320,4704710,2014-10-05 05:53:09,2014-10-12 22:20:01,closed,API: add subplot_kws to FacetGrid,"Fixes #311.

Here is my example of an actual use case, for making maps with cartopy:

``` python
%matplotlib inline

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

import cartopy.crs
import cartopy.feature

rs = np.random.RandomState(1000)

lat = -90 + 180 * rs.rand(700)
lon = 360 * rs.rand(700)
cat = ['A'] * 100 + ['B'] * 200 + ['C'] * 400 

df = pd.DataFrame({'lat': lat, 'lon': lon, 'cat': cat})

g = sns.FacetGrid(df, col=""cat"", hue=""cat"", subplot_kws=dict(projection=cartopy.crs.Orthographic()))
g.map(plt.scatter, ""lon"", ""lat"", s=5, transform=cartopy.crs.PlateCarree())
for ax in g.axes.ravel():
    ax.add_feature(cartopy.feature.COASTLINE)
    ax.set_global()
```

![image](https://cloud.githubusercontent.com/assets/1217238/4517761/bca01544-4c53-11e4-8c0f-d111961b4185.png)

Maybe we should add an example like this to the documentation?
",8,4,"['enhancement', 'plots']"
621,21939453,308,4704710,2014-09-29 14:49:37,2014-09-29 18:53:42,closed,API: Accept Series for kdeplot,"This is useful when your using `FacetGrid`, and don't have direct control over what exactly gets passed in.

```
In [1]: tips = sns.load_dataset(""tips"")

In [5]: g = sns.FacetGrid(tips, row='sex', col='smoker')

In [6]: g.map(sns.kdeplot, ""total_bill"", ""tip"")
Out[6]: <seaborn.axisgrid.FacetGrid at 0x114275d68>
```

Previously it would raise a `ValueError`:

```
In [90]: g.map(sns.kdeplot, ""total_bill"", ""tip"")
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-90-6c621e17f38a> in <module>()
----> 1 g.map(sns.kdeplot, ""total_bill"", ""tip"")

/Users/tom/Envs/py3/lib/python3.4/site-packages/seaborn-0.5.dev-py3.4.egg/seaborn/axisgrid.py in map(self, func, *args, **kwargs)
    433 
    434             # Draw the plot
--> 435             self._facet_plot(func, ax, plot_args, kwargs)
    436 
    437         # Finalize the annotations and layout

/Users/tom/Envs/py3/lib/python3.4/site-packages/seaborn-0.5.dev-py3.4.egg/seaborn/axisgrid.py in _facet_plot(self, func, ax, plot_args, plot_kwargs)
    513 
    514         # Draw the plot
--> 515         func(*plot_args, **plot_kwargs)
    516 
    517         # Sort out the supporting information

/Users/tom/Envs/py3/lib/python3.4/site-packages/seaborn-0.5.dev-py3.4.egg/seaborn/distributions.py in kdeplot(data, data2, shade, vertical, kernel, bw, gridsize, cut, clip, legend, ax, cumulative, **kwargs)
    854     if bivariate:
    855         ax = _bivariate_kdeplot(x, y, shade, kernel, bw, gridsize,
--> 856                                 cut, clip, legend, ax, **kwargs)
    857     else:
    858         ax = _univariate_kdeplot(data, shade, vertical, kernel, bw,

/Users/tom/Envs/py3/lib/python3.4/site-packages/seaborn-0.5.dev-py3.4.egg/seaborn/distributions.py in _bivariate_kdeplot(x, y, filled, kernel, bw, gridsize, cut, clip, axlabel, ax, **kwargs)
    725     # Calculate the KDE
    726     if _has_statsmodels:
--> 727         xx, yy, z = _statsmodels_bivariate_kde(x, y, bw, gridsize, cut, clip)
    728     else:
    729         xx, yy, z = _scipy_bivariate_kde(x, y, bw, gridsize, cut, clip)

/Users/tom/Envs/py3/lib/python3.4/site-packages/seaborn-0.5.dev-py3.4.egg/seaborn/distributions.py in _statsmodels_bivariate_kde(x, y, bw, gridsize, cut, clip)
    760     elif np.isscalar(bw):
    761         bw = [bw, bw]
--> 762     kde = sm.nonparametric.KDEMultivariate([x, y], ""cc"", bw)
    763     x_support = _kde_support(x, kde.bw[0], gridsize, cut, clip[0])
    764     y_support = _kde_support(y, kde.bw[1], gridsize, cut, clip[1])

/Users/tom/Envs/py3/lib/python3.4/site-packages/statsmodels-0.6.0-py3.4-macosx-10.9-x86_64.egg/statsmodels/nonparametric/kernel_density.py in __init__(self, data, var_type, bw, defaults)
    109         self.nobs, self.k_vars = np.shape(self.data)
    110         if self.nobs <= self.k_vars:
--> 111             raise ValueError(""The number of observations must be larger "" \
    112                              ""than the number of variables."")
    113 

ValueError: The number of observations must be larger than the number of variables.
```
",5,1,"['enhancement', 'plots']"
622,21891464,306,4704710,2014-09-27 16:57:14,2014-09-27 17:05:53,closed,Always check dependencies in setup.py,"This is a followup to GH-#300. Now that the setup.py won't raise an
ImportError, we no longer need to protect the dependency check during
some modes of setup processing.
",0,1,['infrastructure']
623,21738784,300,4704710,2014-09-24 19:35:37,2014-09-24 22:12:10,closed,BLD: Install dependencies if cannot be imported.,"_Should_ provide a middle ground for #169, #277, #285. 

These are the same changes that were made to statsmodels in https://github.com/statsmodels/statsmodels/pull/1902

I feel partially responsible for the bombardment of unhelpful/semi-rude issues you've had to field.
",14,1,['infrastructure']
624,21551612,299,4704710,2014-09-21 19:35:41,2014-09-21 19:42:45,closed,"Don't show lmplot legend when hue in [row, col]","Closes #284 
",0,1,[]
625,21550625,298,4704710,2014-09-21 17:59:17,2014-09-21 19:30:14,closed,Work around matplotlib 1.4 boxplot flier bug,"Closes #278 

This wasn't caught by the tests, but I'm actually not sure how to test it as the flier objects don't seem to end up in `ax.lines`.
",1,2,['plots']
626,21550202,297,4704710,2014-09-21 17:10:59,2014-09-21 17:17:05,closed,Fix non-default index but in PairGrid,"Closes #280 
",0,1,['plots']
627,21209670,292,4704710,2014-09-14 23:17:48,2014-09-15 00:01:03,closed,Fix unittests that fail with numpy 1.9,"This seems to be due to some very subtle changes in array precision,
so I am swapping assert_array_equal for assert_array_almost_equal.

The occurance of failures on a point release is unsettling, but this
at least keeps the tests informative.
",0,3,[]
628,20933618,286,4704710,2014-09-09 04:44:21,2014-09-21 16:51:45,closed,Add new color palettes with interactive palette widgets,"This PR has a few things all related to color palettes:
### New palette functions:
- `light_palette()`: complement to `dark_palette` but blend from a very light version of the seed color

``` python
sns.palplot(sns.light_palette(""seagreen"", 10))
```

![light_pal](https://cloud.githubusercontent.com/assets/315810/4204110/99c0c466-3834-11e4-954e-713f4eb91527.png)
- `diverging_palette()`: Given two hues of equal lightness and saturation (chosen in HUSL space), make a  diverging palette between them with either a light or 
  a dark midpoint.

``` python
sns.palplot(sns.diverging_palette(220, 10, n=9))
```

![diverg_pal](https://cloud.githubusercontent.com/assets/315810/4204130/cdeae960-3834-11e4-8573-074a3de11bd1.png)
### New ways to specify custom sequential palettes
- The `dark_`, `light_`, and `blend_palette` functions have a new `input` parameter that controls how the `color` argument is interpreted: in addition to the range of color specs built into matplotlib, this can also be `hls` or `husl` for coords in those systems or `xkcd` for a named color in the xkcd survey database.

``` python
sns.palplot(sns.dark_palette(""sea"", 8, input=""xkcd""))
```

![xkcd_pal](https://cloud.githubusercontent.com/assets/315810/4204151/0a0de1b8-3835-11e4-9fe7-5eb69ca8eaf4.png)
### Interactive widgets to choose palettes

This is the most exciting part of the PR.

This complementes the `choose_cubehelix` (now renamed to `choose_cubehelix_palette` for consistency) function that was in 0.4 to cover most of the custom palette functions: `choose_colorbrewer_palette`, `choose_dark_palette`, `choose_light_palette`, and `choose_diverging_palette`:

![screenshot 2014-09-09 08 30 26](https://cloud.githubusercontent.com/assets/315810/4204298/41ed5824-3836-11e4-8d6f-6bd40594fc4f.png)

But the _really_ exciting part is that these functions now return either a list of colors or a matplotlib colormap (when `as_cmap` is `True`) so they can actually be used in part of a normal workflow to interactively choose a palette and then pass the returned object to seaborn or matplotlib functions:

![screenshot 2014-09-09 08 29 20](https://cloud.githubusercontent.com/assets/315810/4204277/1d27c6a0-3836-11e4-94e3-34cbbf2e82a3.png)
### To do
- [x] Tests
- [x] Docstrings
- [x] Tutorial documentation
- [x] Release notes
- [x] Rename `choose_cubehelix`
",2,12,"['enhancement', 'themes', 'widgets']"
629,20782690,281,4704710,2014-09-05 00:57:56,2014-09-05 02:33:43,closed,Fix various spelling mistakes in documentation,"No changes otherwise to wording in documentation.
",1,1,[]
630,20753827,279,4704710,2014-09-04 16:00:39,2014-09-08 22:37:05,closed,Fix py3k tests,"Closes #274 
",4,5,[]
631,20701509,276,4704710,2014-09-03 19:53:03,2014-09-04 15:54:09,closed,BUG: PairGrid should ignore datelike columns,"Closes https://github.com/mwaskom/seaborn/issues/275

All I added was the checking for `TypError` in the except block.
",1,1,[]
632,20627951,273,4704710,2014-09-02 17:36:28,2014-09-02 17:46:31,closed,Fix gaussian_kde in violinplot,"Missed a line in #272 
",0,1,[]
633,20626154,272,4704710,2014-09-02 17:02:54,2014-09-02 17:16:32,closed,Let kde run when scipy doesn't accept custom bandwidth,"Closes #200 
",0,1,[]
634,20536475,270,4704710,2014-08-30 15:14:21,2014-08-30 15:22:56,closed,Make rc tests passable on systems without MS fonts,"Closes #269 
",0,1,[]
635,20522820,269,4704710,2014-08-29 20:54:30,2014-08-30 15:22:56,closed,ENH: skip tests requiring Verdana font whenever it is not present,"I did not see (just might not know) a less ugly way to check reliably if Verdana (proprietary from Microsoft, not generally available/redistributable/etc) font is present.  This one verified to work when present or skip when not
",4,1,[]
636,20517282,268,4704710,2014-08-29 18:58:29,2014-08-29 19:26:01,closed,Fix PairGrid,"Two fixes:
- The size was getting calculated wrong
- Stuff was failing when specific vars were passed in arrays (closes #267)
",1,2,['plots']
637,20511853,267,4704710,2014-08-29 17:14:12,2014-08-29 18:58:58,closed,PairedGrid fails when `vars` is an array,"Consider the following test case (python 3):

``` python
from io import StringIO

import numpy as np
import matplotlib.pyplot as plt
import pandas
import seaborn

%matplotlib inline
seaborn.set(style='ticks')

data = StringIO(""""""\
 Event  Influent  Effluent
     1  5.003946  2.708050
     2  4.948760  2.079442
     3  4.442651  1.609438
     4  3.988984  2.302585
     5  4.077537  2.890372
     6  4.553877  3.091042
     7  4.644391  3.091042
     8  4.276666  3.610918
     9  4.465908  2.944439
    10  4.553877  3.663562
    11  4.510860  3.555348
    12  4.174387  2.484907
    13  3.891820  1.945910
    14  3.135494  1.386294
    15  3.688879  2.564949
    16  2.708050  1.945910
    17  3.401197  2.772589
    18  3.295837  3.044522
    19  3.737670  2.564949
    20  4.744932  4.158883
"""""")

TSS = pandas.read_table(data, sep='\s+')
paired_grid = seaborn.PairGrid(TSS, vars=np.array(['Influent', 'Effluent']))
paired_grid.map_upper(seaborn.kdeplot, cmap=""Blues_d"")
paired_grid.map_lower(plt.scatter)
paired_grid.map_diag(seaborn.kdeplot, lw=3, legend=False)
```

This will fail since `paired_grid.square_grid` will actually be `np.array([True True])`.

So setting `PairedGrid.square_grid` with `self.square_grid = np.all(x_vars == y_vars)` seems to fix this.

Curious what you think.

And as always, thanks for the awesome and hard work you've put into this. So valuable.
",9,2,"['bug', 'plots']"
638,20475867,265,4704710,2014-08-29 00:29:28,2014-08-29 01:25:49,closed,Omnibus doc updates,"Closes #236, #229, and #187
",0,1,[]
639,20472904,264,4704710,2014-08-28 23:04:58,2014-08-28 23:25:41,closed,Let violinplot work when bins have single observations,"Closes #259 
",0,1,[]
640,20415866,262,4704710,2014-08-28 03:26:09,2014-08-28 19:22:09,closed,PairGrid and pairplot for drawing scatterplot (and more!) matrices,"A new axisgrid object for drawing grids of paired plots. And a corresponding function for doing so easily.

Simple example:

``` python
sns.pairplot(iris, hue=""species"")
```

![pairplot](https://cloud.githubusercontent.com/assets/315810/4071125/5134444e-2e6a-11e4-9ddc-8534c8cc5e80.png)

More complex example:

``` python
g = sns.PairGrid(iris, diag_sharey=False)
g.map_lower(sns.kdeplot, cmap=""Blues_d"")
g.map_upper(plt.scatter)
g.map_diag(sns.kdeplot, lw=3)
```

![pairplot_kde](https://cloud.githubusercontent.com/assets/315810/4071130/688cbd7e-2e6a-11e4-868e-25632541b83e.png)

Remaining todos:
- [x] Add more tests
- [x] Update release docs
- [x] Rename `set_legend` to `add_legend` (and deal with in re: `FacetGrid`)
",1,15,"['enhancement', 'refactor', 'plots']"
641,20214746,261,4704710,2014-08-23 23:05:52,2014-08-24 00:57:33,closed,Add choose_cubehelix function,"Added a simple function that uses the IPython interactive machinery to launch an app that lets you play with the input parameters to the cubehelix system, which can then be used with the `cubehelix_palette` function:

![screenshot 2014-08-23 16 04 56](https://cloud.githubusercontent.com/assets/315810/4022124/05ecc400-2b1a-11e4-81bd-18048ab1e247.png)
",0,1,[]
642,19892993,256,4704710,2014-08-17 20:19:09,2014-08-17 20:56:07,closed,Unify rules for default color palettes,"The rules for choosing default color palettes when variables are mapped to different colors have been unified (and thus changed somewhat). Now when no specific palette is requested, the current global color palette will be used, unless the number of variables to be mapped exceeds the number of unique colors in the palette, in which case the `""husl""` palette will be used to avoid cycling.
",0,1,[]
643,19873420,254,4704710,2014-08-15 23:42:10,2014-08-16 16:34:09,closed,Fix documented return type for barplot,,1,1,[]
644,19741992,253,4704710,2014-08-13 18:12:30,2014-08-13 18:57:40,closed,Fix legend_out with col_wrap,"When using a `FacetGrid` fails when `legend_out = False` and `col_wrap` specified. Consider the following example:

``` python

%matplotlib inline
import numpy as np
import pandas
import seaborn

locations = ['inflow', 'outflow'] * 5
pollutants = ['Lead', 'Copper', 'Cadmium', 'Zinc']
treatment = ['Detention', 'Retention', 'Filter']

index = pandas.MultiIndex.from_product([locations, pollutants, treatment], names=['Location', 'Pollutant', 'Treatment'])
df = pandas.Series(np.random.normal(size=len(index)) ** 2, index=index, name='Concentration').reset_index()

# works
seaborn.factorplot(data=df, x=""Treatment"", y=""Concentration"",
                   hue=""Location"", col='Pollutant', col_wrap=2)

# fails
seaborn.factorplot(data=df, x=""Treatment"", y=""Concentration"",
                   hue=""Location"", col='Pollutant', col_wrap=2,
                   legend_out=False)
```

The issues was that `self.axes` was a 1-D array, so pulling out the first axes with `self.axes[0, 0]` borked.

Simple fix, simple test.
",1,2,[]
645,19498427,251,4704710,2014-08-07 22:17:27,2014-08-07 22:42:06,closed,Allow control over box/violin desaturation,"Both boxplot and violinplot desaturate the fill colors a bit. This generally  looks better, but can be annoying. This PR adds control over that behavior.
",0,1,[]
646,19360279,249,4704710,2014-08-05 18:34:25,2014-08-07 04:40:47,closed,Remove functions that were deprecated in 0.3,,0,3,[]
647,19250748,247,4704710,2014-08-02 23:17:16,2014-08-02 23:20:51,closed,Have factorplot handle unbalanced data better,"Two changes to `factorplot` here:
- Always pass an explicit `x_order` to `jointplot`/`barplot`/`boxplot` so that labels correspond properly.
- Skip bootstrapping when an `x` level is missing on one of the facets or when it only has one observation

This closes #239 and closes #216
",0,1,['plots']
648,19248375,245,4704710,2014-08-02 18:22:25,2014-08-02 18:29:23,closed,Update apt-get and skip doc build on travis,"To fix build errors.

I'd like to bring back doc building in the future, but it takes a while and wasn't actually providing any useful feedback (i.e. doc failures didn't break the build).
",0,1,[]
649,19042744,241,4704710,2014-07-29 17:50:21,2014-07-29 18:17:31,closed,Improved violin plots to allow for custom KDEs,"I changed the violin plot to allow the use of custom-made KDE estimation functions.

The user can either provide functions estimating the KDE on the set of points estimated by the violin plot or provide a set of points used to plot.

All is done through a new arguments: `kdes`. If the argument is not present, the behavior of the function is as before.
",2,1,[]
650,18308153,235,4704710,2014-07-11 23:52:53,2014-07-12 13:49:12,closed,documentation typo,,1,1,[]
651,17903983,230,4704710,2014-07-02 18:38:59,2014-10-17 00:30:26,closed,Reboot of clustering,"This is pulled off of `master` this time instead of `dev`, fixing weird merging issues occurring in https://github.com/mwaskom/seaborn/pull/73

Trailing Todos:
- [x] Reformat params with `heatmap_kws`, `row_kws` and `col_kws` or something to clean up the arguments
- [x] Is there a way to `set_axis_style('nogrid')` within a single plot? I couldn't find a way to detect the current `axis_style` to switch, and then return the `rcParams` to what they were.
- [ ] Allow for several levels of labeling groups in the heatmap (multiple levels of colors) [probably not in this release]
- [x] Allow for user to specify their own linkage matrices
- [x] Constrain colorbar scale to have at most 3 labels. Currently this works only for divergent, linear maps. [probably not in this release]

Here's a notebook of the current abilities: http://nbviewer.ipython.org/gist/anonymous/10da01312dc2486888f5
",61,4502,"['enhancement', 'plots']"
652,17745179,228,4704710,2014-06-29 08:09:54,2014-08-02 23:33:51,closed,add a small error message if an invalid kind was passed to jointplot,"In case you used an invalid value for joinplot you get back just an empty plot.
Let's add a really simple help message for the user, see http://nbviewer.ipython.org/b2bf2c98d8339b39000d
",1,2,"['enhancement', 'annoyance']"
653,17733146,227,4704710,2014-06-28 01:01:19,2014-06-28 01:19:17,closed,Add logx option to regplot,"To plot the linearized model `y ~ log(x)`.
",0,1,[]
654,17626268,225,4704710,2014-06-26 01:30:30,2014-06-26 18:48:12,closed,Add xkcd color dictionary and palette function,"Matplotlib can accept a lot of named colors, but haven't you ever wanted to make a plot with ""greyish blue"", ""terracotta"", and ""dusty green""? Thanks to the [xkcd color survey](http://xkcd.com/color/rgb/) now you can:

``` python
colors = [""butter yellow"", ""windows blue"", ""faded green"", ""greyish"", ""dusty purple""]
sns.palplot(sns.xkcd_palette(colors))
```

![screenshot 2014-06-25 18 29 12](https://cloud.githubusercontent.com/assets/315810/3393900/50fe68ee-fcd1-11e3-867f-75d3d796fa81.png)

``` python
plt.plot(x, y, sns.xkcd_rgb[""soft green""], lw=3);
```

![screenshot 2014-06-25 18 29 47](https://cloud.githubusercontent.com/assets/315810/3393903/739f4f12-fcd1-11e3-9303-485d39ca069b.png)

[This](http://www.luminoso.com/colors/) is useful if you want to browse what colors are available.
",1,1,"['enhancement', 'themes']"
655,17213390,223,4704710,2014-06-17 02:14:26,2014-06-17 03:13:22,closed,Skip image diff when testing notebooks,"Changes to IPython and other aspects of the testing environment have broken the notebook tests. Rather than rerunning the reference notebooks (and inflating the repository size), I'm choosing to disable the image diff for now so that Travis gives useful feedback.
",0,2,[]
656,17191030,222,4704710,2014-06-16 17:28:01,2014-06-17 01:12:30,closed,fixed alpha setting bug in _RegressionPlotter scatter,"There's a known issue in matplotlib where if alpha is explicitly set for an axis globally, the 4th column in an RGBA array passed to the color argument in plots is ignored. Because seaborn sets a default alpha value in _RegressionPlotter, the alpha is always ignored even when passed. This PR just adds a check to see if the color property in scatter_kws is 4D (i.e., RGBA), and omits setting the default if so. All tests pass.
",8,2,"['annoyance', 'plots']"
657,16659254,217,4704710,2014-06-03 15:22:52,2014-06-04 01:48:50,closed,Revert change to functions that reset RC params,"Closes #215 
",0,3,['testing']
658,16604820,214,4704710,2014-06-02 15:17:10,2015-01-22 22:36:12,closed,add flip_axes option to factorplot,"I create a new PR so it comes from a specific branch instead of master.

From the previous discussion #212, i know it is not your preferred option, but it might help.
",2,6,"['enhancement', 'plots']"
659,16551590,213,4704710,2014-05-30 19:52:38,2014-06-02 03:03:10,closed,Fixed a typo fix in the comments.,,3,1,[]
660,16547830,212,4704710,2014-05-30 18:33:58,2014-06-02 15:18:05,closed,add hbox kind of factorplot,"I wanted to propose a feature, but i thought it might be interesting to propose a solution (even if i am not sure i made the best choice).

Using factorplot in boxplot mode usually involve categorical names that i feel better to present in horizontal mode (more space for labels, more place to view results).

The easiest way to add that features was to add a kind of plot. 
Tell me what do you think of that, and if you have already a solution that you are more comfortable with, i could try to help...
",6,0,[]
661,16263541,204,4704710,2014-05-23 09:12:57,2014-05-23 15:38:51,closed,Update color_palettes.ipynb,"The names of the default palettes have changed in the mean time.
",1,1,['docs']
662,16063949,201,4704710,2014-05-19 16:43:37,2014-05-23 15:40:44,closed,ENH Draw horizontal violin plots,"The interface is analogous to the one for boxplots from matplotlib,
using an option called `vert` to distinguish vertical (default) and
horizontal plots.
",2,2,[]
663,15924335,199,4704710,2014-05-15 09:38:29,2014-05-15 20:28:13,closed,Added pdf.fonttype=42 to rcmod for Illustrator-editable text,"Fixes issue #195
",3,2,"['enhancement', 'themes']"
664,15844943,197,4704710,2014-05-13 20:23:43,2014-05-14 00:49:40,closed,BUG: col row and hue names should always be lists,"I found this while trying to plot a facet grid without dropping nans
",16,1,[]
665,15829734,196,4704710,2014-05-13 15:44:48,2014-05-13 16:01:44,closed,Be safer about trying to operate on possible strings,"Fixes #193 
",0,1,[]
666,15388328,189,4704710,2014-05-01 13:59:54,2014-05-01 14:42:09,closed,fix violinplot doco,"Minor correction to violinplot() docstring.
",1,2,['docs']
667,15285372,186,4704710,2014-04-29 12:24:51,2014-04-29 17:03:42,closed,Make it possible to override gridsize with hex jointplot,"Here's a pull request enabling support for various customisations within the jointplot() function. The changes avoid clobbering any possible keyword arguments that could get passed through to the underlying plotting functions for each plot component. 

See also #185 (original issue).
",14,2,"['enhancement', 'plots']"
668,15208276,184,4704710,2014-04-27 02:11:23,2014-04-27 17:19:12,closed,Changes to make tests run on older versions of dependencies,"Cf: #174 and #175 
",0,1,"['testing', 'infrastructure']"
669,15205338,183,4704710,2014-04-26 19:20:42,2014-04-26 19:32:01,closed,Make setup behave more politely about dependencies (GH #169),"This raises ImportErrors when dependencies don't exist, but doesn't try to install them. This is better than default setuptools behavior because all of the required dependencies are annoying to install with pip.

Closes #169 
",0,1,['infrastructure']
670,15204980,182,4704710,2014-04-26 18:36:42,2014-04-26 19:01:48,closed,Add the scale_font option to plotting_context,"This should make it easier to change the fontsize of the plots. `set`, `set_context`, and `plotting_context` now take a `font_scale` option to make all the font elements larger or smaller. (e.g. `font_scale=2` makes the fonts twice as large as they would otherwise be in that context.

This closes #159 
",1,1,"['enhancement', 'themes']"
671,15179327,180,4704710,2014-04-25 16:48:28,2014-04-25 17:18:01,closed,Add cubehelix_palette function,"This provides a flexible interface to the cubehelix palette system, which exists in matplotlib but is for some reason hidden.

Here are a few examples:

``` python
f, axes = plt.subplots(9, figsize=(8, 8))
for ax, s in zip(axes, np.linspace(0, 3, 10)):
    pal = sns.cubehelix_palette(10, s)
    ax.imshow([pal], interpolation=""nearest"")
    ax.set(yticks=[], xticklabels=[])
```

![cubehelix_pal](https://cloud.githubusercontent.com/assets/315810/2803265/02a27a2c-cc99-11e3-9d44-edbef2f36ffa.png)

``` python
f, axes = plt.subplots(3, 3, figsize=(8, 8))
x, y = np.random.multivariate_normal([0, 0], [(1, .5), (.5, 1)], 1000).T
for ax, s in zip(axes.flat, np.linspace(0, 3, 9)):
    cmap = sns.cubehelix_palette(start=s, rot=-.3, light=.98, as_cmap=True)
    ax.hexbin(x, y, gridsize=20, cmap=cmap)
    ax.set_axis_off()
f.tight_layout(h_pad=.5, w_pad=.5)
```

![cubehelix_hex](https://cloud.githubusercontent.com/assets/315810/2803292/6913c84c-cc99-11e3-9091-28b7de32c119.png)
",0,1,[]
672,15151848,179,4704710,2014-04-25 02:02:32,2014-04-25 02:14:46,closed,Add hist_norm argument to distplot,"Closes #178 
",0,1,[]
673,15048432,176,4704710,2014-04-23 04:12:14,2014-08-27 17:22:51,closed,Make font fallback work better,"Closes #171  (cf #55)

I think this is a robust solution to the font issues. @westurner do you want to take a look?
",11,2,"['annoyance', 'themes']"
674,14924751,173,4704710,2014-04-18 16:45:39,2014-04-21 15:17:20,closed,Fix FacetGrid col_wrap when facets don't evenly factor into cols,"Closes #168
",1,2,['plots']
675,14921949,172,4704710,2014-04-18 15:21:27,2014-04-18 16:44:59,closed,Fix col_wrap issues with odd number of facets,"Closes #168 

@shoyer I think this should fix your issue if you want to take a look at it.
",1,2,[]
676,14885072,171,4704710,2014-04-17 16:56:14,2014-05-13 16:02:43,closed,"Add Arial and Liberation Sans to mpl.rcParams[""font.sans-serif""] #55","#55
",0,1,"['annoyance', 'themes']"
677,14551014,167,4704710,2014-04-09 13:30:42,2014-04-30 18:23:03,closed,Test on Python 3.4,,1,1,['testing']
678,14529321,165,4704710,2014-04-08 23:43:41,2014-04-09 00:43:21,closed,Unit test for FacetGrid.set_axis_labels,"Adapted from #163.
",1,1,[]
679,14484481,163,4704710,2014-04-08 06:00:04,2014-04-08 23:38:38,closed,ENH: allow for setting a lists of labels with FacetGrid.set_axis_labels,"This allows for easily setting different x or y axis labels to different
facets, without needing to use the matplotlib interface.

It does not break the API, aside from renaming the single argument
to `set_{x, y}labels` from ""label"" to ""labels"".

I also added a unit test for this method since I noticed it didn't have any
direct test coverage.
",5,1,[]
680,14416556,161,4704710,2014-04-05 16:41:06,2014-04-07 16:48:56,closed,Make pointplot points adjust with linewidth,,0,2,[]
681,14277641,159,4704710,2014-04-02 13:12:21,2014-04-26 19:01:48,closed,Add method to change fontsize separately,"This commit adds a new function set_fontsize which adjusts the fontsize parameter independently of the context.
",1,1,"['question', 'themes']"
682,14240315,158,4704710,2014-04-01 17:44:10,2014-04-26 17:01:28,closed,Spine offsets with despine,"Someone piped in on my matplotlib email list question about offset the spines. He included a simple function that allows use to offset the spines at any point (not just immediately after creation). Short version is that moving spines makes a call to `ax.cla`. The function just redefines `cla` as `reset_ticks`, moves the spine, and restores `cla` to its original state. Why that works is a great matplotlib mystery.

Sucks that we went through all that work and ended up with a, IMO, subpar API, but this PR cleans it up well.

Question: Should we keep the old `offset_spines` function or is the seaborn API in a state of sufficiently rapid flux that we can get rid of it (a la ""there should be one way to do things"").
",6,6,"['enhancement', 'themes']"
683,14146353,157,4704710,2014-03-29 21:06:41,2014-03-29 21:32:54,closed,Fix FacetGrid legend with non-string hue levels,"Closes #144
",0,1,[]
684,14146344,156,4704710,2014-03-29 21:06:04,2014-03-29 21:06:12,closed,Fix FacetGrid legend with non-string hue levels,"Closes #144 
",0,1,[]
685,14122834,155,4704710,2014-03-28 18:05:28,2014-03-28 18:29:21,closed,Fix density support calculation using scipy kde,"Fixes #150 
",0,1,[]
686,14068006,153,4704710,2014-03-27 16:34:34,2014-03-27 16:56:59,closed,Fix palette truncation in with statement,,0,1,[]
687,14039724,152,4704710,2014-03-27 02:13:50,2014-03-27 16:15:41,closed,Fix new pep8 rules,,0,1,['testing']
688,14039318,151,4704710,2014-03-27 01:54:13,2014-03-27 16:32:52,closed,Fix palette truncation in with statement,,0,1,[]
689,13976368,149,4704710,2014-03-25 20:57:21,2014-03-25 22:47:55,closed,Add a method parameter to corrplot,"This commit provides a new optional argument to `sns.corrplot`, in order to use Kendall Tau and Spearman rank correlation methods. It's just a proxy for the `method` parameter of `pandas.DataFrame.corr`.
",1,2,"['enhancement', 'plots']"
690,13936669,147,4704710,2014-03-25 04:37:57,2014-03-26 06:20:17,closed,BF: make some non-functioning doctests correct smoke tests,"now `nosetests -s -v --with-doctest seaborn/` seems to be happy
",5,2,"['docs', 'testing']"
691,13935923,146,4704710,2014-03-25 03:50:04,2014-03-25 04:06:42,closed,BF: few missed import six from external,,0,1,[]
692,13935350,145,4704710,2014-03-25 03:19:37,2014-03-25 04:06:09,closed,ENH: to make two Michaels into one,"After the merge it would look like this:

```
$> git shortlog -sn             
   668  Michael Waskom
     8  John B. Cole
     7  Paul Hobson
     4  Olga Botvinnik
     2  Tobias Megies
     1  Daniel B. Allan
     1  Miikka Koskinen
     1  Tal Yarkoni
     1  Tom Augspurger
     1  Yaroslav Halchenko
```
",2,1,[]
693,13873735,143,4704710,2014-03-23 00:21:50,2014-03-23 00:30:48,closed,Finalize 0.3,"Closes #50 
",0,5,[]
694,13860920,141,4704710,2014-03-21 22:50:48,2014-03-22 17:18:03,closed,Overhaul style functions,"This is a relatively large change to the style machinery. To quote from the release notes:
- The functions that interact with matplotlib rc parameters have been updated and standardized. There are now three pairs of functions, :func:`axes_style` and :func:`set_style`, :func:`plotting_context` and :func:`set_context`, and :func:`color_palette` and :func:`set_palette`. In each case, the pairs take the exact same arguments. The first function defines and returns the parameters, and the second sets the matplotlib defaults. Additionally, the first function in each pair can be used in a `with` statement to temporarily change the defaults. Both the style and context functions also now accept a dictionary of matplotlib rc parameters to override the seaborn defaults, and :func:`set` now also takes a dictionary to update any of the matplotlib defaults. See the :ref:`tutorial <aesthetics_tutorial>` for more information.
- The `nogrid` style has been deprecated and changed to `white` for more uniformity (i.e. there are now `darkgrid`, `dark`, `whitegrid`, and `white` styles).

This closes #121, closes #74, and closes #112.

Also @phobson this reverts the addition of the `gridweight` parameter. Because `set()` and `set_style()` accept an `rc` dict with params to override the seaborn themes, it didn't seem necessary to have the additional layer of complexity where some but not all matplotlib parameters are aliased and get special treatment. Sorry if that breaks some code.

This also standardizes the set of parameters that are part of a seaborn style and a seaborn context (and enforces independence between those groups), which should make it easy to integrate with the stylesheet functionality in matplotlib 1.4 (although to be honest I haven't looked too closely at that stuff).

I also took this opportunity to make some tweaks to the styles, with things like thinner gridlines and replacing black elements with dark gray where appropriate.

Because this required rerunning the test notebooks, this PR also includes a downsizing of the aesthetics and linear model notebooks. I'm keeping them around because a lot of links out there on the internet point at the nbviewer versions, but now they're brief introductions with links to the longer version in the online docs.
",2,12,"['enhancement', 'docs', 'themes']"
695,13860711,140,4704710,2014-03-21 22:43:53,2015-02-18 06:56:22,closed,"Add bias-corrected, accelerated (BCa) conf. intervals","I pulled the `known_ci_bca` values in the tests from the [referenced paper](http://staff.ustc.edu.cn/~zwp/teach/Stat-Comp/Efron_Bootstrap_CIs.pdf), but had to tweak them _inward_ (narrower) but 0.1 on each side. Not sure if that's because slight numeric differences in computation from 1996 vs now, or what, but I feel ok about it. I've validated this algorithm before with one of Efron's other papers (can't find it at the moment.

I figure after we iterate on this and get it in a good spot, I'll think more about this https://github.com/mwaskom/moss/issues/7#issuecomment-38298687 and add in the ABC method
",8,7,"['enhancement', 'algorithms']"
696,13618876,138,4704710,2014-03-17 01:41:36,2014-03-17 01:52:38,closed,Map factorplot hue variable with marker/linestyle,"Closes #120

Example:

![screenshot 2014-03-16 18 22 04](https://f.cloud.github.com/assets/315810/2432806/5340290e-ad75-11e3-8d7f-459077bd7c52.png)
",0,1,"['enhancement', 'plots']"
697,13617061,137,4704710,2014-03-16 22:33:34,2014-03-16 22:59:17,closed,Copy regplot kwargs to avoid issues with facets,,0,2,['plots']
698,13613938,136,4704710,2014-03-16 16:57:54,2014-03-16 17:12:17,closed,Add example gallery and reorganize doc homepage,"Closes #51 

![screenshot 2014-03-16 09 57 22](https://f.cloud.github.com/assets/315810/2431384/16c0804e-ad2c-11e3-8cf0-34d1a5f6d0ff.png)
",0,12,"['enhancement', 'docs']"
699,13596194,135,4704710,2014-03-14 22:53:40,2014-03-14 22:53:45,closed,Allow quick setting of FacetGrid xtick step,,0,1,"['enhancement', 'plots']"
700,13551756,134,4704710,2014-03-13 23:49:47,2014-03-14 02:10:41,closed,Add residplot function,"This is a pretty simple function for calculating and plotting the residuals of a linear regression:

``` python
mean = [0, 0]
cov = [(1, .5), (.5, 1)]
x, y = np.random.multivariate_normal(mean, cov, 100).T
sns.residplot(x, y, lowess=True)
```

![residplot](https://f.cloud.github.com/assets/315810/2416690/09b8a4cc-ab0a-11e3-8014-e4318bf97166.png)

Hopefully it makes life better for everyone.
",0,2,"['enhancement', 'plots']"
701,13345851,130,4704710,2014-03-08 22:00:11,2014-03-10 23:54:00,closed,Add JointGrid and jointplot,"This brings back the functionality of `regplot` in version 0.2, but in a much more flexible way.

Two new objects: `JointGrid` and `jointplot`. (Currently, `JointGrid` is implemented).

`JointGrid` is a high-level class to abstract plotting a bivariate and univariate marginal plots. Here's a basic example:

``` python
g = JointGrid(""x"", ""y"", data)
g.plot_marginals(sns.distplot)
g.plot_joint(sns.regplot)
g.annotate(stats.pearsonr)
```

![margingrid](https://f.cloud.github.com/assets/315810/2366530/6b664366-a70c-11e3-9f78-2b0cad8d29d4.png)

More complicated example:

``` python
g = JointGrid(""x"", ""y"", data)
g.plot_marginals(sns.kdeplot, color=sns.color_palette(""Greens"")[-2], shade=True)
cmap = sns.blend_palette([""white""] + sns.color_palette(""Greens"", 10), as_cmap=True)
g.plot_joint(sns.kdeplot, shade=True, cmap=cmap)
```

![margin_grid](https://f.cloud.github.com/assets/315810/2367211/fe9247a8-a747-11e3-9fa3-ffc0468d59f3.png)

The work on this is mostly done (but feedback would be good).

---

Now comes time to decide how `jointplot` should work. The basic signature would look like:

``` python
sns.jointplot(""x"", ""y"", data)
```
- What's the default bivariate plot? `plt.scatter`? `seaborn.regplot`, `seaborn.kdeplot`?
- How do we let the user change the bivariate plot? Pass a plotting function?

``` python
sns.jointplot(""x"", ""y"", data, kind=sns.regplot)
```

Or a string key?

``` python
sns.jointplot(""x"", ""y"", data, kind=""regression"")
```

The former is more flexible, but quite overlapping with using `JointGrid` directly. The latter makes it easier to specify a few limited choices, and point the user at `JointGrid` if they want more flexibility. I'm leaning towards the latter.

cc: @twiecki 
",18,9,"['enhancement', 'plots']"
702,13324224,129,4704710,2014-03-07 19:17:15,2015-07-04 18:16:49,closed,WIP: Use joblib to cache computationally intensive parts of plotting functions,"This is a proof of concept using `regplot`. The basic idea is that a lot of the plotting functions do a significant amount of computation to fit the model used in the plot. But, often, a user is going to want to iterate over the plot to tweak the aesthetics, etc.

To make this easier, plotting functions that are compute-intensive will have an optional argument called `mem` that takes a `joblib.Memory` instance. Internally, the function will cache the compute-intensive methods. Basically, you'd get something like:

``` python
In [1]: mem = Memory(""."", verbose=2)
In [2]: sns.regplot(x, y, mem=mem)

    [Memory] Calling seaborn.linearmodels._RegressionPlotter.fit_fast...
    fit_fast(array([-0.042867, ..., -1.340816]), array([ 0.886475, ...,  0.291993]), array([-4., ...,  4.]))
    _________________________________________________________fit_fast - 0.3s, 0.0min

In [3]: sns.regplot(x, y, color=""salmon"", mem=mem)

    [Memory]   14.1s, 0.2min: Loading seaborn.linearmodels._RegressionPlotter.fit_fast...
```

Currently tests fail as this requires a bit of change to the `regplot` fitting functions (moving the data access from `self` attributes inside the methods to method arguments), and I haven't updated the tests to reflect that.

Ideas on this are very appreciated.
",6,1,"['enhancement', 'api', 'plots']"
703,13316938,128,4704710,2014-03-07 16:34:01,2014-03-07 17:02:39,closed,Use robust range in default interactplot color scale,"Closes #59 
",0,3,['plots']
704,13296038,127,4704710,2014-03-07 04:32:43,2014-03-07 05:05:04,closed,Reduce dependency load,"Closes #67. See there for details.
",0,10,['infrastructure']
705,13292381,126,4704710,2014-03-07 01:26:04,2014-03-07 19:07:29,closed,Add seaborn.apionly pseudomodule to get the api without the style,"I'm not sure this is the right way to do this, but it seems to work. The idea is that if you have you own rc parameters and don't want seaborn to mess with them, you can do `import seaborn.apionly as sns` (or `from seaborn.api import regplot`, etc.) and carry on as normal.

This works by importing seaborn as usual and then calling the new `reset_orig()` function, which updates the rcParams with `matplotlib.rcParamsOrig`, which I think respects any custom `matplotlibrc` files.

Closes #10 and #13.
",1,3,"['enhancement', 'themes', 'infrastructure']"
706,13235325,125,4704710,2014-03-05 22:10:58,2014-03-05 22:23:32,closed,Add default value for offset_spines,"Defaults are good.
",0,1,[]
707,13221479,124,4704710,2014-03-05 17:25:51,2014-03-05 17:26:21,closed,ENH: function to offset spines,"I updated the docs and added some unit tests.

Closes #123
",1,4,[]
708,13198358,123,4704710,2014-03-05 06:40:16,2014-03-05 17:26:21,closed,ENH: function to offset spines,"This is just a clean version of https://github.com/mwaskom/seaborn/pull/92 after rebasing with master after all the facet_grid work.
",0,2,"['enhancement', 'themes']"
709,13191278,122,4704710,2014-03-05 00:55:06,2014-03-05 01:37:46,closed,Improve Travis config,"- Reorganize where things happen a big
- Build the docs on Py2.7
",1,5,['testing']
710,13171543,119,4704710,2014-03-04 17:21:48,2014-03-04 21:32:50,closed,MNT: Change minconda URL and env spec,"All of my [travis builds are erroring out](https://travis-ci.org/mwaskom/seaborn/jobs/20024477). I think this might be due to the conda version being a bit stale now. 

This is just me taking a stab fixing that.

Relevant portion of the travis log:

```
Extracting packages ...
 |                                                                        |   0%
[freetype            ] |################                                  |  33%
[imaging             ] |#################################                 |  66%
[jpeg                ] |##################################################| 100%
[      COMPLETE      ] |##################################################| 100%

Linking packages ...
[      COMPLETE      ] |                                                  |   0%
[freetype            ] |################                                  |  33%
[imaging             ] |#################################                 |  66%
[jpeg                ] |##################################################| 100%
[      COMPLETE      ] |##################################################| 100%

travis_fold:end:install.3
travis_fold:start:install.4
$ conda install --yes ipython==1.1.0 pyzmq numpy scipy nose matplotlib pandas statsmodels scikit-learn
Error: Unsatisfiable package specifications
Hint: numpy 1.7* has a conflict with the remaining packages

The command ""conda install --yes ipython==1.1.0 pyzmq numpy scipy nose matplotlib pandas statsmodels scikit-learn"" failed and exited with 1 during install.

Your build has been stopped.
```
",3,1,"['enhancement', 'testing']"
711,12544156,106,4704710,2014-02-14 06:48:07,2014-03-05 00:15:11,closed,Omnibus enhancements to linear model plotting and structured plot grids,"This has a few large changes all at once, as they are interrelated:
- The `FacetGrid` class, which abstracts the data-aware structured grid out of the previous version of `lmplot` such that it can be used to facet arbitrary plots very easily (using `FacetGrid.map()`). There are a few other nice new things about `FacetGrid`, primarily that it can draw its legend outside of the axes, and `despine` is called automatically. Here's a simple example:

![FacetGrid](https://f.cloud.github.com/assets/315810/2172956/968e3ff4-959a-11e3-80ca-148d480f2341.png)
- Correspondingly, the `lmplot` and `regplot` functions have been completely rewritten to take advantage of this new machinery. The `lmplot` interface should mostly be the same, save a few things that were broken in the interest of making progress on unifying APIs across the package, and a couple of advantages here and there. There is a more dramatic change to `regplot`, which now is an ""Axes-level"" function. This should be good going forward in that `regplot` and `lmplot` can do all the same things (plot with different regression models, remove confounding variables, etc.), but `regplot` can now do them flexibly into an existing Axes. It also means that `lmplot` is just a thin wrapper around `regplot` and `FacetGrid`, making for overall much cleaner code. As discussed in #101, this will mean the current behavior of `regplot` will vanish on `master` for a while, but the next task will be to introduce `jointplot` which will return the marginal histrograms, etc.
- There are three new related functions, `barplot`, `pointplot`, and `factorplot` for visualizing linear models with discrete or categorical independent variables. The `barplot` and `pointplot` functions have a similar relationship to `factorplot` that `regplot` has to `lmplot`, although `factorplot` can also draw boxplots. (The current `boxplot` API cannot be straightforwardly used with `FacetGrid`, but the addition of `kind=""box""` in `factorplot` should avoid the need to break it). Here are some examples:

![factorplot_1](https://f.cloud.github.com/assets/315810/2174205/bd0c3020-95ac-11e3-957d-5c6ee333cbbd.png)

![factorplot_2](https://f.cloud.github.com/assets/315810/2174209/c674ea94-95ac-11e3-9228-5e58fb62d8a5.png)

![factorplot_3](https://f.cloud.github.com/assets/315810/2174212/e9393760-95ac-11e3-9013-13e97865b4a4.png)

![factorplot_4](https://f.cloud.github.com/assets/315810/2176841/abdbe7c0-95e1-11e3-9249-d77234487aa9.png)
- As a an internal detail, the implementation of the new plotting functions has been changed substantially, with the outward facing interface functions serving as very lightweight wrappers around new `_Plotter` objects. This has overall allowed for _much_ cleaner code, and importantly, far better unit-test coverage of the internal computations. Going forward, this is how I would like all, or most, of the plotting code to work. We'll continue to test the docs using `ipnbdoctest.py` (which I also intend to separate out and release as a standalone tool, when I get a chance), but this relieves a lot of the pressure on the docs to also serve as a test suite.

The major remaining task is to update the docs to reflect the changes. In the meantime, my [Titanic](http://nbviewer.ipython.org/8224591) notebook shows off most of the goodies.

This is going to continue to get rounded out over the next few days/weeks, but all of the heavy lifting is done. The tests fail because it breaks the docs and I have not updated them yet, but all of the new code is well-covered by unit-tests, which pass.

Also, at some point the commit history got borked, but I didn't catch it until later. The diff is clean, so I'm inclined to leave it, but if there is a git guru who wants to help me drop the duplicated commits that would be excellent.

I'd definitely like some adventurous users to try this out before I merge to help me round out the corners of the APIs, and see if anything obvious is missing. @twiecki I know you were working on this branch before, it should be pretty stable now. @olgabot, there's stuff in here you've expressed interest in previously.

---

TODO's / subordinate issues
- [x] Improve test coverage for `*plot` functions involved in this commit
- [x] `factorplot` y axis is not labeled when plotting a count
- [x] The variable order in the `FacetGrid` legend does not respect the `hue_order` parameter
- [x] Cast label to string (to fix #107)
- [x] Move all `kws.pop()` code to `kws.setdefault()` to play better with map (to fix #108)
- [x] Complete docstrings for plotting functions
- ~~[ ] Add option to link linestyle and markerstyle to the `hue` variable in `factorplot`, etc.~~ Punting to #120
- [x] Update broken example notebooks
- [x] Write narrative docs
",20,131,"['enhancement', 'refactor', 'testing', 'plots']"
712,12109895,100,4704710,2014-02-01 21:10:57,2014-02-01 23:16:35,closed,Improve automatic checking of code,"Automate some things (coverage, PEP8/Pyflakes) to make life easier.
",0,3,['testing']
713,12109185,99,4704710,2014-02-01 19:35:21,2014-02-01 20:15:27,closed,Add cumulative density option to kdeplot,"@TomAugspurger let's see how this works.

Closes #93 
",3,3,[]
714,12109083,98,4704710,2014-02-01 19:23:23,2014-02-01 19:28:48,closed,Revert changes to default grid widths,"@phobson I hadn't noticed this when the gridweight PR landed but the default grid widths ended up changing. I think there's something to be said for your choices (the plots did look nicer) but it was causing problems because changes to the example notebooks that were meant to only add a cell or two produced diffs which touched every figure.

In the interest of a) having the small changes I'm working on now produce informative diffs and b) holding off on doc updates that touch all of the figures, I'm reverting that change in `rcmod.py`.

It's definitely worth revisiting the default style before I release 0.3, but I'd like to have changes that cause widespread changes to the examples happen all at once, just to keep a handle on the size of the repository.
",0,1,[]
715,12108462,97,4704710,2014-02-01 18:01:46,2014-02-01 18:33:24,closed,Fix matplotlib tests on Travis,"Matplotlib doesn't work out of the box on Travis because there is no `$DISPLAY` variable (well, there's no graphics in general) and the default backend is `QtAgg`. This PR is to get that working so the unittests can cover the plotting functions too.

---

What eventually worked:

I added a matplotlibrc file under `testing/` with only the line

```
backend : Agg
```

And then as part of the `install` section of the Travis config I copy this into the working directory so it gets picked up by the `nosetests` process.
",0,5,[]
716,12038124,93,4704710,2014-01-30 14:55:19,2014-02-01 20:15:27,closed,ENH: add cumulative to kdeplot,"Closes #91

statsmodels backend only right now. I'll take a look at how much work it would be to copy how they calculate the cdf from the kde.

One aesthetic thing. What do you think of the gap between the right side of the cdf and the right side of the grid?

``` python
In [1]: np.random.seed(0)

In [2]: df = pd.DataFrame(np.random.randn(100, 2))

In [3]: import seaborn as sns

In [4]: sns.kdeplot(df[0], shade=True, cumulative=True)
Out[4]: <matplotlib.axes._subplots.AxesSubplot at 0x10d86b090>
```

![sns_cummulative](https://f.cloud.github.com/assets/1312546/2040884/4a4c74fe-89be-11e3-9cad-7f5592f06387.png)

EDIT: here the statsmodels cdf code: https://github.com/statsmodels/statsmodels/blob/master/statsmodels/nonparametric/kde.py#L161
",17,1,"['enhancement', 'plots']"
717,12015157,92,4704710,2014-01-29 23:04:15,2014-03-05 06:40:31,closed,"ENH: Added ""spine_offset""  function to utils","Simple PR to add a `spinesep` kwarg to `utils.despinse`.

Right now, the input is the outward offset in points -- so that leaves all of the tweaking up to the user if the figure size changes. It might make sense to specify it in axes fraction, but that require a little more logic. Feedback is much appreciated.

Tests to follow later.

![capture](https://f.cloud.github.com/assets/1163939/2035437/2246634a-893a-11e3-8239-c9ea1f1ff1cf.PNG)
",43,28,"['enhancement', 'themes']"
718,11523855,85,4704710,2014-01-15 05:53:09,2014-01-15 05:58:37,closed,Improve kde computation and (re)-add scipy KDE,"This addresses several issues with the distribution plots
- The statsmodels density estimate fails on data that isn't double-typed
- The density estimate can become slightly negative (probably due to the FFT-based computation statsmodels uses)

These problems are detailed in #78  and are fixed here.

Additionally, kde data gets passed down to the computation functions as arrays instead of series (addressing #58, although I think that's actually a statsmodels problem)

This fix also changes the default `distplot` bin computation slightly by taking the ceiling of the bin number estimate.

This also adds scipy-based kde computation back, paving the way for making statsmodels an optional dependency.
",1,1,[]
719,11523793,84,4704710,2014-01-15 05:48:20,2014-01-15 05:48:47,closed,Fix KDE computation and (re)add scipy kde,"This addresses several issues with the distribution plots
- The statsmodels density estimate fails on data that isn't double-typed
- The density estimate can become slightly negative (probably due to the FFT-based computation statsmodels uses)

These problems are detailed in #78  and are fixed here.

Additionally, kde data gets passed down to the computation functions as arrays instead of series (addressing #58, although I think that's actually a statsmodels problem)

This fix also changes the default `distplot` bin computation slightly by taking the ceiling of the bin number estimate.

This also adds scipy-based kde computation back, paving the way for making statsmodels an optional dependency.
",1,9,[]
720,11482974,83,4704710,2014-01-14 07:38:53,2014-01-15 05:47:49,closed,Improve kde computation,"This addresses several issues with the distribution plots
- The statsmodels density estimate fails on data that isn't double-typed
- The density estimate can become slightly negative (probably due to the FFT-based computation statsmodels uses)

These problems are detailed in #78  and are fixed here.

Additionally, kde data gets passed down to the computation functions as arrays instead of series (addressing #58, although I think that's actually a statsmodels problem)

This fix also changes the default `distplot` bin computation slightly by taking the ceiling of the bin number estimate.

This also adds scipy-based kde computation back, paving the way for making statsmodels an optional dependency.

@sjobeek do you want to give this a spin?
",2,1,[]
721,11418039,80,4704710,2014-01-10 21:50:56,2014-01-11 17:24:52,closed,Regplot xlim and ylim,"Specify `xlim` and `ylim` directly in `regplot`

Todo:
- [ ] Write tests :)

Sorry for the `v0.2` noise again.. I did this a few days ago but never PR'd it
",1,6,[]
722,11377605,73,4704710,2014-01-09 20:52:59,2014-07-02 18:43:02,closed,Clustered heatmap,"Here's an initial version of the clustered heatmap

Examples: http://nbviewer.ipython.org/gist/olgabot/8341784

Todos:
- [x] Reformat params with `heatmap_kws`, `row_kws` and `col_kws` or something to clean up the arguments
- [x] Is there a way to `set_axis_style('nogrid')` within a single plot? I couldn't find a way to detect the current `axis_style` to switch, and then return the `rcParams` to what they were.
- [ ] Allow for several levels of labeling groups in the heatmap (multiple levels of colors)
- [x] Allow for user to specify their own linkage matrices
- [ ] Constrain colorbar scale to have at most 3 labels. Currently this works only for divergent, linear maps.

Suggestions?
",26,205,"['enhancement', 'plots']"
723,11277076,70,4704710,2014-01-07 08:00:34,2014-04-26 17:05:14,closed,Dotplot,"This is a basic dotplot function that I think might be a useful addition to seaborn.

The term ""dotplot"" is used in various ways, these are dotplots in the style of Bill Cleveland's book, similar to what is implemented in this R package:

http://stat.ethz.ch/R-manual/R-patched/library/graphics/html/dotchart.html

Additional examples can be found in the appendix of this manuscript:

http://polisci.msu.edu/jacoby/research/dotplots/tpm/Jacoby,%20Dotplots,%20TPM%20Draft.pdf

The test_dotplot file (in seaborn/tests) shows how it works with simulated data. These are the plots generated by the test file:

http://dept.stat.lsa.umich.edu/~kshedden/seaborn/test_dotplot.pdf

Some examples with real data are here:

http://dept.stat.lsa.umich.edu/~kshedden/seaborn/dotplot_gdp_example.pdf
http://dept.stat.lsa.umich.edu/~kshedden/seaborn/dotplot_gas_prices.pdf

Scripts:

http://dept.stat.lsa.umich.edu/~kshedden/seaborn/dotplot_gdp_example.py
http://dept.stat.lsa.umich.edu/~kshedden/seaborn/dotplot_gas_prices.py

Comments and suggestions are welcome.
",2,10,"['enhancement', 'plots']"
724,11228941,65,4704710,2014-01-04 15:19:44,2014-04-26 17:05:24,closed,DOC: docstring examples,"Closes #45

Let me know if you see any things you dislike systematically.  I'm trying to keep the number of lines per example small. The linear model ones are a tougher.

still WIP for now.
",5,5,"['enhancement', 'docs']"
725,11199315,62,4704710,2014-01-03 03:03:41,2014-01-04 19:43:00,closed,Adding a kwarg to `set` for custom gridweights,"Here's a small PR for allowing the user to specify a custom grid line width. Current values are maintained as a default.

How should we go about the tests? my current setup is pretty noisy when it comes to the notebooks. Here's an nbviewer link (`In[]` cells 7 though 9):
http://nbviewer.ipython.org/gist/phobson/8231880
",2,5,"['enhancement', 'themes']"
726,11090369,54,4704710,2013-12-26 04:05:45,2013-12-26 22:50:23,closed,Refactor boxplot/violinplot setup,"In addition to cleaning up the code (#16) and adding copious tests, this also fixes some problems where not all styles of groupby parameters were being handled correctly by the setup code (#52).
",0,3,['refactor']
727,11082922,53,4704710,2013-12-25 06:50:24,2013-12-26 04:19:56,closed,V0.2,"Tried to fix stuff with violinplot on a grouped series. IT's possible that I didn't remove all my old changes on violin_improvements so let me know and I'll try to fix it.
",1,5,[]
728,11043200,48,4704710,2013-12-22 22:32:06,2013-12-23 00:02:50,closed,Order parameter in boxplot and violinplot,"This mainly addresses #17, but does not fix #16, which remains to be done. The full diff is a little noninformative as I moved the `violinplot` code next to the `boxplot` code to make going back and forth easier. I also caught a bug where using `vert=False` in `boxplot` was ignored when adding semantic information to the plot.
",0,4,[]
729,11042498,47,4704710,2013-12-22 20:16:11,2013-12-22 20:33:21,closed,Fix Python 3 tests,"Not sure why they started failing, but increasing the cell timeout seemed to do the trick. Also caught a bug in the image dimension mismatch reporting.
",0,2,[]
730,11039222,46,4704710,2013-12-22 07:17:04,2013-12-22 19:50:04,closed,Py3k compatability changes,"~~All tests currently pass on my computer, but it's failing on Travis due to some problem with `pillow` I have not been able to understand.~~

Now passing on Travis as well. I had to `pip install pillow` instead of using conda, which unfortunately makes the build take a while. But it should be good to go for now.
",0,10,[]
731,10948560,44,4704710,2013-12-18 19:42:06,2013-12-20 21:18:54,closed,WIP: Omnibus KDE changes,"This PR is for a number of planned changes relevant to KDE
- [x] Rename `sns.violin` to `sns.violinplot` for consistency (closes #34)
- [x] Use statsmodels KDE instead of scipy for more flexibility (ref #12)
- [x] Allow for `sns.kdeplot` to plot bivariate KDE when input data is `n x 2` (closes #40)

Possibly in this or in separate PR
- ~~Addition of higher-level `sns.jointplot` to draw joint distribution with KDE or hexbin and marginal plots~~
",0,9,['enhancement']
732,10865714,43,4704710,2013-12-16 18:36:38,2013-12-18 19:05:52,closed,Violin improvements,"Added `bw_method` and `linewidth` as options to `violin()`

example notebook: http://nbviewer.ipython.org/gist/olgabot/7992081
",3,4,['enhancement']
733,10865357,42,4704710,2013-12-16 18:26:43,2013-12-16 18:30:24,closed,Change how PIL is installed in conda,,0,1,[]
734,10839374,39,4704710,2013-12-15 19:35:24,2013-12-16 05:59:16,closed,Improve testing of tutorial notebooks,"This is the first step in an overhaul of `ipnbdoctest.py`. Step two will be to release it as a separate package and make seaborn depend on it. It's not quite clean or featured enough for that yet.

As part of improving the testing, I caught and fixed some bugs, and also reorganized the linear models notebook a bit, both for didactic purposes and to improve test stability.

I also added a Make rule to strip the object identifier hexes from the notebook for cleaner diffs. ~~Buuut, this seems to trigger test failures when I run it, so it exists but is not used in the notebooks pushed as part of this PR.~~

~~The tests are also failing because two cells (the one-tailed test corrplot cells) are stochastically nonreproducible. I imagine this has to do with randomness in the correlation permutation test, but I do not understand why it is not reproducible from run to run. (Actually in writing this I had an idea and will be testing it shortly).~~

~~The good news is that the currently failing status actually exercises Travis, which now fail when the notebooks don't reproduce.~~

This is an ugly pull request because getting the Travis build to pass required a lot of debugging of things. But it seems to be good to go. The `ipnbdoctest.py` updates might still be somewhat brittle, but we shall see.
",0,32,[]
735,10829386,37,4704710,2013-12-14 08:37:25,2013-12-14 08:44:52,closed,Add option to bin continuous predictor variable in lmplot,"This PR also includes a tweak to wrap facet titles when plots are small with a column and row facets
",0,3,[]
736,10800317,36,4704710,2013-12-13 10:28:26,2013-12-14 00:14:53,closed,setup.py: add missing dependencies,,3,1,[]
737,10800044,35,4704710,2013-12-13 10:18:00,2013-12-14 00:21:14,closed,Update setup.py for `pip install seaborn==dev`,"This should make it possibly (after updating at pypi) to use `pip install seaborn==dev` for installing the current master directly from github (instead of taking the detour to grab the master zipball url for github and using that for `pip install`).
",6,1,[]
738,10793732,33,4704710,2013-12-13 03:37:43,2013-12-13 03:37:55,closed,Make some changes/enhancements to interactplot,"- Plot with unfilled contours by default, but allow for filled contours
- Change the default colormap to `RdBu_r`
- Set the midpoint of the colormap to `y.mean()` by default.
- Add an example of `interactplot` when the data contain no interaction.
",0,1,[]
739,10791020,32,4704710,2013-12-13 00:57:24,2013-12-13 00:58:58,closed,Split the plotobjs.py into component modules,"No substantive changes here, just reorganization. Possibly hosed the git history, but it had to be done.
",0,4,[]
740,10716632,31,4704710,2013-12-11 07:22:52,2013-12-11 16:42:11,closed,Adding `interactplot` function,"The `interactplot` function is being added to help visualize models with two-way interactions between continuous variables. The plot is made by fitting an interaction model and then drawing a contour plot with the two predictor variables on each axis and the fitted values (y hats) color-encoded in the contours. So the joint distribution of the data observations is clear, a scatterplot is then drawn over the contours. The resulting image looks like this:

![screen shot 2013-12-10 at 11 18 39 pm](https://f.cloud.github.com/assets/315810/1721953/f32a2c80-6234-11e3-8cf3-c3125e0cf417.png)

This PR has the new function and some additions to the linear models notebook (including an example for an alternative presentation that bins one of the variables).
",7,4,[]
741,10704491,30,4704710,2013-12-10 21:50:29,2013-12-20 22:40:33,closed,"Add grid option, 'ticks'.","I need to use ticks. I appreciate that the grid serves the same purpose. And, moreover, your design choices reflect a sensibility much more refined than my own. (I love this project!)

But I can't do without them: my PhD adviser insists, which is reason enough for me. As for others, in my opinion ticks can be less intrusive that a grid in some cases, especially on the printed page. If you agree, here is a PR.

Since one would never want both ticks _and_ a grid, it seems natural to add ""ticks"" alongside ""whitegrid"", ""darkgrid"", and ""nogrid"".
",9,1,['enhancement']
742,10688175,29,4704710,2013-12-10 15:05:40,2013-12-10 15:49:26,closed,Fix the links to the examples in README,,1,1,[]
743,10672847,26,4704710,2013-12-10 04:31:00,2013-12-10 04:31:05,closed,Add travis CI to seaborn,"This now runs and claims the build is passing, but that's a bit of a lie at the moment. Two reasons:
- ipynbdoctest exits with 0 even when cells do not replicate, so currently things that should count as failures are masked (I'm not sure what happens when cells error)
- one cell per notebook is currently not replicating, with the following message. I cannot reproduce this on my laptop (all cells reproduce). The failure seems to happen near, but not at, the beginning of each notebook. Maybe the first plotting cell?
  
  ```
  mismatch output_type:
  stream
    !=  
  display_data
  ```

Nevertheless, merging now as it's running and at least the `nosetests` suite should trigger failures.
",0,3,[]
744,10602078,24,4704710,2013-12-06 17:56:31,2013-12-13 00:27:41,closed,Added legend support to kdeplot(),"I've added a legend keyword to kdeplot() so that users can toggle legends on or off when displaying, e.g., multiple densities on the same plot. Labels do not override the legend setting, so you need to assign labels and set legend to ""True"" in order to see the legend as expected.

![pta_sce_with_legend](https://f.cloud.github.com/assets/369992/1694332/74131378-5e9f-11e3-9a3b-b762b76d26df.png)

This plot was created by modifying one of the examples from the IPython notebooks to read:

```
sns.kdeplot(nm_gen0, shade=True, color=c1, ax=ax1, label='AA', legend=True)
sns.kdeplot(nm_gen1, shade=True, color=c2, ax=ax1, label='Aa', legend=True)
sns.kdeplot(nm_gen2, shade=True, color=c3, ax=ax1, label='aa', legend=True)
```
",21,8,['enhancement']
745,10308230,19,4704710,2013-11-26 17:47:06,2013-11-26 21:03:13,closed,Enhancements to tsplot,"The main enhancement here is that `tsplot` can now accept a long-form DataFrame as  the input data, along with strings identifying the fields containing information about time, units, etc. Additionally, for both array and DataFrame inputs it can take data structured into conditions and plot each condition separately. This required a mild backwards-incompatible change to the calling syntax, but the workaround is easy. I also substantially overhauled the timeseries doc notebook. A couple of other unrelated small things that popped up got fixed in here too.
",0,9,[]
746,10239972,18,4704710,2013-11-24 04:55:36,2013-12-22 19:51:38,closed,Python 3 compatibility changes,"Made a couple changes to allow this to run with Python 3. All tests pass and I was able to run the example notebooks in both Python 3.3 and Python 2.7. However, some changes are required to the moss and pyhusl libraries which I have forked and updated to make the necessary changes to run on Python 3. 

I'm not sure what the best way to deal with other libraries being behind for others trying to install seaborn. 
",5,8,['enhancement']
747,10157755,15,4704710,2013-11-21 03:46:50,2013-11-21 03:46:55,closed,Fix bug in xtick names for boxplot/violin using groupby (closes #14),"I also updated the distributions notebook with a test of this functionality, and fixed two examples where the second positional argument was not a groupby (a holdover from the old versions of these functions).
",0,1,[]
748,9549964,8,4704710,2013-10-31 00:59:25,2013-10-31 02:13:59,closed,added requirements.txt for convenience,"Makes it easier to install dependencies with pip install -r requirements.txt
",2,1,[]
749,8195734,4,4704710,2013-09-09 23:27:31,2013-09-16 20:14:06,closed,larger fonts option for context,,0,3,[]
750,8195662,3,4704710,2013-09-09 23:23:34,2013-09-16 20:13:36,closed,added context for larger poster fonts,,0,1,[]
