index,id,number,repo_id,created_at,closed_at,state,title,body,total_comments,total_commits,labels
0,705917398,2167,8935948,2021-08-07 16:54:30,,open,Remove vispy.js submodule and ipynb_webgl backend,"Now that the `jupyter_rfb` backend is available and performs so much better than the existing ipynb_webgl backend, this PR removes the `ipynb_webgl` and everything that was added for ipython or jupyter webgl-based. This includes the backend, the `js` git submodule, and all ipython webhooks which were old and not actually used by anything, and the setup.py trying to build the jupyter widget.

TODO:

- [ ] Update notebook examples to use jupyter_rfb (or at least don't mention webgl)",8,5,"['type: enhancement', 'code-quality', 'component: app', 'build']"
1,703413577,2164,8935948,2021-08-04 12:41:28,2021-08-05 21:15:59,closed,Remove 'VNC' backend,"The VNC backed was based on the same idea as the new jupyter_rfb backend, but it was always experimental and disabled by default.",0,2,"['type: enhancement', 'component: app']"
2,703275647,2162,8935948,2021-08-04 10:43:33,2021-08-05 21:22:47,closed,Cleanup init in backends,"I had a stab at doing clean `super().__init__(...)` in all the backend code, but that broke for Qt. Might be fixable but that would only complicate the code. So let's stick with the rule that the backend must call both the `BaseCanvasBackend.__init__` and the native widget's `__init__`.

* Most changes replace `*args` with just a `vispy_canvas` argument.
* Changed superclass order in a few places.
* ~Use `_process_backend_kwargs` in jupyter_rfb backend.~
* Also a tweak to flake8 config to ignore errors from certain flake8 extensions that one might have installed in the env.",0,4,[]
3,700222063,2160,8935948,2021-07-30 11:31:24,2021-07-30 19:48:17,closed,Refactor texture_lut() Colormap method to BaseColormap for cleaner usage,"Just some code sanitizing, as promised in https://github.com/vispy/vispy/pull/2150#discussion_r673866637.",0,4,"['type: enhancement', 'code-quality', 'component: visuals', 'component: color']"
4,696527189,2156,8935948,2021-07-25 16:16:15,,open,Add MultiChannelImageVisual,"This is something I've had in my work vispy-based project (SIFT) for a while, but only recent extracted all of the SIFT-specific stuff so that it could be included in vispy. This is something I've talked to @tlambert03 in other PRs about possible using as a based for some more complex ImageVisual logic. This Visual is an ImageVisual for RGB images, but each channel is its own texture (pro: full 32-bit float precision per-channel) and a clim and gamma for each channel as well. This is a very common use case for the field I'm in where people want to take remote sensing satellite imagery data and combine the individual wavelength ""bands"" into RGB images. You typically see recipes with brightness temperature limits (clims) and gamma corrections.

This visual also allows you to only fill in some of the bands. So maybe you only have the R channel filled in, but G and B are set to `None` (small array of NaNs in-texture).

I could add more tests to this and/or an example, but I wanted to get any feedback from people before I go too deep. @kmuehlbauer @tlambert03 @almarklein Thoughts?",10,9,"['type: enhancement', 'component: visuals']"
5,694506862,2152,8935948,2021-07-21 16:01:18,2021-07-21 22:15:58,closed,Test PR to see if the CI segfault is in main,,2,2,[]
6,693594435,2150,8935948,2021-07-20 15:56:28,2021-07-21 12:26:42,closed,Fix `VolumeVisual.cmap` setter not working for most colormaps,"Right now, updating the `cmap` property of the volume visual either doesn't change anything or results in an ugly traceback. This PR is upstreaming a fix for that from napari, originally made by @sofroniewn.

Here is an example you can play with
```python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright (c) Vispy Development Team. All Rights Reserved.
# Distributed under the (new) BSD License. See LICENSE.txt for more info.
# -----------------------------------------------------------------------------
# vispy: gallery 2

""""""
Example volume rendering

Controls:

* 1  - change colormap
""""""

from itertools import cycle

import numpy as np

from vispy import app, scene, io
from vispy.color import get_colormaps, BaseColormap
from vispy.visuals.transforms import STTransform

# Read volume
vol1 = np.load(io.load_data_file('volume/stent.npz'))['arr_0']

# Prepare canvas
canvas = scene.SceneCanvas(keys='interactive', size=(800, 600), show=True)

# Set up a viewbox to display the image with interactive pan/zoom
view = canvas.central_widget.add_view()

# Create the volume visual
volume = scene.visuals.Volume(vol1, parent=view.scene, threshold=0.225)


# Create three cameras (Fly, Turntable and Arcball)
fov = 60.
cam1 = scene.cameras.FlyCamera(parent=view.scene, fov=fov, name='Fly')
cam2 = scene.cameras.TurntableCamera(parent=view.scene, fov=fov,
                                     name='Turntable')
cam3 = scene.cameras.ArcballCamera(parent=view.scene, fov=fov, name='Arcball')
view.camera = cam2  # Select turntable at first

# Create an XYZAxis visual
axis = scene.visuals.XYZAxis(parent=view)
s = STTransform(translate=(50, 50), scale=(50, 50, 50, 1))
affine = s.as_matrix()
axis.transform = affine


@canvas.events.mouse_move.connect
def on_mouse_move(event):
    if event.button == 1 and event.is_dragging:
        axis.transform.reset()

        axis.transform.rotate(cam2.roll, (0, 0, 1))
        axis.transform.rotate(cam2.elevation, (1, 0, 0))
        axis.transform.rotate(cam2.azimuth, (0, 1, 0))

        axis.transform.scale((50, 50, 0.001))
        axis.transform.translate((50., 50.))
        axis.update()

current_cmap = 'grays'
cmaps = ['grays', 'reds', 'greens', 'blues']

# Implement key presses
@canvas.events.key_press.connect
def on_key_press(event):
    global current_cmap
    if event.text == '1':
        current_cmap = cmaps[(cmaps.index(current_cmap) + 1) % 4]
        volume.cmap = current_cmap

if __name__ == '__main__':
    print(__doc__)
    app.run()

```

Example of the ugly traceback without this PR
```python
WARNING: Error drawing visual <Volume at 0x172387dc0>
WARNING: Traceback (most recent call last):
  File ""/Users/aburt/Programming/vispy/playground/volume_simple.py"", line 80, in <module>
    app.run()
  File ""/Users/aburt/Programming/vispy/vispy/app/_default_app.py"", line 60, in run
    return default_app.run()
  File ""/Users/aburt/Programming/vispy/vispy/app/application.py"", line 155, in run
    return self._backend._vispy_run()
  File ""/Users/aburt/Programming/vispy/vispy/app/backends/_qt.py"", line 292, in _vispy_run
    return app.exec_()
  File ""/Users/aburt/Programming/vispy/vispy/app/backends/_qt.py"", line 526, in event
    out = super(QtBaseCanvasBackend, self).event(ev)
  File ""/Users/aburt/Programming/vispy/vispy/app/backends/_qt.py"", line 526, in event
    out = super(QtBaseCanvasBackend, self).event(ev)
  File ""/Users/aburt/Programming/vispy/vispy/app/backends/_qt.py"", line 846, in paintGL
    self._vispy_canvas.events.draw(region=None)
  File ""/Users/aburt/Programming/vispy/vispy/util/event.py"", line 453, in __call__
    self._invoke_callback(cb, event)
  File ""/Users/aburt/Programming/vispy/vispy/util/event.py"", line 471, in _invoke_callback
    _handle_exception(self.ignore_callback_errors,
  << caught exception here: >>
  File ""/Users/aburt/Programming/vispy/vispy/util/event.py"", line 469, in _invoke_callback
    cb(event)
  File ""/Users/aburt/Programming/vispy/vispy/scene/canvas.py"", line 218, in on_draw
    self._draw_scene()
  File ""/Users/aburt/Programming/vispy/vispy/scene/canvas.py"", line 277, in _draw_scene
    self.draw_visual(self.scene)
  File ""/Users/aburt/Programming/vispy/vispy/scene/canvas.py"", line 315, in draw_visual
    node.draw()
  File ""/Users/aburt/Programming/vispy/vispy/scene/visuals.py"", line 99, in draw
    self._visual_superclass.draw(self)
  File ""/Users/aburt/Programming/vispy/vispy/visuals/visual.py"", line 451, in draw
    self._program.draw(self._vshare.draw_mode,
  File ""/Users/aburt/Programming/vispy/vispy/visuals/shaders/program.py"", line 102, in draw
    Program.draw(self, *args, **kwargs)
  File ""/Users/aburt/Programming/vispy/vispy/gloo/program.py"", line 526, in draw
    canvas.context.flush_commands()
  File ""/Users/aburt/Programming/vispy/vispy/gloo/context.py"", line 172, in flush_commands
    self.glir.flush(self.shared.parser)
  File ""/Users/aburt/Programming/vispy/vispy/gloo/glir.py"", line 579, in flush
    self._shared.flush(parser)
  File ""/Users/aburt/Programming/vispy/vispy/gloo/glir.py"", line 501, in flush
    parser.parse(self._filter(self.clear(), parser))
  File ""/Users/aburt/Programming/vispy/vispy/gloo/glir.py"", line 819, in parse
    self._parse(command)
  File ""/Users/aburt/Programming/vispy/vispy/gloo/glir.py"", line 781, in _parse
    ob.draw(*args)
  File ""/Users/aburt/Programming/vispy/vispy/gloo/glir.py"", line 1344, in draw
    gl.check_error('Check after draw')
  File ""/Users/aburt/Programming/vispy/vispy/gloo/gl/__init__.py"", line 204, in check_error
    raise err
RuntimeError: OpenGL got errors (Check after draw): GL_INVALID_OPERATION
ERROR: Invoking <bound method SceneCanvas.on_draw of <SceneCanvas (PyQt5) at 0x15be77c10>> for DrawEvent
WARNING: Error drawing visual <Volume at 0x172387dc0>
ERROR: Invoking <bound method SceneCanvas.on_draw of <SceneCanvas (PyQt5) at 0x15be77c10>> repeat 2
WARNING: Error drawing visual <Volume at 0x172387dc0>
```

",8,3,"['type: bug', 'component: visuals', 'priority: high']"
7,691984543,2149,8935948,2021-07-17 20:32:42,,open,Rendering arbitrary planes in the `VolumeVisual`,"
https://user-images.githubusercontent.com/7307488/126048864-4c694229-3d41-4e3b-9362-b064d41cb54b.mp4

This PR supersedes #2074 to implement the rendering of arbitrary planes through volumetric data in the `VolumeVisual` - please see a detailed explanation of the rendering in #2074.

The reason for a new PR was that I wanted to incorporate changes from the current main branch of vispy and also #2117 (and brisvag/vispy#2) which improves the way alternative rendering modes are handled in the visual. ",10,20,"['type: enhancement', 'component: visuals']"
8,691971937,2148,8935948,2021-07-17 18:36:34,2021-07-23 19:26:45,closed,Switch examples and website gallery to sphinx-gallery,"Depends on https://github.com/vispy/vispy-website/pull/40. See that PR for details.

Closes #2122 ",23,72,"['type: example', 'docs-website']"
9,691650045,2144,8935948,2021-07-16 17:44:26,2021-07-16 18:20:53,closed,Add filter keyword arguments to subclassed filters,"This PR will allow users to pass keyword arguments to the subclassed filters in ```color.py```.

Closes #2143 ",5,3,"['type: bug', 'component: visuals']"
10,690227111,2142,8935948,2021-07-14 21:10:14,2021-08-03 15:00:45,closed,"Add ""jupyter_rfb"" backend for inline Jupyter Notebook/Lab display","This implements a new backend based on `jupyter_rfb`. I'll be updating jupyter_rfb at the same time, so it aint easy to give this is a spin yet. This is basically the same as what was intended with the `ipynb_vnc` backend, but all the ""hard parts"" are delegated to an external library.

Includes a new simple way to create a (global) hidden window just for having a GL context, plus an approach to render offscreen using an FBO. The event system integrates with asyncio, because that's what Jupyter uses (via Tornado).

Closes #2127, closes #134, relates to all issues tagged with the jupyter-widget tag.

Todo:

* [x] Basic implementation
* [x] Can simply use canvas as cell output  
* [x] Events (mouse, key, scroll, ...)
* [x] Timers
* [x] Test multiple canvases
* [x] Test using a widget as subwidget
* [x] Tests
* [x] Examples
* [x] ~Use a global context~ -> no, we need to use one context per canvas to avoid interference.
* [x] Check for remaining todos that I left behind
* [x] Update and release jupyter_rfb.
* [x] More tests?
* [x] Look into `_ipython_display_`.",22,23,"['type: enhancement', 'component: jupyter-widget-backend', 'component: app', 'type: performance']"
11,689373911,2140,8935948,2021-07-13 20:19:26,2021-07-15 15:59:25,closed,Fix scalable textures clim_normalized when auto clims are used,"Closes #2139 

I'm not super happy with the try/except in the ImageVisual, but also it seems like the most flexible and future-proof.",1,2,"['type: bug', 'component: visuals']"
12,687187709,2137,8935948,2021-07-10 14:02:10,2021-07-12 15:11:25,closed,Fix for Apple Silicon M1 (arm64),"As requested by @djhoese here:
https://github.com/vispy/vispy/pull/1975#issuecomment-873084868

In order to have vispy run on Apple Silicon M1 (arm64) some functions marked as OBJC_ARM64_UNAVAILABLE need to be screen via arch
See also: 
https://github.com/pyglet/pyglet/pull/335/commits/5aa1870188b9675cdee090bbecb342661ccc06a6
This fix was originally proposed by @isuruf here:
https://github.com/vispy/vispy/issues/2013#issuecomment-819690863
And then expanded by @watjurk here:
https://github.com/vispy/vispy/issues/2013#issuecomment-819724112
However, the first two lines they also modified:
```
objc.class_getClassMethod.restype = c_void_p 
 objc.class_getClassMethod.argtypes = [c_void_p, c_void_p] 
```
seem to not need skipping on M1.

Using this fix, napari (python image viewer, etc.) runs just fine. 
Without, each of those functions results in ""symbol not found"" errors.

Disclaimer: I don't really understand this fully, but I've been using this fix for a week and everything seems fine in napari—I have no other vispy using software/code.",3,1,"['type: bug', 'build', 'priority: high']"
13,686034870,2135,8935948,2021-07-08 13:50:29,2021-07-12 15:22:38,closed,Dont warn about missing networkx until it's actually used,"Closes  #2132

cc @jni",1,3,[]
14,685185271,2134,8935948,2021-07-07 13:13:10,2021-07-12 02:22:37,closed,Set stacklevel for colormap deprecation.,"This allows to get proper file/line for deprecation in test suite, which
make it a bit easier to track where the errors come from.

Also update a literal usage of get_colormap('cubehelix') with the
corresponding new import.",3,2,['code-quality']
15,684481513,2133,8935948,2021-07-06 15:34:01,,open,"WIP: ENH: Enhance ImageVisual with polar capabilities, add example","This PullRequest enhances the ImageVisual to display a polar representation of itself via `kwarg` `polar` (eg. `polar=(dir, loc, origin)`)

- added property `polar` to work on existing ImageVisuals
- method  `impostor` is needed
- dir - direction (""cw"", ""ccw"", clockwise/counterclockwise)
- loc (location of theta=0, eg ""N"", ""E"" etc. )
- origin (which point is taken to map theta/range, eg. ""UL"", ""LR"")

Todo: Add tests, add imap-functionality to remap coordinates.

Context:

As asked on SO (https://stackoverflow.com/questions/68177737/how-to-convert-visuals-image-to-polar-using-vispy) and the chat on gitter (https://gitter.im/vispy/vispy?at=60e1e0194e325e6132bc5cf9) the normal transform system can't be used (AFAICT) to create what we want. We do not have access to all these image attributes (size, direction, location, origin) within the transform chain. So I decided to put this directly into ImageVisual. That way we leave the transform chain alone and can do all other kinds of transforms. Not sure, if this the best approach, but it works quite nicely. See also the attached example.",17,7,"['type: enhancement', 'type: example', 'component: visuals']"
16,682160929,2131,8935948,2021-07-01 20:54:51,2021-07-02 10:09:41,closed,Fix auto clim calculation if all data is non-finite,Closes #2129,0,2,"['type: bug', 'component: gloo']"
17,681640389,2126,8935948,2021-07-01 08:58:47,2021-07-01 11:43:47,closed,Make meshes upright and face the camera in mesh examples,Addresses #2123,0,1,['type: example']
18,681630794,2125,8935948,2021-07-01 08:47:21,2021-07-01 11:42:41,closed,Update light direction in mesh shading examples,"Following #2091

Addresses #2123",1,1,"['type: bug', 'type: example']"
19,681371661,2124,8935948,2021-07-01 02:01:11,2021-07-01 07:02:15,closed,Fix code of conduct link in README,,3,2,[]
20,680910702,2121,8935948,2021-06-30 14:06:57,2021-06-30 14:46:14,closed,Add CI job for uploading to test PyPI,"As discussed in #2104 we should upload test packages to test PyPI. This is my attempt at getting the workflows setup for this. @kmuehlbauer how does this look?

CC @sofroniewn ",0,2,['build']
21,680453910,2119,8935948,2021-06-30 00:50:21,2021-06-30 08:52:48,closed,Replace CI environment variable checks with constants,I wanted to do an xfail in #2106 and realized that we have `os.getenv` all over the tests. I felt replacing these with constants in the testing utilities would make this simpler and cleaner in the long run.,0,2,['code-quality']
22,680437067,2118,8935948,2021-06-30 00:06:00,,open,fix: the FOV in BaseCamera is conflicting with Base3DRotationCamera...,"…and possibly other camera classes as well

In Base3DRotationCamera, changing the FOV through mouse event will be handle by viewbox_mouse_event(). With this line: 
```python
self.fov = min(180.0, max(0.0, fov))
```
it is possible to have `self.fov = 180` when `fov = 180`. And this will create an exception since BaseCamera class does not allow `fov >= 180`.",9,1,"['type: bug', 'component: scene']"
23,680347010,2117,8935948,2021-06-29 20:39:11,2021-07-26 11:38:21,closed,Migrate from string formatting to template ($) variables in VolumeVisual shaders,"The comments in #2113 inspired this PR.

There seems to be no reason for the volume visual to be inconsistent with the rest of the visuals (apart from maybe a marginal performance improvement by pre-formatting the string). This PR replaces the pre-formatted shaders of each volumetric rendering method with vispy's `$variable` notation.

This makes fragment code clearer (no double `{{`) and makes the rendering methods work the same as any other variable in the shaders.",15,3,"['type: enhancement', 'code-quality', 'component: visuals']"
24,680322522,2116,8935948,2021-06-29 19:56:20,,open,Clipping planes in `VolumeVisual`,"After trying to implement this [in napari](https://github.com/napari/napari/pull/2934) and getting some very useful input in #2113, here's a pure vispy implementation of clipping planes for the Volume visual.

I added an example (`examples/basics/scene/volume_clipping.py`) with some simple keybindings to showcase the code (thanks @alisterburt for your code at #2074 :)).

https://user-images.githubusercontent.com/23482191/123859348-d1646600-d924-11eb-8c12-d28f9fe087a9.mp4

Planes are defined as two vec3 (position and normal vector), and are used to clip the volume (anything on the negative side of the normal vector is not shown). The shape of `volume.clipping_planes` should therefore be `(n_planes, 2, 3)`.

Currently, the vector coordinates are normalized in (0, 1), but they should probably be in world coordinates; I'm not sure how to handle that...",11,14,[]
25,680058647,2115,8935948,2021-06-29 14:25:38,2021-06-29 15:41:33,closed,Fix VolumeVisual artifacts with mip/minip if nothing was found,"This fixes #2114. While this does not affect anything currently, it will cause problems in the future (such as with clipping planes).",2,2,"['type: bug', 'component: visuals']"
26,678673249,2111,8935948,2021-06-28 03:33:28,2021-06-28 21:01:49,closed,Change Visual GL state so it is only set if drawing,"Closes #2109 

As discussed in #2109, this moves when the GL state is applied/sent to the GPU. This is things like depth test, blend functions, etc. Previously this was done *before* `_prepare_draw` of the individual Visual was called. If `_prepare_draw` returns `False` then a `Visual` isn't drawn and this is wasted. This PR is currently just a test to see what happens if we do this change. In the best case this passes all tests and is a slight performance improvement. In the next best case it only effects the `TextVisual` which has some complicated rendering before ""real"" drawing. Worst case is there are settings that reset GPU state (like clear color?) and doing these after texture, buffer, and other data commands will cause issues. In this last case, this can't be merged.",0,1,"['type: bug', 'component: gloo', 'component: visuals', 'type: performance']"
27,678578190,2110,8935948,2021-06-27 20:46:52,2021-06-28 13:14:04,closed,Fix inconsistent picking behavior regarding depth testing,"Closes #2107

See #2107 for the long debug process and discussion on this. Basically the MeshVisual used by the ViewBox (and all Widget objects) only has `cull_face` set, but depends heavily on the behavior/setting of depth testing. This PR forces depth testing to be off which seems to make this picking Mesh behave more consistently with ViewBox child Visuals.

TODO:

- [x] Add a test reflecting at least one of the cases in #2107.",4,4,"['type: bug', 'component: scene', 'priority: high']"
28,677962916,2106,8935948,2021-06-25 14:34:39,2021-06-30 13:56:14,closed,Add handling of NaNs in ImageVisual,"This was discussed a little in #2085 and I know this current implementation isn't optimized (multiple nan checks and branches), but I wanted to start the discussion since this shows (I think) what we want the end result to be. For single channel images, the NaN pixels should be fully transparent (or discarded). For RGB images, if all pixels are NaNs then make them transparent, otherwise make them the lower clim limit.

Thoughts? Changes?",14,9,['type: enhancement']
29,677906368,2105,8935948,2021-06-25 13:15:49,2021-06-28 21:00:17,closed,Refactor ImageVisual for easier subclassing,"This PR refactors the ImageVisual's creations of its Texture object. This is to help me in my own applications where I want to subclass the ImageVisual. This simple change gives me much more control over how the textures are created while not requiring me to replicate the whole `__init__`. There is probably larger refactor that could serve subclasses (like the one @tlambert03 is working on in #1999), but I'm not sure we're ready for that yet. I hope to find some time today to use this refactor in my application and make sure it works. Eventually the subclass I'm working on will probably be added to VisPy-core.",2,4,"['code-quality', 'component: visuals']"
30,677008416,2102,8935948,2021-06-24 10:58:46,2021-06-24 11:19:31,closed,Also update clim for rgb,Addendum to #2085. I seem to have overlooked that second function.,0,1,[]
31,676741692,2100,8935948,2021-06-24 02:34:53,2021-06-24 11:18:44,closed,Fix grid solver not updating variables when height/width changed,"Closes #2093 
Closes #2099 
Closes #2097 

This closes the issue mentioned above and replaces the PRs mentioned. While debugging #2093 I noticed that the `height` of a widget would sometimes be set to `0` randomly. I thought I remembered kiwisolver's documentation talking about how to print out information about the solver so I was looking for [that](https://kiwisolver.readthedocs.io/en/latest/basis/solver_internals.html#inspecting-the-solver-state) when I found https://kiwisolver.readthedocs.io/en/latest/basis/basic_systems.html#solving-and-updating-variables. This mentions that if you suggest a new value for a variable you also have to later run `.updateVariables()` to have the solver actually calculate the new results.

I made the changes in this PR and ran the example code in #2093 for 438 times with no errors. This seems to actually fix the issue. I'm hoping @almarklein can do a little more testing. It would also be interesting (if we have the time) to know what the previous height was and what the new height was being set to. I guess I assume the height is being set to 0 originally, then the whole window is resized during `.show`, and the height never got changed from 0...well except why would width not be the problem :thinking: I don't know.",3,2,"['type: bug', 'component: plot']"
32,676545804,2099,8935948,2021-06-23 19:08:09,2021-06-24 11:18:44,closed,Prevent panzoom viewbox become zero,"See #2093. This fix prevents the `scatter_histogram.py` example from producing an error when one of its widgets gets zero height, which happens intermittendly. This does not solve the underlying problem of a zero-height widget being created in the first place, but it does prevent errors in case a scene is created with a zero-sized viewbox in other situations.

See  #2097 for (an attempt at) a proper solution.",3,1,[]
33,676432148,2098,8935948,2021-06-23 16:10:04,,open,Extract out and test the computation of normals,"This does not add any new functionality, but tries to isolate the routines for unit testing for correctness.

This is in preparation for including the accelerated computation of vertex normals from #2069.",6,5,[]
34,676391106,2097,8935948,2021-06-23 15:20:00,2021-06-24 11:18:44,closed,Fix grid solver allowing for 0 sized widgets and causing errors,As discussed in #2093 it seems there are random cases (hard to reproduce) that produce widgets in a Grid widget with 0 size. This results in the PanZoomCamera sometimes getting a scale of `0` which then fails later inside the STTransform/MatrixTransform work.,17,4,"['type: bug', 'component: plot']"
35,676367451,2096,8935948,2021-06-23 14:55:51,2021-06-23 15:12:54,closed,Add apt update to CI environment,"Sanity checking...

#2094 ",4,1,['build']
36,676304809,2095,8935948,2021-06-23 13:46:16,2021-06-23 15:03:29,closed,More deps for ci full deps,Maybe fixes #2094?,1,3,[]
37,675235448,2092,8935948,2021-06-22 09:16:25,2021-06-22 13:44:41,closed,Prevent memory surge in two examples,"Closes #1871

The problem is that if updates are done, these are encoded as GLIR commands, which end up in a queue. You can imagine that this queue becomes a problem if it is not emptied. If a Qt window is minimized, it won't invoke a draw event, so the queue is not flushed, and it builds up.

The solution/workaround is to call `canvas.context.flush()` explicitly. There are multiple examples affected by this. Basically any example that does *any* update to a GPU buffer, texture or program. However, most these updates are so small that it does not show a noticable memory increase (no increase seen in the process manager). These two examples change so much data at such a high speed that it does matter.

@rossant here's a nasty downside of the GLIR queue :)  On the long run it could be worth examining if we can get rid of the queue completely, since all our GLIR backends are local and can be flushes immediately ...",0,1,[]
38,674871254,2091,8935948,2021-06-21 20:53:23,2021-06-25 07:55:29,closed,Improve specular light in phong shading,"Addresses the main point in  #2087

* Make the depth step for calculating the view direction a bit smaller to avoid glitches.
* Fixes that the view direction was reversed. I don't think this caused any problems, but it did cause confusion while making changes. (I verified the direction by adding `light_vec = eye_vec`.)
* Changes the reflection model to the better Blinn-Phong: see https://learnopengl.com/Advanced-Lighting/Advanced-Lighting.
* Tweaked default light paramseters.

Dropping this here:
```
    // Note (AK): Below is a way to flip the surface normal so that it's always in
    // the view direction. However, this only works well when the light and view
    // vector are (about) the same. Otherwise, normals on faces that that are
    // near-parallel to the eye vector can flip, affecting how they're lit,
    // causing bright and dark artifacts at the edges of objects.
    normal = faceforward(-normal, normal, eye_vec);
```",13,6,"['type: enhancement', 'component: visuals']"
39,674785108,2090,8935948,2021-06-21 18:34:14,2021-06-24 01:12:03,closed,Fix alpha handling in 'translucent' Visuals and add 'alpha' keyword argument to Canvas.render,"This is an attempt at providing a more clear and stable way for users to get a numpy array of the current visualization. Users often see the `Canvas.render` method, but are then surprised by some of the results. For example:

https://github.com/napari/napari/issues/1566#issuecomment-690748249

I think it may be more important for us to figure out a way around this. I've made this PR to discuss it and to provide a possible workaround with a `Canvas.screenshot` method as the `_screenshot` utility function is my usual go to response for users who run into `.render` issues. @almarklein and I discussed this a little here: https://github.com/vispy/vispy/pull/2082#issuecomment-864962729

I think in the best case `.render` would produce the expected results, but I'm not sure what the proper solution is. This is a partial solution to #1979.",21,7,"['type: bug', 'component: gloo', 'component: visuals', 'component: scene']"
40,674734567,2089,8935948,2021-06-21 17:12:54,2021-06-22 13:21:13,closed,Fix SceneCanvas Node leaking reference to itself,"This is a possible cleanup as discussed in #2083. This assumes a lot of stuff about VisPy and Python garbage collection that may not actually matter. I kind of ran wild with this idea that VisPy is adding a reference to a Visual that never gets collected. I tracked it down to the `self.scene_node` property of the Node class (used by SceneCanvas graph nodes). The behavior that I was trying to ""fix"" was that when you set a parent for a Node and then remove that parent you should end up with the same number of references for that Visual. This may not matter or be wrong because:

1. I don't think Python garbage collection cares about an object referencing itself.
2. I'm not sure if this will break certain cases of using VisPy where the `.scene_node` should be a ""hard"" reference...but I'm not sure why that would be useful.

CC @yxdragon",2,1,"['code-quality', 'component: scene', 'type: performance']"
41,674530418,2088,8935948,2021-06-21 12:59:42,2021-06-21 15:09:29,closed,Restore ambient light behavior as in v0.6.0,"With these changes, the ambient light is:
- on by default with intensity 0.3,
- applied on the base color of the mesh.

The restores the behaviour of the MeshVisual as before the ShadingFilter was introduced.",0,1,['component: visuals']
42,673929805,2085,8935948,2021-06-19 20:26:34,2021-06-22 07:48:13,closed,Improve infinity/NaN handling in VolumeVisual and ImageVisual clim calculations,"* The logic in the shader is simplified and has no branches (in the clim computation).
* Deal with nan and inf in data. Uses @larsoner's idea to stay performant by default at the cost of being a bit extra less performant when non-finite values are present :)
* Correct behavior when clim range is zero.

",7,12,"['type: enhancement', 'component: visuals']"
43,673843808,2084,8935948,2021-06-19 08:19:44,2021-06-22 00:39:54,closed,Document OpenGL state presets,"- Clarify which attributes of the state are modified by each preset in the base `vispy.gloo.wrapper.set_state()` function.
- Add a link to `set_state()` in the higher-level `(Compound)Visual.(set|update)_gl_state()`.",8,10,['docs-website']
44,673315812,2082,8935948,2021-06-18 09:27:11,2021-06-21 18:48:44,closed,Close some GL leaks,"* Make flake8 ignore `N` in case the pendantic ""pep8-naming"" is installed.
* Check for imports of `OpenGL`:
  * Removes use of `OpenGL` in `visuals/line/line.py`.
  * Remove use of `OpenGL` in  `backends/_tk.py`.
  * No other usages.
* Check for usage of `gl` in visuals and above:
  * It is used in path collections to disable the depth buffer. Seems hard to fix, so added a comment for now.
  * No other usages.

",6,5,[]
45,672970463,2079,8935948,2021-06-17 20:33:01,2021-06-21 02:44:10,closed,Fix PanZoomCamera 'center' property not updating view,"Replaces #1751. I tried to rebase that PR on to `main` and git (or rather pycharm) warned me that it wasn't going to end well. I instead created a new branch off of `main` and cherry-picked it since it was a single commit. I've then modified how the `DEFAULT_RECT_TUPLE` was defined as flake8 was pointing out that it isn't actually available in the internal method scope.

Now to write a test... :fearful: ",1,3,"['type: bug', 'code-quality', 'component: scene']"
46,671665617,2076,8935948,2021-06-16 16:37:18,2021-06-23 15:20:56,closed,Add Code of Conduct,"In an effort to make VisPy a more welcoming community, I'd like to add a Code of Conduct. A code of conduct allows members of the VisPy community to know what is expected of them and of the other members of the community. It also lets everyone know what actions are taken due to violations of this code of conduct regardless of the violator's ""status"" in the project. That means even core developers/maintainers are subject to this CoC and its punishments (including permanent ban from the community). This CoC applies to both virtual (GitHub, gitter chat, video calls) as well as in-person events (sprints, conferences, meetings, etc).

TODO:

- [x] Create an email list specifically for community members to submit violations of this CoC (new google group?  https://groups.io/?)
- [x] Identify who will be on this mailing list and can appropriately respond to violation submissions and enforce any punishment.
- [x] Add link to CoC document from vispy website
- [x] Add small description and link to repository README

I will be on the mailing list. Who else is willing?",10,6,['docs-website']
47,670691834,2074,8935948,2021-06-15 19:37:24,2021-07-17 20:33:18,closed,Rendering arbitrary planes from 3D textures in the `VolumeVisual`,"Here is a work-in-progress implementation of arbitrary plane rendering in the `VolumeVisual`.

https://user-images.githubusercontent.com/7307488/122108319-f8467680-ce13-11eb-8889-5fab58fd9fd3.mp4

there is an example you can play with called `volume_plane_playground.py`

## Current behaviour

Currently, the `VolumeVisual` casts a ray through a volume and performs some computation on the values encountered. These different calculations are implemented as 'snippets', inserted into the fragment shader template by string formatting. The start and endpoints of this raycasting are the intersections of the view ray with the bounding box of the volume.

## How to render an arbitrary plane?

To render arbitrary planes with a 'thickness', I intersect the view ray with a plane in the volume and sample the texture above and below that plane (along the plane normal vector)

key points:

- A plane in the fragment shader is defined by a position in the volume `u_plane_position`, a normal vector `u_plane_normal` and a thickness `u_plane_thickness`
- the setup for raycasting in the fragment shader can now be templated, name is `{raycasting_setup}`
- I add a template for this alternative raycasting mode

other things modified to make this work:

- expose new shader variables on the visual: `mode`, `plane_position`, `plane_normal` & `plane_thickness`
- FRAG_DICT keys are now a tuple of (`raycasting_mode`, `rendering_method`)
- FRAG_DICT is now contained in `VolumeVisual.fragment_shaders` and contains shaders for all rendering methods in both raycasting modes

## Things I would explicitly like some help with 😅 

- depth

Currently the depth buffer is not set explicitly in the `VolumeVisual`. Based on [this page](https://learnopengl.com/Advanced-OpenGL/Depth-testing) I think the value is constant across all non-discarded fragments (depicted - `gl_FragCoord.z`).
![image](https://user-images.githubusercontent.com/7307488/122111118-41e49080-ce17-11eb-9dec-65da19d99b45.png)
Can/should I set `gl_FragCoord.z`, or should I [set the `gl_FragDepth` buffer directly](https://www.labri.fr/perso/nrougier/python-opengl/#spheres)? (slow?) I'm not sure how to properly project the z position in data/texture coordinates into what is expected here by other visuals in the same scene (my motivation is consistency with other visuals e.g. markers, I want the possibility of having some markers in front and some behind the plane)

- invalid variables

https://github.com/vispy/vispy/blob/91972307cf336674aad58198fb26b9e46f8f9ca1/vispy/visuals/volume.py#L788-L792
the section of code here makes me think I should add some lines for my plane variables but I don't really understand why they're needed/what they're doing

I would definitely appreciate any and all general advice here as this is my first real attempt to contribute to vispy and I'm very much playing with openGL for the first time, thanks for taking the time to read!
",10,16,"['type: enhancement', 'component: visuals']"
48,670521018,2072,8935948,2021-06-15 15:37:10,2021-06-16 15:38:46,closed,Set default log level to warning,Closes #1790 ... from dec 2019 :),1,3,[]
49,669154556,2070,8935948,2021-06-14 01:32:41,2021-06-15 14:01:14,closed,Fix VolumeVisual bounds representing the wrong axis,"This is a partial fix for #2064 (CC @yxdragon).

The issue is that the VolumeVisual assumes data is in the shape of `(z, y, x)`, but VisPy seems to assume that axis (0, 1, 2) -> (x, y, z). We can see this in the `ImageVisual` which passes data as `(y, x)` and in its `_compute_bounds` method it uses `self.size` which is the reversed shape of the array. So the bounds are computed accurately. For the VolumeVisual, we need to take these values in reverse as well (but aren't currently). This PR does this by using in a way so if a VolumeVisual ever has more than 3 dimensions, the last 3 dimensions are used. I'm not sure that is a bad assumption or not bug :shrug: 

Also, I've added a `self._is_zyx` property to the `VolumeVisual` so that in the future the rest of #2064 can be resolved in which a user can pass data with `(x, y, z)` (matching `MeshVisual`/`Isosurface`) and still get the correct bounds.

Running this code:

```python
from vispy import scene
import numpy as np
import scipy.ndimage as ndimg

canvas = scene.SceneCanvas(keys='interactive', bgcolor='white', size=(800, 600), show=True)
view = canvas.central_widget.add_view()

imgs = np.zeros((100,200,300), dtype=np.float32)
imgs.ravel()[np.random.randint(0,100*200*300,1000)]=1
imgs = ndimg.gaussian_filter(imgs, 3)
scene.visuals.Volume(imgs, cmap='hot', parent=view.scene)

if __name__ == '__main__':
    canvas.app.run()
```

Without this PR produces (not centered on the Visual):

![image](https://user-images.githubusercontent.com/1828519/121828832-62311580-cc86-11eb-862b-8829420db643.png)

With this PR produces (centered on the Visual):

![image](https://user-images.githubusercontent.com/1828519/121828848-737a2200-cc86-11eb-885d-c4f84201dcc0.png)
",0,4,"['type: bug', 'component: visuals']"
50,669009479,2069,8935948,2021-06-13 07:52:06,,open,Fix errors in geometry generation and improve mesh normal calculations,"1. upspeed vertex normal counting with np.add.at
2. modify geometry. create_grid_mesh, create_plane, upspeed and solve the normal dismatch problem.
(then the create_box and create_sphere is ok from create_plane)",21,4,"['type: bug', 'component: visuals', 'component: util', 'type: performance']"
51,668836493,2067,8935948,2021-06-12 10:37:07,2021-06-29 00:03:10,closed,When using the wx backend with sys_info() the OpenGL version was alwa…,"…ys an empty string.

The change below solved this problem.

In util/config.py in sys_info()
original:
canvas = Canvas('Test', (10, 10), show=False, app=app)
replacement:
canvas = Canvas('Test', (10, 10), show=True, app=app)

The ""show=False"" prevented the following line:
canvas._backend._vispy_set_current()
from setting the context. See _vispy_set_current() in _wx.py.",3,1,[]
52,668437573,2066,8935948,2021-06-11 18:32:27,2021-06-16 15:27:59,closed,Change builtin colormaps to all be instances,"Closes #1487 

Some of the colormaps available through `vispy.color.colormap.get_colormap` were classes that were created when `get_colormap` was called with optional args, kwargs provided. This has always smelled bad to me code-wise. In this PR I create instances of the colormaps as replacements and deprecate ones that are redundant.

One consideration: should I just remove all of these instances, list them as deprecated, and then rename the classes to not be prefixed with `_`? So `_SingleHue` becomes `SingleHue` and if a user wants to create this colormap they can import it, create it, and pass it directly.

Edit: I have not updated the tests which seem to test some of these specifically.",10,6,"['type: enhancement', 'code-quality', 'component: color']"
53,667009903,2063,8935948,2021-06-10 15:35:27,2021-06-10 18:50:45,closed,make agg lines write correct depth value,"Closes #1441. This changes the agg-line vert shader so that it writes the correct value to the depth-buffer. However, 
we can't really turn on depth testing by default because it will cause weird artifacts at the edges. This is part of the general problem of blending translucent objects ...

Neverthertheless, when needed the depth test can be turned on. The example in #1441 then becomes:
```py
import sys
from vispy import scene
from vispy import app
from vispy.io import load_data_file, read_png

import numpy as np
from vispy.visuals.transforms import STTransform

canvas = scene.SceneCanvas(keys='interactive')
canvas.size = 800, 600
canvas.show()

# Set up a viewbox to display the image with interactive pan/zoom
view = canvas.central_widget.add_view()

# Create the image
img_data = read_png(load_data_file('mona_lisa/mona_lisa_sm.png'))
interpolation = 'nearest'

# Add other visuals to main_view
pos = np.zeros((2, 2)).astype(np.float32)
pos[:, 0] = np.array([-10, 600]).astype(np.float32)
pos[:, 1] = np.array([-10, 600]).astype(np.float32)
line_pre = scene.visuals.Line(pos=pos, parent=view.scene, color='red', width=40, method='agg')
line_pre_z_ind = 0
line_pre.transform = STTransform(translate=[0, 0, line_pre_z_ind])
line_pre.set_gl_state(depth_test=True)

image = scene.visuals.Image(img_data, interpolation=interpolation, parent=view.scene, method='subdivide')
image.transform = STTransform(translate=[0, 0, 0])

canvas.title = 'Spatial Filtering using %s Filter' % interpolation

# Set 2D camera (the camera will scale to the contents in the scene)
view.camera = scene.PanZoomCamera(aspect=1)
# flip y-axis to have correct aligment
view.camera.flip = (0, 1, 0)
view.camera.set_range()
view.camera.zoom(0.1, (250, 200))

# get interpolation functions from Image
names = image.interpolation_functions
names = list(names)
names.sort()
act = 17

# Add other visuals to main_view
pos = np.zeros((2, 2)).astype(np.float32)
pos[:, 0] = np.array([-10, 600]).astype(np.float32)
pos[:, 1] = np.array([-9, 601]).astype(np.float32)
line_post = scene.visuals.Line(pos=pos, parent=view.scene, color='blue', width=40, method='agg')
line_post.transform = STTransform(translate=[0, 0, 0])

view.camera.set_range(x=(-10,10), y=(-10,10))

# Implement key presses
@canvas.events.key_press.connect
def on_key_press(event):
    global act, line_pre_z_ind
    if event.key in ['Left', 'Right']:
        if event.key == 'Right':
            step = 1
            line_pre.transform = STTransform(translate=[0, -5, line_pre_z_ind])
        else:
            step = -1
            line_pre.transform = STTransform(translate=[0, 5, line_pre_z_ind])
        act = (act + step) % len(names)
        interpolation = names[act]
        image.interpolation = interpolation
        canvas.title = 'Spatial Filtering using %s Filter' % interpolation
        canvas.update()
    if event.key in ['Down', 'Up']:
        if event.key == 'Down':
            line_pre_z_ind = -10
            print( event.key, 'New z-indx for red line', line_pre_z_ind)
            line_pre.transform = STTransform(translate=[0, 0, line_pre_z_ind])
        if event.key == 'Up':
            line_pre_z_ind = 10
            print( event.key, 'New z-indx for red line', line_pre_z_ind)
            line_pre.transform = STTransform(translate=[0, 0, line_pre_z_ind])
        act = (act) % len(names)
        interpolation = names[act]
        canvas.title = 'Spatial Filtering using {:} Filter, z_ind={:d}'.format(interpolation, line_pre_z_ind)
        canvas.update()


if __name__ == '__main__' and sys.flags.interactive == 0:
    app.run()
``` 

(I only added `line_pre.set_gl_state(depth_test=True)`)",2,1,"['type: bug', 'component: visuals']"
54,666232738,2061,8935948,2021-06-09 19:09:11,2021-06-09 21:17:15,closed,Rename all HUSL usages to HSLuv,"Closes #1776. Also see https://github.com/mwaskom/seaborn/issues/1361 for more information.

CC @hmaarrfk ",0,5,['code-quality']
55,666220079,2060,8935948,2021-06-09 18:57:51,2021-06-09 20:45:21,closed,Remove unused py2/3 compatibility module,We had a bundled `_mpl_py3k_compat.py` module that wasn't being imported anywhere and seems to be for python 2/3 differences. We no longer support python 2 so this shouldn't be needed (and we've already removed `six`).,0,1,['code-quality']
56,666080173,2059,8935948,2021-06-09 16:46:37,2021-06-09 21:18:43,closed,Fix glfw not sizing visuals correctly on initial draw,"Closes #1465 

This is the simplest fix or workaround I could find for the various bugs related to glfw not handling the initial size of a window properly. As mentioned in #1465 I don't think this should break anyone's workflow as it shouldn't have worked before anyway and is just an extra vispy resize event. I'm not sure how to test this as it seems using `canvas.render()` which is used in all our tests that actually render something puts things into a proper state because it push/pops viewports which makes calls to `self.context.set_viewport` and `self._update_transforms` and makes the visuals draw correctly. These same methods are called from the `on_resize` method and is the only reason other backends like pyqt work properly. If I turn off the resize handling and run with pyqt I get the same result as glfw.

Given that other backends work as-is, I think modifying only the glfw backend here is the right choice.",1,1,"['type: bug', 'component: app']"
57,666056779,2058,8935948,2021-06-09 16:11:33,2021-06-09 20:34:08,closed,Dont force selection of gl2 backend,Closes #1109,2,1,"['type: bug', 'component: gl']"
58,665847118,2057,8935948,2021-06-09 12:11:01,2021-06-11 15:31:47,closed,Add setter for colorbar label text,"Let's try this again. This is a replacement for #2056 which after trying to rebase and merge just got too ugly with commit history. I instead copied the current state of #1292 into a new branch and committed with @macrocosme as the author of the commit.

Updates .label property so it can be provided a TextVisual or a new string to update the existing TextVisual of a ColorbarVisual.

This is a replacement for #1292 so that I can actually make commits to it (compared to the original fork's master branch).

I'll need to reapply the style fixes from `main`.",4,11,"['type: enhancement', 'component: visuals']"
59,665836929,2056,8935948,2021-06-09 11:56:32,2021-06-09 12:13:19,closed,Add setter for colorbar label text,"Updates `.label` property so it can be provided a TextVisual or a new string to update the existing TextVisual of a ColorbarVisual.

This is a replacement for #1292 so that I can actually make commits to it (compared to the original fork's master branch).",0,12,"['type: enhancement', 'component: visuals']"
60,665337473,2055,8935948,2021-06-08 21:26:49,2021-06-09 01:11:33,closed,Add average intensity projection (average) rendering mode to `VolumeVisual`,"In an ongoing effort to upstream changes to the `VolumeVisual` made in napari here is the average intensity projection volume rendering introduced in napari/napari#1871

This addition will be covered by tests @djhoese added in #1912",0,1,"['type: enhancement', 'component: visuals']"
61,662090247,2051,8935948,2021-06-04 22:00:02,2021-06-07 00:50:24,closed,Fix typo in double shader,Fix typo issue #2045,1,1,['type: bug']
62,662086882,2050,8935948,2021-06-04 21:57:14,2021-06-07 00:49:50,closed,Fix dead link in shader docstring,Fix dead link issue #2044,1,1,"['code-quality', 'docs-website']"
63,660138936,2048,8935948,2021-06-02 14:49:15,2021-06-02 15:29:14,closed,Fix docstring of the property WireframeFilter.enabled,,0,1,[]
64,659207446,2047,8935948,2021-06-01 17:27:57,2021-06-09 12:02:40,closed,Add attenuated MIP (attenuated_mip) rendering mode to `VolumeVisual`,This PR upstreams the attenuated maximum intensity projection rendering mode from napari/napari#846 (by @sofroniewn) into vispy,3,5,"['type: enhancement', 'component: visuals']"
65,659171911,2046,8935948,2021-06-01 16:37:43,2021-06-03 14:43:54,closed,Add minimum intensity projection (minip) shading to `VolumeVisual`,"Starting gently after our discussion last week, here's a small PR introducing minimum intensity projection shading as a rendering mode for the `VolumeVisual`. This was introduced into napari in napari/napari#1861 and can be seen there, sorry for the wait in pushing upstream!",3,2,"['type: enhancement', 'component: visuals']"
66,657735592,2043,8935948,2021-05-30 15:49:24,2021-06-01 19:20:23,closed,Add more options to control the length of normals in MeshNormals visual,"Use cases:

1. To get normals that are about the length across a triangle of the mesh:
```python
MeshNormals(..., length_method='median_edge', length_scale=1.0)
MeshNormals(...)  # equivalent to the previous line (default values)
```
2. To get normals that are about 10% the size of the mesh:
```python
MeshNormals(..., length_method='max_extent', length_scale=0.1)
```",7,20,"['type: enhancement', 'component: visuals']"
67,656932807,2042,8935948,2021-05-28 18:48:06,2021-06-01 14:13:25,closed,Fix changing mesh shading mode when initially None,Fix #2041,7,5,['type: bug']
68,656276998,2040,8935948,2021-05-28 11:00:16,2021-06-15 13:50:58,closed,Prevent translucent window with QOpenGLWidget,"Fix #1889

Fixes it for me on Linux with wayland.",15,3,"['type: bug', 'component: app']"
69,655149270,2039,8935948,2021-05-27 16:05:01,,open,[WIP] Implement weighted blended order-independent transparency,"Implement the algorithm in [[1]] based demos [[2]] and #984.
Addresses #1345

This is a work in progress. Comments/suggestions welcome.

[1]: https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.1046.4883&rep=rep1&type=pdf
[2]: https://gist.github.com/liubenyuan/3739c343b3e6ca8117f7

Demo scene (`examples/basics/scene/transparency_weighted_oit.py`):
<img src=""https://user-images.githubusercontent.com/830589/119856424-fd9a5a80-bf12-11eb-86e0-0efb7c45808a.png"" width=""400px""> <img src=""https://user-images.githubusercontent.com/830589/119856502-0c810d00-bf13-11eb-9897-d505d35552f9.png"" width=""400px"">

(The demos cited above seem to implement this variant of the algorithm: https://casual-effects.blogspot.com/2015/03/implemented-weighted-blended-order.html, which didn't work out for me at first, so I followed the paper instead.)

Implementation:

The rendering is delegated from the SceneCanvas to a WeightedTransparencyRenderer.
The renderer uses a FBO for offscreen rendering and then copies to the default framebuffer.
Outline of the steps:
1. scan the scene graphs for opaque and transparent renderable visuals,
2. hook the transparency shader to the glsl programs of the visuals,
3. render opaque objects (1 pass)
4. render transparent objects with weight OIT (2 passes)
5. do compositing of transparent and opaque buffers (texture pass)
6. copy the result to the default frame buffer (texture pass)

Some current limitations:
- Works with `MeshVisual` and some visuals based on it,
- Uses 2 passes for the rendering of transparent objects. It could be done in a single pass with two render targets, but this requires gles3+/gl3+.
- The copy from the frame buffer object to the default frame buffer (step 6) could probably be done more efficiently with `glBlitFramebuffer`, but this requires gles3+/gl3+.

## TODO

We need to sort visuals into two categories: the transparent ones and the opaque ones. How to best to that?

- Ideally, there would be a property like `Visual.is_transparent: bool`, but that does not exist.
- Instead, the current heuristic is: a visual is transparent if `visual.color.alpha < 1`.This does not cover all visuals that could support transparency. Some additional fields could be checked, e.g. `MeshVisual._meshdata._(face|vertex)_colors` or `CompoundVisual._subvisuals[0].color` or some variants, but several of them could appear in a single visual and I am not sure if we can always tell which one is relevant. This approach is not robust if each visual does things differently.

Visuals that are supported (checked) and those that should (probably) be, but are not yet, supported (unchecked):
- [x] MeshVisual: Ambiguity to determine if transparent: `MeshVisual.color` or `MeshVisual._meshdata.(face_colors|vertex_colors)`.
  - [ ] GridMeshVisual: Transparency indicator not exposed in `self.color` but in `MeshVisual._meshdata._vertex_colors` or the replicated `GridMeshVisual.__meshdata._vertex_colors`.
  - [x] HistogramVisual: No ambiguity: Only `HistogramVisual.color`.
  - [x] IsosurfaceVisual: Same ambiguity as MeshVisual.
  - [ ] SurfacePlotVisual: In `MeshVisual._meshdata._vertex_colors` or `SurfacePlotVisual.__mesdata._vertex_colors`.
  - [ ] TubeVisual: `MeshVisual._meshdata._(face|vertex)_colors`
- [ ] *CompoundVisual
  - [ ] *BoxVisual (MeshVisual + LineVisual)
    - [ ] *CubeVisual
  - [ ] *PolygonVisual (MeshVisual + LineVisual)
    - [ ] *EllipseVisual 
      - [ ] *RegularPolygonVisual 
    - [ ] *RectangleVisual
  - [ ] PlaneVisual (MeshVisual + MeshVisual = surface + outline in mode 'lines')
  - [ ] SphereVisual (MeshVisual + MeshVisual = surface + outline in mode 'lines')
- [ ] ImageVisual
  - [ ] GridLinesVisual
  - [ ] SpectrogramVisual
- [ ] LinearRegionVisual
- [ ] MarkersVisual
- [ ] WindbarbVisual

*: Seems more difficult to support (those containing a LineVisual mainly).

These seem possible to support, but not sure if it is necessary or if it makes sense:
- [ ] InfiniteLineVisual
- [ ] ScrollingLinesVisual
- [ ] TextVisual
- [ ] VolumeVisual

These seem harder to support, and maybe not required:
- CompoundVisual
  - ColorBarVisual
  - GraphVisual
  - LineVisual
    - ArrowVisual
    - IsocurveVisual
    - IsolineVisual
    - XYZAxisVisual
  - LinePlotVisual (LineVisual + MarkersVisual)
  - MeshNormalsVisual",1,22,[]
70,653834122,2038,8935948,2021-05-26 14:20:54,2021-05-26 14:50:35,closed,Fix website deploy commit message references,I noticed while working on another project and copying from VisPy that the commit messages weren't actually rendering the environment variables I was trying to use. I think this PR should fix these (currently testing with the geoxarray project).,4,2,['docs-website']
71,651550593,2036,8935948,2021-05-24 18:50:55,2021-05-25 00:49:54,closed,Adapt mesh examples for gallery image generation,"The command line parsing in the examples was failing because it was receiving
the arguments from `python make image gallery`.",5,1,"['code-quality', 'build']"
72,650860732,2034,8935948,2021-05-23 21:33:55,2021-05-24 01:45:30,closed,Add headers and license to mesh filters examples,As discussed in #2031.,0,2,[]
73,650674615,2032,8935948,2021-05-22 19:21:45,2021-05-22 20:26:10,closed,Fix URL to contributor guide,This is the one working for me.,0,1,['docs-website']
74,650672415,2031,8935948,2021-05-22 19:02:37,2021-05-24 14:11:03,closed,Add visual for displaying mesh normals,"A subclass of LineVisual. Can display vertex and face normals.

Vertex normals (width = 2):
![vertex_normals](https://user-images.githubusercontent.com/830589/119238109-e0474400-bb40-11eb-8d58-11f3e651016d.png)

Face normals (width = 1):
![face_normals](https://user-images.githubusercontent.com/830589/119238115-e6d5bb80-bb40-11eb-970a-3764be1ccf51.png)
",2,10,"['type: enhancement', 'component: visuals']"
75,648927950,2029,8935948,2021-05-20 13:52:40,2021-06-11 15:41:12,closed,Identify and expose Phong shading parameters in mesh ShadingFilter,"Expose the Phong model coefficients with reasonable defaults and allowing for fine-grained control:
- `shading='flat'`
- `light_dir=(10, 5, -5)`
- `ambient_light=(1, 1, 1, 0)`
- `diffuse_light=(1, 1, 1, 1)`
- `specular_light=(1, 1, 1, .25)`
- `ambient_coefficient=(1, 1, 1, 1)`
- `diffuse_coefficient=(1, 1, 1, 1)`
- `specular_coefficient=(1, 1, 1, 1)`
- `shininess=100`

The light and reflection coefficients are RGBA where A controls the intensity. In most cases, one will only adjust the intensity (e.g. dimming the (white) light and modulating the strength of the reflection).

TODO:
- [x] Implement the Phong reflection model in [[1]].
- [x] Allow a single scalar to specify the intensity of a reflection coefficient. Reflected color defaults to white. Example: `ambient_coefficient=0.1` is transformed into `ambient_coefficient=(1.0, 1.0, 1.0, 0.1)`.
- [x] Add tests.
- [x] Add inline examples.
- ~~[RFC @djhoese ] Require light position, `light_pos`, as input parameter instead of light direction, `light_dir`. This will allow different types of lights in the future. Deprecate `light_dir`.~~ EDIT: Forget that. `light_dir` seems needed in any case. `light_pos` would be an additional parameter, for example for a point light.

Ideas, maybe for the future:
- Rename to PhongShadingFilter?  (ShadingFilter could be an alias for it if we introduce other shading models (e.g. BRDF).
- Maybe a list of basic Phong materials would be convenient
```python
standard_matrials = {
    ""plastic_like"": dict(ambient_coefficient=(...), diffuse_coefficient=(...), specular_coefficient=(...),...),
    ""metal_like"": dict(...),
    ...
}
```
- For the API, maybe something like this:
```python
material = standard_materials[""plastic_like""]
filter = PhongShadingFilter(..., **material)
mesh = MeshVisual(..., material=material)
```

[1]: https://en.wikipedia.org/wiki/Phong_reflection_model",12,43,"['type: enhancement', 'component: visuals']"
76,648634184,2028,8935948,2021-05-20 09:27:22,2021-06-09 01:14:14,closed,Fix various issues with shading in the MeshVisual,Some fixes to the recent shading filter for correct/consistent behaviour.,5,5,"['type: bug', 'component: visuals']"
77,647933598,2027,8935948,2021-05-19 18:26:45,2021-05-19 19:10:25,closed,Fix face normal in cube geometry (create_cube function),This seems like a typo.,5,2,"['type: bug', 'component: util']"
78,647622328,2026,8935948,2021-05-19 12:40:00,2021-05-19 18:04:40,closed,Add the ability to make the wireframe transparent with the wireframe filter,"That is, this draws only the interior of the faces.

Named the attribute `faces_only` to match `wireframe_only` previously defined. Maybe there is a better-suited naming, `transparent`?

Follow-up on #2025",0,3,"['type: enhancement', 'component: visuals']"
79,646718546,2025,8935948,2021-05-18 12:44:55,2021-05-18 23:24:20,closed,Add ability to show only a mesh wireframe with the wireframe filter,"Follow-up on #1689

```python
wireframe_filter.wireframe_only = True
```
![wireframe_no_interior](https://user-images.githubusercontent.com/830589/118653319-b06a0a80-b7e7-11eb-9b18-1f4b45d5db07.png)

```python
wireframe_filter.wireframe_only = False
```
![wireframe_with_interior](https://user-images.githubusercontent.com/830589/118653352-b95adc00-b7e7-11eb-90b3-65fee8aa47cf.png)
",3,25,"['type: enhancement', 'component: visuals']"
80,643331540,2022,8935948,2021-05-12 16:47:15,2021-06-07 20:46:08,closed,Fix axis labeling issue when flipped,"Related to issue #2019

I've also removed some commented code, I don't know if I should have.",7,4,"['type: bug', 'component: visuals']"
81,621097075,2016,8935948,2021-04-22 13:30:29,,open,[WIP] Add tick locators and formatters  to the `AxisVisual`,"Hi,

This PR adds optional keyword argument `tick_fmt_func` to the `AxisVisual` visual to give the user control of the tick formatting. The current implemetation uses `labels = ['%g' % x for x in major]` to generate tick labels which can be easily exposes to the user. The issue of custom tick labels has been raised before ( #1865 ) and this would give the user the freedom to render the tick labels in their preferred format.

* added `tick_fmt_func` parameter to the `AxisVisual` visual to expose tick formatting to the user. This is a small enhancement to enable more advanced formatting of the tick labels. The `tick_fmt_func` expects a callable (e.g. lambda) that accepts one parameter (tick value) and returns formatted tick label.
* also added an example to the examples/basics/visuals",10,2,[]
82,592464326,2008,8935948,2021-03-14 03:10:28,,open,[WIP] Add a spheres visual,"This PR would add a spheres visual that could be used to efficiently render many spheres in a single visual, which will have good performance characteristics.

It is based on code in https://github.com/acabrelles/protein-viewer/blob/cc15994453b58a31789b93a9513ef9f087b5ad20/Viewer3d/VisPyViewer.py#L1-L137 from @acabrelles (BSD3 licensed) and an original example from @campagnola.

This PR is missing tests, and should be fleshed out a little before merge, but I'm mainly curious at this point if this is something that people would like added to vispy, and if they have any tips before going further. I've added the code a little to try and resemble the `Markers` visual, which is similar in that it supports points with radii, but it doesn't support any lighting.

Here is a simple script to test the new visual

```python
""""""
Create a Spheres Visual
""""""
import numpy as np
from vispy import app, scene

# Create canvas and view
canvas = scene.SceneCanvas(keys='interactive', size=(600, 600), show=True)
view = canvas.central_widget.add_view()
view.camera = scene.cameras.ArcballCamera(fov=60)
view.camera.scale_factor = 70

# Prepare data
np.random.seed(57983)
data = np.random.normal(size=(40, 3), loc=0, scale=10)
size = len(data) * [3]
colors = len(data) * ['white']

data = np.concatenate([data, [[0, 0, 0]]], axis=0)
colors.append('red')
size.append(6)

# Create and show visual
vis = scene.visuals.Spheres(data, size=size, color=colors)
vis.parent = view.scene

# Run example
app.run()
```

<img width=""712"" alt=""Screen Shot 2021-03-13 at 6 56 14 PM"" src=""https://user-images.githubusercontent.com/6531703/111055914-79fec080-842f-11eb-83a6-8033a70bcfb8.png"">

## Motivation

A couple of us are considering adding molecular viewing to napari, and in order to do so we'll need to be able to render many spheres and cylinders to represent atoms and their bonds. This PR would let us render many spheres very quickly. cc @alisterburt.

I'd also be very interested if anyone has any tips for the cylinders (happy to discuss in a new issue if so).

## Alternatives

There is a single `Sphere` visual right now based on a `Mesh` visual, and one could make many Spheres using CompoundVisuals, but that would be slow.

One could try and add support for the 3D shading style rendering to the `Markers` visual, but that might cause that file to get very complex.

## Additional Comments

I ultimately will want to use this alongside the other Mesh visuals, possibly in a compound visual, and will want to make sure that the lighting and shading looks good across both for the spheres and the other meshes. I havn't tried combining the visuals yet, but wanted to comment on that too. ",5,3,"['type: enhancement', 'component: visuals']"
83,592337294,2007,8935948,2021-03-13 10:12:28,2021-05-26 20:31:59,closed,enforce same type for norm and renorm so that ufunc true_divide doesn't error,"Hi! First, thanks for vispy 🥰 
I came across a bug when trying to use expose the different shading modes with meshes in napari, traceback below

```python
WARNING: Traceback (most recent call last):
  File ""/opt/homebrew/Caskroom/miniforge/base/envs/napari/lib/python3.9/site-packages/vispy/app/backends/_qt.py"", line 825, in paintGL
    self._vispy_canvas.events.draw(region=None)
  File ""/opt/homebrew/Caskroom/miniforge/base/envs/napari/lib/python3.9/site-packages/vispy/util/event.py"", line 455, in __call__
    self._invoke_callback(cb, event)
  File ""/opt/homebrew/Caskroom/miniforge/base/envs/napari/lib/python3.9/site-packages/vispy/util/event.py"", line 473, in _invoke_callback
    _handle_exception(self.ignore_callback_errors,
  File ""/opt/homebrew/Caskroom/miniforge/base/envs/napari/lib/python3.9/site-packages/vispy/util/event.py"", line 471, in _invoke_callback
    cb(event)
  File ""/opt/homebrew/Caskroom/miniforge/base/envs/napari/lib/python3.9/site-packages/vispy/scene/canvas.py"", line 217, in on_draw
    self._draw_scene()
  File ""/opt/homebrew/Caskroom/miniforge/base/envs/napari/lib/python3.9/site-packages/vispy/scene/canvas.py"", line 266, in _draw_scene
    self.draw_visual(self.scene)
  File ""/opt/homebrew/Caskroom/miniforge/base/envs/napari/lib/python3.9/site-packages/vispy/scene/canvas.py"", line 304, in draw_visual
    node.draw()
  File ""/opt/homebrew/Caskroom/miniforge/base/envs/napari/lib/python3.9/site-packages/vispy/scene/visuals.py"", line 99, in draw
    self._visual_superclass.draw(self)
  File ""/opt/homebrew/Caskroom/miniforge/base/envs/napari/lib/python3.9/site-packages/vispy/visuals/mesh.py"", line 519, in draw
    Visual.draw(self, *args, **kwds)
  File ""/opt/homebrew/Caskroom/miniforge/base/envs/napari/lib/python3.9/site-packages/vispy/visuals/visual.py"", line 435, in draw
    if self._prepare_draw(view=self) is False:
  File ""/opt/homebrew/Caskroom/miniforge/base/envs/napari/lib/python3.9/site-packages/vispy/visuals/mesh.py"", line 514, in _prepare_draw
    if self._update_data() is False:
  File ""/opt/homebrew/Caskroom/miniforge/base/envs/napari/lib/python3.9/site-packages/vispy/visuals/mesh.py"", line 360, in _update_data
    self._normals.set_data(md.get_vertex_normals(), convert=True)
  File ""/opt/homebrew/Caskroom/miniforge/base/envs/napari/lib/python3.9/site-packages/vispy/geometry/meshdata.py"", line 346, in get_vertex_normals
    norm /= renorm
TypeError: ufunc 'true_divide' output (typecode 'd') could not be coerced to provided output parameter (typecode 'l') according to the casting rule ''same_kind''
Process finished with exit code 134 (interrupted by signal 6: SIGABRT)
```

I guess this is happening because my inputs have dtype int64 (for a very simple test mesh)
```python
vertices = np.array([[0, 0, 0], [0, 20, 10], [10, 0, -10], [10, 10, -10]])
faces = np.array([[0, 1, 2], [1, 2, 3]])
```

I enforced the same type for `norm` and `renorm` in `MeshData.get_vertex_normals()` and the problem went away so here's a PR - can change if there's a different way you'd like to solve this issue though!",6,3,"['type: bug', 'component: visuals']"
84,584287001,2005,8935948,2021-03-03 21:40:23,2021-03-03 21:41:35,closed,Handle deprecation warnings for numpy 1.20,"```
  %PREFIX%\lib\site-packages\vispy\gloo\program.py:114: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    'bvec3':        (np.bool,    3),
```",4,1,[]
85,582447388,2004,8935948,2021-03-01 21:43:35,2021-03-04 16:21:38,closed,Fix TextVisual producing log message about unused uniform,"# Summary

1. The `TextVisual` is now producing a warning (it is actually an `INFO` level log message) that is causing the examples tests to fail. The examples fail if there is anything written to stdout/stderr.
2. The reason the `TextVisual` is producing this is due to a change in the compiler on the CI systems that is now realizing that the TextVisual is setting `w` to `0` at one point and using it in a multiply. The end result is that the `translate` uniform from the `text_scale` `STTransform` is being ""optimized"" out. This PR fixes how this is used now to not multiply by 0 but instead use the dynamic STTransform's translate property which defaults to 0 (same end result).
3. Fixed a few warnings due to changes in numpy and other similar things.

# Original Description

#2002 Is failing on the examples because a ""translate"" uniform is not getting set/made active. My guess right now is that the GLSL compiler is optimizing out translations of 0. This is my PR to test it. Yay.",31,18,"['type: bug', 'component: visuals']"
86,582192534,2002,8935948,2021-03-01 16:16:20,2021-04-22 12:16:16,closed,Optimize SurfacePlotVisual when only color is updated,"Closes #2001 

See #2001 for details. The SurfacePlotVisual was updating the vertices of the MeshData every time `surf_plot.set_data` was called even if the vertices weren't being updated. This triggered the MeshData to reset and recompute all normals which was adding a very noticeable delay when changing only the color. This PR refactors the SurfacePlotVisual `set_data` method to distinguish between updating faces, vertices, or color and only updating that component when needed.

CC @hippalectryon-0",2,3,"['component: visuals', 'type: performance']"
87,581342917,1999,8935948,2021-02-27 14:56:57,,open,ImageVisual support for complex-valued data.,"This is just a draft for now, for the sake of discussion.  It _includes_ #1920, which should be merged first.  (see [comparison of this PR against #1920](https://github.com/djhoese/vispy/compare/feature-image-texture-format...tlambert-forks:complex)).  The basic idea is to convert complex data into a 2-channel internal data array, with a modified `_build_color_transform` that knows how to convert those two channels to intensity (using a `complex_mode` such as ""magnitude"" or ""phase"") prior to standard colormap application.

Outstanding issues to discuss:
- `auto` clims are tricky here, since the `complex_mode` will dramatically change the ""intensity"" range (with ""phase"" always being somewhere from -π to π and ""magnitude"" being all over the map).  We can certainly apply the complex rendering mode in the CPU to glean the clims...
- _something_ needs to remember that the underlying data is complex, after the internal data has been changed to a real 2-channel array (assuming we stick with that approach).  In this current implementation, the `CPU/GPUScaledTexture2D` textures are ""blind"" to that fact, while the `ImageVisual` itself has a `_data_is_complex` and `complex_mode`.  But the texture subclasses probably also need to know this for the sake of clim calculation, etc... ",21,16,"['type: enhancement', 'component: visuals']"
88,570916321,1983,8935948,2021-02-10 08:16:16,2021-04-22 02:13:45,closed,Fixed multiple code style issues.,"- Fixed comment style in code.
- Removed unused variables.
- Removed semi-colons from python code.
- Fixed docstrings.",7,7,['code-quality']
89,567974718,1980,8935948,2021-02-04 23:12:57,,open,"Allow custom events (touch, pinch...) propagation","With this a custom canvas, with

    self._deliver_types.append('pinch')

And camera with for example

    def _viewbox_set(self, viewbox):
        super()._viewbox_set(viewbox)
        viewbox.events.add(pinch=Event)
        viewbox.events.pinch.connect(self.viewbox_pinch_event)

    def _viewbox_unset(self, viewbox):
        viewbox.events.pinch.disconnect(self.viewbox_pinch_event)
        super()._viewbox_unset(viewbox)

    def viewbox_pinch_event(self, event):
        if event.type == 'pinch':
            center = self._scene_transform.imap(event.pos)

Alternative is to reimplement most of the canvas process_mouse_event in
a _process_touch_event, or similar, while here we can simply in the
canvas:

   self.events.touch.connect(self._process_mouse_event)

----

I of course welcome suggestion of alternatives; as I'm still getting familiar with the code base. 

in particular this could be used to generalize :
```
if self._send_hover_events:
            deliver_types += ['mouse_move']
```
            

I would also understand why not; `touch` events do not always have the same structure as  mouse events, in particular they do not have `button` attribute. 

In napari this allowed me to implement panning and zooming using 2 finger gesture (scroll and pinch), without modifiers or click; which I find is a great improvement for user interface. I'm happy to also contribute (some of) those changes, directly to the pan/zoom camera is you think they are of interest. 

If course, 2 finger to pan is a ""mouse_wheel"" event, but touch/pinch will likely only trigger on compatible devices. ",2,1,[]
90,561413602,1978,8935948,2021-01-25 22:51:46,2021-01-27 15:23:17,closed,Add PySide6 backend,"As discussed in #1971, I've added the support for PySide6.

There is no major changes compared to PySide2. Please tell me if I missed something.

I've been able to run the various examples and use the PySide6 backend along a PySide2 installation. Is there anything more I need to do to test the changes ?",7,5,"['type: enhancement', 'component: app']"
91,558372041,1975,8935948,2021-01-20 16:33:01,2021-02-25 15:31:44,closed,Add workaround for MacOS dlopen,"Adapted stackoverflow monkeypatch to ctypes.util.find_library for macOS 11 (Big Sur).
This gates off OpenGL.GL dlopen failure and uses a 2-entry lookup for quartz and objc exception cases. 
Should be backward compatible and is likely to work on both x86 and and m1 macOS.
Tested on x86 macOS 11.1 with `alpha-pyside2.py` test case.",11,3,['type: bug']
92,558128333,1974,8935948,2021-01-20 10:22:34,2021-02-26 12:25:52,closed,MNT: build wheels on GitHub Actions,,25,8,['build']
93,554751774,1973,8935948,2021-01-14 08:02:34,2021-01-18 15:47:26,closed,MNT: move CI to GitHub Actions,"This PR is an effort to move CI to GitHub Actions. Starting with a simple lint, other jobs/steps are added one by one.

Current capabilities:

- General Checks
  -  [x] check OpenGL
- Lint and Stylechecks (use system python via pip on `ubuntu-latest`)
  - [x] lint with flake8
  - [x] check line endings LF vs. CR/LF (really needed nowadays?)
  - [x] check docstring parameters 
- Website (deps via pip)
  - [x] build
  - [x] upload implemented (but not tested)
- Test Harness (use conda-forge environment via micromamba)
  - [x] linux minimal tests
  - [x] linux full tests
  - [x] linux example tests
  - [x] linux osmesa tests 
  - [ ] macos tests (in follow-up PR)
  - [ ] windows tests (in follow-up PR)
- Build wheels and upload to pypi
  - [ ] pypi (in follow-up PR)",32,3,[]
94,543647862,1968,8935948,2020-12-21 18:14:47,2021-02-28 22:53:12,closed,Add totalRotationAngle and totalScaleFactor to touch (pinch) events.,"Those two are supposed to hold the total scale change and rotation
change since the beginning of the touch event, and are easier to
manipulate than to accumulate the delta changes.

Note that testing locally on MacOS 10.12 using a macbook pro with a
touchpad the rotation does not seem to follow the description of the Qt
framework. That is to say:

 - event.rotation: total rotation since begin event
 - event.scale: Change of scale since last event, generally between 0.95 and 1.05.
 - totalRotationAngle: Always 0 for me
 - totalScaleFactor: Total change of scale change since evt.type=begin event.

I still include those two, as in particular it seem on some devices you
can ""interrupt"" and ""restart"" a gesture; especially for rotation, and
even if totalRotationAngle seem broken on my end; totalScaleFactor is
useful.

Closes #1964",6,1,[]
95,542546141,1967,8935948,2020-12-18 13:33:17,2021-02-27 10:32:26,closed,Gtk3 backend,"Hello everyone!
I'm trying to add Gtk3 backend and struggling with this error:
```bash
 File ""/home/stanislaw/Projekty/vispy/examples/basics/gloo/start.py"", line 10, in <module>
    app.use_app(""gtk3"")
  File ""/home/stanislaw/Projekty/vispy/vispy/app/_default_app.py"", line 47, in use_app
    default_app = Application(backend_name)
  File ""/home/stanislaw/Projekty/vispy/vispy/app/application.py"", line 49, in __init__
    self._use(backend_name)
  File ""/home/stanislaw/Projekty/vispy/vispy/app/application.py"", line 230, in _use
    if not mod.available:
AttributeError: module 'vispy.app.backends._gtk3' has no attribute 'available'
```
Looks like something with imports, but I can't figure out what is going on :confused: ",4,4,[]
96,532597353,1956,8935948,2020-12-04 15:15:35,2021-02-07 20:17:08,closed,Fix data type issue in create_sphere(),"Modified output data type in create_sphere() using 'ico' method. verts and faces are now np.float32 and np.uint32 dtype arrays. Before the change, they were created as np.float64 and np.int32. Passing faces to vispy.gloo.IndexBuffer without additional conversion resulted in error ""Invalid dtype for IndexBuffer: dtype('int32')"" in line 503 in function _prepare_data() from vispy.gloo.buffer.py.
verts dtype was changed to standardize with other methods of creating sphere - 'latitude' and 'cube'
Maybe the conversion of types in _prepare_data() should be improved but I don't know if that will lead to errors and unwanted behavior elsewhere.",4,4,['type: bug']
97,528774563,1954,8935948,2020-11-27 20:14:56,2020-11-28 02:23:24,closed,Enable Python 3.9 wheels,"If this works, we could backport to maint/0.6 and do a quick 0.6.7 release which includes 3.9 wheels?",1,1,[]
98,509630926,1943,8935948,2020-10-25 17:41:02,2020-10-26 12:51:36,closed,Removed Python 2.7 wrapper on GzipFile,"Fixes #1923 

Changes:

- Changed usages of gzip_open with GzipFile 
- Removed the gzip_open extension file.

",3,1,['code-quality']
99,506205610,1941,8935948,2020-10-19 18:48:04,2020-11-04 01:58:01,closed,Add networkx layout to GraphVisual,"Added a Quality of Life improvement allowing for any arbitrary position coordinates of nodes in the graph. Allows for interfacing with networkx layouts by string, or dictionary input. Alternatively one could give it a numpy array for plotting. 

An alternative would be to make the networkx import optional, leaving the numpy array as default. 

Example:

```python
from vispy import app, scene
from vispy.visuals.graphs import layouts
import networkx as nx
g = nx.erdos_renyi_graph(100, .2)
layout = layouts.get_layout(""networkx_layout"", graph = g, layout = ""spring"")

# create canvas
canvas = scene.SceneCanvas(title='Simple NetworkX Graph', size=(600, 600),
                           bgcolor='black', show=True)
view = canvas.central_widget.add_view('panzoom')
visual = scene.visuals.Graph(
    layout.adj, layout = layout, line_color= (1, 1, 1,  .5), arrow_type=""stealth"",
    arrow_size=30, node_symbol=""disc"", node_size=20,
    face_color=(1, 0, 0, 1), border_width=0.0, animate=False, directed=False,
    parent=view.scene)


@canvas.events.draw.connect
def on_draw(event):
    if not visual.animate_layout():
        canvas.update()
    
canvas.show()
```",6,15,"['type: enhancement', 'component: visuals']"
100,498254111,1934,8935948,2020-10-06 04:26:44,2020-10-16 14:24:11,closed,Replaced bundled 'pypng' (png) dependency with pillow,"With respect to issue #1925 ,this PR replaces pypng with pillow",26,23,"['code-quality', 'component: util']"
101,498127975,1933,8935948,2020-10-05 21:27:16,2020-10-07 20:40:55,closed,Remove six dependency,"This merge request removes the bundled six library and updates the relevant parts to Python 3

Fixes #1926",5,21,['code-quality']
102,497540121,1931,8935948,2020-10-05 01:59:55,2021-01-26 19:26:12,closed,Overhaul vispy website,"See https://github.com/vispy/vispy-website/pull/29 for the real information and big changes. This PR, in addition to pointing to the newest `vispy-website` submodule, only includes various fixes needed to fix warnings and runtime issues when generating the docs now that they more completely cover the package's API.",3,15,"['type: enhancement', 'docs-website']"
103,497475732,1930,8935948,2020-10-04 18:16:20,2020-10-05 01:07:28,closed,Fix typo in examples/basics/gloo/hello_fbo.py ,vetices -> vertices,0,1,['docs-website']
104,495820142,1928,8935948,2020-09-30 22:19:11,2020-10-01 14:56:30,closed,Remove bundled decorator dependency,"This refactors the `arg_to_vec4` decorator using Python's functools module and drops the bundled `decorator` module.

Closes #1922",4,2,"['code-quality', 'build']"
105,494050149,1921,8935948,2020-09-28 10:38:59,2020-09-28 11:39:28,closed,Fix EGL docstring copy/paste error,eglTerminate had the docstring of eglInitialize. Now replaced with the docstring as used in https://www.khronos.org/registry/EGL/sdk/docs/man/html/eglTerminate.xhtml,0,1,"['code-quality', 'docs-website']"
106,493312954,1920,8935948,2020-09-25 18:57:33,2021-03-15 18:34:47,closed,Add 'texture_format' kwarg to ImageVisual for floating point textures,"Similar to #1912 

This PR adds the `texture_format` keyword argument to the ImageVisual to allow for more complex data types to be stored internally on the GPU. This should allow for a greater bit depth and faster color limit changes.

One major thing I learned that will also need to be fixed in #1912 is what these internal format types actually look like in the GPU. I think the test originally created by @tlambert03 for the VolumeVisual has all zeros and fails to test this properly so we'll need to come up with something better. The main lesson is with normalized or not normalized formats. See https://www.khronos.org/opengl/wiki/Image_Format. Formats like `r8` (`GL_R8`) are normalized unsigned integers. This means that although the data is stored/sent as unsigned 8-bit integers, it appears in the shader as a [0, 1] floating point number. This means that if your color limits (clims) are in your data's original range, you'll be scaling the data wrong. The clims (or any other variable interacting with the texture data) need to be scaled/normalized in the same way the texture data is. I tried to do that in this PR for the ImageVisual.

Edit: The other part of the normalized stuff is that formats like `r32f` don't need to be normalized because they are already floats. Other formats supported by OpenGL 4 that vispy doesn't support yet are also not normalized (those ending in `ui` or `i`). There are also `_SNORM` formats which are normalized in the range of `[-1, 1]`. I'm not exactly sure how unsigned inputs are treated for this, but it isn't supported by vispy yet either so I just left a `XXX` in the code that it should be dealt with.

## TODO

- [ ] Add tests
- [ ] Remove all FIXMEs and XXXs (if they can be resolved/discussed)
- [ ] Come up with a better name for `normalize_value` on the `BaseTexture`
",27,25,"['type: enhancement', 'component: visuals']"
107,492012278,1919,8935948,2020-09-23 20:07:10,2020-09-23 22:03:23,closed,Use oldest-supported-numpy in pyproject.toml,I've switched the pyproject.toml file to use the [oldest-supported-numpy](https://github.com/scipy/oldest-supported-numpy) meta-package which is equivalent to specifying all the environment markers (see the README for that project) but means that the pyproject.toml file here doesn't need to be updated in future when a new version of Python is released since this just requires a new release of oldest-supported-numpy.,5,1,['build']
108,490974224,1918,8935948,2020-09-22 14:17:51,2020-11-04 02:03:35,closed,Add Tkinter backend,"For my current project, it would be beneficial to be able to use VisPy within a Tkinter context, i.e. an OpenGL canvas controlled by VisPy embedded inside a Tkinter widget (tk.Frame).

For this purpose, I attempted to create a new backend to target Tkinter. However, it needs more work to to actually draw something.

The implementation tries to use [Jon Wright's pyopengltk](https://github.com/jonwright/pyopengltk) `OpenGLFrame`.

You can refer to [this Gist with example code](https://gist.github.com/ThenTech/620d2422a8a2f2529d01bf34e229d7ca) that shows how I might use it. For reference, everything works as expected using the Glfw backend, but this creates a new window naturally.
Using the tkinter backend, creates the frame that can be embedded, but it seems to stay black. Running `vispy.app.process_events()` is doing *something* as the GPU gets used, but the canvas stays black.

Any help would be appreciated, and would of course benefit the community as well.",44,20,"['type: enhancement', 'component: app']"
109,486973167,1915,8935948,2020-09-15 01:23:20,2020-09-18 18:59:35,closed,Add website building to travis tests,"This is an attempt to get travis to build the vispy website and upload it to the vispy-website repository. It was recommended that we look at doctr for handling the upload and deploy key handling (https://github.com/drdoctr/doctr). One nice thing about that would be this extension that allows us to have multiple versions like readthedocs allows (https://github.com/goerz/doctr_versions_menu).

I can't promise I'll get to it (maybe a good hacktoberfest issue), but here are the current issues I see when I build the site locally:

```
/home/davidh/repos/git/vispy/_website/conf.py:352: RemovedInSphinx40Warning: The app.add_stylesheet() is deprecated. Please use app.add_css_file() instead.
  app.add_stylesheet('css/font-mfizz.css')
/home/davidh/repos/git/vispy/_website/conf.py:353: RemovedInSphinx40Warning: The app.add_stylesheet() is deprecated. Please use app.add_css_file() instead.
  app.add_stylesheet('css/font-awesome.css')
/home/davidh/repos/git/vispy/_website/conf.py:354: RemovedInSphinx40Warning: The app.add_stylesheet() is deprecated. Please use app.add_css_file() instead.
  app.add_stylesheet('style.css')
...                                                                                                                                                                                                            
/home/davidh/repos/git/vispy/vispy/visuals/transforms/linear.py:docstring of vispy.visuals.transforms.MatrixTransform:1: WARNING: duplicate object description of vispy.visuals.transforms.MatrixTransform, other instance in visuals, use :noindex: for one of them                                                                                                                                                                                                                                            
/home/davidh/repos/git/vispy/vispy/visuals/transforms/linear.py:docstring of vispy.visuals.transforms.MatrixTransform.imap:1: WARNING: duplicate object description of vispy.visuals.transforms.MatrixTransform.imap, other instance in visuals, use :noindex: for one of them                                                                                                                                                                                                                                  
/home/davidh/repos/git/vispy/vispy/visuals/transforms/linear.py:docstring of vispy.visuals.transforms.MatrixTransform.map:1: WARNING: duplicate object description of vispy.visuals.transforms.MatrixTransform.map, other instance in visuals, use :noindex: for one of them                                                                                                                                                                                                                                    
/home/davidh/repos/git/vispy/vispy/visuals/transforms/linear.py:docstring of vispy.visuals.transforms.MatrixTransform.rotate:1: WARNING: duplicate object description of vispy.visuals.transforms.MatrixTransform.rotate, other instance in visuals, use :noindex: for one of them                                                                                                                                                                                                                              
/home/davidh/repos/git/vispy/vispy/visuals/transforms/linear.py:docstring of vispy.visuals.transforms.MatrixTransform.scale:1: WARNING: duplicate object description of vispy.visuals.transforms.MatrixTransform.scale, other instance in visuals, use :noindex: for one of them                                                                                                                                                                                                                                
/home/davidh/repos/git/vispy/vispy/visuals/transforms/linear.py:docstring of vispy.visuals.transforms.MatrixTransform.set_frustum:1: WARNING: duplicate object description of vispy.visuals.transforms.MatrixTransform.set_frustum, other instance in visuals, use :noindex: for one of them                                                                                                                                                                                                                    
/home/davidh/repos/git/vispy/vispy/visuals/transforms/linear.py:docstring of vispy.visuals.transforms.MatrixTransform.set_mapping:1: WARNING: duplicate object description of vispy.visuals.transforms.MatrixTransform.set_mapping, other instance in visuals, use :noindex: for one of them                                                                                                                                                                                                                    
/home/davidh/repos/git/vispy/vispy/visuals/transforms/linear.py:docstring of vispy.visuals.transforms.MatrixTransform.set_ortho:1: WARNING: duplicate object description of vispy.visuals.transforms.MatrixTransform.set_ortho, other instance in visuals, use :noindex: for one of them                                                                                                                                                                                                                        
/home/davidh/repos/git/vispy/vispy/visuals/transforms/linear.py:docstring of vispy.visuals.transforms.MatrixTransform.set_perspective:1: WARNING: duplicate object description of vispy.visuals.transforms.MatrixTransform.set_perspective, other instance in visuals, use :noindex: for one of them                                                                                                                                                                                                            
/home/davidh/repos/git/vispy/vispy/visuals/transforms/linear.py:docstring of vispy.visuals.transforms.MatrixTransform.shader_imap:1: WARNING: duplicate object description of vispy.visuals.transforms.MatrixTransform.shader_imap, other instance in visuals, use :noindex: for one of them                                                                                                                                                                                                                    
/home/davidh/repos/git/vispy/vispy/visuals/transforms/linear.py:docstring of vispy.visuals.transforms.MatrixTransform.shader_map:1: WARNING: duplicate object description of vispy.visuals.transforms.MatrixTransform.shader_map, other instance in visuals, use :noindex: for one of them                                                                                                                                                                                                                      
/home/davidh/repos/git/vispy/vispy/visuals/transforms/linear.py:docstring of vispy.visuals.transforms.MatrixTransform.translate:1: WARNING: duplicate object description of vispy.visuals.transforms.MatrixTransform.translate, other instance in visuals, use :noindex: for one of them                                                                                                                                                                                                                        
...
checking consistency... /home/davidh/repos/git/vispy/_website/README.rst: WARNING: document isn't included in any toctree
```",7,7,"['build', 'docs-website']"
110,484072474,1914,8935948,2020-09-10 16:26:05,2020-09-10 19:43:59,closed,Fix ImportError on Python 3.9,The `fractions.gcd()` function has been removed in Python 3.9. It was deprecated since Python 3.5: use math.gcd() instead. See https://docs.python.org/3.9/whatsnew/3.9.html#removed,1,1,"['type: bug', 'code-quality']"
111,482900767,1913,8935948,2020-09-09 14:49:55,2020-09-10 01:22:51,closed,Fix various numpy deprecation warnings,"I inspected the latest azure CI run on master and saw the same issues related to `numpy`. I fixed what was reported in `vispy/io/image.py` and `vispy/io/tests/test_io.py`. I also found a usage of `tostring()` in `vispy/io/datasets.py`.

Closes https://github.com/vispy/vispy/issues/1909",5,2,['code-quality']
112,481723946,1912,8935948,2020-09-08 02:00:43,2021-06-17 12:21:09,closed,Add 'texture_format' kwarg to VolumeVisual for floating point textures,"See #1842 for a longer discussion on this topic.

Currently the VolumeVisual must scale the provided data to fit in an 8-bit integer. This is needed due to limits in OpenGL 2.0/ES but causes some major performance limitations. Data must be scaled for any color limit changed which means not only recalculations of the data but reupload of it to the GPU. Data must also be copied if the user does not want their original data array modified.

Newer versions of OpenGL allow for non-integer texture formats and this PR tries to make them available to the VolumeVisual. A future PR will do the same thing for the ImageVisual.

Some issues:

1. I don't have any tests that specifically check that this behavior is working and I'm not really sure how to do it without writing tests that test implementation rather than actual functionality.
2. I really don't like the keyword argument being a boolean or the name of it `texture_float`. The VolumeVisual is relatively limited (I have limited experience with it as well so someone correct me) in what formats it accepts as input data, but it seems a luminance (single color value) arrays are all that are accepted. That means that the only logical in-GPU format is really R32F. There are other formats mentioned [here](https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glTexImage2D.xhtml) but I'm not sure if someone would really want to use them (maybe the compressed formats). The ImageVisual is another story as someone may have a lot of different formats they want to use, but maybe that doesn't matter and should require subclassing by the user. I'd like VolumeVisual and ImageVisual to have the same keyword argument for this if possible. Opinions welcome.

CC @sofroniewn @tlambert03 ",36,42,"['type: enhancement', 'component: visuals']"
113,480922270,1911,8935948,2020-09-06 22:59:21,2020-09-07 21:39:59,closed,Fix ImageVisual not updating color transform after texture update,fixes a bug resulting from #1844  that can cause inconsistent contrast (only in specific cases) in when rebuilding an image texture with `ImageVisual._build_texture()`  (originally observed/described at napari/napari#1585),3,1,"['type: bug', 'component: visuals']"
114,479186630,1908,8935948,2020-09-04 02:04:34,2020-09-06 01:31:02,closed,Fix test runners not passing arguments properly on Windows,"Tests on appveyor and Azure started failing all of a sudden and it seems to be related to how arguments are passed from vispy's `_runners.py` module to the python executable through `run_subprocess`.

```
_VISPY_TESTING_APP=nobackend C:\conda\envs\test\python.exe -m pytest -m ""not vispy_app_test"" --cov vispy --cov-report= -ra c:\projects\vispy\vispy
============================= test session starts =============================
platform win32 -- Python 3.7.9, pytest-6.0.1, py-1.9.0, pluggy-0.13.1
rootdir: c:\projects\vispy, configfile: pytest.ini
plugins: cov-2.10.1, sugar-0.9.3
collected 470 items
============================ no tests ran in 2.96s ============================
ERROR: Wrong expression passed to '-m': ""not vispy_app_test"": at column 1: unexpected character """"""
Failed: unit failure (4)
Testing failed (['nobackend'] failed, ['pyqt4', 'pyqt5', 'pyside', 'pyside2', 'pyglet', 'glfw', 'sdl2', 'wx', 'egl', 'osmesa', 'ipynb_webgl', '_test'] skipped) in 6.476 seconds
FAILURE
```

Basically we are calling `python -m pytest -m ""not vispy_app_test""` to skip any tests marked as needed the application. However, it is now passing the quotation marks to python instead of the shell interpreting them.",3,4,['build']
115,446639572,1891,8935948,2020-07-09 06:08:11,2020-07-09 15:38:15,closed,Fix typo,,2,1,[]
116,443381609,1888,8935948,2020-07-02 09:06:09,2020-07-03 20:00:57,closed,Delay testing import with proxy function,Fixes #1887 with delay import  of testing module.,2,6,['build']
117,442234323,1886,8935948,2020-06-30 19:00:31,2020-09-14 12:42:21,closed,Let camera link be limited to specified properties,"I suggest adding an argument to BaseCamera.link letting the user specify the camera properties to be linked.

The use case I have in mind is two turntable cameras with only the elevation and azimuth, not the scale_factor, being linked.",24,5,"['type: enhancement', 'component: scene']"
118,441961089,1884,8935948,2020-06-30 11:21:53,2020-07-01 17:09:31,closed,Speed up arcball and turntable cameras,"In Base3DRotationCamera, instead of gradually constructing the view
matrix inside MatrixTransform, do prepare the final matrix first, then
assign it to MatrixTransform.

This is done to avoid the relatively costly operations each time the
matrix inside MatrixTransform changes.

See #1878.",4,1,"['component: scene', 'type: performance']"
119,441762640,1883,8935948,2020-06-30 03:36:50,2020-09-14 14:24:06,closed,Fix OpenGL to ctypes type mapping,See https://www.khronos.org/opengl/wiki/OpenGL_Type,6,5,"['type: bug', 'component: gl']"
120,440947499,1881,8935948,2020-06-27 18:43:19,2020-06-30 19:44:15,closed,flip images vertically or horizontally,"Closes #1880 
- vispy.gloo.io.imread didn't had an option to flip the image.
- Used np.flip to flip it horizontally or vertically for both PIL and imageio",7,1,[]
121,433816195,1876,8935948,2020-06-12 18:01:01,2021-05-26 19:11:24,closed,Update base_camera link to enable axis sharing,"This change enables linking viewbox cameras by one axis (x/y).
So a its possible to interact(zoom and pan) with one viewbox and the linked viewbox only updates the specified axis, instead of updateing both.
I wrote this to enable the matplotlib shared axis behavior in vispy
https://matplotlib.org/3.1.0/gallery/subplots_axes_and_figures/shared_axis_demo.html
the code can be undoubtedly improved but i haven't noticed a performance loss",4,2,[]
122,426559473,1870,8935948,2020-06-02 12:42:53,2020-06-02 13:22:30,closed,emit transform_change on view_changed,Emit transform_change on view_changed to get information about view changed.,2,1,[]
123,422319023,1866,8935948,2020-05-23 19:49:10,2020-05-25 13:43:03,closed,Fix jupyter lab extension to use newest vispy.js,Bump ipython widget to match package.json,6,1,"['type: enhancement', 'component: jupyter-widget-backend']"
124,418979315,1864,8935948,2020-05-16 14:58:49,2020-05-16 21:17:31,closed,Fix styling issues due to new flake8 version,"Flake8 3.8.x was released in the last week and it is causing some new failures on Travis. This PR is my attempt at fixing these issues in the most reasonable manner. The majority of the issues were ambiguous variable names which is a pretty good thing to check for in my opinion so I didn't want to outright ignore that rule. There were a few cases where it made sense to have a variable named `l` (like left, right, bottom, top function arguments) and other cases where it was just laziness that was easy to fix. In one case (`husl.py`) it is technically an external library so I ignored that file in `setup.cfg`.",0,1,['code-quality']
125,416875802,1863,8935948,2020-05-12 17:47:40,2020-05-17 19:49:05,closed,Allow for 2D X and Y coordinates in SurfacePlotVisual,The SurfacePlot() function can now accept user created mesh. This enables drawing surfaces using cylindrical and spherical cooordinates. An example code is also added which may be accepted after review.,12,8,"['type: enhancement', 'component: visuals']"
126,414071400,1859,8935948,2020-05-06 12:41:50,2020-05-08 09:05:31,closed,Fix creating colormap from list of Color objects,fix #1858 with adding check if any list member is instance of `Color` or `ColorArray`,13,2,[]
127,409836880,1854,8935948,2020-04-28 01:55:24,2021-02-28 23:01:45,closed,Allow for precision definitions in shaders,While looking at #1850 we realized that vispy is still removing `precision` definitions from shaders. As far as I can tell this has been this way since almost the beginning of vispy. The best guess from Almar was that some drivers may not have handled the precision identifiers back then even though it is part of the OpenGL ES 2.0 spec. It's been at least 5 years since that code was written so let's see if the tests pass and allow more complex shaders to work out of the box.,5,2,['type: bug']
128,409835598,1853,8935948,2020-04-28 01:49:45,2020-04-28 14:21:55,closed,Fix ImageVisual updating vertex coordinates on every draw,"While looking at #1852 I noticed that the ImageVisual is updating the vertex and texture coordinates during *every* draw. This PR should fix that.

TODO:

- [x] Add test to make sure the method is only called once",0,2,"['type: bug', 'component: visuals']"
129,391058247,1844,8935948,2020-03-19 15:06:01,2020-03-28 19:50:21,closed,Add ImageVisual gamma and smarter in-shader contrast limits,"This is a companion to #1842.  It puts (re)calculation of contrast limits (and adds gamma) to the `ImageVisual` shader.  If `clims` are changed after the `ImageVisual` has been created, then the texture will only be rebuilt (`_need_texture_upload == True`) if the new `clims` are outside of the bounds of the previous clims.  (note: unlike `VolumeVisual` in #1842, `ImageVisual` holds a copy of the data, so rescaling is easier).

possible embellishments include: allowing gamma and/or contrast limits to be set _per_ channel (for an rgb image).",41,11,"['type: enhancement', 'component: visuals']"
130,390679801,1843,8935948,2020-03-18 21:42:14,2020-03-28 18:02:11,closed,Add MacOS 10.14 and manylinux2014 wheel builds,Build wheels against more modern standards allow to use newer compilators and api which my produce better/faster shared libs. So I suggest to add builds of manylinux2014 and macos 10.14 wheels. ,6,5,['build']
131,390587544,1842,8935948,2020-03-18 18:04:24,2020-09-07 21:35:00,closed,"Implement volume contrast limits in shader, add gamma","This began as an internal PR at https://github.com/napari/napari/pull/1056, but I'd like to know if it's something you would consider.  In typical [napari](https://github.com/napari/napari) usage, it would be pretty normal to repeatedly change the min/max contrast limits while viewing a 3D volume.  Unfortunately, each change incurs a renormalization on the CPU in [`Volume.set_data`](https://github.com/vispy/vispy/blob/3ac28ff0daf8836b44c6eba8d3c98541e37c5702/vispy/visuals/volume.py#L487-L493), leading to very laggy performance.  This PR moves most of the _re_-calculation of clims to the shader as follows:

- `Volume.clim`→ `Volume.clim_range`: `Volume.clim` was previously just serving a one-time role of data normalization (0-1) prior to moving the volume to Texture memory.  Seems to me that normalization needn't be repeated often, if the user is able to provide the maximum _range_ of min/max values that they might want to use.  So `Volume.clim` becomes `Volume.clim_range`, and `set_data(vol, clim)` becomes `set_data(vol, clim_range)`
- `Volume.clim` now becomes a property that is passed to the shaders where the final scaling is done.
- this PR also adds `Volume.gamma`, and performs gamma calculations in the shaders at the moment of colormap lookup.

For typical volume sizes in napari (~256-1024 pixels<sup>3</sup>), this speeds up rendering after changing the contrast almost 5 fold (on my computer)

### breaking change
this is a **breaking** change, in that it changes the semantics of `Volume.clim` and adds a new property `Volume.clim_range` (that has the same meaning and usage as the previous `Volume.clim`.  The `clim` argument in `Volume.set_data` has been renamed to `clim_range` to reflect what it is actually doing (though a deprecation warning catches previous usage and warns).
It _would_ be possible to implement this without breaking the API, by just re-interpreting the meaning of the existing `Volume.clim` and creating a new property (maybe `display_limits`?) that controls the final lookup on the shader.  But I felt like that was much less clear.  Anyway, let me know what you think of the basic idea and we can discuss how you would prefer to handle breakages.",28,14,"['type: enhancement', 'component: visuals']"
132,389545398,1840,8935948,2020-03-16 23:36:02,2020-03-23 21:47:16,closed,ColorArray != operator using == (for Python 2),"In Python 3, overriding `__eq__` [automatically generates an override of `__ne__` that uses `__eq__`](https://bugs.python.org/issue4395) as long as the class doesn't inherit from some class that already overrides `__ne__`. However, Python 2 does not implement this convenience.

Comparing color values is important because [setting the color on a `MeshVisual` automatically sets its dirty flag](https://github.com/vispy/vispy/blob/d45a7ddd7ccb5e49ac1e4aea67f09e0a47960151/vispy/visuals/mesh.py#L344), even if the new color is the same as the old one. Setting the dirty flag causes a big performance hit. Therefore, in code where object colors change often, but not every frame, it's natural for the user to write code like:

    if new_color != mesh.color:
        mesh.color = new_color

This comparison currently doesn't work correctly in Python 2 due to the lack of overridden `__ne__` in `ColorArray`.",3,1,[]
133,389287264,1839,8935948,2020-03-16 14:47:03,2020-03-16 17:19:38,closed,Fix PRs not being run on Azure,Taking the advice from @larsoner for fixing this. See https://github.com/mne-tools/mne-python/pull/7457,3,3,[]
134,388727388,1837,8935948,2020-03-15 14:42:47,2020-03-15 15:21:52,closed,Update vispy.js submodule to 0.3.0,VisPy.js 0.3.0 has been released. This includes support for JLab 3 and the ability to provide context configuration to the Canvas creation. This should make it so #1693 can be tested more thoroughly (CC @klarh).,0,1,['component: jupyter-widget-backend']
135,385488113,1835,8935948,2020-03-09 09:59:37,2020-03-16 13:37:10,closed,Make demos easier to switch to PySide2 from PyQt5,"
While most of examples/demos have hardcoded PyQt5 usage, it is generally trivial to pass to PySide2 by just replacing PyQt5 with PySide2 in the imports. But there are a few exceptions, like the two demos touched by this PR, that use signals where the PyQt5 and PySide2 API differs. 
This PR makes also those demos easily switchable.


I'm not sure a general revision of demo code, or just a plain explanation, would be advisable given that PySide2 is getting more important with the backing of Qt. 
If so I can try to contribute in this sense.

Federico",15,2,"['type: enhancement', 'type: example']"
136,381815108,1830,8935948,2020-02-29 08:15:07,2020-02-29 15:21:05,closed,Update doc submodule - fix urls,"Updating submodule, as requested from @djhoese in https://github.com/vispy/vispy-website/pull/27

The corresponding changes in the `vispy-website` repository change urls, so that links to sources work properly.
(Original issue https://github.com/vispy/vispy-website/issues/22)",1,1,[]
137,381625295,1829,8935948,2020-02-28 22:28:38,2020-03-28 18:11:17,closed,solve ssl problem,"RuntimeError: Error while fetching file http://github.com/vispy/demo-data/raw/master/galaxy/star-particle.png.
Dataset fetching aborted (<urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:841)>)",2,1,[]
138,378615507,1825,8935948,2020-02-22 18:03:23,2020-02-22 22:06:35,closed,Fix DataBuffer.set_subdata docstring with wrong offset units,"The `offset` is in ""item count"" unit not in ""byte count"" unit as is the case in the dtype-agnostic `Buffer` class.
The doc was probably copied over from the `Buffer` class without adaptation.",2,3,['docs-website']
139,377886472,1824,8935948,2020-02-20 17:32:42,2020-03-28 19:50:00,closed,Use meshio fall back for reading and writing mesh files,"A rather unintrusive introduction of meshio into `read_mesh`. One could go further and have all i/o handled by meshio; obj and stl readers are in place. I didn't want to stretch it too far for this first PR though.

What works now:
```python
import vispy.io

verts, faces, _, _ = vispy.io.read_mesh(""triceratops.vtu"")
```
with all meshio-supported formats (there are around 30) _if_ meshio is installed and the mesh does in fact contain triangles.

Fixes #1817.",15,11,"['type: enhancement', 'component: io']"
140,376380265,1821,8935948,2020-02-18 02:01:40,2020-02-21 14:00:42,closed,Fix GitHub raw file download base URL,"The VisPy cron job for Travis CI is failing on OSX. Not sure why specifically OSX, but while investigating I noticed that the GitHub raw file URL gets redirected. This PR changes VisPy's default download URL to be this new base URL. Let's see if the tests pass with it...",2,3,['type: bug']
141,369804137,1813,8935948,2020-01-31 22:53:22,2020-02-04 03:18:02,closed,Fix examples with recent numpy version,"This PR fixes running examples with recent versions of numpy (`>= 1.18`)
(mostly related to https://github.com/numpy/numpy/pull/14620)",6,3,[]
142,361853600,1807,8935948,2020-01-12 17:42:09,2020-03-28 18:28:07,closed,Fix LinePlotVisual not remembering styles,"Currently, if someone generates a line plot with no markers, for instance:
```python
line = scene.LinePlot((x,y), marker_size=0)
```
and then later updates the data with 
```python
line.set_data((x,y/2))
```
the markers come back.

This PR modifies the behavior of `LinePlotVisual` visual slightly to store the styles set during `__init__` or calls to `set_data`, such that styles do not need to be repeatedly given to `set_data` if one only wants to update the data itself.

",7,4,"['type: bug', 'component: visuals']"
143,361133503,1806,8935948,2020-01-09 20:01:18,2020-01-20 17:44:42,closed,DOC: Drop installation instructions from readme,Refer to documentation on the website instead.,12,3,['docs-website']
144,360069171,1805,8935948,2020-01-07 16:29:37,2020-01-12 21:32:03,closed,MAINT: GLFW workaround,"Hopefully makes GLFW 3.3.1 tests work. I think they might have some bug with `decorate` as not setting the value makes things pass on my system (at least on 3.4.0 dev that I installed). Probably worth filing an upstream bug if this actually works.

EDIT: Also replaced Travis custom setup with cleaner `ci-helpers` interface
EDIT: Also silenced some errors about bad division in `axis` tests
EDIT: Also configured Travis's runs to use `--tb=short` to shorten tracebacks",10,18,[]
145,358444578,1803,8935948,2020-01-01 02:34:45,2020-01-20 17:44:11,closed,Add nearest interpolation to volume visual,"This PR adds an `interpolation` property to the Volume visual and exposes a `nearest` and `linear`. It defaults to the `linear` behavior, which is what is currently supported, but provides the option for a `nearest` - which is particularly useful when viewing discrete (say integer labeled) regions in 3D.

Before with `linear`:
![orig_linear_interpolation](https://user-images.githubusercontent.com/6531703/71637606-ff67cd80-2bfb-11ea-8911-57ea2a1fe081.gif)

Now with `nearest`:
![better_3D_labels](https://user-images.githubusercontent.com/6531703/71637607-055dae80-2bfc-11ea-84f8-e4814032fab3.gif)

You can see these in use here https://github.com/napari/napari/pull/841 too

This PR adds documentation for the new property and a test for it.
",3,4,"['type: enhancement', 'component: visuals']"
146,358442075,1802,8935948,2020-01-01 01:40:29,2020-03-16 17:06:00,closed,Remove isosurface green color in VolumeVisual,"This PR improves the isosurface rendering in the volume visual by getting rid of the default greenish tinge that was always being applied and allowing the isosurface to also respond to the changing of the colormaps. You can see it in action here https://github.com/napari/napari/pull/840 and below.

Original behavior:
![orig_iso_surface](https://user-images.githubusercontent.com/6531703/71637281-a5630a00-2bf3-11ea-861c-b1b4739733ae.gif)

Improved behavior:
![better_iso_surface](https://user-images.githubusercontent.com/6531703/71637282-ae53db80-2bf3-11ea-88e9-fc39438186c2.gif)

I realize this change will change how peoples renderings currently look, but I hope the majority of people will find the new behavior and improvement.",7,2,"['type: enhancement', 'component: visuals']"
147,356090490,1799,8935948,2019-12-22 14:22:10,2020-03-15 20:31:59,closed,Updated pinnings for python 3.8,,5,1,['build']
148,355387649,1796,8935948,2019-12-19 22:05:43,2019-12-20 15:53:17,closed,Unpin numpy for Py>=3.7.,See discussion at #1795.,11,1,[]
149,354731470,1794,8935948,2019-12-18 17:36:40,2020-03-18 13:42:27,closed,"Add ""transparent"" color to internal color_dict",Fixes #1793.,0,1,"['type: enhancement', 'component: color']"
150,353320059,1792,8935948,2019-12-15 22:09:03,2020-04-28 14:52:22,closed,Make all AxisVisual parameters easily updatable after instantiation,"I am starting to work with the `PlotWidget` a bit more for use in `napari`.  This is a small PR, partially for that and also to fix part of https://github.com/vispy/vispy/pull/1748#issuecomment-559789319.  It modifies `AxisVisual` to ensure that all of the parameters in the `__init__` method can be easily changed as attributes/properties after instantiation, and that changing them immediately updates the necessary subvisuals.

Rather than make a whole bunch of relatively empty `@property` and `@setter` methods just to set `_need_update` and call `self.update()` each time, I chose to modify the `__setatr__` method instead, calling `update()` for all parameters that wouldn't have otherwise induced a visual update.  (Note, parameters that are _not_ listed in there, such as `tick_width`, already update the visual without needing `update()`).  Let me know if you prefer the more explicit but verbose properties & setters.

There is one slight API change here: the `label_color` property is renamed to `text_color`, since that's what it was called in the function signature and class docstring.  Also added a couple more properties to access axis & tick widths/direction after instantiation.",25,7,"['type: enhancement', 'component: visuals']"
151,352605992,1789,8935948,2019-12-12 20:53:41,2019-12-12 21:45:23,closed,Filter unnecessary QSocketNotifier warning when using QtConsole,Workaround for https://github.com/vispy/vispy/issues/1787,8,1,['type: enhancement']
152,350453971,1785,8935948,2019-12-08 20:57:08,2019-12-08 21:34:18,closed,Fix simple typo: usingthe -> using the,,0,2,[]
153,350291894,1784,8935948,2019-12-07 08:46:47,2019-12-07 21:10:06,closed,Fix simple typo: withour -> without,"Closes #1783

",3,1,[]
154,348569020,1781,8935948,2019-12-03 21:48:08,2019-12-04 17:12:27,closed,FIX: Nest triangle and skimage imports,Addressing @cgohlke's [comment](https://github.com/vispy/vispy/issues/1779#issuecomment-561366474).,6,3,['type: performance']
155,348518335,1780,8935948,2019-12-03 19:49:57,2019-12-03 21:07:04,closed,Switch to setuptools_scm version.py usage to avoid import overhead,"Closes #1779 

This switches vispy to use a feature of setuptools_scm which writes the generated version number to a `vispy/version.py` file. This is different from what was previously done which was to use setuptools to read the installed package's metadata and extract the version number. As discussed in #1779, this can cause major overhead on systems with a lot of packages installed. This PR is the simplest workaround for that.

The downside to this is that developers installing vispy in a ""development mode"" may be confused by a `vispy/version.py` that is ignored by `.gitignore` and was generated just by them installed the package.

## Additionally

This starts to put in place some functionality that setuptools_scm recently documented and added to enable setuptools_scm from the pyproject.toml file. However, this requires setuptools 42 or above which is not widely available so I'm not sure it is smart to require that for building quite yet. Maybe version 0.7 or 0.8 (assuming this gets included in a 0.6.x release).",4,3,['type: performance']
156,347377526,1777,8935948,2019-12-01 22:17:47,2020-01-20 17:42:43,closed,"Make it possible to get and set the face, bold, and italic properties of Text via properties","For a use case I have, I needed to be able to find out whether a ``Text`` object had a bold font, and needed to be able to set it, so I decided to add properties for the face, bold, and italic properties of Text (since these can be set via the ``__init__``, I thought having properties that match these arguments would make sense).",6,2,"['type: enhancement', 'component: visuals']"
157,347249774,1775,8935948,2019-11-30 18:47:39,2020-03-15 23:05:06,closed,Update tests to use pytest better,"Needs: https://github.com/vispy/vispy/pull/1774

Which has been folded into this.",8,7,['build']
158,347249683,1774,8935948,2019-11-30 18:46:26,2020-03-15 20:29:47,closed,Fixup decorator to enable full use of pytest.,"I get that moving backends is a ""decision"" that must be thought of. 

This is just a little fix that enables decorators to be stacked and used with pytest.

Otherwise, enabling the gc destroys other pytest decorators.",2,4,['build']
159,347240961,1772,8935948,2019-11-30 17:08:27,2019-12-04 17:13:34,closed,Skip bad font in test_font,"Fixes: https://github.com/vispy/vispy/issues/1771

Also uses fixtures so as not to change the global state of the the warnings filter.",6,5,['type: bug']
160,345874308,1769,8935948,2019-11-26 18:22:21,2021-06-19 20:31:45,closed,Fix automatic limits of ImageVisual with non-finites values,"Hello @djhoese ,

Here's the PR that only contains the patch when there's non finite values inside the data.

Small code for reproducibility :

```python
import numpy as np

from vispy import scene
from vispy import app
from vispy.scene.cameras import PanZoomCamera

# Camera and scene canvas :
cam = PanZoomCamera(rect=(0, 0, 4, 5))
sc = scene.SceneCanvas(bgcolor='black')
wc = sc.central_widget.add_view(camera=cam)

# 2d array of data
data = np.arange(20).reshape(5, 4).astype(float)
data[2, 0] = -np.inf
data[2, -1] = np.inf
data[-1, 2:3] = np.nan

# Red image :
im_red = scene.visuals.Image(data, parent=wc.scene, cmap='viridis')

sc.show()
app.run()
```

Basically, if the data contains NaN or inf, the minimum and maximum of clim are not corrects which forces the render to be a single color :
![Screenshot_20191126_191530](https://user-images.githubusercontent.com/15892073/69660690-1f4a2580-1081-11ea-89b2-eebf614bfd76.png)

After modifications :
![Screenshot_20191126_191744](https://user-images.githubusercontent.com/15892073/69660825-6f28ec80-1081-11ea-9ff5-33e6e79c0f07.png)

**Note** : on matplotlib those pixels are discarded which is not the case here.
![Screenshot_20191126_191913](https://user-images.githubusercontent.com/15892073/69660918-a39ca880-1081-11ea-87a3-d2ad05601ccf.png)
 
",16,1,[]
161,345353770,1768,8935948,2019-11-25 18:21:43,2019-11-25 18:52:18,closed,Fix string formatting of array shape,Fix `TypeError: not all arguments converted during string formatting`,0,1,['type: bug']
162,345339711,1767,8935948,2019-11-25 17:44:14,2019-11-26 14:40:02,closed,Fix failing travis CI OSX test failures,"Attempt to fix #1765 

First thing I'm noticing is a difference in pytest version. Pytest 5.3.0 got some work done on caching test files in python 3.8 so you would think that wouldn't be a problem since we are using python 3.7, but maybe it is.",2,4,[]
163,344983456,1766,8935948,2019-11-25 02:13:02,2019-11-25 16:28:42,closed,Fix additional numpy warnings when dealing with dtypes of size 1,These were missed by #1691 but I started noticing them in some recent PR CI tests.,1,1,['code-quality']
164,342269049,1758,8935948,2019-11-18 17:22:02,2019-11-20 17:27:16,closed,Fix texture alignment to use data itemsize,"See https://github.com/napari/napari/issues/576 for the main discussion of this.

## OpenGL PACK/UNPACK Alignment

When writing or reading data to/from the GPU with OpenGL we need to specify the row alignment of our data. For writing data to the GPU we set the ""GL_UNPACK_ALIGNMENT"" parameter to 1, 2, 4, or 8. This tells OpenGL if the next row of data will be in the next byte, next 2-bytes, 4-bytes, or 8-bytes.

**Edit for clarification:** I meant the next aligned 2-bytes or 4-bytes, or 8-bytes. So if the data goes up to byte 30 and our alignment is 8 then OpenGL will get our next from starting at byte offset 32.

## How this applies to Vispy

In general Vispy requires or copies the data it is given by the user to be memory contiguous. So you might argue that the alignment can always be 1 (the next row starts in the next immediate byte). It isn't clear, but it seems there are some performance improvements if you choose a higher alignment. I have not tested this, but based on the Vispy code that was written a long time ago this seems to be the idea.

## The issue being fixed

Vispy currently assumes that all data are bytes (unsigned 8-bit integers), but this is often not true (32-bit floats, etc). Alignment should be based on width of a row, number of ""bands"" per pixel (3 for RGB, 1 for Luminance, etc), number of bytes per element (4 for 32-bit float, 1 for uint8, etc). This is the first bug fixed by this PR (use `data.itemsize` when determining alignment).

So for a 2D texture we should be getting the highest possible alignment for:

```
bytes_per_row = width * num_bands * itemsize
```

For 3D textures we should still only care about the width of a ""row"" (the last data dimension not including number of bands). This is the second bug being fixed by this PR where the Texture3D was using the ""height"" and ""width"".

Let's see what tests fail and then I'll come up with some tests to specifically check this based on the discussion in https://github.com/napari/napari/issues/576.",6,3,['type: bug']
165,342043863,1757,8935948,2019-11-18 09:14:40,2019-12-02 14:25:09,closed,make it possible to update text font face/bold/italic,,3,1,"['type: enhancement', 'component: visuals']"
166,341774461,1756,8935948,2019-11-16 17:25:15,2019-11-18 17:32:04,closed,Fix shader version handling in webgl backend,"Closes #1755

The WebGL shader handling currently removes the version directive from the shaders before they're sent to the client. This is maybe not the best long term solution, but this is the way I made it a while back.

Anyway, the code that removes the version directive from shader code also inserts certain `precision` directives which are required in webgl. Version directives, if they exist, must be the first line in a shader appearing before precision directives. Precision directives must also appear before code. It seems that I never tested this logic with a shader that actually includes a version directive since there is a bug where `precision` lines are being reinserted *after* the first line of code. This PR fixes this.

## TODO

- [x] Add tests",0,4,['type: bug']
167,339959497,1751,8935948,2019-11-12 15:13:50,2021-06-18 21:14:59,closed,use Rect properties in PanZoomCamera,"Hello everyone,

Some small changes (first PR in this project...)

Added default value for rect
Use Rect class to get local rect properties",11,1,['type: enhancement']
168,339598684,1749,8935948,2019-11-11 20:15:04,2019-11-21 17:58:20,closed,Fix 2D mesh bounds IndexError when viewed in 3D,"This PR side-steps an `IndexError: list index out of range` error that happens when swapping cameras on 2D mesh. If desired I can come up with a minimal reproducible example purely using vispy code, but we've been encountering it quite a bit in napari - see https://github.com/napari/napari/issues/672 for the latest time. We might be using the cameras in a bad way to be triggering it, but what is happening is that we're asking for scene bounds for `axis=[0, 1, 2]`, but our mesh is 2D and so one is missing. We get the following error:

```bash
  File ""/Users/nicholassofroniew/Github/napari/napari/_qt/qt_viewer.py"", line 177, in _update_camera
    aspect=1, name=""PanZoomCamera""
  File ""/anaconda3/lib/python3.7/site-packages/vispy/util/frozen.py"", line 17, in __setattr__
    object.__setattr__(self, key, value)
  File ""/anaconda3/lib/python3.7/site-packages/vispy/scene/widgets/viewbox.py"", line 111, in camera
    cam.view_changed()
  File ""/anaconda3/lib/python3.7/site-packages/vispy/scene/cameras/base_camera.py"", line 375, in view_changed
    self.set_range(*args)
  File ""/anaconda3/lib/python3.7/site-packages/vispy/scene/cameras/base_camera.py"", line 273, in set_range
    bounds = self._viewbox.get_scene_bounds()
  File ""/anaconda3/lib/python3.7/site-packages/vispy/scene/widgets/viewbox.py"", line 151, in get_scene_bounds
    b = ob.bounds(axis)
  File ""/anaconda3/lib/python3.7/site-packages/vispy/visuals/visual.py"", line 251, in bounds
    self._vshare.bounds[axis] = self._compute_bounds(axis, view)
  File ""/anaconda3/lib/python3.7/site-packages/vispy/visuals/mesh.py"", line 537, in _compute_bounds
    return self._bounds[axis]
IndexError: list index out of range
Abort trap: 6
```

This PR fixes that by returning `(np.inf, -np.inf)` instead of trying to index into the list at a coordinate that doesn't exist, which allows the camera scene bound code to do the right thing. It is backwards compatible as previous code would have just given an error.

Please let me know if you think this is an OK fix, or if you'd rather we try and find a fix somewhere else in the code. Please also let me know if you'd like me to add a test, and where that test should go.",6,5,"['type: bug', 'component: scene']"
169,339167670,1748,8935948,2019-11-10 16:41:59,2019-11-25 16:31:14,closed,Fix xaxis labels being wrong initially in PlotWidget,"This PR Fixes #1742 by adding the xaxis `AxisWidget` to the `PlotWidget.grid` before the `ViewBox` gets added.

Explanation (hope this is clear):
The order that widgets get added to the `PlotWidget.grid` in `PlotWidget._configure_2d` is currently problematic, because the xaxis `AxisWidget` (but not the yaxis `AxisWidget`) is getting added to the grid after the `ViewBox` is added.  As a result, when the `Grid._prepare_draw` method triggers `Grid._update_child_widget_dim` and it [loops through the grid widgets](https://github.com/vispy/vispy/blob/6f4e52aeecc40c29bf2fde3d217c0a3e6ea6b438/vispy/scene/widgets/grid.py#L481-L502) to update their sizes, the `ViewBox` `rect.setter` gets called before the xaxis `AxisWidget` has had a chance to update its size.  It is the `ViewBox` `rect.setter` that ultimately triggers the `resize()` event that is hooked to the `AxisWidget._view_changed` method that changes the axis domain & labels.  And though the ViewBox `rect.setter` _does_ get called a second time after the xaxis widget has changed its size, this time it fails the `self._pos_or_size_changed` test and does not trigger the `resize` event necessary for the xaxis redraw.  (this also explains why the problem was only affecting the x axis, because the y axis was added to the grid before the viewbox).",23,6,"['type: bug', 'component: plot']"
170,338100867,1746,8935948,2019-11-07 15:35:15,2020-01-20 17:37:40,closed,Fail gracefully if OpenGL version can't be determined,I ran into issues on Azure Pipelines where ``self.capabilities['gl_version']`` is an empty string which causes the version comparison below to crash. This PR adds a workaround to show a warning and not crash.,11,1,"['type: enhancement', 'component: gl']"
171,336945295,1745,8935948,2019-11-05 19:24:01,2019-11-05 20:44:28,closed,Update vispy.js to not include package-lock.json,"See https://github.com/vispy/vispy.js/pull/26 for details.

Basically for the 0.6.2 release I had to hardcode the version number so setuptools_scm would be happy. I have now updated the vispy.js repository so it doesn't include the `package-lock.json` file which was being updated during setup.py building and causing issues with the version number that `setuptools_scm` ended up generating.",0,2,['build']
172,336901682,1744,8935948,2019-11-05 17:39:49,2019-11-22 16:53:04,closed,Improve AxisVisual visual by providing property getters and setters,This adds getters and setters for a number of properties related to the appearance of the ``AxisVisual``. Also enables anti-aliasing for axis lines and ticks.,3,1,"['type: enhancement', 'component: visuals']"
173,336896611,1743,8935948,2019-11-05 17:30:37,2019-11-22 16:47:55,closed,Various bug fixes related to AxisVisual,"This fixes a few bugs I ran into while using ``AxisVisual``:

* Changing the ``.rotation`` on a ``TextVisual`` didn't previously update the actual shader attribute for rotation. This became apparent when rotating the axes in 3-d, as the labels didn't follow the rotation.
* The calculation of the angle for the axis label didn't quite work when projection is present
* Warnings were emitted when the min/max for axes were the same

It's not clear to me how to properly test the first two but I think I could add a test for the last one if needed.",6,8,"['type: bug', 'component: visuals']"
174,332057228,1730,8935948,2019-10-24 13:44:20,2019-10-24 16:14:01,closed,Fix Python 3.8 compatibility in Canvas 'keys' update,"Fixes #1729. If I understood correctly the `RuntimeError`, an alternative to `keys.pop(key)` should solve this.",2,1,['type: bug']
175,331054476,1728,8935948,2019-10-22 15:21:23,2019-10-25 01:26:24,closed,Fix VolumeVisual modifying user provided data in-place,"This PR copies data by default in `VolumeVisual.set_data`, and adds a copy parameter to the method for those who want to maintain the existing behavior (wherein float32 data is not copied).
see #1727 for full discussion.",6,5,['type: bug']
176,330128950,1725,8935948,2019-10-20 15:39:54,2019-10-22 00:19:05,closed,Fix Azure Linux builds,"Noticed in #1724 our tests on the linux container on Azure is failing. It fails with an AttributeError related to the `typing` module. Looking at the paths involved it seems `site-packages/typing.py` is being used instead of the built in typing in CPython.

All of the environments are generally the same except for Linux include installing extra dependencies so we can build the `sdist` tarball of vispy (iirc it uses the extension .so's built from the wheel generation). The easiest logical leap is that these extra dependencies are for some reason installing the third-party typing package. Otherwise, it is an issue with the cibuildwheel linux which could also be because none of these dependencies have been recently updated.

This PR is me trying to figure this out...yay.",8,14,[]
177,329056182,1724,8935948,2019-10-17 04:12:10,2019-10-22 16:07:12,closed,Fix depth buffer precision,For #1723,2,2,['type: bug']
178,327593742,1722,8935948,2019-10-13 21:10:43,,open,[WIP] BayerImageVisual,"Still a WIP, running on CIs to test code.
Fixes #1721

I think this is good enough for a first pass.

I would rather better understand:

- [ ] impostor vs subdivide
- [ ] interpolation (maybe just remove it in this case????)
- [ ] build texture

Before cleaning up the docs.",12,5,['type: enhancement']
179,322525173,1714,8935948,2019-09-29 17:45:59,2021-06-11 15:55:56,closed,Check for GUI eventloop when testing for jupyter kernel,"Fixes #1708

Do we need formal tests??",29,4,['type: enhancement']
180,321510455,1712,8935948,2019-09-26 02:37:42,2019-09-26 13:39:24,closed,Volume visual has unset variable texture2D_LUT,"When I try to use my own colormap using 
```python
n_colors = 256
t = np.linspace(0., 1., n_colors)
color = np.c_[t, t, t, t*0.05]
cmap = Colormap(color)
```
instead of the one from `examples/basics/scene/volume.py`
```python
class TransGrays(BaseColormap):
    glsl_map = """"""
    vec4 translucent_grays(float t) {
        return vec4(t, t, t, t*0.05);
    }
    """"""
```
it keeps showing 

> Program has unset variables: {'texture2D_LUT'}  

with a blank screen.

Not sure if this is the best way to do it, after comparing how `cmap` is configured in `visuals.Image`, `visuals.Mesh`, `visuals.Colorbar` and `visuals.Line`, I think `texture2D_LUT` is missing.
",0,1,['type: bug']
181,316972944,1707,8935948,2019-09-12 15:44:31,2019-09-16 17:55:44,closed,Fix setuptools_scm_git_archive usage,"This was a small thing I missed from #1706. I added the `setuptools_scm_git_archive` package so that if someone installs from a release from github it will include the necessary information to determine what the version number should be. However, I forgot to actually do the part where it includes that information :smile:

This PR fixes that by following the installation instructions described [here](https://github.com/Changaco/setuptools_scm_git_archive/).",16,1,[]
182,315618977,1706,8935948,2019-09-09 16:37:21,2019-09-09 22:42:47,closed,Switch to setuptools_scm for automatic version numbering,"This updates vispy's version number handling to be automatic based on git tags instead of having to manually edit the value in `vispy/__init__.py`. The one major change to this is that `setup.py` no longer updates the `__doc__` attribute of `setup.py`, but I don't see the point of this anyway. This is even less useful now that `pip install` (and variants) is the preferred method of installing python packages instead of `python setup.py ...`.

More info on setuptools_scm: https://pypi.org/project/setuptools-scm/
Requires https://github.com/vispy/vispy-website/pull/26

Note: In previous non-github conversations I had mentioned ""caching"" the version number in something like a `vispy/version.py` file. I was going to try this with my Satpy library but one of the other maintainers didn't like it. I'm doing the same thing here that I did with Satpy which is asking setuptools_scm to get the version from git every time it is imported. This has a slight performance penalty but nothing noticeable in my opinion.",3,2,['type: enhancement']
183,315290360,1705,8935948,2019-09-08 16:59:12,2020-04-28 14:40:56,closed,Add lines_adjacency and line_strip_adjacency OpenGL primitives.,"I added lines_adjacency and line_strip_adjacency OpenGL primitives, so I can emulate quads with geometry shader.
[https://github.com/proto3/vispy/blob/quad-gif/quad.gif](https://github.com/proto3/vispy/blob/quad-gif/quad.gif)

It worked immediately with GL+ backend, but it won't with GL2 so it raise an explicit error advising to use GL+ with these primitives.
In the mean time, I updated the geometry shader support error message, so it won't blame 'GL2' all the time but gl.current_backend.__name__",5,1,['type: enhancement']
184,314522319,1703,8935948,2019-09-05 14:04:05,2019-09-08 13:27:43,closed,Fix MarkersVisual.set_data crash when pos is None,Replace 'assert' by an 'if' when pos is None. This prevent constructors depending on markers to crash with None data -> For example LinePlotVisual was crashing with data=None.,1,1,['type: bug']
185,313858823,1702,8935948,2019-09-04 05:00:30,2019-11-11 18:53:06,closed,Fix MarkerVisual scaling when rotating in 3D space,"This PR fixes #1166 where the scale was not working properly for markers when they were being rotated.

Please see that issue for a detailed discussion of the problem and proposed solution, including example code to reproduce the bug and gifs of the behavior before and after the fix.",12,2,['type: enhancement']
186,310015182,1698,8935948,2019-08-22 15:23:13,2019-08-22 17:26:07,closed,Update azure PyPI token to match new standards,"PyPI tokens are still in beta and in a recent update they've changed how they would like upload tokens to be provided and used.

```
    username:       @token                          =>      __token__
    password/token: pypi:<base64 token body>        =>      pypi-<base64 token body>
```

Because I made the Variable on Azure secret I couldn't simply modify the value of it so I had to make a whole new token under my account on PyPI. The token is now updated on Azure and this PR makes vispy use the new token.",0,1,['build']
187,308785509,1696,8935948,2019-08-19 21:13:59,2019-08-26 12:39:27,closed,Fix read_pixels when there are multiple contexts,"Closes #1695.

I discovered that the behavior of the semi-hidden `_screenshot` utility function has unexpected results when used as part of a PyQt5 application. Best I can understand is that vispy and pyqt5 are both using OpenGL to draw things to the screen. At any given time the Qt5 GL context could be active. If you ask for any properties of the ""current context"" when then you may be accidentally getting that information from the Qt context instead of the vispy context. I think that's what was happening with `_screenshot` and `read_pixels`. This PR adds a ""set_current"" operation to `read_pixels` so the vispy canvas is current when we then ask for the current viewport (`gl.glGetParameter(gl.GL_VIEWPORT)`).

I could see another option being to get the viewport from the actual canvas (which keeps that information cached) and only use the context for checking if it is remote.

@rougier @larsoner Thoughts?",10,2,['type: bug']
188,307043183,1693,8935948,2019-08-13 19:21:30,2020-04-28 14:59:41,closed,Add ability to pass webGL context arguments for notebook backend canvas initialization,"This PR adds the ability to pass arguments into the webGL context creation function by setting an attribute of the `VispyWidget` before showing the `Canvas`. I'm interested in doing this (or something like this) to be able to set `preserveDrawingBuffer` of the created contexts, so I can ""freeze"" vispy notebook widgets as static images that can be saved in the notebook itself (see [vispy_toDataUrl.ipynb.txt](https://github.com/vispy/vispy/files/3498482/vispy_toDataUrl.ipynb.txt) for an example). The easy solution would be to just always set `preserveDrawingBuffer` in vispy-created contexts, but I have read that it can carry a performance penalty of around 50% on some very weak hardware (like phones). 

I'm not terribly familiar with vispy's internals, but I imagine there is a better way to achieve what I'm looking for than this method. I'm submitting this PR to begin the discussion!

",11,6,['type: enhancement']
189,304514456,1691,8935948,2019-08-06 01:38:48,2019-08-06 14:46:58,closed,Fix numpy futurewarning in dtype creation,"In future versions of numpy defining a dtype as `('name', np.float32, 1)` will be interpreted differently. You currently get this warning:

```
/home/travis/build/vispy/vispy/vispy/visuals/markers.py:564: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.
  ('a_edgewidth', np.float32, 1)])
```

I fixed a couple of these after it was pointed out by some napari developers, but these should be all the rest now that travis can complain about them.

If I remember correctly vispy is currently using `, 1)` as ""scalar"" and in the future this will be treated as a length 1 array. But now I don't remember what `, 0)` means.",6,3,['type: bug']
190,304056046,1689,8935948,2019-08-04 10:03:42,2021-05-18 23:24:23,closed,Add mesh wireframe filter,"Tentative PR for a filter showing the mesh wireframe.
Using the fragment shader technique from [[1], [2]].
Works on top of #1463.
~~Some refinements might still be needed to blend correctly the wireframe with the mesh color or with unfilled faces.~~ Addressed in #2025.

[1]: http://codeflow.org/entries/2012/aug/02/easy-wireframe-display-with-barycentric-coordinates/
[2]: https://stackoverflow.com/a/33004265

Pros:
- control of the line width
- anti-aliased

Cons:
- additional buffer of vertex attributes with barycentric coordinates
- no independent color per edge (always shared with neighbors to some extent)
- does not work with indexed arrays

To do:
- [x] implement base filter
- [x] add example 
- [x] (addressed in #2025) check correct blending with filled mesh faces
- [x] (addressed in #2025) check correct display of unfilled faces

Some variations on this technique for future reference:
- [[3], [4]] ~~works with index buffers~~ (requires non-indexed arrays as well)
- [5] via a geometry shader

[3]: http://www2.imm.dtu.dk/pubdb/edoc/imm4884.pdf
[4]: http://www.imm.dtu.dk/~janba/Wireframe/
[5]: https://developer.download.nvidia.com/whitepapers/2007/SDK10/SolidWireframe.pdf

Demos:
1. wireframe off
![image](https://user-images.githubusercontent.com/830589/62422345-58fdb780-b6b1-11e9-8d10-8765e84e2e4d.png)
2. width = 1.5
![image](https://user-images.githubusercontent.com/830589/62422341-500ce600-b6b1-11e9-8a35-5f3eae53bafb.png)
3. width = 3.5
![image](https://user-images.githubusercontent.com/830589/62422338-3f5c7000-b6b1-11e9-83f4-9c130b2f8d64.png)",3,22,['type: enhancement']
191,302184495,1682,8935948,2019-07-29 18:30:02,2019-08-26 14:17:14,closed,Improve PanZoom camera performance when non-+z direction is used,Fixes #1681 by keeping a MatrixTransformation that gets modified on each iteration rather than overwritten,5,3,['type: performance']
192,301784899,1679,8935948,2019-07-27 20:57:08,2019-07-27 21:41:53,closed,Update vispy.js to 0.2.2 to fix mousewheel direction,As mentioned in https://github.com/vispy/vispy.js/pull/24 there was a bug in the vispy.js code that made the Y-axis scrolling go in the opposite direction of other backends. By updating to 0.2.2 in vispy this should make it available to users.,0,1,['type: bug']
193,301366122,1677,8935948,2019-07-26 01:49:07,2019-07-27 20:41:46,closed,Add automatic PyPI deployment through Azure,"This PR updates the azure configuration to:

1. Add sdist generation
2. Upload the sdist and all wheels to PyPI

This works by setting a special variable in the Azure web UI with a PyPI API token under my account. This token only has access to upload to the vispy project on PyPI, will do it as me, and the secret variable can only be seen by people who have permission on the azure vispy project. By setting the environment variable `TWINE_PASSWORD to this value `twine` should pick it up and use it to upload the packages.

The main thing I think I have wrong is that all the wheels and the sdist file are uploaded to the ""wheelhouse"" artifacts storage, but I don't think I can access that as a simple directory in a separate job (see the `twine upload` call). If there is no way to do that then I can do the upload in each job separately.",13,21,['build']
194,301322357,1676,8935948,2019-07-25 21:47:25,2019-07-26 01:40:07,closed,Fix transparency in molecular_viewer on some machines,"Closes #1642 
Some systems/GPUs seem to default to a non-opaque alpha value. This fixes this example where it was noticed that this was happening and causing weird results.",0,1,['type: bug']
195,301247521,1673,8935948,2019-07-25 17:51:05,2019-07-25 18:11:22,closed,Remove shadertoy.py example due to licensing issues,"Closes #1672, see for details. I copied the example to a gist as well:

https://gist.github.com/djhoese/f4dfa3b423a88739636dc9a95e58e177",0,1,[]
196,300956603,1671,8935948,2019-07-25 02:19:40,2019-07-25 10:55:17,closed,Fix primitive_mesh_viewer_qt.py and wiggly_bar.py examples,"Closes #1667 

As pointed out in the related issue there were at least two examples that didn't work either from differences between PyQt4 to PyQt5 or changes to vispy over time.

1. `primitive_mesh_viewer_qt.py`: Depending on your system this demo would cause GL errors or have Qt complain about a recursive event loop. After some debugging I discovered that this was caused by the statusBar in the widget being used to show the FPS of the canvas. The example was updating the FPS display for every draw event (as is traditionally done) by using the status bar's `showMessage`. For some reason `showMessage` is triggering another immediate draw event; perhaps to show the status message as quickly as possible. The fix is to use a QLabel that is added to the statusBar and update its text. This doesn't cause an immediate draw event for some reason. This *is* an intended use case of the QStatusBar so it's not like we are doing anything wrong.

2. `wiggly_bar.py`: This would result in a ton of GL errors. I tracked it down to the native Qt widget for vispy's canvas being made and used multiple times. The Canvas would be created, native Qt widget inside, show the widget, then the parent Qt Widget would create the native widget again. I turned off the initial native widget creation and stopped the initial show call.

@kmuehlbauer Any chance you can test these for me?",2,1,['type: bug']
197,300481708,1670,8935948,2019-07-23 21:39:20,2020-04-28 14:42:51,closed,Allow changing spectrogram parameters after it has been drawn,The PR adds ability to the spectrogram visual to modify the parameters after the first draw.,4,5,"['type: enhancement', 'component: visuals']"
198,299071373,1668,8935948,2019-07-18 20:04:17,2019-07-22 18:40:11,closed,Fix _glsl_step reversing discrete colormaps,"The texture-based `_glsl_step` (https://github.com/vispy/vispy/pull/1457) results in reversed colormaps when viewing non-interpolated colormaps (e.g. `Colormap(..., interpolation='zero'`).

Flipping the comparison here assigns the correct LUT entry. (e.g., the first control point should return 1 here, not N.)",17,2,[]
199,296421405,1664,8935948,2019-07-11 01:33:34,2019-07-11 16:51:44,closed,FIX: Unbundle freetype,"Let's just use `freetype-py`.

Closes #1276.
Closes #1327.",10,3,[]
200,296419570,1663,8935948,2019-07-11 01:24:26,2019-07-11 19:23:29,closed,MAINT: cibuildwheel,"This is blind copy-paste so let's see how it goes. Steps:

- [x] Set up azure-pipelines.yml in `master` (just does hello world in Ubuntu, passed in 10 sec)
- [x] Made this PR to modify `azure-pipelines` to do what is suggested by https://github.com/joerick/cibuildwheel#minimal-setup
- [x] Get to produce a wheel
- [x] Bundle fonts with wheels (probably)
- [x] ~~Bundle freetype with wheels on Windows (probably; #1327)~~ #1664
- [x] Get tests to pass (GUIs are a nightmare, skip them ~~maybe by installing `pyqt5` alongside before tests, somehow~~)
   - [x] Windows
   - [x] OSX
   - [x] Linux
",7,9,[]
201,296381295,1662,8935948,2019-07-10 22:54:15,2019-07-10 23:12:17,closed,Fix numpy 1.17 deprecation warnings about dtype creation,"See https://github.com/napari/napari/issues/404

Talked with @seberg in person and now understand what the deprecation warnings in the above issue are talking about. This PR should fix the warnings from popping up and retain the current behavior.",0,1,['type: bug']
202,296232215,1661,8935948,2019-07-10 15:38:42,2019-07-10 21:48:40,closed,Fix AGG line artifacts from transparent colors,"This is a partial fix of #588. See the issue for screenshots and further discussion.

In general, my understanding of the issue is that the if statement commented out by this PR in `agg.vert` is/was causing the vertex shader to be exited too early; short-circuiting the logic that feeds the fragment shader for angles and other parameters to determine proper AGG line color and look.

As mentioned in the related issue, there still seems to be a non-alpha related issue where certain line joins show up as brighter parts of the line. Those will have to be fixed in a later PR.",0,1,"['type: bug', 'component: visuals']"
203,295950913,1660,8935948,2019-07-09 23:10:43,2019-07-10 18:21:25,closed,Fix reading depth buffers with read_pixels,"Closes #1250 

This is a simple hack for fixing reading depth buffers. The problem as described in the related issue was that when you asked to read the depth buffer the underlying `read_pixels` function was still asking for an RGB/RGBA array, meaning the color was being read. This PR fixes that by passing a `mode` parameter which can be color/depth/stencil and will use the appropriate GL constant when calling `glReadPixels`.

Questions for the maintainers:

1. Is `mode` the best way to solve this?
2. Should the return value always be 3D even if it is (rows, columns, 1) for depth and stencil?
3. I also realized that `stencil` mode doesn't work with the `crop` logic in frame buffer's `read` because there is no `self.stencil_buffer` attribute. Not sure the best way to fix this.

TODO:

- [ ] Tests
- [ ] Fix docstrings

",1,4,['type: bug']
204,295494383,1658,8935948,2019-07-08 20:57:18,2019-07-08 21:43:35,closed,Add ability for multi-radii on TubeVisual,This is a replacement/update to #1516. Since the original PR is on @schlegelp's master branch I can't push to it. This PR takes that PR and merges it with current master to see how the tests do. See #1516 for more information and examples of this new features.,0,4,"['type: enhancement', 'component: visuals']"
205,293861178,1656,8935948,2019-07-02 18:14:47,2019-07-03 15:02:54,closed,Update vispy.js to 0.2.1 for better JupyterLab 1.0 support,"As mentioned in #1655 and https://github.com/vispy/vispy.js/pull/23 this updates the vispy.js jupyter widget to work better with JLab 1.0+. This also fixes some of the package vulnerabilities of the JS package. I published the JS package already by running the following from the `vispy.js` repository directory:

```bash
npm publish
```",0,1,"['type: bug', 'build']"
206,293060326,1654,8935948,2019-06-29 20:09:53,2019-07-03 15:03:19,closed,Add pyproject.toml file for better build support,"Closes #1651 

This adds a `pyproject.toml` to match PEP 518 specification so that build dependencies can be handled outside of `setup.py`. I'm hoping that @os-gabe @larsoner @renefritze and @kmuehlbauer could review and maybe test this for me as it is. Mainly, I'm wondering if the numpy/py27 setting is ""good enough"" for now. We won't be supporting python 2.7 after this next release, but it should at least work (is PEP 518 supported for py27?).

I'd like to add to this later with some changes to how `numpy` is imported in `setup.py` since I don't *think* it is needed the way we have it.

Also, does anyone know if there is a way to optionally require `npm` so that the jupyter widget can be built/compiled?",7,2,"['type: bug', 'build']"
207,277988389,1638,8935948,2019-05-11 15:15:27,2019-05-24 16:04:00,closed,Add additional apt packages to try to fix Qt5 usage,See #52,1,1,[]
208,277807115,1637,8935948,2019-05-10 15:07:56,2019-07-10 21:55:42,closed,[MRG] Offscreen EGL rendering code (replacement of #1464 and #1602),This is a replacement mainly for #1602 because I needed to merge current vispy master to that PR but because it is @yogi81's master branch I do not have permissions to do so (if it had been a separate branch I could have). If this passes tests then I would consider this good to be merged.,6,8,['type: bug']
209,276563031,1636,8935948,2019-05-07 11:47:19,2019-05-07 13:17:22,closed,Fix ValueError exception from ambiguous truth value in PanZoomCamera,"When zooming with the PanZoomCamera, I get a ValueError: The truth value of an array with more than one element is ambiguous. Here is a fix that works when center is none using a line that was changed in commit a8ee4f45a56ff9509546cade6439cdda841b7a04.

I stumbled upon this by running vispy/examples/demo/scene/picking.py using python3.7.2 and numpy 1.16.2.",2,1,[]
210,274373292,1634,8935948,2019-04-29 13:28:46,2019-05-02 05:33:05,closed,Remove forced sdl2 version in travis config,See https://github.com/conda-forge/sdl2-feedstock/issues/13,11,1,[]
211,274328515,1633,8935948,2019-04-29 11:00:30,2019-05-06 15:35:40,closed,MRG: Remove empty strings at start of list when running pytest,"@kmuehlbauer can you see if this fixes case (3) of #1571 for you? It looks like our problem was having some empty strings at the start of the string list. At least for me it made installing with mode (3) no longer search all directories.

Also cleans things up a bit (hopefully!) by using `pytest -m pytest` directly rather than `pytest.main`. And no need for explicit faulthandler because `pytest-faulthandler` is enabled by default if it's installed (which is better than us making this extra call).

Closes #1571.
Closes #1572.",4,2,[]
212,274218090,1632,8935948,2019-04-28 23:55:11,2019-04-29 01:07:14,closed,Add 'python_requires' to setup.py,"Adding `python_requires` to the `setup.py` tells PyPI what client versions can download certain packages. By releasing the next version (0.6) with this and supporting python 2.7, this *should* make it the last version that python 2.7 clients are able to download automatically. It should avoid 2.7 clients downloading versions that are no longer python 2.7 compatible in the future.

Also looks like SDL2 on conda-forge is now causing issues on travis.",0,2,['build']
213,272689444,1628,8935948,2019-04-23 11:24:12,2019-04-28 23:30:27,closed,Make sure segments have the right format,See #1627 ,2,4,['type: bug']
214,272109547,1624,8935948,2019-04-19 22:49:46,2019-05-06 15:49:37,closed,Add 'translate_speed' to TurntableCamera and ArcballCamera,Add translate_speed keyword argument to turntable and arcball cameras,2,2,[]
215,271765397,1623,8935948,2019-04-18 17:00:48,2019-04-19 15:19:42,closed,MAINT: Use gl-ci-helpers,I recently worked with the `vtki` folks to port over the OpenGL code. This allows us to share a method for getting Windows to have usable OpenGL. No more need to set the VISPY_GL_LIB because the updated solution overwrites `C:\Windows\System32\opengl32.dll` directly.,2,1,[]
216,271721673,1622,8935948,2019-04-18 14:53:50,2019-04-18 14:55:05,closed,Add submodules to one-liner in README,This updates the one-liner to install from git to also download the submodules.,1,1,[]
217,271721010,1621,8935948,2019-04-18 14:52:14,2019-04-19 13:02:47,closed,Fix PySide2 qWait monkey patching,"The indention of the line
	QtTest.QTest.qWait = qWait
should be so that it is only executed when the qWait function
needs to be monkey-patched.",2,1,['type: bug']
218,271710682,1620,8935948,2019-04-18 14:26:15,2019-04-19 18:33:04,closed,Fix setup.py to install vispy even if javascript compilation fails,"In #1610 I fixed setup.py to match the [ipywidgets cookiecutter](https://github.com/jupyter-widgets/widget-cookiecutter) for a notebook/jlab extension. As part of this PR I had removed the `vispy/static/*.js` files which are the bundled output of the javascript build process. Given the rest of the traditional ipywidgets installation process this meant that `setup.py` was now **requiring** that the javascript files be built before installing the rest of vispy. Obviously for a package like vispy this can't be a requirement (a notebook is only one possible backend/use case for our users). This issue is discussed further in #1619 where some users may not have `npm` installed or may have an older version that is unable to build the extensions for whatever reason.

I saw two possible solutions (and asked for more on https://github.com/jupyter-widgets/widget-cookiecutter/issues/49):

1. Add the static javascript files to the git repository so users always have at least one version of the static files. This is not great for file sizes in the git history where each update to the JS likely means a new ~1.5MB (see below). It could also make it harder to tell if `sdist` packages are including the ""old"" JS builds or are building them new when preparing a package for PyPI.

```bash
$ du -hs vispy/static/
1.5M	vispy/static/
```

2. Modifying the `setup.py` code to allow for JS building to fail. This is what I ended up going with. This puts more work on the maintainers (@kmuehlbauer @larsoner ) to make sure that released PyPI sdists have the javascript files. I updated the [releasing instructions](https://github.com/vispy/vispy/wiki/Releasing-new-version-of-VisPy-python-package#generate-pypi-release-bundles
) already. This choice felt the cleanest to me in the long run and seems less likely that I'll screw it up when building an sdist.

The main difficulty here is that in `setuptools/distutils` there is no difference between the `sdist` that `pip` and `python setup.py install` do and the `sdist` we use when building a release tarball (`python setup.py sdist`). I could make a custom command that we use for building the tarball that makes the javascript build required, but that becomes yet another hack and customization in the vispy build workflow on top of all of the existing complex `doc` and other build processes.

@deciph and @os-gabe could you test this on your own systems by doing:

```bash
pip install git+https://github.com/djhoese/vispy.git@bugfix-setuppy-js
```

Does it install on your systems?",8,2,"['type: bug', 'build', 'priority: high']"
219,263867056,1610,8935948,2019-03-23 22:51:36,2019-04-10 00:40:03,closed,Fix jupyter lab compatibility,"Not sure how users' can install this without the source code right now, but this is a start. Do:

```bash
jupyter labextension install js
```

from the root of the repository. This uses the `js` directory contents to build the npm package. When using vispy from `jupyter lab` I get this in the browser console:

![image](https://user-images.githubusercontent.com/1828519/54872587-34551300-4d94-11e9-9fd6-75948110573d.png)


Sounds like I need to declare the model/view versions properly. Issue with that is we don't have an explicit model: https://github.com/jupyter-widgets/ipyleaflet/issues/95",22,15,['type: enhancement']
220,263638401,1608,8935948,2019-03-22 14:39:21,2019-03-22 15:50:30,closed,FIX: set `conda config --set channel_priority strict` in travis,"So this adds the recent conda strict `channel_priority`. This means, that if a package is not available on conda-forge it will be fetched from defaults without touching other depending packages.",0,2,[]
221,263612649,1607,8935948,2019-03-22 13:30:33,,open,Cpu buffer,Follow-up from previous PR #1538.,23,9,['type: enhancement']
222,262246158,1602,8935948,2019-03-18 22:14:35,2019-07-09 19:54:57,closed,Offscreen EGL rendering code (replacement of #1464),"Additions to and replacement of a Pull Request #1464 
Now the code should work and render properly
It is a most full fix for #1456 ",10,7,[]
223,261858183,1601,8935948,2019-03-17 17:18:00,2019-03-23 22:03:57,closed,Improve and fix jupyter notebook support,"This is the start of my debugging on getting notebook support fixed. It seems ipywidgets is no longer installing the extension (which should be done automatically). I should also take this opportunity to update the notebook examples in `examples/`.

I'm also waiting for freetype-py to get version 2.1.0 on conda-forge: https://github.com/conda-forge/freetype-py-feedstock/pulls
After that is available then we can remove the recently added restriction in .travis.yml.

I also updated the JS dependencies by doing various combinations of `npm install` and `npm update` and adding a default (not sure if it can be overridden in any easy way) ""mode"" to the webpack configuration.

If things are really confusing I should probably start by looking through differences with the cookie cutter template: https://github.com/jupyter-widgets/widget-cookiecutter",4,1,['type: bug']
224,261776681,1600,8935948,2019-03-16 14:48:21,,open,Avoid recompiling the ChainTransform whenever we don't need to.,"The AxisWidget causes a recompilation of its `ChainTransform` every time
a pan/zoom event occurs. This is not necessary as long as the node path
from the axes to its linked view has not changed.",4,1,"['component: scene', 'type: performance']"
225,261774507,1599,8935948,2019-03-16 14:10:54,2019-03-16 14:27:21,closed,Force freetype version under 2.10.0 in travis,See https://github.com/conda-forge/freetype-py-feedstock/issues/1,2,1,[]
226,260920167,1598,8935948,2019-03-13 20:07:49,2019-03-14 18:45:28,closed,Fix qt5 based backends when moving window from one monitor to another,"This is similar to https://github.com/matplotlib/matplotlib/issues/8061 for matplotlib. I work on a macbook with a HiDPI retina display. My external monitor at work is not HiDPI. If I open a PyQt5 canvas on one monitor and drag it to another it gets in to a bad state. This is caused by the two displays having different device pixel ratios. This is the ratio of logical pixels to physical screen pixels. On HiDPI displays this is usually 2 and for regular displays it is 1.

PyQt5 allows you to know this ratio (`self.devicePixelRatio()`) and vispy already uses it to adjust physical versus logic pixel calculations. However, vispy only does this when first creating the window and on resize events. This means that if you get in to the bad state mentioned above you can resize the window and everything goes back to normal...until you move the window to another monitor. This PR moves the check of `self.devicePixelRatio()` to the getter of `physical_size`. This likely has some performance penalty but it should be relatively small if PyQt5 is optimizing things correctly.

This PR fixes this issue 99.9% of the way. There is still an issue if you move the window and don't interact with the canvas (cause a redraw). As far as I know there is no signal in PyQt5 to say ""we've moved to a different display"" that I have access to. Although, PyQt5 seems to be displaying things just fine since text and window sizes are kept proportional.",6,4,"['type: bug', 'component: app']"
227,259158718,1596,8935948,2019-03-07 15:30:33,2019-07-07 15:42:16,closed,"[MRG] Allow XYZAxisVisual override of position, color, connect, and method","**What does this implement/fix?**
This PR tries to fix  #671 by allowing the override of defaults `pos` and `color` arguments.

**Additional information**
Maybe overriding `connect` and `method` is too much? ",2,2,"['type: enhancement', 'component: visuals']"
228,259113981,1595,8935948,2019-03-07 13:32:44,2019-07-08 19:20:56,closed,Fix read_mesh of STL files,"**What does this implement/fix?**
Fix #1594 by creating a file object before sending it to `load_stl`.

**Additional information**
I was able to reproduce the bug on my configuration. ",2,1,"['type: bug', 'component: io']"
229,258949877,1593,8935948,2019-03-07 02:21:50,2019-03-16 13:36:31,closed,Fix memory leak caused by keeping weak references to callbacks around.,"The list of callbacks gets iterated over very often, so it's important
to make sure there aren't useless entries laying around.  Plus the
memory can grow without bound without correcting this.",19,1,[]
230,258942692,1592,8935948,2019-03-07 01:38:24,2019-03-16 13:36:07,closed,Fix memory leak in DataBuffer.,"Weak references were being kept around in the list of Buffer._views,
which was causing unbounded memory growth.",12,2,[]
231,258933868,1591,8935948,2019-03-07 00:48:03,2019-11-25 02:30:15,closed,Fix FPS drop with grid and axis (from vispy 0.5.3),"As requested in #1588, this is how I addressed a slowdown issue in 0.5.3. In that version this reduces calls to _view_changed in axis.py, and may it still be useful?",3,1,['type: performance']
232,258468297,1590,8935948,2019-03-05 20:09:14,2021-06-11 01:16:02,closed,Fix event loop detection triggering on blocked events,"Delay checking if stuck in an event loop until after checking if the event emitter is being blocked. This allows callback cycling. 

Toy example:
```python
e = EventEmitter(source=None, type='test')

def foo(x):
    print('foo')
    with e.blocker():
        e()

e.connect(foo)
e()
```

However, this check can be erroneously triggered during asynchronous operations. IMO if there is no real good reason for the check (since the loop will automatically trigger a `RecursionError` anyways), I'd like to just flat-out remove it.",11,3,"['type: bug', 'type: performance']"
233,258385868,1589,8935948,2019-03-05 16:09:35,2019-05-10 15:02:40,closed,[MRG] Add TextureCube object and port skybox example from glumpy,"**What does this implement/fix?**
Port skybox example from Glumpy #818 

**Additional information**
1) I fixed the `offset` tuple in the `set_data()` method of the `GlirTextureCube` class in `vispy/gloo/glir.py` because I wasn't sure about what it exactly does.

2) I did not find any alternatives for `trackball` so I used another way to interact from:
`examples/demo/gloo/terrain.py`. Most likely there is a more practical way.

3) I stored the images on my machine and tested locally but I guess they can be uploaded in `vispy/demo-data`.

4) I am not sure about the location of `skybox.py`, I put it in `examples/demo/gloo` by default.

It is still a work in progress but here is a rendering:
![skybox](https://user-images.githubusercontent.com/18143289/53818180-f8364b80-3f67-11e9-913e-01d5786eab4e.png)
",5,12,[]
234,257465671,1584,8935948,2019-03-01 14:36:53,2019-03-01 15:01:41,closed,Add CONDA_CHANNELS environment variable to appveyor,Windows builds have started failing recently. Let's see if we can fix them.,1,1,[]
235,252683628,1578,8935948,2019-02-13 12:56:34,2019-04-29 16:11:23,closed,Add shading to SphereVisual,"#### What does this implement/fix?
The goal of this PR is to enable the `shading` capabilities of the `vispy.visuals.SphereVisual`.

#### Additional information
Some tweaking might be needed, tell me what do you think?",9,2,[]
236,251692166,1577,8935948,2019-02-09 19:06:43,2019-02-10 20:56:21,closed,fix size bug for offscreen.py example,"In the example/demo/gloo/offscreen.py example, if we change the size to (1200, 600), e.g. the width is not equal to the height, we will get:
![screenshot from 2019-02-09 11-02-40](https://user-images.githubusercontent.com/25207535/52525152-43f02080-2c5a-11e9-8f43-30d12690f709.png)
Where the right half of the image is empty.
I think it is a bug related to the size argument.
In this pull request, I change the order of width/height for Framebuffer and Texture2D, and get the result looks like:
![screenshot from 2019-02-09 11-05-42](https://user-images.githubusercontent.com/25207535/52525179-a77a4e00-2c5a-11e9-8c35-34e897299a08.png)
I'm not sure it is the best solution.",3,1,['type: bug']
237,251477151,1576,8935948,2019-02-08 14:10:42,2019-02-13 16:49:03,closed,Klein bottle example,"This PR try to adress #819

The code so far is really basic, feel free to tell me what you think, I'm ready to work on it.
And I'm not even sure where to put the example?",11,3,[]
238,251192405,1574,8935948,2019-02-07 16:59:54,2019-02-07 18:29:11,closed,WIP: Travis if else fix,,9,3,[]
239,250867686,1572,8935948,2019-02-06 18:51:59,2019-05-06 15:35:40,closed,FIX: fix test/coverage issues,"- keep import_dir
- use cwd only for coverage data",4,1,[]
240,249953690,1570,8935948,2019-02-04 06:55:17,2019-02-06 09:44:19,closed,WIP: Test osmesa,"This PR extends #1569. It just tests the osmesa handling, so `.travis-yml` is stripped down to only osmesa.

- [x] 1. Test  current approach (not successful, latest commit https://github.com/vispy/vispy/pull/1570/commits/0a28664a14ecc2cb94c655295f0208ecf8881713)
- [x] 2. Test conda-forge only approach (do not use Travis system libs, but depend on conda-forge) (not successful, latest commit https://github.com/vispy/vispy/pull/1570/commits/89c1b319832b692c3ff4440580013fe58911516f)
- [ ] 3. Test Travis only approach (do not use conda-forge)
- [ ] 4. Test osmesa recompilation using 2.
- [ ] 5. Test osmesa recompilation using 3.
- [ ] tbc ?


ToDo/Think about List:
- [x] get glfw into conda-forge, see https://github.com/conda-forge/staged-recipes/issues/4395
- [ ] add mesalib 8bit color channel builds to conda-forge, see https://github.com/conda-forge/mesalib-feedstock/issues/22
- [ ] compile conda-forge `libglu` `--with-osmesa`.
- [ ] tbc
",6,16,[]
241,249584480,1569,8935948,2019-02-01 12:18:14,2019-02-06 16:27:50,closed,FIX: fix pyopengl and osmesa,"This fixes #1568 alongside with https://github.com/mcfletch/pyopengl/pull/20
- [x] fix glGetActiveAttrib in _pyopengl2.py
- [x] fix travis conda-forge dependencies 
- [x] fix backend issues (osmesa, glfw)",24,5,[]
242,249170168,1567,8935948,2019-01-31 09:17:25,2019-07-08 18:55:41,closed,Add WindbarbVisual,"This is a follow up PR from #1563. 

This adds a special WindbarbVisual as well as an example. The Visual might need some tweaking here and there. Would be nice if someone can test and review. There is also shader code which can be moved to the gsls subfolder (see also #1566).

Ping @sjoro and @rougier.

@larsoner @djhoese How and where should I add tests for this? Is the example tested anyway?",30,12,"['type: enhancement', 'component: visuals']"
243,248311965,1565,8935948,2019-01-28 22:36:36,2019-04-29 14:04:12,closed,Fix argument validation in PanZoomCamera.zoom method,"The docstring of `PanZoomCamera.zoom` method says when `center` argument is not provided, it uses the current center, but argument validation is performed before such substitution thus the current code cannot work without explicitly passed `center` argument.

This PR fixes this by flipping the order of default value substitution and parameter validation.",1,2,[]
244,240412182,1558,8935948,2018-12-21 09:08:16,2019-07-08 01:04:04,closed,Add element-wise colors to TextVisual,Ability to pass different colors for different parts of text in a list similar to pos argument,0,8,"['type: enhancement', 'component: visuals']"
245,240327615,1557,8935948,2018-12-20 23:06:57,2019-11-21 18:05:12,closed,Fixed a bug in linking two flycameras,"See issue #1554. The bug is fixed as discussed.
- Replaced actual `rotation.setter` function by a warning of using `rotation1.setter instead`
- Added property `rotation1` and `rotation1.setter`
- Added property `rotation2` and `rotation2.setter`
- Normalizes Quaternion before assigning.",7,2,['type: bug']
246,239898307,1555,8935948,2018-12-19 16:30:12,2018-12-19 17:31:37,closed,Update documentation for transform rotate() function,I just did a minor correction of the documentation of the `rotate()` transform function.,0,1,[]
247,235322165,1550,8935948,2018-12-03 04:18:36,2019-03-27 21:26:02,closed,Remove cube visual in favor of box visual,Check issue https://github.com/vispy/vispy/issues/1549,10,1,[]
248,234842785,1548,8935948,2018-11-30 01:27:59,2018-11-30 01:52:46,closed,Update docs to fixed news page with 2018 section,See https://github.com/vispy/vispy-website/pull/23,0,1,[]
249,233321374,1547,8935948,2018-11-24 14:01:30,2019-04-29 01:41:46,closed,Add element-wise rotation to TextVisual,"For now, only a unique rotation can be set to `TextVisual`. This PR allows to set an individual rotation to each text element.

```python
import numpy as np

from vispy import scene
from vispy import app

# Camera and scene canvas :
cam = scene.cameras.PanZoomCamera(rect=(-2, -1.5, 4, 3))
sc = scene.SceneCanvas(bgcolor='white')
wc = sc.central_widget.add_view(camera=cam)


n_s = 20
theta = np.linspace(0, 2 * np.pi, n_s, endpoint=False)
text = ['Text_%i' % i for i in range(n_s)]
xy = np.c_[np.cos(theta), np.sin(theta)]

text_v = scene.visuals.Text(text=text, pos=xy, parent=wc.scene,
                            rotation=np.rad2deg(theta[::-1]))

sc.show()
app.run()
```

![image](https://user-images.githubusercontent.com/15892073/48969098-7bd6b880-efc7-11e8-9df7-882768062c49.png)
",3,2,"['type: enhancement', 'component: visuals']"
250,233074333,1546,8935948,2018-11-22 21:22:14,2018-11-23 02:56:10,closed,Fix flake errors,"This PR fixes flake errors that have been causing travis to fail. As part of this I moved the exclusions and ignored rules to setup.cfg so they are a little less hidden (or at least I think so). I also added W504 to the list of ignored rules which I think is a default ignore in the recent versions of flake8.

This PR also changes a `raise NotImplemented` to a `raise NotImplementedError` to satisfy flake8.

@mkkb There are still errors in `text_visual.py` that you semi-recently made changes to. The main issues are a `\e` and a `\?`. Any idea if those are necessary?",3,3,[]
251,228289226,1544,8935948,2018-11-05 09:34:16,2018-11-23 03:55:25,closed,Use proper exception NotImplementedError,"I think NotImplementedError was intended.

See:
https://docs.python.org/3.7/library/exceptions.html#NotImplementedError
https://docs.python.org/3.7/library/constants.html#NotImplemented",1,1,[]
252,223268257,1539,8935948,2018-10-16 14:16:01,2018-10-20 14:57:15,closed,Add connect to line plot,Add kwarg `connect` to lines at plot level.,8,1,[]
253,222963707,1538,8935948,2018-10-15 16:15:48,2019-03-22 13:29:38,closed,Cpu buffer,"Following issue [#1505](https://github.com/vispy/vispy/issues/1505), i implemented an optional local CPU buffer in the Buffer class. By default it is not used, but it is used by Collections so that one can set individual fields of the VertexBuffer.",6,3,[]
254,222483801,1536,8935948,2018-10-12 14:23:44,2018-10-20 16:19:17,closed,Fix a typo,"As the docstring said ""diagonal line"".",6,1,[]
255,220771615,1535,8935948,2018-10-05 17:27:00,2018-10-05 19:00:19,closed,Fix FutureWarning in gaussian_filter indexing,This is/was causing failing examples tests on travis.,0,1,['type: bug']
256,220416521,1534,8935948,2018-10-04 15:15:30,2018-10-13 15:31:41,closed,passing title as encode('utf-8') in glfwSetWindowTitle,fixes #1533 . ,5,2,[]
257,218190831,1523,8935948,2018-09-26 05:11:55,2018-10-11 14:21:30,closed,Re-implement vispy-provided filters,"# Description
Provides a new filter base-class and re-implements most filters.

These changes include the following:
~~- freezes all filter attributes to prevent incorrect assignment which can occur when switching filters (see #1518)~~
- implements the `_detach` method for proper filter detachment (see #1522 and #1434)

# References
closes #1522 
closes #1434",8,5,[]
258,217945763,1521,8935948,2018-09-25 11:29:48,2019-04-29 01:39:25,closed,Switch examples from PyQt4 to PyQt5,"Hello, 
I did some mess with the previous pull request with the same name. So here i re-created the same pull request, and it contains only the really related commits.
Best,

see also, discussion in #1504",3,5,['type: example']
259,217944537,1520,8935948,2018-09-25 11:25:03,2018-10-05 13:58:45,closed, Adding missing app.sleep function ,This should be quite straightforward.,5,2,[]
260,217799312,1518,8935948,2018-09-24 21:52:24,2018-10-05 14:47:09,closed,BUGFIX: Properly update opacity in `VisualNode`s,"# Description
Fixes a bug in `VisualNode`'s `_update_opacity` function wherein opacity was being updated by setting a `ColorFilter`'s `color` property when the correct property to set was `filter`. Additionally calls the visual's `update` method upon filter change.

Since opacity only affects the `alpha` channel, additionally opts to replace the overly explicit `ColorFilter` with an `Alpha` filter. This prevents tampering with the RGB channels in the private filter.",5,2,"['type: bug', 'component: visuals']"
261,214107983,1516,8935948,2018-09-08 18:18:35,2019-07-08 20:57:34,closed,multi-radii tubes,"In the current master TubeVisuals can only have a single radius. This PR introduces the option to pass a list of radii to `vispy.scene.visuals.Tube` - one for each point of the tube.

It also forces coordinates into `floats` - otherwise `tangents /= mags[:, np.newaxis]` in [tube.py](https://github.com/vispy/vispy/blob/a6ec64bb7b56739b463e3c16245a31940ca4f5f7/vispy/visuals/tube.py#L123) throws a TypeError.

A minimal example:
```Python
import vispy
import numpy as np

# Create canvas
canvas = vispy.scene.SceneCanvas()
view = canvas.central_widget.add_view()
view.camera = vispy.scene.ArcballCamera()
canvas.show()

# Create tube with 5 points and 5 individual radii
coords = np.array([[0, 0, 0], [1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4]])
tu = vispy.scene.visuals.Tube(coords, radius=[1, 4, 2, 3, 1])

# Add tube to canvas and set range
view.add(tu)
view.camera.set_range()
```

![tube_w_radii](https://user-images.githubusercontent.com/7161148/45257224-96bb6880-b39a-11e8-8868-52eb86ef1357.png)",2,3,"['type: enhancement', 'component: visuals']"
262,209954986,1511,8935948,2018-08-21 21:02:35,2019-11-22 17:57:32,closed,ImageVisual and masked array,"Hi @djhoese 

This is not a fully working pull request. Right now :
1. It fix `ImageVisual` if there's a `np.nan` in the 2D image (beacause of the `clim = np.min(data), np.max(data)`)
2. If a masked_array is passed, masked values are set to `np.nan`

IMO the intended behavior would to to discard nan pixels (as discussed in #1509 ). For now, nan pixels are set to 0. (somewhere... I can't figure it out). Do you have an idea how to discard those pixels?

(Note : OpenGL seems to have a [isnan](https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/isnan.xhtml) function but it's not working for me. [Here](https://github.com/metsci/glimpse/blob/ec72fae680de6334bdf64aea5cc950f3c245e304/core/src/main/resources/shaders/colormap/tagged_colorscale_shader.fs#L68) they said that `x != x` could be used instead)

```py
import numpy as np

from vispy import scene
from vispy.scene.cameras import PanZoomCamera

n = 10

# data = np.random.rand(10, 10)
data = np.arange(100).reshape(10, 10).astype(np.float32)
y, x = np.ogrid[-n / 2:n / 2, -n / 2:n / 2]
mask = x**2 + y**2 >= (n / 2)**2
data = np.ma.masked_array(data, mask=mask)

# Vispy :
cam = PanZoomCamera(rect=(0, 0, n, n))
sc = scene.SceneCanvas(bgcolor='black', show=True)
wc = sc.central_widget.add_view(camera=cam)
im_vispy = scene.visuals.Image(data, parent=wc.scene)
sc.app.run()
```
![image](https://user-images.githubusercontent.com/15892073/44428367-258a5180-a562-11e8-9be9-674933adf2e7.png)

closes #1509 ",12,2,[]
263,209894790,1510,8935948,2018-08-21 17:06:04,,open,Support drawing only edges of the mesh,"To only draw the edges of a mesh, or to produce a compound visual that
displays the edges, the ""lines"" mode of the mesh can be used. This
requires passing in the faces not as triangles but as edge list, so not
as an (n_faces, 3) array, but (n_edges, 2) array. This commit also
allows for passing in the face index matrix, that will be converted into
an edge index matrix. Should work for all meshes with constant type
polygons, so triangle or quad meshes.",25,1,['type: enhancement']
264,207599089,1504,8935948,2018-08-10 12:36:18,2018-09-25 11:11:24,closed, switched examples from PyQt4 to PyQt5 ,,6,9,['type: example']
265,206797456,1502,8935948,2018-08-07 19:07:22,2018-08-07 19:22:41,closed,Fix grid size check on solver to handle float values,fixes #1498 ,1,1,[]
266,206567465,1501,8935948,2018-08-07 03:06:00,2021-06-12 21:39:06,closed,Replace Grid Widget cassowary solver with kiwisolver,"on the whole I believe that looking at the enaml grid helper may provide some inspiration if this was to be further refactored.

Notes:
- stay constraints are gone in kiwisolver (I still have to find an old discussion about this, and how to emulate them but I remember @sccolbert explaining there were not that useful)
- the solver needs to be explicitly called to update variables (suggestValue)
- value is a method not an attribute
- one can use suggestValue to update an edit variable (but I need to check if this is the right way to do this)",15,7,"['type: enhancement', 'type: performance']"
267,203080468,1494,8935948,2018-07-22 22:28:32,2018-07-23 00:43:23,closed,Correct relocated link,The link to notebook currently links to a page that says the notebook has been relocated. This change changes the link to the end point.,1,1,[]
268,200453965,1491,8935948,2018-07-10 16:26:07,2018-07-11 14:41:34,closed,Make events only propagate to callbacks that were present when the event was emitted,"Fixes the ""nasty"" bug described in #1033, which was caused by an event callback changing the list of callbacks.",1,1,[]
269,198163573,1489,8935948,2018-06-28 21:52:49,2018-08-22 17:57:43,closed,Use matplotlib colormaps (if installed),"Note that in [line.py](https://github.com/vispy/vispy/blob/master/vispy/visuals/line/line.py#L231) there's a `try/except` which is used to switch between colormaps and unique color. So I add a `KeyError` inside the `MatplotlibColormap` class but there's probably a better way to handle `KeyError`.

Small script to test it :
```python
import numpy as np

from vispy import scene
from vispy import app
from vispy.scene.cameras import PanZoomCamera

cam = PanZoomCamera(rect=(0, 0, 20, 10))
sc = scene.SceneCanvas(bgcolor='black', show=True)
wc = sc.central_widget.add_view(camera=cam)

data = np.arange(200).reshape(10, 20).astype(float)
im_red = scene.visuals.Image(data, parent=wc.scene, cmap='tab20b')

app.run()

```
![image](https://user-images.githubusercontent.com/15892073/42059384-414663b4-7af1-11e8-8cdc-d9b6ec48365e.png)
",9,8,[]
270,197820692,1488,8935948,2018-06-27 18:48:21,2018-08-06 13:25:13,closed,FIX: Memory leak in LinePlot.set_data (#1407),Fix memory leak in LinePlot (#1407) when no markers are to be rendered.,2,3,[]
271,188172487,1481,8935948,2018-05-15 15:43:09,,open,More flexible input for PolygonVisual,"* PolygonVisual can optionally receive PolygonData as its input rather than just an array of positions. This allows more complex edge specification.
* PolygonData makes use of its `edges` property (previously it was ignored).",5,3,"['type: enhancement', 'component: visuals']"
272,186445375,1480,8935948,2018-05-07 19:46:18,2021-02-25 23:40:46,closed,Add new example for mouse editing/drawing of shapes,"Following up on the line_draw example, this is a slightly more advanced example which lets the user draw rectangle and ellipse visuals interactively with the mouse, resize them using control points, move and delete them. It demonstrates the use of visual_at, adding and modifying visuals in a scene, mouse handling and transformations. It also has shapes at fixed positions (not zooming/scrolling with the scene) which are used as ""buttons"" to select the edit mode. It is meant as a starting point for more complex interactive mouse-driven vector drawing applications.

I have some questions for the maintainers: 
- currently this example is in examples/basics/visuals, because that's where the line_draw example was, and where I found the line_plot and polygon_visual examples that served as inspiration. However, thinking about it, it might be more at home in examples/basics/scene, as it is heavily using the scene infrastructure. Should I move it there?

- I found the performance a bit slow once I add 20-30 shapes. Dragging/zooming, etc. feels much more sluggish than with fewer objects, which should be purely a vispy/scene thing (nothing to do with my example code). I'm not quite sure why that is - given the usual speed of vispy it shouldn't be an issue at all with such few objects. I noticed there is a still-open pull request that seems to address this issue but haven't had time to look into it. I did some profiling (graph attached), but I don't know enough about vispy internals to figure out where the time goes. A lot seems to be going on in the event handling. Maybe it is useful to you? I'm running on a reasonably powerful i5 with a GeForce GTX660 on ubuntu, and vispy generally performs really well on this machine.
[shape_draw_profiling.pdf](https://github.com/vispy/vispy/files/1981227/shape_draw_profiling.pdf)

",15,2,['type: example']
273,184967139,1476,8935948,2018-04-30 14:12:28,2018-04-30 14:51:47,closed,Update notebook widget deps to remove security vulnerability,,1,1,[]
274,183291333,1474,8935948,2018-04-22 20:03:12,2018-04-22 20:40:11,closed,Fix vispy.js accidentally committed as a symlink,"Fix #1473 

I accidentally committed a symbolic link to the vispy.js file instead of the actual file.",0,1,"['type: bug', 'component: jupyter-widget-backend']"
275,182026258,1467,8935948,2018-04-17 01:05:59,2019-03-23 22:03:48,closed,Add geometry shaders and refactor shader objects,Resolved merge of https://github.com/vispy/vispy/pull/1316 and current `master`. See that PR for more information.,13,48,[]
276,178994266,1464,8935948,2018-04-03 05:03:03,2019-07-10 21:55:47,closed,Enable EGL backend for headless rendering,"Hi,

Here's a few changes that re-enables the EGL backend and makes it usable for accelerated off-screen rendering. This makes my application, as well as vispy/examples/demo/gloo/offscreen.py able to utilize truly headless rendering using EGL, using both standard OpenGL and OpenGL ES. Only tested with recent NVIDIA drivers.",13,6,[]
277,178698804,1463,8935948,2018-03-31 20:21:51,2021-05-12 20:23:36,closed,Add ShadingFilter for meshes by separating it from MeshVisual,"Implement mesh shading as a filter

Relies on #1462 for ensuring regular mesh indexing mode.

The flat shading is implemented without duplication of data (as was previously the case) as described there: https://stackoverflow.com/a/40101324/2528098",15,27,"['type: enhancement', 'component: visuals']"
278,178552353,1462,8935948,2018-03-30 12:34:06,2020-05-11 02:01:38,closed,Refactor MeshVisual indexing for easier and more flexible filter creation,"MeshVisual currently seems to always reindex the vertex array as face-indexed vertices. This should rather be the decision of the caller for practical and perfomance reasons (e.g., glDrawEelements vs glDrawArrays).

This PR changes the behavior of MeshVisual to use whatever indexing was provided by the caller.

This allows the implementation of texture filters (#1444) and coming-up shading filters without workarounds.
",17,5,"['type: enhancement', 'component: visuals']"
279,178428330,1461,8935948,2018-03-29 20:07:18,2018-04-18 16:49:07,closed,Fix #2 for line_draw example to work with current SceneCanvas API,"Fixes #1455 

(maybe compare with @davidh-ssec version to select a fix)",5,9,[]
280,178421388,1460,8935948,2018-03-29 19:35:27,2018-04-18 16:49:22,closed,Fix line_draw example to work with current SceneCanvas API,"Fixes #1455 

Biggest question for @campagnola or maybe @larsoner is what is the simplest way to connect the lines event handlers to the viewbox or canvases events? I could connect the callbacks inside the canvas init or I could do what I have in this PR which is passing the event through to the line visual. Do the events originate in the viewbox or the canvas?",2,2,['type: bug']
281,178108901,1459,8935948,2018-03-28 17:26:29,2018-03-30 12:43:56,closed,Fix Qt windows that were created with fullscreen=True on HiDPI displays,"Fixes #1440 

As pointed out in the related issue this shows up when a canvas is created with `fullscreen=True` and `show=True` for the PyQt4 or PyQt5 backend on HiDPI displays. Originally I thought this was only PyQt5.

The issue was that the call to make the widget/canvas visible ran `self.showFullScreen()` if `fullscreen` was True, but after this the physical size of the widget was set using the original canvas size. By moving the physical canvas size assignment before the visible/show call this should fix all of these cases. I've tested this with PyQt4 and PyQt5 examples on my OSX HiDPI display.

@kmuehlbauer Could you try out a simple example on your non-HiDPI display? @mkkb If you test out this branch, does it work for you?",1,1,"['type: bug', 'component: app']"
282,177862377,1458,8935948,2018-03-27 20:53:59,2018-03-28 12:37:28,closed,Fix IsocurveVisual to use scikit-image instead of matplotlib,"Fixes #1437 

I separated out the commits so if we want to temporarily support both MPL and skimage we can go back to the previous commit.",0,4,['type: bug']
283,177802608,1457,8935948,2018-03-27 16:53:11,2018-06-09 23:54:35,closed,Creating	texture-based colormaps for vispy,"Closes #1397.

There is one texture per colormap. Colormap texture implementation has been tested on vispy's examples, 2 simultaneous canvases with dynamically changing colormaps on both canvases and 4 different colormaps on a canvas. 

The implementation uses 2d-texture maps (t-dim,1) instead of 1d-texture maps (t-dim) as 1d-texture map implementation had some visual artifacts in a smooth color gradient near zero.

",27,52,['type: enhancement']
284,177236351,1454,8935948,2018-03-24 13:07:21,2018-06-23 18:55:36,closed,"Add handling of escape sequences (tab, newline, etc) in TextVisual","Here is my simple suggestion that seems to work fairly. I added lots of comments to clarify my intentions.

text.py:
Added escape sequence compatibility for text visuals. The displayed text will no respond to standard escape sequences.

text_visual_multiline.py:
Also added a test script to examples, text_visual_multiline.py. This is just an expanded version of the original text_visual.py example, but now with multiple string variations and anchor positions. Switch between strings and anchor positions with arrow keys.

Possible issue/problem:
    # Tight bounding box (loose would be width, font.height /.asc / .desc)
    #width -= glyph['advance'] * ratio - (glyph['size'][0] - 2*slop)

I just commented this out since I couldn't figure out how to do this properly. I'm not even sure what 'slop' and 'ratio' is?",10,7,[]
285,175274630,1449,8935948,2018-03-15 14:49:11,2021-02-25 23:21:52,closed,Changed vispy.plot.Fig.__init__() to allow passing 'keys' argument,"(previously forced to 'interactive' in call to super().__init__()).

I couldn't figure out how else to pass key events up to a PyQt5 QMainWindow.",7,1,"['type: enhancement', 'component: plot']"
286,174236312,1445,8935948,2018-03-11 18:59:28,,open,GLSL shader for iso-filles value in colorbar and meshVisual,"For scientific visualisation it's importnat to have the possibility to change continous colormap with vertices data to iso-filled colormap

step 1 :  update shader in colorbar, add PR #1292 and modify an add an example
step 2 : update MeshVisual shader
step 3 : add an example
step 4 : correct flake8 and travis error


Step 5 :  Try to modify MeshVisual vert and frag shader and add iso-filled colormap capability",13,15,[]
287,174174030,1444,8935948,2018-03-10 15:06:18,2020-05-04 01:13:56,closed,Add TextureFilter for adding textures to MeshVisuals,"This PR implements texture support for MeshVisual as a filter.
Addresses #748 

- [x] Extend the MeshVisual vertex shader with a hook for passing the texture coordinates
- [x] Extend the MeshVisual fragment shader with a hook for applying the texture
- [x] Add a flag to toggle the texture
- [x] Add setters for texture coordinates and texture
- [x] Add a demo program
- [X] Add demo data to https://github.com/vispy/demo-data/
- [X] Use demo data from vispy/demo-data

Edit(2018-11-05): Update following #1462 enforcing unindexed buffers for meshes.",42,11,"['type: enhancement', 'component: visuals']"
288,173846403,1439,8935948,2018-03-08 20:48:54,2018-03-08 21:11:36,closed,FIX: Reenable coveralls,Let's see if this works.,0,1,[]
289,173300908,1438,8935948,2018-03-06 22:31:04,2018-03-06 23:40:08,closed,Fix appveyor tests and other deprecation warnings,"This PR:

1. Fixes Appveyor tests not being able to download Windows GL libraries by allowing older SSL protocols. I'm not sure how this happens between github and appveyor, but it works now.
2. Removes a warning where unit tests were passing a string of parameters to pytest instead of a list of arguments.
3. Comments out coveralls upload from appveyor. @larsoner recently moved appveyor tests to the shared `vispy` organization instead of running them from his account. The token used for uploading coverage stats was only on his account. He will work on fixing this in the near future.
4. Adds workaround for #1437 but does *not* fix it. It simply uses the slower contour methods that already existed if you didn't have mpl installed.
5. Updates JS dependencies for the notebook widget so that it can properly build on Windows and it should remove the security vulnerability that github was showing to maintainers.
6. Adds `pytest.ini` file to ignore the `js` directory since this was causing some kind of infinite recursion (javascript dependencies, yay) ending in too long of a path for Windows; or at least that's my best guess.
",1,9,"['type: bug', 'build']"
290,169398537,1431,8935948,2018-02-15 15:14:48,2018-02-15 21:01:31,closed,A few cleanups for triangulation.py,,4,7,[]
291,169386210,1430,8935948,2018-02-15 14:29:26,2018-03-04 02:46:18,closed,Add .pytest_cache/ to .gitignore,"When I run the test suite with `make tests`, I find that the generated `.pytest_cache/` shows up in git.",0,1,[]
292,169305548,1429,8935948,2018-02-15 08:02:29,2018-03-04 02:46:51,closed,Remove unused variable pause and remove more extra shebang spaces,,0,2,[]
293,169233092,1428,8935948,2018-02-14 21:57:15,2018-02-15 01:40:10,closed,Remove extra space between # and ! in shebangs.,"The extra space makes the shebang not work, e.g.:
```shell
vispy/examples/demo/gloo$ ./cloud.py 
./cloud.py: line 7: $'\nDemonstrating a cloud of points.\n': command not found
```",1,1,[]
294,169009990,1427,8935948,2018-02-14 02:46:57,2018-02-14 14:20:25,closed,Fix jupyter widget to work with ipywidgets 7.0+,"ipywidgets 7.x changed the requirements for how widgets should be structured. There were probably warnings for this for a long time, but since we've only recently updated our vispy widget we never saw them. These changes involve a lot of changes to the setup.py and the structure of the js directories. Steps for building/updating the JS library:

From the vispy.js repository with npm installed:

    npm install
    ./node_modules/.bin/gulp

From vispy repository:

    cp vispy_js_repos/dist/vispy.min.js js/lib/vispy.min.js
    python setup.py build_py

The last command will rebuild all of the necessary javascript dependencies and those should then be committed (don't forget the vispy.js files that may have been changed).

This PR does not add all the fixes and features needed to make all VisPy features available in a jupyter notebook.

Note: There was an early version of ipywidgets 7.x that I couldn't get to work no matter what I tried. After updating ipywidgets to a new patch release, something was fixed enough to make it work.",3,13,"['type: enhancement', 'component: jupyter-widget-backend']"
295,168882290,1426,8935948,2018-02-13 15:53:53,2018-02-14 15:03:30,closed,Adding capability to load STL file with read_mesh function.,See https://github.com/vispy/vispy/issues/1425,8,1,[]
296,168466909,1424,8935948,2018-02-11 18:33:15,2018-02-14 14:42:32,closed,use passed in variable P instead of gl_PointCoord in demo/cloud.py,The cloud.py demo can render a few different shapes. The functions are using the global variable gl_PointCoord and ignoring the gl_PointCoord that is passed into the function. This does not affect behavior.,2,2,[]
297,167792564,1422,8935948,2018-02-07 19:54:08,2018-02-14 14:40:23,closed,Change encoding declaration from utf8 to utf-8,,2,1,[]
298,167590913,1421,8935948,2018-02-07 03:38:42,2018-02-14 14:50:42,closed,Utilize the cmap.setter,"When trying to modify `vispy.visuals.volume.Volume` to integrate with multi-color volume, I figured that `cmap.setter` might be better utilized - instead of setting it independently in `__init__` and `method.setter`, which can also potentially alleviate `self._cmap` and `frag['cmap']` being mistmatch.",3,1,[]
299,167071452,1420,8935948,2018-02-05 07:12:12,2018-02-15 20:43:38,closed,First attempt at PySide2 support,"You can build pyside2 yourself or use
https://github.com/fredrikaverpil/pyside2-linux


I mostly searched for PySide and PyQt5 and kinda merged them together.

it ran the `examples/basics/scene/grid.py`, `magnify.py` and `cube.py`. Good enough for a first day. Haven't tested other things yet. But I think it is OK :D.

I had to add a `qWait` function.

I have no idea what `has_uic` is",2,4,[]
300,159515836,1409,8935948,2017-12-20 20:55:10,2018-04-30 14:02:23,closed,MRG: Use CPU for TextVisual rendering,"Closes #1408.

@davidh-ssec can you give this a try with your WebGL setup to see if it helps?",13,9,[]
301,158780758,1406,8935948,2017-12-17 10:58:24,2017-12-18 19:45:36,closed,Don't draw zero-size markers,This PR add a if test to the vertex shader of markers.py to avoid drawing markers that have a 0. size,7,3,[]
302,158737861,1404,8935948,2017-12-16 09:34:58,2017-12-16 19:21:27,closed,FIX: correct rows/cols in IsocurveVisual ,"* correct rows/cols in IsocurveVisualfor matplotlib isoline tracer
* fix examples to have (200, 100) dimension

closes #1403 ",1,1,[]
303,152062532,1395,8935948,2017-11-11 15:55:43,2017-11-12 05:07:55,closed,FIX: fix order of alignment values for proper processing,closes #641 ,1,1,['type: bug']
304,151491159,1394,8935948,2017-11-08 20:47:59,2019-03-11 13:50:46,closed,ENH: Migrate PyQt5 backend to QOpenGL API,"Rebase / potential takeover for #960.
 
Closes #1238.
Closes #960.

Let's see if it works!",48,62,[]
305,151471603,1393,8935948,2017-11-08 19:20:28,2019-11-25 19:01:31,closed,FIX: Fix Qt5 transparency,I updated one of the Qt widget examples to support PyQt5 so I could ensure I didn't break it (still works here).,5,3,[]
306,151078337,1392,8935948,2017-11-07 10:40:07,2017-11-07 17:16:22,closed,MIN: add two_qt_widgets in examples/demo/gloo ,"closes #1298 


Note: This Example uses PyQt4 but this also works with PyQt5",5,3,[]
307,151067206,1391,8935948,2017-11-07 09:51:24,2017-11-07 14:15:37,closed,MIN: clean up examples/basics/scene/one_scene_four_cams.py,"closes #1124

Multiple Views are currently not implemented. I cleaned up the example which used to show multi-parenting and left a note to #1124.",0,1,[]
308,151010333,1390,8935948,2017-11-07 02:25:03,2018-06-23 18:56:39,closed,WIP: Performance updates for Scene,"I have been playing with the performance of vispy a bit #628 - my main test is examples/benchmark/scene_test_2.py. I'm not sure about everyone else who runs the benchmark but I found it impossible to use the scene canvas with a pyglet backend.

If I understood things in the code correctly, one major performance bottleneck is the generation of many upon many of update calls to the scene canvas, which simply schedule future draw events to be executed from the backend. It seems the major source of these are the scene nodes, all of which look to inherit and hold a reference to the scene canvas, and if a node update it triggered, it also calls the update on the canvas.

This pull might be an easy fix/work-around or at the minimum highlight a possible cause of poor performance in the scene and a better fix can be found in that light. The fix is high level + general (in the scene canvas), and contained in only a few lines - I don't think it has any adverse impacts (it always allows at least one update to be scheduled if I worked through the logic correctly) though I have only tested it in a limited set of cases. With it the scene canvas in the benchmark test is very usable (maybe not 100% snappy) but before this change I couldn't even click and pan without Windows asking to kill the app). I also note that in #1312 the same issue flood of re-draw events is noted in the Tornado queue.

What do you guys think?

",30,8,[]
309,150836221,1389,8935948,2017-11-06 12:05:08,2017-11-06 12:59:13,closed,DOC: add __all__ string to scene/cameras/__init__.py,Fixes #1172,3,1,[]
310,150757338,1388,8935948,2017-11-06 02:02:43,2017-11-06 12:56:38,closed,Fix zoom event position in Pyglet backend,Mouse scroll event reported wrong position,1,1,[]
311,150755133,1387,8935948,2017-11-06 01:28:24,2017-11-06 17:12:24,closed,Refactor ellipse and rectangle visuals,"Fix #1349

Issues fixed:

 - Border width was not used in RectangleVisual
 - Border loops were not properly being closed due to a 1 versus -1 index error.

This refactor tries to reduce the amount of duplicated code. There is something weird going on in the original code where the center point of the polygon's face (ellipse and rectangle) was being passed as a mesh vertex but as far as I can tell it is not needed.

Lastly, updating the rectangle/ellipse vertices could be done differently but I would argue no less ugly (`_regen_pos()`).",5,7,[]
312,150706323,1386,8935948,2017-11-05 03:45:52,2017-11-05 22:49:59,closed,Fix initial axis limits in PlotWidget,"Fix #1385 

Includes adding LICENSE.txt to MANIFEST.in for source tarball distributions.

Using the test script below I found out where I think the axes limits are being messed up in the initial drawing of the plot.

```
import numpy as np
import vispy.plot as vp
from vispy import app
x = np.linspace(0, 1000, 1000)
y = np.linspace(0, 50000, 1000)
line = None
fig = None
fig = vp.Fig(size=(1200, 380), position=(-40, -50))
fig.create_native()

x = np.linspace(0, 1000, 1000)
y = np.linspace(0, 50000, 1000)
line = fig[0, 0].plot((x, y), width=1, color='blue', xlabel='',
                                ylabel='', marker_size=-10)
                                
app.run()  
```

Note that the above script differs from the one in #1385 by using the default `'gl'` line instead of `'agg'`. The 'agg' line method does not clip lines outside of the drawing axes box.

The main issue that I discovered was that after the Figures main grid box started resizing (on the original resize) it would resize its various child widgets and then reach the main ViewBox widget. By resizing the ViewBox widget in the previous way it would trigger a transform change event. This transform change would cause a recalculation of the tick labels *before* the axes object had been properly resized causing the values to be incorrect. This PR blocks the resize event inside the Viewbox (using the `rect.setter` property) which allows all child widgets to be resized before a transform change event (scene update) is propagated through the scene/node graph.",0,2,[]
313,149807338,1383,8935948,2017-10-31 14:48:15,2017-10-31 20:20:17,closed,Fix doc directory in source tarball,"Fix #1382 

The 2nd commit in this PR will need to be cherry picked in to a maintenance branch so that the 0.5.0 package can be repackaged and upload to PyPI. We may need to make a new build revision for conda-forge (@kmuehlbauer FYI) so this gets rebuilt too.",11,2,[]
314,149679563,1381,8935948,2017-10-31 02:05:38,2017-10-31 13:02:32,closed,Fix sphere passing rows/cols backwards,"Fix #1259 

Based on the above issue it seemed a little weird that no one would have noticed two parameters being backwards. What was actually wrong was that the code for the `cube` method was wrong twice so the issue wasn't showing. The `latitude` method was actually the method that showed the issue. If @kalexander92 and maybe @kmuehlbauer or @larsoner could test `examples/basics/scene/sphere.py` with this branch and try changing the rows and cols of the third sphere and see if the numbers make sense to them.",2,1,[]
315,149558198,1380,8935948,2017-10-30 15:40:59,2017-10-30 21:01:10,closed,Fix DPI calculation when xrandr reports screen dimension of 0mm,Fix #1233,1,2,[]
316,149404728,1378,8935948,2017-10-29 20:21:16,2017-10-31 14:51:27,closed,Enable the definition of arrows along z-direction,"This is related to : #1376 

```python
""""""XYZ axis example
""""""

import numpy as np
from vispy import scene, app
from vispy.scene.visuals import Arrow

can = scene.SceneCanvas(show=True)
wc = can.central_widget.add_view()
wc.camera = 'turntable'
wc.camera.center = (0., 0., 0.)
wc.camera.scale_factor = 3.

pos = np.array([[0., 0., 0.], [1., 0., 0.],
                [0., 0., 0.], [0., 1., 0.],
                [0., 0., 0.], [0., 0., 1.],
                ])
arrows = np.c_[pos[0::2], pos[1::2]]

line_color = ['red', 'red', 'green', 'green', 'blue', 'blue']
arrow_color = ['red', 'green', 'blue']

arr = Arrow(pos=pos, parent=wc.scene, connect='segments',
            arrows=arrows, arrow_type='triangle_60', arrow_size=20.,
            width=3., antialias=True, arrow_color=arrow_color,
            color=line_color)

can.show()
app.run()
```",3,7,[]
317,149394563,1377,8935948,2017-10-29 16:51:45,2017-10-30 02:18:02,closed,Fix HiDPI issue in pyqt5,Fix #1347,2,1,[]
318,148886706,1375,8935948,2017-10-26 09:51:00,2017-10-31 14:50:26,closed,Update readme,"Removed ref to `mpl_plot`. Changed to genesis section. I like the story as an example in OSS, but to me the bullet list puts a lot of emphasis on the 4 original devs, while there have been so many devs since then that deserve as much credit. (I'd be fine with just mentioning the projects.)",14,3,['docs-website']
319,148686508,1373,8935948,2017-10-25 14:35:47,2017-10-25 16:11:11,closed,Update version to 0.6.0dev0 and small doc issues,Didn't do this during release process and should have.,0,1,[]
320,148165231,1372,8935948,2017-10-23 15:33:52,2017-10-24 19:16:13,closed,MRG: Update version to 0.5.0,- [x] Update doc git submodule once https://github.com/vispy/vispy-website/pull/10 is approved,4,5,[]
321,147874004,1371,8935948,2017-10-20 19:10:49,2017-10-20 20:59:31,closed,Fix gallery generation,Includes fixes to `scrolling_plots.py`. See commit messages for details.,5,5,[]
322,147626581,1370,8935948,2017-10-19 18:08:08,2017-10-20 13:05:49,closed,MRG: Misc example/demo fixes,,15,9,[]
323,146888868,1369,8935948,2017-10-16 21:07:13,2017-10-19 01:31:20,closed,Remove year from all source file copyright lines,"As discussed on gitter, the easiest to maintain solution that still seems legally correct is to remove the year from all copyright header lines in source code files. Additionally a dated range is used in the `LICENSE.txt` file as an umbrella copyright for the entire project.

Some links that made their way in to the conversation:

https://softwareengineering.stackexchange.com/a/210491/189892
https://softwareengineering.stackexchange.com/a/34221/189892
http://www.contentious.com/2007/01/07/copyright-notice-is-the-year-really-necessary/
https://www.thoughtco.com/copyright-expiration-1991424
https://wiki.osgeo.org/wiki/Code_Provenance_Review",17,2,[]
324,144653058,1367,8935948,2017-10-04 12:15:50,2017-10-04 13:13:25,closed,Fix doc website creation using the wrong README file extension,See https://github.com/vispy/vispy-website/pull/7,0,1,[]
325,144155451,1366,8935948,2017-10-02 10:45:55,2017-10-02 15:51:07,closed,Fix collections for python 3,"Fix #1340.

If you have a chance @ThomJea it would be great if you could test this too.",1,2,[]
326,144151080,1365,8935948,2017-10-02 10:18:56,2017-10-02 15:51:29,closed,Add OSX standard/unit tests to travis,"Certain tests fail when a backend is used on OSX (see #1178). Currently Travis includes an OSX standard set of tests but without using any backends. This PR adds a test environment for unit testing backends. Currently this is just PyQt4, but should include wxPython once it is available for OSX on conda-forge (currently takes to long to build on CI).

This PR includes removing OSX as an environment that is allowed to fail. I'm assuming that `test_functionality.py` will fail also which will require some special handling (again see #1178).",3,8,[]
327,143214145,1363,8935948,2017-09-26 18:50:35,2017-09-30 01:18:13,closed,Fix spatial_filters example on mac,"Mac OSX complains about the program having unset variables.

```
Example basics/gloo/spatial_filters.py failed (0):
----------------------------------------------------------------------
INFO: Program has unset variables: {'u_shape'}
```",26,15,[]
328,142955048,1362,8935948,2017-09-25 18:42:00,2017-09-25 19:25:37,closed,examples: fix simple app,Fixes #1361 ,2,2,[]
329,142748239,1360,8935948,2017-09-24 10:17:23,2017-09-25 18:18:07,closed,wx: delete the deprecated call EventLoop,Fixes #1359,11,1,[]
330,142747725,1358,8935948,2017-09-24 09:58:50,2017-09-25 18:18:48,closed,wx: fix using a default position of canvas,Fixes #1357 ,0,2,[]
331,140088560,1355,8935948,2017-09-08 17:33:14,2017-09-14 14:18:24,closed,Fix arcball camera linking,add _quaternion to camera state properties to share rotations.,4,1,[]
332,139711658,1353,8935948,2017-09-07 03:59:06,2017-09-08 20:53:28,closed,"MRG: Omit 2.6, fix image_tester deprecation","I saw [this log](https://travis-ci.org/vispy/vispy/jobs/272409672) and thought it could be cleaned up a bit. Hopefully this does it.

Closes #1020.",10,22,[]
333,139263185,1351,8935948,2017-09-05 08:21:24,,open,Add VectorVisual class,"must go on. So I made the first obvious changes.
- The transformation classes must be completed
- The visuals must be cleaned up and completed so that in the end it is ready to use (goal is to be as easy as vpython)
Please make comments if you want to push development in another direction.",14,12,[]
334,129386291,1341,8935948,2017-07-07 11:38:37,2017-07-07 12:41:31,closed,Fix integer division for Python3,"The GLSL build script fails to build on Python3. This fixes the division error.

Edit: to clarify, by division error, I do not mean that the division fails, but that the later call to `np.zeros` fails with a TypeError.",2,1,[]
335,127798780,1338,8935948,2017-06-27 21:40:20,2017-09-26 14:58:53,closed,Fix vispy in jupyter notebooks,"See #1312 for details. Also see the related vispy.js PR vispy/vispy.js#18.

Work In Progress. Waiting for vispy.js PR to work completely. See that PR for issues I'm still having.",38,11,[]
336,121537586,1333,8935948,2017-05-19 16:29:07,2017-05-22 13:12:33,closed,Fix for shared_context.py  in /examples/tutorial/app/,"The Text object from vispy.scene.visuals did not accept a list of parents. I'm not sure if that is the whole point of this file. But I made it work by adding two Text objects each with one parent scene.

Being able to integrate Vispy into a PyQt or PySide app will be very useful.",4,1,[]
337,121424639,1332,8935948,2017-05-19 04:45:02,2017-05-20 21:28:19,closed,viridis colormap change from 128 to 64 samples,"Changed number of samples from 128 to 64 in creation of the viridis color map (changed sample stride from 2 to 4). Note the original viridis colormap is defined by 256 samples.

This allows a good (barely visible artifacts) interpolated approximation to the original viridis colormap with at most <1% error as elaborated in #1331. Without this change less GPUs are able to use the viridis colormap along with the ColorBar. This change expands the number of GPUs that are compatible.",5,2,[]
338,120163258,1329,8935948,2017-05-11 17:43:19,2017-09-25 16:47:08,closed,MRG: Better mesh options,Allows doing a vertex value->colormap mapping with meshes.,1,6,[]
339,118881613,1328,8935948,2017-05-04 00:26:18,2017-07-05 14:22:41,closed,Properly infer framebuffer format.,"The original behavior was to assume a color texture. This fetches the
format using the format ID which allows the use of other framebuffer
texture e.g. depth.",3,2,[]
340,117199804,1326,8935948,2017-04-24 07:00:41,2017-05-04 17:17:40,closed,FIX: demo/scene/oscilloscope.py, fix numpy related errors,4,1,[]
341,117082946,1323,8935948,2017-04-21 23:16:22,2017-05-04 16:57:34,closed,Fix for Retina displays,"Fix for Retina displays (mentioned in #99)
Also adding a mouse_press callback!",1,1,[]
342,116644919,1320,8935948,2017-04-19 21:21:56,2017-05-04 16:13:20,closed,Remove misplaced flags from re.sub() call,"The 4th argument of `re.sub()` is maximum number of substitutions, not flags.
Moreover, `re.M` affects only semantics of `^` and `$`, so it wouldn't have any effect on this regular expression.

Found using [pydiatra](https://github.com/jwilk/pydiatra).",1,1,[]
343,115468172,1317,8935948,2017-04-12 05:51:46,2017-05-09 13:23:19,closed,Make wx backend working as same as qt backend.,,1,4,[]
344,113765597,1316,8935948,2017-04-01 05:58:29,2018-04-17 17:04:33,closed,WIP: Geometry shaders,Adds support for geometry shaders to `gloo`. ,4,13,[]
345,112636647,1315,8935948,2017-03-26 17:46:10,2017-05-04 16:10:41,closed,Correction in oscilloscope demo to handle numpy API change,"Fixes an error in the oscilloscope demo that was introduced by a recent numpy API change:

```
TypeError: Cannot cast ufunc multiply output from dtype('float64') to dtype('uint8') with casting rule 'same_kind'
```",1,1,[]
346,109211647,1311,8935948,2017-03-06 08:43:31,2021-06-28 20:03:49,closed,Modify gloo.read_pixels to allow different formats.,"Currently gloo.read_pixels only allows RGB and RGBA values to be read.
This commit changes the API to have an format argument instead of an
alpha argument allowing the addition of 'depth'. Other buffers such as
the stencil may be added later.",5,1,[]
347,109203141,1310,8935948,2017-03-06 07:30:07,,open,Allow depth in Texture2D.,This is needed to render depth to a framebuffer texture.,2,1,[]
348,108480300,1307,8935948,2017-03-01 07:14:34,,open,WIP/RFC: Implement mipmaps,"This implements mipmapping by adding a third argument to the
'INTERPOLATION' glir command.

It's not clear what the right way to support mipmapping is since setting
the number of mipmap levels is only supported in >= OpenGL ES 3.0 and
>= OpenGL 3.0. This discrepancy is handled by checking whether
'glTextureStorage2D' is available in the gl package.

Any comments are welcome.",1,1,[]
349,108471361,1306,8935948,2017-03-01 05:42:19,2020-09-03 18:29:48,closed,Fix codegen backend selection and fix PyOpenGL glGetParameter.,"- Fix codegen so that opengl correctly parses annotations with backend
  set to 'es'.
- Actually fix commit 3dd6018d1cd79c1ca828526d377c5c880f168a0e so that
  it is applied in codegen and not by modifying an auto-generated file.
- Adds syntax ""# /---"" to stop backend selection in annotation parsing.
- This also properly fixes what was attempted with pull request #1273.",5,5,[]
350,107610890,1305,8935948,2017-02-23 12:03:01,2017-03-15 17:27:19,closed,Cast values to native ints to avoid issues on Windows with Python 2.7,"This fixes an issue that I've seen Windows Python 2.7 users come across. Numpy appears to return long integers when accessing array shapes, which causes issues in places such as this.",1,1,[]
351,106886709,1304,8935948,2017-02-19 03:14:22,2017-05-04 16:19:58,closed,Remove duplicate shader code. It is already included in vispy/glsl.,Remove duplicate shader code. It is already included in vispy/glsl.,1,1,[]
352,106809616,1303,8935948,2017-02-17 20:49:37,2020-01-15 09:28:51,closed,Implement TextureCubeMap.,This implements TextureCubeMap.,0,2,[]
353,92254577,1292,8935948,2016-11-03 22:41:01,2021-06-09 12:30:24,closed,Adding setter for colorbar's label_str,"Minor fix related to issue #1251 & #1271

https://github.com/vispy/vispy/pull/1271",20,12,[]
354,88940247,1287,8935948,2016-10-12 01:43:52,2016-10-12 14:48:47,closed,Only resolve grid layout using Cassowary if required,"This PR makes the grid widget much more usable by not forcing the solver to re-solve if the overall width and height of the plots haven't changed.  This makes all the examples that use the grid widget extremely responsive compared to not using this pull request.

I couldn't find any case that was worse than without the patch, and I tested all the examples in `examples/basics/plotting` and `examples/basics/scene`.

This PR does not improve the situation whenever the entire canvas is resized, but it is no worse than without the PR.  It may improve issue #1182 as well.
",5,2,[]
355,88147800,1284,8935948,2016-10-05 20:10:58,2020-08-31 21:15:13,closed,windows standalone,"Implements #1266
 On windows, install vispy with glfw3, freetype253, requiring MSVC2013, and also copy OpenSans-Regular. On other platforms, do nothing.
 This provides 'corporate' installation which does not require internet connection to vispy's github repository to make it usable.
",17,7,[]
356,88139272,1283,8935948,2016-10-05 19:17:03,2016-10-05 19:24:18,closed,windows standalone,"Implements #1266
On windows, install vispy with glfw3, freetype253, requiring MSVC2013, and also copy OpenSans-Regular. On other platforms, do nothing.
This provides 'corporate' installation which does not require internet connection to vispy's github repository to make it usable.
",0,5,[]
357,87108689,1282,8935948,2016-09-28 12:22:05,2017-09-08 17:48:55,closed,Enable Python 3.5 on AppVeyor,"I think this will fail currently, but this will show that there are issues in Python 3.5. I think that https://github.com/vispy/vispy/issues/1277 and https://github.com/vispy/vispy/issues/1276 are due to this.
",11,5,[]
358,87000214,1281,8935948,2016-09-27 19:57:01,2016-09-27 21:12:25,closed,glfw and sdl2 multi canvas fix,"Fix for #1265
",1,1,[]
359,86946655,1280,8935948,2016-09-27 14:55:01,2016-09-27 19:59:52,closed,Travis: make sure PyQt stays pinned to PyQt4,"Currently, one of the builds is failing because it is using PyQt5
",1,1,[]
360,86942254,1279,8935948,2016-09-27 14:33:33,2019-11-06 15:37:09,closed,Add tests for certain visuals,"I'm hoping to reproduce some of the issues in e.g. #1276 and #1277.

Should be rebased once #1278 is merged
",3,7,[]
361,86938716,1278,8935948,2016-09-27 14:15:26,2016-09-27 14:54:32,closed,Pin PyQt to PyQt4,"Currently, the Qt tests are being skipped on AppVeyor, I think because PyQt5 is getting installed
",1,1,[]
362,86551818,1273,8935948,2016-09-23 17:36:51,2017-02-17 20:50:36,closed,Fix function call for pyopengl2.,"glGetIntegerv and glGetFloatv were being called by an un-imported name.
Fix this by correctly calling the function from the corresponding
PyOpenGL package (OpenGL.GL).
",7,0,[]
363,85701242,1272,8935948,2016-09-18 07:48:59,2016-09-18 08:25:04,closed,Fix Travis failures by pinning Qt/PyQt versions,"I think continuum recently added PyQt5 to conda and called it pyqt with version 5, so we need to pin the version to 4.
",2,1,[]
364,85674569,1271,8935948,2016-09-17 13:33:38,2016-10-07 08:05:20,closed,MIN: fix several issues with ColorBarWidget/ColorBarVisual,"closes #1251 

As written in the above issue, there are some glitches using ColorBarWidget/ColorBarVisual. I tried to address all  issues mentioned.

Main thing is that the labels and colors are propagated to the Textvisuals and they are exposed (somehow) to the upper layers for easy change.
",10,6,[]
365,85546190,1269,8935948,2016-09-16 09:54:25,2016-09-16 11:01:58,closed,Fix AppVeyor CI,,1,1,[]
366,84926884,1267,8935948,2016-09-12 19:09:33,2016-10-06 21:32:12,closed,webgl backend fix for updated versions of ipython/jupyter notebook,"The location of the widgets has changed in current versions of ipython/jupyter. Credit goes to @SamiAhola who posted this fix several months ago on the gitter vispy channel. However no PR for the fix has been made so I have made one here.
",18,1,[]
367,76648136,1254,8935948,2016-07-07 19:02:44,2016-11-23 04:14:09,closed,fix face/vertex colors,"using vispy.plot mesh: vertex and face colors are now applied to mesh.
shading can be specified instead of always 'smooth'.

The mesh object in the plot widget was ignoring the face and vertex colors set during the Init by creating meshdata without these colors applied. It also applied a default 'smooth' shading, which doesn't work with face_colors.
",4,9,[]
368,74410248,1244,8935948,2016-06-20 09:04:19,2016-06-20 19:10:27,closed,Fix line width related documentation error,"I believe this is a trivial sync of the documentation with the implementation.  

If it's not, then the code should probably be fixed up by someone more familiar with subtleties of how rendering is supposed to work in vispy.
",3,1,[]
369,73850775,1237,8935948,2016-06-15 04:33:37,2016-06-15 15:18:19,closed,trivial typo,,2,1,[]
370,72622231,1234,8935948,2016-06-05 06:47:26,2016-06-07 14:06:50,closed,add hide to alias show(False) to Canvas,"""Hide"" was my first instinct to hide the canvas, instead of show(False).
",3,1,[]
371,71756289,1230,8935948,2016-05-27 18:44:59,2016-05-27 19:32:02,closed,FIX: Fix docstrings,"Hopefully this makes Travis happy
",1,1,[]
372,71744013,1229,8935948,2016-05-27 17:06:21,2016-05-27 20:32:52,closed,Update docs submodule and settings,,10,4,[]
373,71512406,1228,8935948,2016-05-26 07:37:26,2016-05-26 15:15:18,closed,Add documentation as a git-submodule.,"As asked by @Eric89GXL in #1215, this PR binds the documentation (now maintained in a different repository) to the source tree via a git submodule.
",4,1,[]
374,71122349,1227,8935948,2016-05-23 21:18:11,2016-05-23 22:30:30,closed,Fix isosurface function for use with Numpy 1.12.0.dev,"Before this, j was a one-element array and Numpy raised the error:

```
TypeError: only integer scalar arrays can be converted to a scalar index
```
",3,1,[]
375,70772275,1226,8935948,2016-05-19 21:57:37,2016-05-20 21:14:42,closed,Example with Qt integration to visualize basic physics model.,"Taken from [here](https://github.com/scottpaine/wiggly_bar).
",11,8,[]
376,70763681,1225,8935948,2016-05-19 20:55:28,,open,Add a points selection example,"Here is a script for selecting scatter points along ray casting direction in 3D viewer, with control by the KeyPress 1~4 to enter the selection mode, which allows user draw a selection region ( with different shapes as free lasso, rectangle, ellipse and picking) on the canvas and get points within that region.

The selected points will be highlighted with red color as shown below :)

![image](https://cloud.githubusercontent.com/assets/13411839/15409117/6b381556-1de1-11e6-8cc4-dd92391ae3d3.png)
",6,1,[]
377,70758800,1224,8935948,2016-05-19 20:22:28,2016-05-27 00:48:48,closed,API: Remove mpl_plot,"In the interest of maintainability, I think we need to remove the `mpl` backend. It doesn't add too much for people, and adds maintenance burden for us. It might be good to trim down in some other, places, too, not sure.

Closes #1099.
",3,3,[]
378,70736870,1223,8935948,2016-05-19 17:51:48,2016-05-19 20:08:59,closed,ENH: Graph visual,"We'll see if the CIs are happy. I think that's all that's left to be done. The rest could be subsequent PRs/improvements.
",3,76,[]
379,70559382,1221,8935948,2016-05-18 16:28:20,2016-05-19 16:18:42,closed,AppVeyor: use ci-helpers to fix build issues,"This is a shot in the dark - currently AppVeyor fails with:

```
pip install -q pytest-cov
Traceback (most recent call last):
  File ""C:\Python34-conda64\Scripts\pip-script.py"", line 3, in <module>
    import pip
  File ""C:\Python34-conda64\lib\site-packages\pip\__init__.py"", line 14, in <module>
    from pip.utils import get_installed_distributions, get_prog
  File ""C:\Python34-conda64\lib\site-packages\pip\utils\__init__.py"", line 23, in <module>
    from pip.locations import (
  File ""C:\Python34-conda64\lib\site-packages\pip\locations.py"", line 17, in <module>
    USER_CACHE_DIR = appdirs.user_cache_dir(""pip"")
  File ""C:\Python34-conda64\lib\site-packages\pip\utils\appdirs.py"", line 36, in user_cache_dir
    path = os.path.normpath(_get_win_folder(""CSIDL_LOCAL_APPDATA""))
  File ""C:\Python34-conda64\lib\site-packages\pip\utils\appdirs.py"", line 179, in _get_win_folder_from_registry
    import _winreg
ImportError: No module named '_winreg'
Command exited with code 1
```

so I want to see if explicitly making sure pip is up-to-date resolves the issue.
",12,1,[]
380,70556289,1220,8935948,2016-05-18 16:08:56,2016-05-19 17:37:57,closed,BUG: fixed a bug that caused a mesh to disappear if the color was set using the .color attribute,"This is because previously, set_data would get called with just the color, but this resulted in MeshData being reinitialized with all parameters set to None.
",7,1,[]
381,70332152,1219,8935948,2016-05-17 10:19:13,2016-05-19 19:08:16,closed,Change any absolute imports to relative imports for consistency,"Closes https://github.com/vispy/vispy/issues/1218
",9,1,[]
382,70228479,1217,8935948,2016-05-16 17:13:47,2016-05-18 18:16:27,closed,Minor bugfixes,"Fixes for issues raised in [#1203](https://github.com/vispy/vispy/issues/1203)
",3,2,[]
383,69473913,1213,8935948,2016-05-10 09:24:15,2016-05-10 13:52:45,closed,Use http instead of https to get demo data,"This should fix #1207
",2,1,['type: bug']
384,65000613,1199,8935948,2016-04-01 20:28:09,2016-09-16 14:24:28,closed,Axis label for AxisVisual class,"It would be nice to have an easy way to add an axis label (in addition to the tick labels) for the AxisVisual class. This PR is a very rough implementation of that. Currently this looks like:

<img width=""914"" alt=""screen shot 2016-04-01 at 4 24 56 pm"" src=""https://cloud.githubusercontent.com/assets/314716/14219100/57f11924-f826-11e5-985f-c98ff6366bf7.png"">

The text is always lined up with the screen. There are still several things to do to make this acceptable in my opinion. For example we need to choose a spacing from the axis to the label that depends on the font size and can be overriden by the user.

However, even then it might not be very pretty. Does anyone have suggestions on how we could do this better?

cc @PennyQ
",21,10,[]
385,64137745,1195,8935948,2016-03-25 07:16:25,2016-03-25 13:10:41,closed,doc: Add URL link for Qt in README.rst,"Make Qt point to http://www.qt.io, as new python developers may not be aware of it.
",3,1,[]
386,63818166,1193,8935948,2016-03-23 01:13:58,2016-05-18 16:10:28,closed,Fix boolean uniforms in GLIR,"I was unable to get boolean uniforms to work in my shaders until I made these changes. I have somehow managed to lose my code that could reproduce the error, sorry :(. What kind of test can I add that will verify this doesn't break in the future? I'm super new to working with GL and vispy so I'm not quite sure what's appropriate for getting this merged, so any help would be much appreciated! 
",3,2,[]
387,63557984,1192,8935948,2016-03-21 12:43:00,2016-03-21 13:50:29,closed,fix isosurface error : color can not be set,"Fix a error that the color parameter in `isosurface` can not be set.
#1176
",1,1,[]
388,63456182,1191,8935948,2016-03-19 02:15:45,2016-03-21 14:05:04,closed,"enable 3D plot in LinePlotVisual, add a demo using plot3d","#1189

In `gloo.visuals`, both `LineVisual` and `MarkersVisual` have 3D capability, but in `LinePlotVisual`, 3D is disabled, which makes some typical visual task such as `plot3d`, `scatter3d` not available. This patch enables this feature, and provides a simple demo on using `LinePlotVisual` as a `plot3d` or `scatter3d` command in `examples/basic/visuals`.
",4,2,[]
389,63334286,1190,8935948,2016-03-18 06:47:51,2016-03-18 12:00:33,closed,Set default depth to 24 bits ,"Several problems have been reported when using 16 bits depth (see #1174, #1175, #896).
This PR sets default to 24.
",2,1,[]
390,62715336,1186,8935948,2016-03-14 08:48:53,2016-05-18 16:12:45,closed,Added support for writing non-triangular meshes in .OBJ files -- GH #1155,"Here we go.

Not sure the tests are correctly or sensibly written. Also not sure if one can (and should) test if a warning is raised.

Waiting for comments!
",8,5,[]
391,61436029,1183,8935948,2016-03-02 17:27:56,2016-03-03 16:17:54,closed,Fix Typo in the Name of a gloo Program Test,"`vayings` -> `varyings`
",1,1,[]
392,60386743,1180,8935948,2016-02-23 18:32:45,2016-02-24 16:05:20,closed,Fix isosurface function for non-contiguous arrays,"The `vispy.geometry.isosurface.isosurface(...)` function makes use of the `strides` property of arrays, and we therefore need to make sure that the data is contiguous.
",2,1,[]
393,60380124,1179,8935948,2016-02-23 17:47:19,2016-02-24 16:06:20,closed,Fix bug that caused settable Isosurface.color property to not work,"In master, if one creates an `IsosurfaceVisual`, the `color` property which is normally settable for `MeshVisual` is not settable for `IsosurfaceVisual` because `set_data` doesn't accept colors:

```
In [2]: surface.color = (1, 0.5, 0.3, 1.0)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-2-c4c805007590> in <module>()
----> 1 surface.color = (1, 0.5, 0.3, 1.0)

/Users/tom/tmp/vispy/vispy/util/frozen.py in __setattr__(self, key, value)
     15                                  '""unfreeze()"" to allow addition of new '
     16                                  'attributes' % (key, self))
---> 17         object.__setattr__(self, key, value)
     18 
     19     def freeze(self):

/Users/tom/tmp/vispy/vispy/visuals/mesh.py in color(self, c)
    278     @color.setter
    279     def color(self, c):
--> 280         self.set_data(color=c)
    281 
    282     def mesh_data_changed(self):

TypeError: set_data() got an unexpected keyword argument 'color'
```

I just went ahead and made it possible to set the colors via `set_data`, which solves the issue.
",3,5,[]
394,57743261,1167,8935948,2016-01-30 16:19:58,2016-05-24 14:42:06,closed,Add infinite line and infinite linear region visuals with example,"This is a pull request for adding infinite line visual for drawing vertical and horizontal infinite lines in plots.
The visual is simple and does not have many features, but I think that it can be a good starting point.

Below an example of the InfiniteLineVisual.

![infinite_line_visuals](https://cloud.githubusercontent.com/assets/11872072/12696831/7537404a-c774-11e5-9c88-ce0d4fcbc2d5.png)
",33,21,[]
395,57010805,1164,8935948,2016-01-24 19:10:34,2016-10-08 02:55:37,closed,enable remove_comments in shader preprocessor,"To #1163 for allow comments on own language
",5,2,[]
396,57009148,1161,8935948,2016-01-24 17:57:29,2016-05-19 18:35:38,closed,"allow conflicting library, if the user has chosen one","Fix #1144
If interpreter has both PySide and PyQT4 simultaneously and I chose one by app.use_app then print warning instead raise exception
",9,1,[]
397,56151314,1153,8935948,2016-01-15 10:13:23,2016-01-18 17:33:26,closed,Discard mouse events that are too close,"Fixes #1146
",2,1,['type: bug']
398,55901245,1152,8935948,2016-01-13 14:06:43,2016-01-16 16:51:53,closed,top and right orientations in AxisWidget,"When instantiating AxisWidget class with _orientation='right'_ or _orientation='top'_, the function AxisWidget.on_resize raises an exception because AxisWidget._axis_ends supports only 'left' and 'button' orientations.
This PR adds support for 'right' and 'top' orientations in function _axis_ends of AxisWidget class.
",5,3,[]
399,55429244,1149,8935948,2016-01-08 06:32:06,2016-01-08 14:06:56,closed,added info about where config file is located,"This is just a documentation thing - so others won't need to run a `git grep` to find out where the config file lived
",0,1,[]
400,54921749,1148,8935948,2016-01-03 09:32:46,2016-01-03 17:15:45,closed,BUG: changed image_tester so it doesn't try to overwrite frozen classes,"Fixes #1147 

Should I add a test for `image_tester` as well? (I see where this is going - ""who will watch the watchers"").
",5,1,[]
401,54555914,1145,8935948,2015-12-24 15:13:46,2016-01-03 17:18:15,closed,BUG: Type casting error in agg_path_collection.py,"I had troubles running examples `collections\tiger.py`and `collections\chloropleth.py` because of a small problem with type casting in newer versions of numpy.

So I hope this tiny fix is helpful.
",1,1,[]
402,54186835,1143,8935948,2015-12-19 21:18:44,2016-01-03 17:17:05,closed,Add touch event on OS X,"This adds preliminary multitouch support on OS X (Qt backend). It works fine on my end so it should be ready to go.

cc @Eric89GXL @nippoo 
",10,3,['component: app']
403,52583833,1139,8935948,2015-12-03 19:56:58,2015-12-07 16:00:03,closed,bugfix vispy.io.read_mesh fails because of numpy bug #823,"By some .obj files (for example obj files generated with FreeCAD) the read_mesh function fails because of a numpy bug (in numpy repository under bug 823, 4366 and 4384). 

Because handling the numpy bug would be too complex, I corrected the code here.

By using this modification I was able to read all obj files.
",5,2,[]
404,51864808,1136,8935948,2015-11-26 01:49:09,2015-11-26 02:54:43,closed,Update bundled six to 1.8.0 and allow it to be frozen,"Six 1.8.0 appears to be the latest version available on Debian stable. Ubuntu and Fedora are both on 1.9.0. I changed the shim to use `importlib` where available (2.7+) which should allow vispy to be frozen.

@jdreaver Can you see if this works? Right now, it seems like you need to freeze `six` as well, even though the bundled copy is there. I haven't figured out why it can't see it, but I think this is a good enough work-around for the time being.

Fixes #1074 hopefully.
",4,3,[]
405,51589641,1134,8935948,2015-11-23 22:24:56,2015-11-24 15:28:38,closed,Unset widget parent when removed,"Following my previous PR at https://github.com/vispy/vispy/pull/1132, I now think that it's very important to set the parent of a widget to None when it's removed. If this isn't done, it's removed from the widget tree but not from the Node heirarchy (where parent is actually used), and so is actually still displayed on screen but in a funny buggy way.

I'm not certain what is the intended way for this to work, but I'm fairly confident this fix is an unambiguous improvement; with it, removing widgets seems to work as expected, and I haven't found any further problems.

The improperly-removed Nodes also seem to have been the reason for the mouse input problems I mentioned on gitter.
",2,1,[]
406,51299271,1132,8935948,2015-11-19 23:50:14,2015-11-20 15:03:03,closed,Removed call to non-existent Widget.remove_parent,"I'm not sure if there are other problems related to this (like setting the parent in the first place - but other places do reference self.parent so maybe that's expected), but the method doesn't exist so this at least prevents an actual crash.
",1,1,[]
407,50654797,1130,8935948,2015-11-13 15:41:41,2021-06-29 00:06:35,closed,camera for syncing plots by x or y axis with example,"- based on chat with @chongxi see https://gitter.im/vispy/vispy?at=560a98eeff22c70f6fab265f
- camera generalized for x,y axis
- example included
",8,6,[]
408,50409151,1127,8935948,2015-11-11 17:11:19,2015-11-15 00:36:30,closed,adding save_animation example,"Adding a save_animation example in examples/basics/scene/. Uses imageio to save a few rendered frames from the sphere example in a gif
",3,3,[]
409,50393247,1126,8935948,2015-11-11 15:08:21,2015-11-11 16:48:21,closed,reducing N plots in scrolling_plots to fix issue #1122,,1,1,[]
410,49989973,1125,8935948,2015-11-06 18:48:50,2016-05-20 19:50:10,closed,Update volume.py with an top left axis view,"Add an extra axis view in the left top to show the rotation of the volume visual. The location and scale of this axis is relative to the `Viewbox` coordinates in the GUI rather than the internal scene. Now only available for the `TurntableCamera`.

![image](https://cloud.githubusercontent.com/assets/13411839/11005375/69d6b09a-848b-11e5-8aff-038e70eb7c47.png)
",13,2,[]
411,49120108,1121,8935948,2015-10-29 10:17:29,2015-10-29 18:43:15,closed,Call view_changed when camera.depth_value is set,"This calls `camera.view_changed` when `camera.depth_value` is set. Otherwise, one has to wait for the next view refresh to see the result.
",1,1,[]
412,49042141,1115,8935948,2015-10-28 17:47:07,2016-05-19 18:29:11,closed,write a function to create a colormap texture,"fixes #1052 

I'm planning on generating a 1D texture for any `Colormap` so that colormap indexing can be reduced to texture lookup
",1,1,[]
413,48675410,1114,8935948,2015-10-25 10:01:12,2015-10-25 15:06:27,closed,Allow GL_DEPTH_COMPONENT in glReadPixels,"Quickfix to add allow glReadPixels using GL_DEPTH_COMPONENT to read the depth buffer on desktop GL.
",1,1,[]
414,48649707,1113,8935948,2015-10-24 05:59:25,2015-10-25 15:10:35,closed,Initialize gl_FragColor in iso volume renderer.,"Sometimes the loop does not assign a value to gl_FragColor, and on some GPUs it produces rather unpleasant results.

Fixes #966.
",2,1,[]
415,48448981,1112,8935948,2015-10-22 12:05:09,2015-10-22 14:53:18,closed,FIX: cubehelix issues,"While co-working with VisPy and matplotlib I wondered why the VisPy cubehelix implementation misses the green parts of the colormap. First I thought this is with the standard cubehelix implementation and tried to change `start`, `rot` and other keywords. Nothing happened, this was due to `cubehelix` was already instantiated within `colormap`-module and no pure class any more. 

The colors were not influenced by this change, so I found that **rgb** was in the wrong order **rbg**. After changing this everything works as expected (as far I can see).
",1,2,[]
416,48122062,1111,8935948,2015-10-19 20:30:28,2015-10-20 09:36:21,closed,Fixed a bug when using rectangular vector field,"When calculating the row and column indices, there was a division by shape.y instead of shape.x, causing bugs when using a non-square vector field.
",4,1,[]
417,48022878,1110,8935948,2015-10-19 00:43:24,2015-10-19 14:49:42,closed,FIX: Minor fixes,"Fixes a couple problems with the CIs getting more strict. We'll see if they're happy.
",4,2,[]
418,48015877,1107,8935948,2015-10-18 19:42:35,2015-10-19 00:37:23,closed,Made some shaders work with ES2,"Without these fixes, the shaders don't work on Android, so I think (but am not certain) it's an ES2 compatibility thing.
",2,1,[]
419,48011470,1104,8935948,2015-10-18 16:11:18,2015-10-20 16:57:07,closed,Added GridMesh visual,"This PR is the same as the previous one at https://github.com/vispy/vispy/pull/959, which I managed to mess up somehow.

It includes everything from before, plus the final fixes that I never did, plus some small changes to work with changes in vispy in the last few months. So, it should be ready for re-review.
",5,27,[]
420,47982951,1103,8935948,2015-10-17 09:02:17,2015-10-20 09:14:40,closed,Added physical_size to Qt backend to manage different fb size on Retina displays,"This is a fix for  #1063.
In resizeGL Qt reports only the physical size of the framebuffer. To mirror the behaviour of the GLFW backend, the physical_size is now stored and can be accessed when the resize event fires, so tha the correct physical size of the frame buffer is set on HiDPI displays. Only tested with PyQt5 on Mac.
",9,2,[]
421,47263556,1101,8935948,2015-10-09 12:01:19,2020-08-31 21:25:05,closed,Fix grid_widget when Fig gets a single element,"This PR i a fix when we use Fig class to create a grid.

There is a bug if you write

```
f = Fig()
ax = f[0]
...
```

Then the cspan is 0. The PR solves the problem by giving a default size to 1 for the column.

This PR adds also a _row_widgets that defines the widgets that take all the row and need to be expand when the column size of the grid has changed.

The idea is to have the same behavior if you do

```
f = Fig()
ax1 = f[0]
...
ax2 = f[1, :2]
```

or 

```
f = Fig()
ax1 = f[0, :2]
...
ax2 = f[1]
```

I think that we have to change also the stretch of the widget when we change the size of the cspan of the _grid_widgets in _update_child_widgets but if I do that I have a ""maximum recursion depth exceeded"" because modified stretch call again _update_child_widgets.
",7,1,"['type: bug', 'component: plot']"
422,47005480,1097,8935948,2015-10-07 09:38:05,2015-10-07 13:19:00,closed,Textured globe example,"Not intended for merge. For a project I was working on recently I thought I would try vispy as I was interested in using the `vispy.scene` sub package. The goal of the project was to display some data on a textured 3D globe. Unfortunately, the `MeshVisual` class doesn't seem to support custom shaders or texturing at the moment.

This PR contains my hack to add textures to a globe by mapping the normals to points on a Plate Carrée map (""the texture file for the map was too large for me to upload to github but any Plate Carée map should do just fine""). I was wondering if there is a better way to do this in vispy at the moment? And also whether there are plans to add more flexibility with shaders and/or adding texture options to the `MeshVisual` class?
",2,1,[]
423,46818086,1093,8935948,2015-10-05 18:48:44,2015-10-08 15:29:04,closed,GLFW support for localized characters in key events,"Prototype for #1092: Hooked up GLFW's character callback to pipe unicode events into the canvas.
",11,6,[]
424,45859273,1087,8935948,2015-09-24 04:55:10,2015-09-24 17:15:02,closed,Add blending to improve the look of the vector field plot.,"This makes the vector field plot look nicer. 
",3,3,[]
425,45044884,1084,8935948,2015-09-15 12:52:19,2015-10-05 23:37:23,closed,Fix VispyWidget callback args for jupyter,"Jupyter/IPython 4 uses a slightly different API for the callback.

Fixes #1081 
",5,2,[]
426,44285808,1079,8935948,2015-09-05 16:26:55,2016-12-29 11:26:28,closed,added examples for scene.visuals,,2,3,[]
427,43886678,1077,8935948,2015-09-01 15:04:41,2015-10-06 12:45:11,closed,Offscreen rendering with OSMesa,"This adds a new backend for OSMesa [1], which allows vispy to do offscreen rendering on Linux (and other platform that support mesa/llvmpipe) without a X server nor a graphic card. This is a (partial?) fix to #78 .

I created a docker image which you can use to test the backend. See here for instructions :
https://github.com/julienr/vispy_osmesa_docker

I am not sure the code is production ready but I am opening this PR so we can discuss this implementation.

[1] http://www.mesa3d.org/osmesa.html
",22,30,[]
428,43371361,1075,8935948,2015-08-26 07:21:20,2015-08-26 09:19:42,closed,make TextVisual use spatial-filter.frag with packed kernel,"This is a follow up to #1069.

TextVisual uses now the reworked filtering with float packed rgba interpolation kernel. 
- Examples are working
- Test is passing (it doesn't test this part because of font_size) 
",2,2,[]
429,42895485,1070,8935948,2015-08-20 06:27:03,2015-08-24 13:04:03,closed,ENH: Implement icosphere for uniform sphere tessellation,"Fixes #1040
",13,8,[]
430,42784624,1069,8935948,2015-08-19 07:35:12,2015-08-25 15:12:34,closed,FIX: change kernel texture internalformat and interpolation ,"to fix precision issues, fixes #1068

This fixes problems with ImageVisual using spatial filtering using 1D kernel lookups.
",100,23,[]
431,42718382,1067,8935948,2015-08-18 16:19:56,2015-08-18 17:23:46,closed,FIX: Fix license,"Puts in the modified BSD license for AGG 2.4 derivative.

Closes #1065.

Ready for review/merge @rougier.
",4,1,[]
432,42626815,1064,8935948,2015-08-17 19:51:29,2016-05-19 18:24:04,closed,adding depth_test control to Markers visual. Fixes #1060 .,"The markers (jet particles) are now hiding behind Enceladus, as it should be. ;)

![screenshot 2015-08-17 13 50 39](https://cloud.githubusercontent.com/assets/69774/9314566/fb3702ae-44e6-11e5-97a2-53c664d86d7c.png)
",21,4,[]
433,42277329,1051,8935948,2015-08-12 19:16:43,2015-08-18 17:22:41,closed,WIP: add interpolation to ImageVisual and respective example,"As discussed in #1017:

This is a first attempt to implement spatial filtering to image visual.
The example works, but the handling with the ""hardware"" modes ('nearest', 'linear') is still broken. 

For every interpolation a dedicated lookup_function is created and fit to the shader_program as needed. I'm open for any suggestions to improve this. I already thought about subclassing ImageVisual, but that should not be mandatory.

There is sure a lot of room for improvement.
",37,11,[]
434,42211424,1050,8935948,2015-08-12 07:27:58,2015-08-12 16:16:08,closed,add spatial-filters example in examples/basic/gloo,"PR suggested in #1017 and as follow up to #1048.

The added example shows the available 17 interpolations in spatial-filters.frag . Toggling with 'Left' and 'Right' arrow keys. The actual used filter is shown in the window title.
",8,10,[]
435,42167920,1049,8935948,2015-08-11 19:31:21,2016-03-15 20:12:56,closed,[WIP] Layout grids using Cassowary,"- [ ] Get baseline implementation working (just layout, no padding / margins)
- [ ] Implement margins
- [ ] Implement padding
- [ ] document code
- [ ] Regular test cases
- [ ] Pathological extreme test cases 
",135,112,[]
436,42134216,1048,8935948,2015-08-11 14:21:39,2015-08-11 15:44:53,closed,FIX: add proper offset to spatial-filter fragment shader,"This PR fixes an offset issue within the spatial-filters fragment shader. See discussion in #1017.
",5,2,[]
437,41969124,1046,8935948,2015-08-09 11:33:09,2015-08-09 12:20:13,closed,Fix installation,"Some shaders were not copied during the installation process, which made some examples crash.
",2,1,[]
438,41811998,1044,8935948,2015-08-06 17:17:49,2015-08-15 18:22:53,closed,[ENH] Add Viridis sampled at 128 points,"I sampled `viridis` from the matplotlib commit pointed out by @QuLogic [available here](https://github.com/matplotlib/matplotlib/pull/4707/).

For some reason, VisPy freezes when there are too many samples in a `ColorArray`. I did the simplest thing I could think of, and just sampled the original data to get 128 evenly spaced colors.

Does anyone have any idea as to how to fix the freeze? If not, I'll open an issue. 
",28,5,[]
439,41460712,1043,8935948,2015-08-03 12:11:58,2016-05-19 17:50:35,closed,[WIP] Graph visual,"This is a new pull request for the upcoming GraphVisual.

Tasks:
- [x] Create compound visual using ArrowVisual and MarkersVisual
- [x] Create API for graph layouts
- Implement Several automatic layouts
  - [x] Random
  - [x] Circular (all nodes on a single circle)
  - [x] Spring (force directed) layout based on the Fruchterman-Reingold algorithm
  - [ ] Maybe more
- [x] Fix layout animation

Issues:
- [ ] Fix arrows below the nodes
",69,74,[]
440,41395542,1038,8935948,2015-08-01 03:27:41,2015-08-17 21:35:08,closed,[WIP] Colorbar -  vispy.plot,"Checklist:
- [x] add a `colorbar` function to `PlotWidget`
- [x] separate out border rendering into `BorderVisual`
- [x] integrate border rendering to `ViewBox`
- [x] fix coordinate systems for `ColorBar`
- [x] fix text overlapping
- [x] add an example of using `plotwidget.colorbar` with `vispy.plot`
- [x] change ticks orientation so they are always left-to-right
- [x] create a new `ColorBarWidget`
- [x] add an example for `ColorBarWidget`
- [x] write docs on `PlotWidget.colorbar(..)`
- [x] write docs on `ColorBarWidget`
- [x] fix overlap in `examples/basics/visuals/colorbar_visual.py`
- [ ] implement `viridis` colormap for VisPy (in separate PR)
- [ ] write test cases for `ColorBarWidget`
",40,78,[]
441,41383845,1037,8935948,2015-07-31 21:42:14,2015-08-01 18:14:12,closed,MRG: Add ability to freeze properties,"Closes #1015.

@campagnola this does what you were hoping for, I think. Adding the ability to freeze actually showed a few places where we were setting properties that didn't exist, which is nice.
",11,3,[]
442,41366457,1036,8935948,2015-07-31 18:19:49,2015-07-31 19:45:36,closed,MRG: Minor fixes,"A few minor fixes, and allows us to ensure we're staying compatible with old `numpy`.
",2,2,[]
443,41359425,1035,8935948,2015-07-31 16:58:45,2015-08-04 17:18:41,closed,[WIP] first commit of Sphere visual. Solves #1032,"What do you guys think?

Some issues I have
- create_sphere does not calculate the outline vertices so the `if edge_color` case is not covered
- I put the default of rows and columns to 30 each to have a smooth-ish appearance. Is that an okay choice or are there more clever ways to do this?
- Question: I added properties for the vertices and faces. I don't think it should harm performance, but maybe you know better?
- Because of the lack of surface features one does not see anything happening when rotating the mouse. Makes me wonder if we should have the default sphere something that avoids that?
",25,17,[]
444,41346638,1034,8935948,2015-07-31 14:48:03,2015-08-03 12:05:47,closed,Bezier curves and arrows,"Add new vispy.geometry.curves module and an ArrowVisual.
",20,107,[]
445,41285748,1031,8935948,2015-07-30 21:44:33,2015-07-30 21:59:22,closed,create simplest scene-based 3D point cloud example. Closes #1028,"As agreed.
",2,1,[]
446,41271253,1030,8935948,2015-07-30 19:17:47,2015-07-30 21:12:23,closed,Scenegraph update - review,"WIP: addressing reviewer comments
",14,9,[]
447,41054586,1026,8935948,2015-07-28 20:10:09,2015-07-29 00:02:07,closed,Fix oscilloscope demo without pyaudio installed,"See #1025.

I'm still seeing a `RuntimeError: OpenGL got errors (glTexImage2D): GL_INVALID_VALUE` though.
",5,4,[]
448,40958385,1024,8935948,2015-07-27 22:47:27,2015-07-28 22:54:00,closed,Create SceneGraph Visuals statically rather than dynamically,"This helps improve auto-completion in IDEs that access static information from the module.
Both Sublime Text and PyCharm benefit from this change. I believe Valloric's `YouCompleteMe` will also benefit from this, as will emacs' `Jedi`, though I haven't tested either (on Windows right now)

One thing is that the docs don't show up (since the docs are dynamically appended to the elements in `create_visual_node`. However, `help(vispy.scene.FooVisual)` works as expected. I was wondering if I should add a one-liner above each declaration.

I also cleaned up the whitespace in the file.
",8,4,[]
449,40950759,1023,8935948,2015-07-27 21:19:37,2015-07-31 14:46:29,closed,Arrow visual and Bezier lines,"This pull requests contains an extension to the already existing LineVisual: an ArrowVisual. This is a visual with an arrow head which is oriented automatically in the right way.

Supersedes these PRs:
- https://github.com/campagnola/vispy/pull/22
- https://github.com/vispy/vispy/pull/924
",12,99,[]
450,40950604,1022,8935948,2015-07-27 21:18:00,2015-07-31 18:18:53,closed,[WIP] Colorbar - vispy.plot,"Checklist:
- [x] add a `colorbar` function to `PlotWidget`
- [x] separate out border rendering into `BorderVisual`
- [x] integrate border rendering to `ViewBox`
- [x] fix coordinate systems for `ColorBar`
- [x] fix text overlapping
- [x] add an example of using `plotwidget.colorbar` with `vispy.plot`
- [x] change ticks orientation so they are always left-to-right
- [ ] create a new `ColorBarWidget`
- [ ] add an example for `ColorBarWidget`
- [ ] write docs on `PlotWidget.colorbar(..)`
- [ ] write docs on `ColorBarWidget`
- [ ] write test cases for `ColorBarWidget`
",14,36,[]
451,40949611,1021,8935948,2015-07-27 21:08:15,2015-07-31 13:36:29,closed,ENH: Scenegraph update,"Opening as a PR in-repo so we can see if the last few fixes make Travis happy, and so that additional PRs can be opened against a branch that people get notified about. Thanks for the suggestion @QuLogic!
- [x] Remove multi-parenting in scenegraph
- [x] Nodes have a single transform (and related simplifications)
- [x] SceneCanvas.draw_visual should be simple and efficient
- [x] Implement picking (finally)
- [ ] ViewNode and a way to automatically create a view on a scenegraph subtree
- [x] Other simplifications:
  - [x] Remove all ViewBox clip methods except fragment. 
  - [x] Remove render/framebuffer/canvas scenegraph nodes (might restore these later if there turns out to be a need)

Visuals to migrate:
- [x] Line
- [x] Mesh
- [x] GridLines
- [x] Markers
- [x] Volume
- [x] Image
- [x] Text
- [x] Axis
- [x] Polygon
- [x] Box
- [x] Cube
- [x] Ellipse
- [x] Isocurve
- [x] Isosurface
- [x] Plane
- [x] Rectangle
- [x] RegularPolygon
- [x] Spectrogram
- [x] Tube
- [x] XYZAxis
- [x] Histogram
- [x] LinePlot
- [x] Isoline
- [x] SurfacePlot
- [x] ColorBar

EDIT BY Eric89GXL:

Related issues:
- [x] Toggling a node toggles children #986
- [x] Text visual changing viewport #981
- [x] Type of Canvas size #976
- [x] Centering of text visuals #975: working now?
- [x] Scene benchmarks broken #965: need to fix?
- [x] Depth drawing precision #953: need to add?
- [x] Get SceneCanvas from node #927: exists? 
- [x] Plane and box PR #901: need to update visuals
- [x] Original PR #895
- [x] Reuse FBO in viewbox #791
- [x] Picking example #693
- [x] Axes, ticks, grid #677
- [x] Grid plot with individual zooming #434: does it work?
- [x] Picking #140
- [ ] Line editing example PR #926: modify to use picking?
- [ ] Camera translate speed #914: need to add?
- [ ] Performance of the SceneGraph #628

closes #986
closes #981
closes #976
closes #975
closes #965
closes #953
closes #927
closes #791
closes #693
closes #677
closes #434
closes #140
",17,315,[]
452,40834100,1018,8935948,2015-07-25 09:19:57,2015-07-27 13:05:03,closed,Allow freetype to be unbundled.,"Now that freetype-py has had a release fixing the problem it had (thanks @rougier), let's have a go at this unbundling of it.
",3,1,[]
453,40473065,1014,8935948,2015-07-21 15:51:53,2015-08-04 14:38:01,closed,[WIP] Install notes update,"I thought I should update the notes on `Installation` in the `README` to help newbies, so we could just point people to a set of pre-written steps
",6,4,[]
454,40241129,1011,8935948,2015-07-17 15:16:48,2015-07-17 16:01:30,closed,FIX: Fix core,"Missed this bit when I made the PR earlier. Ready for review/merge from my end.
",1,1,[]
455,39808470,1008,8935948,2015-07-13 12:57:15,2015-07-14 16:30:58,closed,ENH: Use container-based infrastructure,"Let's see if we can speed up the build system.
",19,3,[]
456,39478555,1003,8935948,2015-07-08 13:47:49,2015-07-13 12:00:07,closed,FIX: Move docs,"The docs are now totally contained within the https://github.com/vispy/vispy-website repo. Ready for review/merge from my end.
",9,1,[]
457,39326904,1002,8935948,2015-07-07 01:15:54,2015-07-07 11:45:35,closed,FIX: Remove core distinction,"Core distinction is unnecessary, this gets rid of it for the license. Ready for review/merge. I'll tackle the website hopefully soon.
",0,1,[]
458,39225885,999,8935948,2015-07-05 19:47:30,2015-07-07 11:45:00,closed,FIX: Better skipping,"I noticed our testing suite was not efficiently skipping backends that aren't installed or don't work, this should fix it.
",2,1,[]
459,38691119,998,8935948,2015-06-26 21:28:01,2015-06-27 20:15:22,closed,add a warning when setup.py is unable to load setuptools,"This is useful if someone is trying to use `python setup.py develop` but doesn't have `setuptools`.

There's a nested import (which loads `warnings.warn`). I will move that to the top level if it is  necessary, but I think the nested import is ""neater"" since it isolates usage
",2,2,[]
460,38382315,996,8935948,2015-06-23 20:59:53,2015-07-05 14:52:29,closed,Add volume check,"Proposal to add a sanity check to the contrast limits range.
Avoids division by zero when clim is set from the volume data, and the data is a 'brick' (every voxel the same value)
",7,2,[]
461,38165582,995,8935948,2015-06-20 09:38:34,2015-06-21 15:36:03,closed,add test docs option to make.py,"closes #993 

Also added an option to the makefile so you can write `make docs`.

the syntax to invoke this test is `python make.py test docs`.
",3,8,[]
462,38003722,991,8935948,2015-06-18 13:02:00,2015-06-18 21:28:15,closed,typo: dpi attribute shadows property,"noob learning : stumbled upon this while reading your great code.
cheers
",5,1,[]
463,37872980,988,8935948,2015-06-17 07:36:25,2015-06-17 09:53:01,closed,Minor fix to Volume docstring,"The Volume docstring originally mentioned that the data should be 2-dimensional, which I presume was a typo?
",1,1,[]
464,37108643,983,8935948,2015-06-07 15:44:38,2015-06-07 18:45:28,closed,Fixed SurfacePlotVisual attribute name,"set_data later sets self.__colors (though nothing ever reads from either attribute), so I guess this is a small and currently irrelevant typo
",5,1,[]
465,37098689,982,8935948,2015-06-06 23:46:44,2015-06-15 21:12:31,closed,[WIP] IPython extension mechanism for Vispy,"closes #977  

So, I tried to take a stab at this, and here's my first attempt. I foresee this needing a _lot_ of iteration to get right.

**_Things to decide:**_
- location of the `ipython` extension file
- features of the extension 
- different `magic` operators that this could have

**_TODO:**_
- [ ] I'm not sure how to write test cases for this. I'm guessing `iPython` provides some way to do this, but I'll have to look into this
- [ ] Documentation for this, so that it's discover-able
- [ ] list the extension on iPython's [extension wiki](https://github.com/ipython/ipython/wiki/Extensions-Index)
- [ ] Publish the extension ( push it to `PyPi` with the tag `Framework :: IPython`)
",118,47,['component: jupyter-widget-backend']
466,36980925,980,8935948,2015-06-04 21:36:05,2015-06-15 04:12:52,closed,ENH: AxisVisual,"Follow-up on #829 

Closes #549.

Todo:
- [x] Bounds
- [x] Tweak examples
- [ ] Basic tests
",17,17,[]
467,36962656,979,8935948,2015-06-04 18:19:44,2015-06-15 21:59:07,closed,[WIP] ColorBar visual,"closes #682 

Started working on this, learnt a couple of things about vispy's model in the process. I've got the basic structure down.
- [x] add a `orientation` field for `horizontal` or `vertical`
- [x] add a `label` field
- [x] ~~add a `ticks` field for the colorbar~~
- [ ] add an accompanying node for the SceneGraph
- [ ] draw a customizable border around the colorbar
- [ ] add test cases for the colorbar
- [x] actually respect the `clim` parameter (this should be easy, just change the `texcoords`
- [x] document the example, so that there's proper explanation
- [x] write documentation (docstrings) for the files
- [x] add a license notice for the files

**_Screenie of colorbar :**_

![screenshot from 2015-06-04 23 48 12](https://cloud.githubusercontent.com/assets/1694861/7991232/54efccb6-0b14-11e5-9588-ead11449eac4.png)
",55,27,[]
468,36925193,978,8935948,2015-06-04 11:28:02,2015-06-04 14:06:06,closed,fixed doc string for pyqt5,"fixes #972 - changed docs
",2,1,[]
469,36885824,976,8935948,2015-06-03 22:38:40,2015-06-05 15:51:23,closed,Fix type of canvas size.,"It must be a tuple to match other usage of dimensions.

For example, [here](../blob/master/vispy/scene/canvas.py#L266):

``` python
         prof('create SceneDrawEvent')

         vp = (0, 0) + self.physical_size if viewport is None else viewport
         scene_event.push_viewport(vp)
         prof('push_viewport')
         try:
```
",5,1,[]
470,36853628,971,8935948,2015-06-03 16:53:07,2015-07-06 12:30:16,closed,FIX: More font tests,"Closes #970

cc @nippoo 
",21,4,[]
471,36849384,969,8935948,2015-06-03 16:08:10,2015-06-03 18:22:06,closed,FIX: Fix mpl_plot,"Closes #962. Ready for review/merge from my end.
",2,1,[]
472,36823189,968,8935948,2015-06-03 11:37:10,2015-06-03 22:07:19,closed,Add new signature to `message_handler` for pyqt5,"A small bug fix in Qt backend.

In pyqt5 `QtCore.qInstallMessageHandler` takes a function with a different signature than pyqt4. The result was that all pyqt5 log message would display `TypeError: message_handler() takes 2 positional arguments but 3 were given`.

This PR fix the issue by checking wether `qt_lib` is pyqt4 or pyqt5.

PS: I also add a `.decode()` to pyqt4 logging message signature because it's return a byte and not an str. However it could raise issue with Python 2. This code has only been tested with Python 3.4.
",21,7,[]
473,36797770,967,8935948,2015-06-03 04:31:56,2015-06-03 22:06:48,closed,Minor example fixes,"Just fixing a few minor little wrinkles.
",5,6,[]
474,36796710,964,8935948,2015-06-03 03:59:23,2015-06-03 17:10:16,closed,Include Eric Larson,"Maybe a test should be added asserting that the listings of core contributors all match each other.
",4,1,[]
475,36791623,961,8935948,2015-06-03 01:42:21,2015-06-03 03:06:33,closed,FIX: Restore missing values in hex-to-decimal dict.,"`itertools.combinations` != double loop comprehension. `combinations` excludes doubled entries, so values like '00' did not exist. This fixes the broken tiger example (are these not tested on Travis?).

Possibly the reason why it seemed in #932 that the explicit loop was twice as fast may be due to the fact that this code produces only 231 entries, when there should be 484.
",2,1,[]
476,36781220,960,8935948,2015-06-02 22:26:51,2019-03-11 13:50:46,closed,[WIP] ENH: Use new QOpenGL API with Qt 5.4+.,"This is not really complete yet; it's really more for documenting the change since it doesn't work just yet. Most of the visual tests fail, not all the others do somehow.

Apparently, the new [QOpenGLWidget embeds better and is more compatible than the old QGLWidget](https://blog.qt.io/blog/2014/09/10/qt-weekly-19-qopenglwidget/). Unfortunately, there are some differences, so it may not integrate into vispy quite so easily.
- [QGLWidget](http://doc.qt.io/qt-4.8/qglwidget.html) -> [QOpenGLWidget](https://doc-snapshots.qt.io/qt5-5.4/qopenglwidget.html)
- [QGLContext](http://doc.qt.io/qt-4.8/qglcontext.html) -> [QOpenGLContext](http://doc.qt.io/qt-5/qopenglcontext.html)
- [QGLFormat](http://doc.qt.io/qt-4.8/qglformat.html) -> [QSurfaceFormat](http://doc.qt.io/qt-5/qsurfaceformat.html)
",30,3,[]
477,36766582,959,8935948,2015-06-02 19:46:44,2015-10-18 16:10:10,closed,Added an implicitly connected grid mesh visual,"This PR replaces https://github.com/vispy/vispy/pull/756, which I accidentally closed with a bad push.

This isn't yet ready to merge, I need to fix the color parameter to be consistent with the surface plot.
",11,26,[]
478,36743760,958,8935948,2015-06-02 15:49:48,2015-06-11 16:47:53,closed,FIX: Fix OpenGL message,"Only give a warning if OpenGL < 2.1. Ready for review/merge from my end.
",3,1,[]
479,36696618,955,8935948,2015-06-02 05:53:21,2015-06-02 13:52:56,closed,Fix ResourceWarnings in six shim,"I've noticed a few new warnings due to the six shim that I didn't see earlier (because of Python 3.4 upgrade, probably).
",5,2,[]
480,36668485,954,8935948,2015-06-01 20:41:20,2015-06-02 05:44:04,closed,Fix functionality tests on Intel and software GL.,"The attribute `a_1` is assigned generic vertex attribute 0, which has some magical properties on legacy desktop GL. By reversing the order, it no longer has such assignment, and works like any other attribute. The new first attribute `a_4` is not modified in the same way as `a_1`, and thus does not suffer due to the magical properties of index 0.

I also fixed a minor typo.

Fixes #649. CC @rossant who was also seeing this issue.
",13,2,[]
481,36564792,950,8935948,2015-05-30 12:26:07,2021-06-10 15:39:50,closed,WIP on a singular efficient Transform class,"(I had this branch laying around for a while and make it ""public"" so it might be useful for Luke's epic quest for a better scene graph).

issues:  implements part of #832, #894

This PR implements a `DefaultTransform` class that can deal with translation, scaling, rotation, and anything else than can be described with a 4x4 matrix. Its smart enough to keep the internal description as simple as possible, which means it's also fast.

Having one transform class simplifies things, especially for the user.

cc @campagnola note that I made some fixes/changes in the quaternion class, which needed some changes in the cameras as well.
",4,3,[]
482,36558637,948,8935948,2015-05-30 02:44:17,2015-05-30 04:27:14,closed,Different method of associating glir queues (for better performance),"Ready for review/merge.

This resolves a performance issue where scenes with a large number of visuals were visiting `GlirQueue.clear()` thousands of times per draw.
",15,2,[]
483,36549398,946,8935948,2015-05-29 22:07:10,2015-06-03 17:09:47,closed,[WIP] Fix vispy performance when used in the python interpreter,"closes #945 

an attempt to use @campagnola and @Eric89GXL's suggestions to help reduce the performance impact of running vispy interactively
",27,5,[]
484,36517112,944,8935948,2015-05-29 15:34:20,2015-05-29 16:29:32,closed,FIX: Update README [ci skip],"Ready for review/merge, just a line about release announcement that @almarklein mentioned in #903
",1,1,[]
485,36515905,943,8935948,2015-05-29 15:22:03,2015-05-29 16:38:05,closed,Fix issue #942,,3,1,[]
486,36474077,940,8935948,2015-05-29 04:55:17,2015-05-31 02:31:35,closed,Unbundle-able libraries,"This moves bundled libraries into a single directory, and adds shims so that the system copies _may_ be used instead. `six` was a bit of a pain, so I pulled the work that was in astropy/astropy#2623. This should make it easier for packagers, while still leaving things self-contained for you.
",26,7,[]
487,36430496,939,8935948,2015-05-28 17:24:25,2015-05-29 15:13:02,closed,FIX: Plot in WebGL and testing,"Closes #875
Closes #866
Closes #935
",9,4,[]
488,36396459,938,8935948,2015-05-28 11:24:16,2015-05-28 17:21:28,closed,FIX #937 left Click and shif key ,"Closes #937
",5,2,[]
489,36373594,936,8935948,2015-05-28 05:42:25,2015-05-28 13:50:42,closed,Fix typo in setup requirements.,"So, I just realized I made a silly typo here. Although why `setuptools` developers decided to make everything plural _except_ this one option, I don't know...
",3,1,[]
490,36349940,933,8935948,2015-05-27 21:20:10,2016-05-19 18:21:00,closed,Cleanup collections code,"Closes #797
also addresses issues from #788

cc @almarklein, @rougier, @Eric89GXL 
",9,2,[]
491,36347337,932,8935948,2015-05-27 20:52:16,2015-05-28 23:10:45,closed,rewrite dictionary comprehension as a loop (Python 2.6 support),"Filling the dictionary now takes about half the time too!
",11,2,[]
492,36228115,931,8935948,2015-05-26 17:53:22,2015-05-27 01:21:31,closed,FIX: Allow text lists,"Ready for review/merge @campagnola.

@nippoo with this PR you can do:

```
text.text = ['foo', 'bar']
text.pos = [[100, 200], [100, 300]]
canvas.update()
```

and it should show both bits of text.
",3,2,[]
493,36206734,930,8935948,2015-05-26 14:17:29,2015-05-26 16:51:38,closed,FIX: Dont require gl lib,"Closes #929.

This was easier than I expected (I think). Ready for review/merge @rossant.
",2,1,[]
494,36153363,928,8935948,2015-05-25 18:47:44,2015-07-27 21:12:43,closed,Scenegraph overhaul,"This PR is a continuation of #895 (and supersedes it). I am keeping both PRs open for now so that the prior changes may be reviewed in isolation. Major tasks for this PR are:
- [x] Remove multi-parenting in scenegraph
- [x] Nodes have a single transform (and related simplifications)
- [x] SceneCanvas.draw_visual should be simple and efficient
- [x] Implement picking (finally)
- [ ] ViewNode and a way to automatically create a view on a scenegraph subtree
- [x] Other simplifications:
  - [x] Remove all ViewBox clip methods except fragment. 
  - [x] Remove render/framebuffer/canvas scenegraph nodes (might restore these later if there turns out to be a need)

Visuals to migrate:
- [x] Line
- [x] Mesh
- [x] GridLines
- [x] Markers
- [x] Volume
- [x] Image
- [x] Text
- [x] Axis
- [x] Polygon
- [x] Box
- [x] Cube
- [x] Ellipse
- [x] Isocurve
- [x] Isosurface
- [x] Plane
- [x] Rectangle
- [x] RegularPolygon
- [x] Spectrogram
- [x] Tube
- [x] XYZAxis
- [x] Histogram
- [x] LinePlot
- [x] Isoline
- [x] SurfacePlot
- [x] ColorBar

EDIT BY Eric89GXL:

Related issues:
- [x] Toggling a node toggles children #986
- [x] Text visual changing viewport #981
- [x] Type of Canvas size #976
- [x] Centering of text visuals #975: working now?
- [x] Scene benchmarks broken #965: need to fix?
- [x] Depth drawing precision #953: need to add?
- [x] Get SceneCanvas from node #927: exists? 
- [x] Plane and box PR #901: need to update visuals
- [x] Original PR #895
- [x] Reuse FBO in viewbox #791
- [x] Picking example #693
- [x] Axes, ticks, grid #677
- [x] Grid plot with individual zooming #434: does it work?
- [x] Picking #140
- [ ] Line editing example PR #926: modify to use picking?
- [ ] Camera translate speed #914: need to add?
- [ ] Performance of the SceneGraph #628

closes #986
closes #981
closes #976
closes #975
closes #965
closes #953
closes #927
closes #791
closes #693
closes #677
closes #434
closes #140
",103,290,[]
495,36151486,926,8935948,2015-05-25 17:50:36,2015-05-27 00:58:51,closed,Added example for mouse editing of line plot,"Hi, 

I'm looking into a simple vector graphics sketching framework, possibly as an add-on to vispy. As a first test I extended the line plot visual to add mouse events and simple mouse editing. The demo is based on various line-plot and pan-zoom demos from existing examples. In principle the demo works with multiple lines, but as a click into empty space creates a new point for all lines in this demo, it is somewhat unintuitive. 

It seems to me that other visuals could be extended in a similar way, maybe even with a generic wrapper for basic point editing. Comments are welcome how to best integrate or add this feature.

A potential issue I discovered is that the left-click pan interferes with left-click dragging line points. It would be great if the mouse buttons for camera actions could be configurable (e.g. right button for pan). 

cheers, 
Felix
",16,7,[]
496,36117968,925,8935948,2015-05-25 05:37:27,2015-05-25 16:35:57,closed,FIX: Add some information about GLIR consumer,"Closes #669.

This does the following:
1. gets us some information available at the GLIR consumer level for desktop
2. gives the GL version number when GL errors are thrown (e.g., no `glBindFramebuffer` when users have version < 3.0)

Now we can at least query some things like:

```
canvas.context.shared.parser.capabilities['max_texture_size']
```

It's a bit nested, but I'm not sure the best way to un-nest it. Should be a decent start.
",14,6,[]
497,36106160,924,8935948,2015-05-24 18:09:27,2015-07-27 21:19:53,closed,[WIP] Bezier lines and arrows,"Hi all!

I've created a branch where I will develop the first part of my GSoC project: Bezier lines and arrows. Currently I've just copied the geometry.curves module from Glumpy, but this will change of course in the coming weeks.

So, the idea for arrows:
- Separate the head from the body/tail. 
- Create a subclass of LineVisual called ArrowVisual
- Add options to specify which vertices get an arrow head

Questions:
The line visual has many vertices which may or may not be connected. To extend on this, it would be only natural to specify which vertices will get an arrow head. But what would be the best way to determine the arrow head orientation? 

Orientation could be determined by getting the two last vertices of a line, determine its direction vector, and calculate the corner with the unit vector pointing upwards. But, what would be the best way to determine those last two vertices? As far as I can tell the given vertices are not necessarily in order, plus you're not sure if they're connected.

I'll probably have some questions about the OpenGL shaders too, they look quite advanced, but I'm also still busy with [this OpenGL tutorial](http://antongerdelan.net/opengl/).

Anyway, please let me hear your suggestions!
",61,380,[]
498,36098713,922,8935948,2015-05-24 06:07:59,2015-05-24 19:57:50,closed,FIX: Minor fixes,"Closes #921 
Closes #867

WIP because I'm hoping to tackle a few other little bugs.
",9,5,[]
499,36077601,920,8935948,2015-05-22 23:52:39,2015-05-23 04:34:26,closed,Switch to SVG version of badges.,"Current badges are a bit inconsistent. Switching to the SVG versions makes them all the same height and shading.
",3,1,[]
500,36049429,919,8935948,2015-05-22 16:54:22,2015-05-22 17:59:11,closed,FIX: Update year,"Ready for review/merge @campagnola. Should be last one before branching for release.
",3,1,[]
501,35989834,917,8935948,2015-05-22 00:00:40,2015-05-22 15:38:29,closed,FIX: Many doc fixes,"A bunch of changes to make our docs and docstrings better. Also adds automated docstring checks.
",15,5,[]
502,35872404,916,8935948,2015-05-20 20:27:53,2015-05-20 22:29:45,closed,Remove debug print statement.,"A debug print statement was left from a previous PR:

```
(colour-analysis)Kali-2:bin kelsolaar$ ./analysis 
8
10
8
10
8
10
0
0
0
0
0
10
10
10
10
10
10
0
0
10
10
10
10
```
",2,1,[]
503,35824595,915,8935948,2015-05-20 12:06:10,2015-05-20 19:30:09,closed,Fixed out-of-bounds mouse errors on example resize,"On window managers where the requested window size is not always respected (I'm on AwesomeWM but I assume other tiling WMs like XMonad etc do the same thing), the tests will fail since they assume the window has not been resized. We should be resilient to this.
",3,2,[]
504,35775951,913,8935948,2015-05-19 21:18:06,2015-05-20 12:47:47,closed,FIX: Fix background colors,"Closes #908.

@KelSolaar can you see if this fixes your use case?

@campagnola feel free to have a look and see if you agree with the changes.
",9,3,[]
505,35703889,911,8935948,2015-05-19 07:50:15,2015-05-20 14:33:34,closed,"Improve ""vispy.scene.visuals"" module and ""vispy.visuals.visual.Visual"" class docstrings.","References: https://github.com/vispy/vispy/issues/905#issuecomment-102419889
",8,4,[]
506,35683453,910,8935948,2015-05-18 23:26:58,2015-05-20 01:47:14,closed,Double-click,"- [x] Natively pass-through double-click on backends which support it...
- [x] and 'fake it' on those that don't.
",17,10,[]
507,35585037,909,8935948,2015-05-17 10:27:24,2015-05-18 20:17:19,closed,Windows end-user doesn't have rights to symlink,,3,2,[]
508,35520371,906,8935948,2015-05-15 14:57:14,2015-05-15 16:39:40,closed,FIX: Fix packaging,"Closes #878. I have verified that on `master` if I use `python setup.py install` I have the same issues as @gabyx @brickgao and @bollu, and with this PR they are fixed.
",7,3,[]
509,35378839,901,8935948,2015-05-13 22:47:28,2015-06-01 15:41:35,closed,PR: Support for parametric plane and box geometries.,"This PR implements support for a parametric plane and a parametric box that builds on it through the following objects:
- `vispy.geometry.generation.create_plane`

![image](https://cloud.githubusercontent.com/assets/99779/7622624/4d4b4f16-f9d1-11e4-935d-8163c860f053.png)
- `vispy.geometry.generation.create_box`

![image](https://cloud.githubusercontent.com/assets/99779/7622628/5678e5b2-f9d1-11e4-8cc1-bcf6eed282f0.png)

Some things to consider:
- It would be neat to actually return a `MeshData` instance instead of the current tuple for `create_cube`, `create_plane` and `create_box` definitions, however the class may not have all the needed fields, especially one for the outline. Upon really quick inspection it doesn't seem to support arbitrary data.
- As I didn't wanted to break anything, I did not replaced `make_cube`, it is maybe worth for it to be an alias to `make_box` or whatever you feel the best.
- I haven't created matching visuals for the new geometries, but I have some that fit my usage accordingly to #900 there: https://github.com/colour-science/colour-vispy/blob/master/colour_vispy/visuals.py
",26,6,[]
510,35175795,899,8935948,2015-05-11 22:18:20,2015-05-12 01:25:06,closed,"PR: ""Cube"" geometry vertex colours are inconsistently defined.","References #898.
",6,1,[]
511,35082696,897,8935948,2015-05-10 13:41:04,2015-05-10 21:26:53,closed,Fix tutorial,"Fixes all visual tutorials.
",6,4,[]
512,35069274,895,8935948,2015-05-09 16:42:21,2015-06-04 14:18:25,closed,WIP: Visual views,"This PR will implement part of #894:
- [x] Visual views
- [x] MultiProgram
- [x] Visual class organization: BaseVisual, Visual, VisualView, CompoundVisual
- [x] TransformSystem that responds to canvas resize / viewport / fbo
- [x] Preliminary VisualCollection class that lacks support for collectionizing transforms

@almarklein, @Eric89GXL have a look at examples/basics/visuals/visual_view.py and comment on the API.
",27,26,[]
513,34758169,891,8935948,2015-05-05 19:26:53,2015-05-05 21:59:40,closed,Fix issue #885,"Fix problem with new transform system
",3,1,[]
514,34594996,889,8935948,2015-05-03 01:52:49,2015-05-09 03:19:36,closed,Defer string formatting in log messages,"Improves performance in many examples, hopefully fixes #888.
@inclement can you verify this helps?
",19,4,[]
515,34582533,887,8935948,2015-05-02 07:42:04,2015-05-02 13:55:36,closed,Set focus policy in Qt widget,"Ready for review/merge. Fixes #886.
",3,1,[]
516,33862241,882,8935948,2015-04-22 14:14:57,2015-04-22 17:36:17,closed,Explicit commit ID for image testing,"Each commit explicitly references the test-data commit ID it should be tested against.
This should allow #870 to be merged without breaking other branches.
",7,1,[]
517,33759377,881,8935948,2015-04-21 13:12:36,2015-04-24 16:02:52,closed,Text visual: changed shader and position to make it 3d compatible,,21,10,[]
518,33204188,873,8935948,2015-04-13 21:13:27,2015-05-09 17:27:35,closed,Volume rendering methods,"The main purpose of this PR is to add a couple of new volume rendering methods, but many ancillary changes are included.
- Add ""translucent"" rendering method (better quality compositing but requires more effort in selecting colormaps)
- Add ""additive"" rendering method (nice for visualizing 3D functions like electron orbitals)
- Reorganized a ""bit"" of the volume fragment shader core--improved performance, simpler code, somewhat easier to understand.
- Tweaked isosurface rendering; no more ray randomization.
- Added Z-interpolation to emulated 3D texture
- Disabled comment removal from shader preprocessing (@rougier, was this necessary?)
- Fixed `VisualNode` double-init bug (see #871) 

@almarklein, please be critical--I imagine I have not tested the volume rendering under all of the cases that you have.

Depends on #870.
",26,20,[]
519,33192083,872,8935948,2015-04-13 18:53:23,2015-04-14 19:53:32,closed,WIP: Add verbose,"Do not merge, working with GLFW folks to fix the problem.
",6,3,[]
520,32926625,870,8935948,2015-04-09 05:42:10,2015-05-01 15:57:13,closed,Image testing,"This adds a basic UI for image comparison testing. It allows the user to compare the output of a unit test with a previously-generated standard image and decide (if there are any differences) whether to fail the test or to pass the test and save a new standard image.

Standards are stored and retrieved from a local clone of the test-data repository, so after running a batch of tests you can optionally commit the new standards and push upstream.

Give it a try:

```
$ python vispy/scene/cameras/tests/perspective_test.py
```

This causes the test-data repo to be cloned, but the test will fail because the standard has not
been added to the repo yet. To invoke the testing ui, use the `--vispy-audit` flag:

```
$ python vispy/scene/cameras/tests/perspective_test.py --vispy-audit
```

The window shows the test output, the standard (if any), and the difference between the two. Press (p)ass to store the test image as the new standard. Run again; this time the test passes.

Finally, try modifying perspective_test.py and run the test again.

@Eric89GXL, any thoughts about how to set the `audit_tests` config flag when running tests with `python make tests ...` ?
",43,33,[]
521,32895600,869,8935948,2015-04-08 19:54:15,2015-04-09 00:07:01,closed,Fixed Cube mesh generation,"Currently the cube mesh generation function returns a 1D array of face indices, but the MeshData expects it to be 2D. This doesn't seem to affect anything right now as functions like `cube._meshdata.get_vertex_normals()` are not accessed, but exceptions are raised if that code is actually called. This PR just fixes that, everything seems to work fine afterwards.
",2,1,[]
522,32822571,868,8935948,2015-04-08 01:57:08,2015-04-15 02:31:27,closed,Perspective correction,"This fixes perspective transforms. Summary:
- OpenGL uses homogeneous coordinates; our transforms need to do the same.
- Corrected STTransform to work correctly when w != 1
- PerspectiveTransform is now just a thin wrapper around AffineTransform. Might just combine these both into MatrixTransform in a future PR.
- Fixed ImageVisual to work correctly in impostor mode when its transforms affect z
- Added a script that I used to test perspective. This will be converted into a unit test with image comparison in a future PR.
- There is a bizarre bug on my machine that I suspect is an OpenGL bug. The console example gives me a warning:

```
INFO: Variable u_scale is not an active uniform
```

This is due to the STTransform map function, which now looks like:

```
        vec4 st_transform_map(vec4 pos) {
            return vec4(pos.xyz * $scale.xyz + $translate.xyz * pos.w, pos.w);
        }
```

If I switch back to the old implementation, the warning goes away:

```
        vec4 st_transform_map(vec4 pos) {
            return (pos * $scale) + $translate * pos.w;
        }
```

I can't see why the $scale uniform would be optimized out of the shader in either case. I'm betting Travis won't have the same error, though..
",34,15,[]
523,32663277,865,8935948,2015-04-06 06:01:10,2015-05-08 16:09:46,closed,Add Colormap support for plot,"Hi,

This PR is for adding Colormap support for plot.

```
cm = Colormap(['r', 'g', 'b'])
data = np.arange(15)
fig = vp.Fig()
fig[0:4, 0:4].plot(data, width=1, color=cm, face_color=cm, edge_color=cm)
```

The code above will show:

![2015-04-06 13 53 20](https://cloud.githubusercontent.com/assets/2117598/7001131/3376b2a8-dc65-11e4-9330-ace8e1280a78.png)
",11,1,[]
524,32646813,864,8935948,2015-04-05 10:10:58,2015-05-24 19:37:49,closed,[WIP] Add more colormaps,"Hi all,

In this branch I will be working on adding some extra colormaps. This should address most of issue #648. Colormaps I would like to add:
- [x] Single Hue
- [x] HSL colormap (sea [seaborn](https://web.stanford.edu/~mwaskom/software/seaborn/tutorial/color_palettes.html) palettes)
- [x] [HUSL colormap](http://www.husl-colors.org/)
- [x] Diverging colormaps
",53,39,['component: color']
525,32643178,863,8935948,2015-04-05 02:52:03,2015-04-05 12:53:02,closed,ENH: Plotting,"Closes #827.
Closes #749.
Closes #680.
Closes #676.
Closes #598.
Closes #443.
",6,16,[]
526,32637474,861,8935948,2015-04-04 18:21:23,2015-04-07 16:31:21,closed,Camera cleanup,"We rushed the volume PR through and let a few things slip. This addresses some of them..
",9,4,[]
527,32635660,860,8935948,2015-04-04 16:17:10,2015-04-07 16:34:43,closed,Scenegraph profiling,"Adds a Profiler class and instruments some visual/scenegraph code. Should add negligible overhead when profiling is not in use. Works like this:

```
# profile a specific code location (comma-separated list)
python example.py --vispy-profile=SceneCanvas.draw_visual

# enable all profilers
python example.py --vispy-profile=all
```
",13,6,[]
528,32590457,858,8935948,2015-04-03 14:04:32,2015-04-03 14:26:09,closed,Consistent use of method,"Rebase of #853, will merge if the CIs are happy
",5,2,[]
529,32568134,857,8935948,2015-04-03 03:31:44,2015-04-03 04:06:56,closed,FIX: Fix silly error,"This should make it so we have fewer strange errors. @campagnola can't replicate, and I'll check on Monday but I doubt I'll be able to either. I think we're probably okay on this one -- I'll merge if Travis comes back happy so that this doesn't impede our progress so much.
",3,1,[]
530,32567416,856,8935948,2015-04-03 03:05:23,2015-04-03 03:39:54,closed,Updated JSON logger,"Squashed #855, will merge if the CIs are happy
",4,1,[]
531,32544506,855,8935948,2015-04-02 19:57:07,2015-04-03 03:05:30,closed,JSON exporter,"This PR has a couple more changes to the JSON exporter, which makes it work with a JSON importer implemented in vispy.js. It is ready for review, then merge.
",13,8,['component: jupyter-widget-backend']
532,32517011,854,8935948,2015-04-02 14:37:42,2015-04-03 03:07:21,closed,Added shader preprocessor in ModularProgram,"- The `#include` preprocessor was only handled on `Program` and not `ModularProgram`. This fixes it.
- `#include` now also searches in a list of paths provided by the list `vispy.config['include_path']`
- Added color space transformation shader in GLSL library
",12,7,"['type: bug', 'component: gloo']"
533,32505209,853,8935948,2015-04-02 12:02:24,2015-04-03 14:26:17,closed,"Consistently use ""method"" instead of ""style"" and ""mode""","Changed mode=>method for line visual and style=>method for volume visual
",9,2,[]
534,32479846,852,8935948,2015-04-02 03:09:11,2015-04-04 03:01:06,closed,Allow setting GL state variables for all visuals,"This adds the methods `Visual.set_gl_state()` and `Visual.update_gl_state()` to let the user change the way GL state is configured by the visual before drawing. This is used to set depth testing, face culling, blend modes, etc. 

Before this PR, visuals completely hide the OpenGL API, so one question is whether we should implement a slightly higher-level API that does not refer to GL at all (but that could be left for a later PR).

Edit by Eric89GXL:
Closes #689.
",14,2,[]
535,32379715,850,8935948,2015-04-01 00:33:11,2015-04-03 13:48:33,closed,ENH: Arcball,"Closes #157.
",29,5,[]
536,32272134,847,8935948,2015-03-30 22:01:17,2015-03-31 07:46:18,closed,FIX: Use info for unset vars,"@rossant happier now? :) This changes the ""unset variables"" and ""not an active uniform/attribute"" to be INFO instead of WARNING level. Note that I did _not_ change the ""invalid command"" warnings to info, since those seem like they really shouldn't occur and would be indicative of deeper problems.
",3,1,[]
537,32261314,845,8935948,2015-03-30 19:58:20,2015-03-31 14:40:50,closed,Glir logger,"This PR implements a Glir logger that logs all Glir commands to a specified file. It is run via ""python vispy --vispy-glir-file=somefile.txt"".
",44,17,['component: jupyter-widget-backend']
538,32246138,844,8935948,2015-03-30 17:01:39,2015-03-30 17:09:42,closed,Fix WebGL notebook examples,"The notebook WebGL examples are broken on master, because of the transform changes. This PR fixes them.

@cgestes can you try it?
",2,2,['component: jupyter-widget-backend']
539,32234107,843,8935948,2015-03-30 14:55:52,2015-04-05 15:17:38,closed,Improve `plot.scatter()`,"Hi,

This PR is referring to `vispy.plot.scatter()`.

It finish three points in #742: 
- Use a white background as a default
- Allow passing an array of scalars for colors, with a colormap
- Choose black `face_color` other than white
",11,7,[]
540,32228231,842,8935948,2015-03-30 13:53:48,2015-04-01 22:34:30,closed,FIX: HiDPI testing,"Closes #789.
Closes #551.

@nippoo can you see if this makes tests pass for you?
",15,6,[]
541,32211117,840,8935948,2015-03-30 09:43:12,2015-03-30 10:29:17,closed,small fix in pyopengl2 gl backend,"This should fix some of the problems in #838

@nippoo Can you check if this helps?
",3,1,[]
542,32196175,839,8935948,2015-03-30 03:37:46,2015-03-30 22:31:58,closed,Optional install requirements,"This adds some Extra requirements, so that one can do something like `pip install vispy[ipython-vnc]` (or some other backend) and the additional dependencies would be installed.

Unfortunately, it seems like PyQt4/5 don't install eggs and don't have proper information on PyPI, so I wasn't able to add the correct dependencies there. I also added some minimum requirements when I could find checks for them, but couldn't see anything describing requirements for all backends.
",9,2,[]
543,32187220,835,8935948,2015-03-29 20:19:38,2015-03-30 10:41:03,closed,FIX: Fix for Windows XP,"Closes #715.

Ready for review/merge, @almarklein might be quickest for you.
",3,1,[]
544,32187015,834,8935948,2015-03-29 20:08:45,2015-03-30 11:20:38,closed,FIX: Minor fixes to GL tutorial examples,"@nippoo can you see if the examples you mention in #806 work with this PR?

Closes #838.
Closes #837.
Closes #806.
Closes #667.
Closes #630.
Closes #576.
",33,10,[]
545,32168113,833,8935948,2015-03-28 17:50:04,2015-03-29 19:04:31,closed,Fixed a TubeVisual bug and rearranged doc,"Previously the tube tangents were calculated assuming the tube was closed, which messed up the first and last tangent values unless they happened to match anyway. The problem is shown in the images below. I also rearranged the doc (and added a missing parameter) to emphasise the main arguments.

Example tubes before this PR:
![tubes_problem_orig](https://cloud.githubusercontent.com/assets/1265819/6882107/b1a926c8-d572-11e4-8b2b-b4b1ec9ef02d.png)

And after:
![tubes_problem_fixed](https://cloud.githubusercontent.com/assets/1265819/6882106/b1a2dfac-d572-11e4-830b-cf7fbf9228cd.png)
",5,4,[]
546,32155484,829,8935948,2015-03-28 00:28:16,2015-06-04 21:32:39,closed,[WIP] Axis Visual,"A framework axis / ticks visual, with example.
",33,13,[]
547,32149609,828,8935948,2015-03-27 22:13:27,2015-03-28 01:04:15,closed,FIX: Minor example fixes,"@nippoo can you see if this fixes #801 for you? It also moves us toward fixing #826, but isn't quite there yet. (I need to do more work on GLFW on OSX to really fix that probably.)
",19,3,[]
548,32145496,826,8935948,2015-03-27 21:13:11,2015-03-27 22:59:35,closed,ENH: Text and console using doc coord sys,"@nippoo see if this works.

Closes #511.
",12,3,[]
549,32138459,824,8935948,2015-03-27 19:38:40,,open,[WIP] Volume rendering in WebGL,"cc @rossant @almarklein 

I've just taken the first steps towards trying to make volume rendering work in WebGL. I've removed the errors that were coming from the emulated 3D texture, as well as those from Almar's volume rendering algorithm. There are still errors though...

@rossant, what I'm getting in the console are:

Error: WebGL: uniform1i: No program is currently bound.
Error: WebGL: drawElements: type must be UNSIGNED_SHORT or UNSIGNED_BYTE

I'm not sure if these are coming from vispy.min or elsewhere. I don't think they are specific to volume rendering though. Any thoughts?
",13,1,[]
550,32138370,823,8935948,2015-03-27 19:37:30,2015-03-27 20:18:36,closed,FIX: Fix missing cameras,"Closes #821.
",1,1,[]
551,32129951,822,8935948,2015-03-27 17:53:11,2015-04-03 02:58:06,closed,WIP: Visual filters and clipping,"- Adds a basic API for attaching a filter to a visual:  `Visual.attach`
- Adds a few simple filters including clipping
- Adds fragment shader-based clipping to ViewBox

Still has a few bugs to work out.
",26,23,[]
552,32123201,817,8935948,2015-03-27 16:34:32,2015-03-27 23:22:54,closed,Glumpy examples,"- [x] Fixed mandelbrot colors
- [x] Added a few functions in geometry subpackage (preparing for #819 which will require some improvements in `vispy.plot`)
- [x] Added quiver example
",17,7,['type: example']
553,32107572,816,8935948,2015-03-27 13:35:49,2015-03-27 15:43:02,closed,Choropleth example,"- Added a `triangulate()` function. It uses the C++ [triangle](https://github.com/drufat/triangle) library if it is available, or it gracefully falls back to the pure Python version otherwise. triangle doesn't work with Python 3, although the master version on GitHub does. I get some stochastic segmentation faults on the tiger example with triangle.
- Will need to use a proper map projection method later.
- Closes #795.

![image](https://cloud.githubusercontent.com/assets/1942359/6870352/cb10bfae-d49b-11e4-8b8e-a7baff2470a8.png)
",3,6,['type: example']
554,32098631,811,8935948,2015-03-27 11:08:06,2015-03-27 15:42:32,closed,Add user guide,"- This is not a full user guide but already a starting point
- This is Markdown because I hate ReST, but if needed it can be converted with `pandoc -f markdown -t rst user_guide.md -o user_guide.rst`
- There are many TODOs that could be tackled later.
- Closes #803
",8,5,['docs-website']
555,32098212,810,8935948,2015-03-27 11:00:19,2015-03-27 13:35:58,closed,[WIP] Added geojson example,"Needs a geojson file.
",1,1,[]
556,32098052,809,8935948,2015-03-27 10:57:20,2015-03-27 12:33:24,closed,Emulated 3D textures,"Someone else should review this, especially the emulated 3D texture and its indexing schemes. It's worth trying for all kinds of crazy max_texture_sizes to make sure everything works. 

@rougier basically wrote the sample, so I'm ccing him here
",3,11,[]
557,32094762,808,8935948,2015-03-27 09:58:59,2015-03-27 12:21:11,closed,"All cameras now handle the ""up"" property correctly","PanZoom can thus operate in any plane, Turntable can be tilted in any plane, and FlyCamera will attempt to re-orient to make up point upward.
",3,5,[]
558,32092844,807,8935948,2015-03-27 09:25:06,2015-03-27 09:53:01,closed,Some collection fixes,,2,1,"['type: bug', 'component: collections']"
559,32076099,805,8935948,2015-03-27 01:10:01,2015-03-27 12:22:05,closed,Made scroll wheel zoom work when fov > 0,"This copies the way right click zooming is handled.
",8,1,[]
560,32073376,804,8935948,2015-03-27 00:03:53,2015-04-05 02:50:50,closed,ENH: Plotting,"Closes #827.
Closes #749.
Closes #680.
Closes #676.
Closes #598.
Closes #443.
",49,17,[]
561,32042984,800,8935948,2015-03-26 17:50:17,2015-04-04 15:45:13,closed,WIP: Collection transforms,"This PR is to merge the vispy transform system functionality into collections.
",40,16,['priority: high']
562,32029763,794,8935948,2015-03-26 15:40:04,2015-03-26 16:36:17,closed,Fix mpl export and camera details,,1,2,[]
563,32023404,793,8935948,2015-03-26 14:40:59,2015-03-27 20:47:12,closed,ENH: Unify transforms,"Closes #97.
Closes #507.

Not ready for merge since it doesn't seem to work quite right yet...
",17,8,[]
564,32020768,790,8935948,2015-03-26 14:14:20,2015-03-26 17:38:41,closed,GLIR objects get deleted on DELETE command. Fixes memory leaking.,,6,3,[]
565,32012733,788,8935948,2015-03-26 12:28:58,2015-03-26 17:24:16,closed,Collections,"This is a port of the collections system from Glumpy. It is mostly independent from the visuals/transforms/shader systems for now.
- Closes #410
- Closes #651
- Closes #705 
- Closes #63 (finally!!)
",10,45,[]
566,32000422,787,8935948,2015-03-26 09:25:48,2015-03-27 10:24:33,closed,Fixes for Retina/HiDPI displays,"A bunch of fixes for HiDPI displays. 
- `physical_size` (i.e. framebuffer size) vs logical `size` concept (currently implemented for GLFW with a fallback in the base backend
- Fixing examples so they don't rely on a resize() event before first draw
- Changing examples to show() only once all variables are initialised (the call to create the canvas is blocking on GLFW / OSX!)

Fixes #779 and #639 
",3,16,[]
567,31996620,786,8935948,2015-03-26 08:15:47,2015-03-26 11:44:06,closed,FIX: Raise error for 64-bit float,"Also contains a minor fix for the downloading. Will ping once the CIs are happy.

Closes #691.
Closes #711.
",6,5,[]
568,31981161,785,8935948,2015-03-26 01:03:53,2015-03-26 11:16:27,closed,"When gloo object dies, delete associated GPU object","This should fix some memory issues.
",9,3,[]
569,31980086,784,8935948,2015-03-26 00:38:17,2015-03-26 01:28:21,closed,Mem,"Correct memory leaks throughout vispy. 
This addresses some of #724 and maybe #735.
",2,6,[]
570,31976238,782,8935948,2015-03-25 23:24:06,2015-03-26 01:23:34,closed,Allow using gloo without vispy.app again,"issues: closes #757

Better error message, and a class to help use gloo without an `app.Canvas`.
",6,2,[]
571,31974333,781,8935948,2015-03-25 22:53:23,2015-03-26 00:42:28,closed,Proposing a bgcolor property for SceneCanvas,"This makes it easier to dynamically change the bgcolor.

Changing one line to two lines in the `__init__` isn't so nice...it could be left as it was and work fine but with very minor code redundancy.
",5,1,[]
572,31960485,780,8935948,2015-03-25 20:04:58,2015-03-25 20:15:38,closed,Fix gallaxy/galaxy.py example,"This should fix master
",0,2,[]
573,31955308,778,8935948,2015-03-25 19:05:15,2015-03-26 09:54:58,closed,Emulated 3D textures,,3,1,[]
574,31953672,777,8935948,2015-03-25 18:47:52,2015-03-25 23:34:04,closed,Convert wx DClick into vipsy_mouse_press events,"Wx converts the second mouse-press into a Click event.

This change converts these DClick events into standard vispy_mouse_press events, so that mouse press events are not skipped
",4,1,[]
575,31953620,776,8935948,2015-03-25 18:47:16,2015-03-26 10:33:28,closed,Volume rendering with colormaps,,7,3,[]
576,31944606,774,8935948,2015-03-25 17:16:30,2015-03-25 19:05:28,closed,Emulated 3D textures,,0,2,[]
577,31934555,773,8935948,2015-03-25 15:40:52,2015-03-25 19:43:10,closed,Error in Mouse handling,"Check before attempting to access attributes of an object that may not exist
",6,4,[]
578,31934288,772,8935948,2015-03-25 15:38:16,2015-03-26 22:04:40,closed,FIX: Uniform array support,"Closes #345.
",8,5,[]
579,31911110,770,8935948,2015-03-25 10:53:05,2015-03-25 18:47:41,closed,[WIP] Volume rendering with colormaps,,0,25,[]
580,31910953,769,8935948,2015-03-25 10:50:53,2015-03-25 22:10:34,closed,FIX: Check vbo size,"Closes #503.

Should be ready for review/merge, but I'll wait until the CIs are happy to ping.
",6,1,[]
581,31845489,767,8935948,2015-03-24 16:44:07,2015-03-24 17:00:02,closed,Move canvas init to end of scenecanvas init,,1,1,[]
582,31845314,766,8935948,2015-03-24 16:42:31,2015-03-26 12:32:27,closed,[WIP] Collections,"~~This needs PR #765 to be merge before going further.~~
",3,29,[]
583,31841545,765,8935948,2015-03-24 16:06:22,2015-03-26 12:08:15,closed,[WIP] Add GLSL library,,1,4,[]
584,31841371,764,8935948,2015-03-24 16:04:55,2015-03-24 17:00:31,closed,Fixed a few examples on OS X,"`self.show(True)` or `app.Canvas.__init__(self, show=True)` should
only be called after the rest of the initialisation code has run.
",1,1,[]
585,31824970,761,8935948,2015-03-24 13:19:22,2015-03-24 14:30:48,closed,FIX: Shorter rep,"Closes #560.

Test code:

```
from vispy.app import Canvas


class MyCanvas(Canvas):
    def on_draw(self, event):
        raise RuntimeError

x = MyCanvas(show=True)
```

Changes this output (`master`):

```
WARNING: Error invoking callback <bound method MyCanvas.on_draw of <Vispy canvas (PyQt4 (qt) backend) at 0x32dd940>> for event: <DrawEvent blocked=False handled=False native=None region=None source=<Vispy canvas (PyQt4 (qt) backend) at 0x32dd940> sources=[<Vispy canvas (PyQt4 (qt) backend) at 0x32dd940>] type=draw>
WARNING: Error invoking callback <bound method MyCanvas.on_draw of <Vispy canvas (PyQt4 (qt) backend) at 0x32dd940>> repeat 2
```

Into this:

```
RuntimeError
ERROR: Invoking <bound method MyCanvas.on_draw of <Canvas (PyQt4) at 0x237abe0>> for DrawEvent
ERROR: Invoking <bound method MyCanvas.on_draw of <Canvas (PyQt4) at 0x237abe0>> repeat 2
```

Ready for review/merge from my end.
",2,1,[]
586,31819570,760,8935948,2015-03-24 12:01:16,2015-03-24 14:08:47,closed,FIX: Minor naming fixes,"Closes #643.
Closes #686.

Ready for review/merge @rossant.
",2,1,[]
587,31681705,756,8935948,2015-03-22 02:16:00,2015-06-02 19:20:00,closed,Added an implicitly connected mesh Visual,"This visual takes x, y and z coordinates of the surface as separate arguments, and assumes they are vertices of a Cartesian lattice mesh. It is intended to make it simple to plot meshes based on e.g. the output of numpy.meshgrid, as is demonstrated in the included example using the visual to plot spherical harmonics. This is inspired by, though simpler than, Mayavi's [spherical harmonics example](http://docs.enthought.com/mayavi/mayavi/auto/example_spherical_harmonics.html).

I hope I didn't miss this functionality being already somewhere in vispy, but I couldn't find it. I think it's ultimately likely to be useful in a higher level plotting interface - I use this functionality quite frequently in mayavi.

There are some questions about the implementation, particularly how to interpret colors. My view is coloured by ultimately wanting a colormap system as in mayavi, but I guess this would again be part of a higher level plotting function. Anyway, I'm submitting it now to see if you think it's suitable for vispy.

Below is a screenshot of the included example. The lighting seems a little off, but I don't think it's a problem with the mesh. It also takes a couple of seconds to initialise, but (although I haven't looked in detail) the delay doesn't seem to be in the mesh construction but sometime after the window initialisation - is there a way to improve this?

![implicit_mesh_example2](https://cloud.githubusercontent.com/assets/1265819/6767714/fdba6b42-d038-11e4-9086-b44f694a88ba.png)
",16,0,[]
588,31308355,751,8935948,2015-03-17 05:29:10,2015-03-18 20:09:52,closed,Fix vispy.plot.image fails on float64 textures,"Fix #750 
",9,5,[]
589,31237107,746,8935948,2015-03-16 12:01:57,2015-03-26 01:01:10,closed,Less sensitive zoom in PanZoom camera,"This might be a personal taste, but I find the current PanZoom camera's drag zoom way too much sensitive.
",3,1,"['type: enhancement', 'component: scene']"
590,31205570,745,8935948,2015-03-15 19:27:57,2015-03-16 00:58:15,closed,"fix scaling - scale around center, not right end of signal","fix (issue #581) 
",2,1,[]
591,31204767,744,8935948,2015-03-15 18:39:35,2015-03-26 14:57:27,closed,allow LinePlotVisual.set_data(..) to only recieve keywords,"fixing [feature request](https://github.com/vispy/vispy/issues/718)

Allow `LinePlotVisual.set_data` without having to specify the position  
",12,1,[]
592,31203941,743,8935948,2015-03-15 17:47:31,2015-03-16 21:09:42,closed,added hsv parameter to ColorArray,"implemented the [feature request](https://github.com/vispy/vispy/issues?q=hsvis%3Aissue+is%3Aopen+) to allow hsv parameters to `ColorArray`

closes #692
",9,4,"['type: enhancement', 'component: color']"
593,30895058,740,8935948,2015-03-10 21:36:31,2015-03-11 01:17:52,closed,add support to run individual examples into the testing framework,"you can invoke it in two ways:
##### this will invoke all the examples

```
python make test examples
```
##### this will invoke only the 3 examples passed

```
python make test examples examples/demo/gloo/mandelbrot.py  examples/demo/gloo/graph.py examples/demo/scene/magnify.py 
```

Hope this is okay.
If there are any changes that need to be done, please do tell me
",16,5,[]
594,30711000,738,8935948,2015-03-07 23:04:00,2015-03-11 21:03:26,closed,Galaxy demo,"Ported the [Galaxy demo from glumpy](https://github.com/glumpy/glumpy/blob/master/examples/galaxy.py) to `VisPy`

This depends on the 1D sampler implemented [in this pull request](https://github.com/vispy/vispy/pull/737). So please make sure to pull that first before merging this example change.

I've tried to comment the example as meaningfully as possible so that the code is easy to follow.

Images:
![#1](http://i.imgur.com/LPS2PsO.png)
![#2](http://i.imgur.com/Y6K5uDj.png)
![#3](http://i.imgur.com/9lB9lN6.png)
![#4](http://i.imgur.com/X2qff6l.png)
",40,4,['type: example']
595,30708503,737,8935948,2015-03-07 20:07:33,2015-03-09 19:58:04,closed,Implement a 1d sampler using pyopengl,"So, I implemented a 1d sampler similar to the already existing 3d sampler in the codebase by accessing `pyopengl`. There a lot of layers and moving parts, so I'm not sure if I missed something in my implementation.

I also had to manually extract the constants `GL_TEXTURE_1D` and `GL_SAMPLER_1D`. I'm assuming that they were not listed in `_constants.py` since they're not `GLES2.0`? Either way, I'm not too fond of the current **extremely** hacky solution I came up with. Would love a nicer solution
",6,4,[]
596,30514258,734,8935948,2015-03-04 23:05:18,2015-03-30 14:15:18,closed,ipython: load js the IPython 3 way,"no more js injection.
",30,14,"['type: enhancement', 'component: jupyter-widget-backend']"
597,29855898,731,8935948,2015-02-23 23:13:18,2015-03-09 16:37:12,closed,Added TubeVisual for an extruded tube about a set of points,"This PR adds a TubeVisual, which takes a set of points and creates a tubular mesh about them.

I took the algorithm (and initial implementation) from three.js. It solves most of the problems that are naturally encountered, such as making sure the mesh parameterisation rotates neatly about the curve at intersections, and spreading accumulated twisting across the curve if it is closed.

There are still some problems and bugs - in particular, the color argument doesn't work (if I pass it to the constructor, I get gloo errors), nor does the face_colors (just seems to do nothing, maybe I don't understand how to use it), and some of the maths can be further vectorised. There are also questions about the API - I have in mind that I mostly want to plot a set of points and a colour at each point, hence the colors argument, but I'm not sure what the vispy philosophy is for it. Maybe it should be more mesh focused and the color stuff go in a higher level wrapper.

It seems to basically work though, so I'm creating this PR to hope for feedback on whether it's appropriate, and any major changes that should be made.

Edit: Here is a screenshot of the included example:

![tube_example_reference2](https://cloud.githubusercontent.com/assets/1265819/6339944/5aff4e9e-bbb2-11e4-82b5-acafe7d04918.png)
",23,43,['component: visuals']
598,29788697,730,8935948,2015-02-23 06:34:17,2015-03-03 19:40:44,closed,Add plot.scatter,"Hello all,

I just made a prototype for scatter().

**Bug below has been fixed**

It works but there is still a problem that we need to zoom or change the view to see all points.

If you run the code below:

``` bash
>>> import vispy.plot as pl
>>> pl.scatter([1, 2, 3, 4])
```

The pic that we want to get is:
![2015-02-23 14 18 02](https://cloud.githubusercontent.com/assets/2117598/6323573/b3ddd7c4-bb67-11e4-9ea3-f80dc431bc02.png)

but we get:
![2015-02-23 14 17 05](https://cloud.githubusercontent.com/assets/2117598/6323576/c367e86a-bb67-11e4-85c9-33d021676729.png)
",22,8,"['type: enhancement', 'component: plot']"
599,29752839,729,8935948,2015-02-21 12:07:36,2015-03-26 01:00:37,closed,FIX: Fix circular references,"@ZuchaoWang can you try this? It helps points 1) and 2) from #724 for me.
",9,4,[]
600,29583885,728,8935948,2015-02-19 02:57:08,2015-02-19 10:05:29,closed,FIX: Fix example,"Fixes the shared context example. Ready for review/merge.
",1,1,[]
601,29499267,727,8935948,2015-02-18 03:41:23,2015-02-18 10:22:10,closed,FIX: Minor fixes,"Should make Travis happy again.
",4,1,[]
602,29494188,726,8935948,2015-02-18 01:21:18,2015-02-24 01:08:30,closed,More minor vispy.geometry fixes,"I ran into another issue with vispy.geometry on 64-bit python (specifically when creating a MeshData from unindexed vertices), so I went ahead and made all the implicit-width datatypes 32-bit (haven't run into any issues yet).

I also exposed the create_cone function, so all the .generation.create_ methods are now exposed in vispy.geometry with similar default parameters.
",6,4,[]
603,29240965,723,8935948,2015-02-13 05:15:20,2015-02-18 10:03:20,closed,ENH: Simple marker test,"This will help us know whether or not point sprites are working for people.
",6,2,[]
604,29231320,722,8935948,2015-02-13 00:46:23,2015-02-15 05:36:24,closed,Minor fixes for vispy.geometry,"Two minor fixes for vispy.geometry:
1) Changed create_cylinder and create_cone to explicitly set the face array datatype to np.uint32, matching the behavior of create_sphere (N.B. np.uint defaults to np.uint64 on some systems, which breaks these functions)

2) Expose the create_arrow as an external method of the geometry module, matching the behavior of the other .create_ methods.
",7,3,[]
605,29027997,720,8935948,2015-02-10 17:41:41,2015-02-11 10:02:22,closed,FIX: Update for new pep8,"@almarklein ready for review/merge assuming Travis is happy. The PEP8 program was updated with new rules, and this ignores one of them and brings us into compliance with the others.
",5,1,[]
606,28823118,719,8935948,2015-02-06 16:49:40,2015-02-06 17:41:35,closed,Corrected improper use of Color.is_blank  (fixes scene/viewbox example),"Ready for review/merge.
",10,3,[]
607,28303577,717,8935948,2015-01-29 18:43:52,2015-01-30 09:43:04,closed,"ENH: Always on top, remove GLUT","Adds always-on-top support. It also removes GLUT, which is nice because it cleans up a bunch of exceptions and not-well-tested code we had. I think we should be okay because we support many other backends, including pure-python solutions (e.g., Pyglet).

Closes #716.
",5,2,['component: app']
608,28139936,714,8935948,2015-01-27 20:05:16,2015-03-26 16:15:01,closed,Added panning to TurntableCamera with right click,"See the following image to visualize the vectors used in the code:
![](http://2.bp.blogspot.com/_ltmZpULxXtI/TSZll_0SASI/AAAAAAAAAeY/nal05L9OOm4/s320/gluLookAt_camera.png)

This works by computing the `up` and `right` vectors of the camera in world coordinates, and then mapping the change in mouse position from pixels to vectors in the world coordinates. The camera center is then translated using these vectors. This makes the motion fell very fluid, because a point under your mouse stays under your mouse.

Note that I can't figure out how to do this reliably with a perspective projection yet. The orthographic projection actually made this fairly easy, since `camera.width` gives you the screen width in world coordinates. (I also feel like the mouse wheel should change `distance` in a perspective view, and not `fov`. I get weird clipping when I zoom all the way in or all the way out. I know in pyqtgraph that `fov` would be changed if you hold down Ctrl and use the mouse wheel.)

I think we can abstract the panning calculation into a function, and maybe call it `pan_pixels`. The function would accept what is now `dx` and `dy` in the pull request code. I don't want users to confuse it with a function like `pan` that would simply modify the `center` coordinates directly using world coordinates.
",7,1,['component: scene']
609,27932482,713,8935948,2015-01-23 15:43:44,2015-01-23 17:45:20,closed,Add HSV<->RGB GLSL functions,"Closes #416.
",11,3,"['type: enhancement', 'component: color']"
610,27929639,712,8935948,2015-01-23 15:06:56,2015-01-23 15:41:33,closed,Bump VisPy version,"To 0.4.0-dev. The current indicated version (0.3.0) is wrong...

Closes #688.
",6,1,['build']
611,27688080,710,8935948,2015-01-20 15:56:46,2015-01-20 16:38:27,closed,Fixed colormap example notebooks,"- Upgraded notebook to IPython 3.0
- Renamed `discrete` to `zero` in the notebook examples
- Fixed minor issue in colormap linear interpolation error message

Ready to merge.
",0,1,[]
612,27679743,709,8935948,2015-01-20 14:09:46,2015-01-20 15:23:13,closed,Update the ipynb examples to IPython 3.0,"- Updated the example notebooks from nbformat 3.0 to 4.0
- These examples require IPython 3.0

Ready to merge asap.
",4,1,"['type: bug', 'component: jupyter-widget-backend']"
613,27668204,708,8935948,2015-01-20 10:46:33,2015-01-20 15:15:17,closed,Remove extra argument in _fetch_file's docstring,,2,1,[]
614,27607591,707,8935948,2015-01-19 13:45:18,2015-01-19 20:05:35,closed,Fixed typo in documentation.,,1,1,[]
615,27576684,706,8935948,2015-01-18 20:47:04,2015-01-26 15:02:27,closed,ENH: Improved testing,"We'll see if Travis and AppVeyor are happy. Tests pass on my Windows machine.
",4,6,[]
616,27463220,704,8935948,2015-01-15 21:21:49,2015-01-18 18:23:17,closed,Markers,"@lcampagn this should take care of the final few comments from #654. If you're happy now, go ahead and merge (Cyrille and I reviewed the version through @bdurin's last commit).
",1,13,"['type: enhancement', 'component: visuals']"
617,27454842,703,8935948,2015-01-15 19:27:35,2015-01-15 19:55:01,closed,FIX: Flakify,"In my push to merge PRs, I merged too quickly, necessitating another PR :)

Ready for merge once Travis and AppVeyor come back happy.
",0,1,[]
618,27442824,701,8935948,2015-01-15 16:47:43,2015-01-15 17:23:54,closed,Getting rid of on_initialize in the examples,"Close #700.
",8,6,"['type: enhancement', 'type: example']"
619,27428547,698,8935948,2015-01-15 13:38:02,2015-01-17 22:38:42,closed,Improve WebGL backend,"Done:
- Improved JavaScript loading, using [browserify](http://browserify.org/) instead of requireJS
- Better handling of removed widgets
- VisPy timers are automatically stopped when a widget is removed

Caveats:
- Need to get rid of `on_initialize()` once for all, otherwise weird bugs occur with auto-starting timers in the notebook (I'll raise an issue)
- Doing `canvas.show()` several times with the same `Canvas` instance does not work. Users need to recreate the canvas explicitely. This needs to be clear in the documentation. Solving this would require a GLIR cache: possible in the future, but pretty low priority. The current behavior is good enough in my opinion (basically we have to make sure to create a new canvas in the same cell that we show it).

Tackle some of #607 (not all)
Close #615 (no need for a GLIR cache for now)
",11,6,"['type: enhancement', 'component: jupyter-widget-backend']"
620,27351711,697,8935948,2015-01-14 14:08:08,2015-01-14 18:08:13,closed,Add IPython version check in WebGL backend,"This fixes the WebGL backend which is currently broken with IPython 3.0.dev.

IPython 3.0 installs nbextensions in a system-wide directory by default. VisPy will install the nbextensions in a user directory to avoid permissions errors.

Ready for review/merge.
",2,2,"['type: bug', 'component: jupyter-widget-backend']"
621,27312917,696,8935948,2015-01-13 22:58:35,2015-01-30 18:46:29,closed,add optional 'internalformat' parameter to Texture2D and Texture3D,"When constructing or resizing textures, allow internalformat to be specified if the application needs to control precision or representation of texture storage.

   gloo.Texture3D(..., internalformat='rgba8')
   tex.resize(..., internalformat='rgba8')

Accept lower-case strings similar to the existing 'format' argument, including the same generic values as 'format' ('luminance', 'alpha', 'luminance_alpha', 'rgb', 'rgba').

Allow these precision/type suffixes: '8', '16', '16f', '32f'. Allow these base formats with precision suffixes: 'r', 'rg', 'rgb', 'rgba'. For example, 'rgb32f' means GL_RGB32F.

When keyowrd argument is omitted, internalformat is chosen based on number of channels and precision is left unspecified so the backend or OpenGL driver can chose an appropriate default.
",71,31,"['type: enhancement', 'component: gloo']"
622,26907682,695,8935948,2015-01-06 18:31:45,2015-01-15 17:22:49,closed,FIX: Fix glfw on Travis,,9,2,['build']
623,26848500,694,8935948,2015-01-05 20:27:44,2015-01-06 18:05:36,closed,New wx_panel backend to embed a Canvas in a wx.Frame,"NOTE: I don't actually expect this to be merged! I'm just showing what I had to do to get a vispy canvas embedded in a wx GUI.

But as I said on the vispy mailing list, I'm just starting out here and don't know much about vispy yet. But because the normal wx backend was subclassed from wx.Frame, it can't be embedded in a complex wx GUI because wx.Frame objects are always top level windows. Here, I subclass from wx.Panel which can then be included in a window with e.g. a menu bar.
",21,8,[]
624,26722817,687,8935948,2014-12-31 12:18:06,2015-01-03 15:33:32,closed,Update WebGL event loop,"Minor changes in the WebGL event loop required for benchmarking the IPython backend.
",7,1,[]
625,26209483,678,8935948,2014-12-17 09:10:06,2015-01-06 23:33:12,closed,Fallback on xrandr to get linux DPI info.,"xdpyinfo is not always available on Linux (even with a DE), whereas
xrandr is (AFAICT) at least dependency of KDE and XFCE.  But xrandr
fails when used remotely, so keep it too.
",7,1,[]
626,25809408,674,8935948,2014-12-10 09:48:22,2014-12-11 00:28:57,closed,glir: Don't draw when count is zero,"Fixes issue #661 

cc @lcampagn 
cc @rossant maybe you need something similar in vispy.js
",4,1,"['type: bug', 'component: gloo']"
627,25784310,673,8935948,2014-12-09 22:50:45,2014-12-14 14:57:46,closed,ENH: py.test,"Moving us toward py.test use

Closes #655.
",13,8,['build']
628,25760276,672,8935948,2014-12-09 17:20:12,2014-12-10 19:00:33,closed,ENH: Add size test override,"This could be helpful for us when merging big PRs. If `[size skip]` is found in the latest commit message (modeled after the Travis `[ci skip]`), then the vispy size check should be skipped. I'll add a 100k+ file to test it out, and if people are happy with the funciton once it works, I'll squash it out.
",16,1,['build']
629,25748225,670,8935948,2014-12-09 14:53:40,2014-12-10 09:48:53,closed,Raise error when buffer gets data of size zero,"Fix #661 
cc @lcampagn 
",9,1,['type: bug']
630,25623566,668,8935948,2014-12-06 20:50:43,2014-12-09 15:08:23,closed,ENH: Use Mesa on Appveyor,"I compiled a Mesa win32 OpenGL DLL, maybe I can get it to work so we can run more comprehensive tests.
",17,14,['build']
631,25619223,666,8935948,2014-12-06 14:07:48,2014-12-07 21:56:39,closed,Fix Warning from Text Visual (OSX),"When running the Text example, it displays a warning twice (one for each visual):

```
python3.4 examples/basics/scene/text.py
WARNING: Program has unset variables: {'u_texh', 'u_step', 'u_texw'}
```

This patch includes the fix.

EDIT: This works on OSX but apparently the tests fail on Linux.  Cross platform issues?
",7,2,"['type: bug', 'component: visuals']"
632,25616083,665,8935948,2014-12-06 07:27:44,2014-12-08 18:33:41,closed,Fix GLFW Fullscreen Canvas Crash,"Closes #664.

Changes were selectively copied from the original file, also I needed an additional `.contents` dereference.
",19,5,"['type: bug', 'component: app']"
633,25545122,662,8935948,2014-12-05 02:09:29,2014-12-05 02:33:37,closed,ENH: Add Appveyor status,"Adds badge, ready for review/merge.
",2,1,[]
634,25504142,660,8935948,2014-12-04 15:34:56,2014-12-04 21:08:51,closed,Saving and restoring cwd in GLFW backend.,"Ready for review! Closes #659.
",3,5,[]
635,25502489,658,8935948,2014-12-04 15:13:40,2014-12-04 18:12:37,closed,Fixed two bugs:,"- Markers.set_data() calls self.update()
- QtCanvas.update() calls self._canvas.update()

Ready for review.
",6,1,[]
636,25486418,657,8935948,2014-12-04 10:38:23,2014-12-08 19:57:45,closed,Python/IPython InputHook Integration & Interactive Mode,"First pass integration with iPython 3.x. A new InputHook is defined for VisPy, and it can be enabled from a magic command or by calling the enable_gui() function. A demo is also included.

Caveats:
- It only works with iPython 3.x, I had to get the master repository from GitHub.  This version has many more features for writing input hooks, and the old 2.x API is deprecated.
- I copied some of @rougier's code and used the same documentation.  I guess this needs to be formatted to VisPy's guidelines?

The demo `interactive.py` enables the input hook manually, but I wonder if this should be auto-detected somehow?
",47,17,['component: app']
637,25475413,656,8935948,2014-12-04 06:08:43,2014-12-05 01:51:51,closed,WIP: Add appveyor for windows CI,"WIP, we'll see if Appveyor is happy about this.
",11,6,[]
638,25307597,654,8935948,2014-12-01 23:26:51,2015-01-15 21:20:32,closed,Marker Visual,"Remark: the purpose of this pull request is to prepare a much more interesting pull request where I implemented a simple abstract renderer for markers (which explain why I became maniac on marker and edge sizes)
- corrected GLSL function for markers where some key points are defined relative to fragment size instead of being
  defined relative to marker size $v_size: the defaults were visible in the demo/gloo/how_markers.py example on the
  clobber marker that was kind of dislocating when becoming too small; they could be seen also as deformation of
  bars or cross markers when displayed at very different sizes.
- changed frag rendering so that the size of the marker is the guaranted size in pixel of the face. The edge is
  now outside the face and if too small will be mixed with face antialiasing or not displayed if below 1/10th pixel wide
- added marker function rescaling so that the edge have the same width for the same edge_width parameter whatever
  the marker (and as far as I checked the edge width is exactly edge_width wide in pixels) and whatever the part
  of the marker (before tailed_arrow had a wider edge on the tail than on the arrow)
- added very common markers triangle up and down and star (at least in matplotlib) and changed the total size of the
  fragment in vert and frag for the edge to be rendered correctly
- added a RescalingRelativeEdgeMarkerVisual that rescales as the scene is rescaled (see the added example below)
  and for which edge is expressed as a fraction of the marker size
  This new marker visual can be used with all markers and rescale the whole marker as the minimum of x and y rescaling.
- added a RescalingXYRelativeEdgeMarkerVisual that is similar to the previous one but rescale independently in the x
  and y directions. It works only with specific markers called markersxy which are defined for arbitrary x and y sizes
  ($v_size becomes a vec2). Some of these markers keep a 1:1 aspect ratio (called square markers), using only the min
  or the max of the x and y size. The others used both sizes (hbar, vbar, cross, x, rect and ellipse). Note that the
  distinction between hbar and vbar does not much sense because of the 2 sizes but is kept for the moment.
  Ellipse marker code may seem complicated but the key problem is to correctly rescale the function so that the edge
  width is regular around the perimeter of the ellipse. The correct rescaling is given by the gradient of the level set
  defining the marker (the marker function in the code) taken at the point on the ellipse for which the normal goes
  through the point currently considered in the fragment shader. I could not find a way to keep the code of this
  computation siple so I used an approximation: the point on the ellipse is the point corresponding to the hyperbola
  constant coordinate in elliptic coordinate system (http://en.wikipedia.org/wiki/Elliptic_coordinate_system).
  It's much simpler to compute and the result is nice looking (you can see some defaults by rescaling the ellipse so
  that it has a large size and is almost flat).
",92,11,"['type: enhancement', 'component: visuals']"
639,25217171,653,8935948,2014-11-29 00:46:20,2014-12-10 23:56:37,closed,Glir queue refactoring,"Closes #623 

This implememts:
- gloo objects are associated when used, rather than on intialization\* 
- There is a `Canvas.context` property which gives access to the GL functions.
- The `canvas.context.glir` is the glir queue for a canvas.
- The `canvas.context.shared' is used by backends to share objects, and also contains the glir parser.
- The `canvas.gloo` and `canvas.glir` are removed.
- The old `vispy.gloo.clear()` also still works; it uses whatever canvas is current at that time. Maybe we should deprecate this. At least discourage it.
- Only one example uses `canvas.gloo`. We should probably modify all to do so.

More on queues: each canvas has a glir queue on its context. There is no shared glir queue. Further, each gloo object has a glir queue too. Glir queues can be associated with other queues (e.g. `program.glir.associate(texture.glir`) so that when the queue gets flushed, the queues of its ""dependencies"" are flushed as well. This approach makes it possible to associate queues as late as possible, while objects can also be shared (e.g. a texture is associated with both a program and frame buffer). 
",81,6,"['type: enhancement', 'component: gloo']"
640,25049395,645,8935948,2014-11-25 23:25:03,2014-12-04 17:47:40,closed,Improve color package and add colormaps,"- [x] implement `get_color_dict()`
- [x] `LinearGradient` to have a default `x` argument (linearly spaced with `np.arange()`)
- [x] `get_colormaps()` to return the list of color maps
- [x] implement `ColorArray._repr_html_()` to display a color array in the IPython notebook
- [x] implement `nearest` interpolation in NumPy and GLSL
- [x] refactor in different files
- [x] add an example notebook with many colormap examples

![image](https://cloud.githubusercontent.com/assets/1942359/5209124/2bac3536-75bb-11e4-92c3-fbcb0354d810.png)

Close #413. Closes #414. Closes #646. To be continued in #648.
",68,33,"['type: enhancement', 'component: color']"
641,24897175,640,8935948,2014-11-23 03:35:28,2014-11-24 15:29:09,closed,examples: fix mpl_plot.py when run as script,"This should close vispy issue #631.
",2,1,[]
642,24887364,639,8935948,2014-11-22 11:10:59,2015-03-24 15:15:28,closed,Fixing GLFW Tests & Support for Retina Devices,"(This pull request is not ready to merge yet, but is intended to continue the discussion of #551 specifically for the GLFW use-case and fixing the tests.)

Currently with GLFW, the tests fail on Retina displays:

```
======================================================================
FAIL: Test drawing to a framebuffer
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""vispy/gloo/tests/test_use_gloo.py"", line 43, in test_use_framebuffer
    assert_equal(c.size, shape[::-1])
nose.proxy.AssertionError: Tuples differ: (600, 200) != (300, 100)

First differing element 0:
600
300

- (600, 200)
?  ^    ^
+ (300, 100)
?  ^    ^
```

Based on @lcampagn's comment: assuming `canvas.size` should return the window size, I tried changing the GLFW backend to return WindowSize instead of FrameBuffer size in both `_vispy_get_size` and `_on_resize`, that fixes all the tests.  (See the diff.)

Now, however, the rest doesn't work and the viewport (in particular) seems wrong.  This is the problem, I think:

```
vispy.gloo.set_viewport(0, 0, *event.size)
```

Should I pursue this direction?  How easy will it be to handle the glViewport sizing in a retina friendly way?  I'm starting to think it'd be easier for `canvas.size` to return the full retina framebuffer size and have a separate call for the window size.
",23,1,['type: bug']
643,24878684,638,8935948,2014-11-22 00:02:56,2014-11-22 00:41:13,closed,STY: Minor fixes,"Somehow these got past me in the last merged PR; I thought I checked Travis but I didn't. CC @alexjc, we try to follow (most) PEP8 rules.
",4,1,[]
644,24872447,637,8935948,2014-11-21 21:58:03,2015-01-15 21:10:01,closed,Scenegraph benchmark,"WIP: This PR adds a benchmark example for comparing scenegraph performance to similar optimal implementations. 

The intent is to add more benchmark examples and optimizations until we get comparable performance (or decide that we will never get comparable performance).
",29,15,"['component: scene', 'priority: high', 'type: performance']"
645,24864758,636,8935948,2014-11-21 19:56:09,2014-11-21 21:52:43,closed,MarkersVisual supports unique marker colors for edges/faces passed as numpy array.,"Individual markers inside the MarkersVisual can now be given a unique color for both edges and faces.  If the user uses a numpy array, this is passed to a ColorArray, otherwise it's assumed to be a simple Color as before.

@Eric89GXL reviewed a previous iteration in #633 and suggested the ColorArray.
",9,6,[]
646,24852612,635,8935948,2014-11-21 16:51:16,2014-11-21 18:28:05,closed,Adding support for specifying the border width in PolygonVisual.,"Picking up from #633 that was submitted from an incorrect branch.

No changes have been made since the review by @lcampagn.
",1,1,[]
647,24795107,633,8935948,2014-11-20 20:29:04,2014-11-21 16:43:43,closed,Adding support for specifying the border width in PolygonVisual.,"Small feature I found useful while working with VisPy.  This is my first pull request to the project, if you have any general guidelines let me know!
",11,1,"['type: enhancement', 'component: visuals']"
648,24540548,629,8935948,2014-11-17 14:58:06,2014-11-17 17:17:22,closed,WebGL update: fix vispy.min.js,"Ready to merge asap (fix the JavaScript code).
",1,1,[]
649,24500978,627,8935948,2014-11-16 11:37:26,2014-11-27 17:43:25,closed,New PanZoom linear transform,"This PR brings a `PanZoomTransform`, similar to `STTransform`, but lighter, restricted to 2D, and with a different transform order.

Also, this transform can be used like this:

``` python

pz = PanZoomTransform()

# Declare that pan and zoom are uniform variables
pz.pan = Variable('uniform vec2 u_pan', (0, 0))
pz.zoom = Variable('uniform vec2 u_zoom', (1, 1))

# Update the uniform values efficiently and intuitively
pz.pan = (1., 0.)
pz.zoom *= 2.
```
",13,1,['component: visuals']
650,24500359,626,8935948,2014-11-16 10:17:13,2014-11-22 16:51:31,closed,Started GLSL snippet library,"Started a library of common GLSL functions in `vispy.visuals.shaders.snippets` (is that too deep?).

Every Python module defines constants with strings of GLSL that can be readily used with the shader composition system in `vispy.visuals.shaders` (including template variables). There is extensive documentation for each snippet (input, output, template variables).

The current PR only implements a single GLSL function, but many more could be added later.

Ready for review/merge.

Closes #162.
",21,3,"['type: enhancement', 'component: visuals']"
651,24500170,625,8935948,2014-11-16 09:52:55,2014-11-17 10:59:02,closed,WebGL updates,"- [x] Fixed modifiers
- [x] Fixed context stuff after #620 has been merged

Ready to review/merge.
",3,3,"['type: bug', 'component: jupyter-widget-backend']"
652,24499321,624,8935948,2014-11-16 08:01:01,2014-11-17 01:25:27,closed,fix building of website,,3,1,[]
653,24488101,622,8935948,2014-11-15 11:29:04,2014-11-15 11:58:24,closed,Remove #version directive in shaders,"Closes #621.
",2,1,"['type: bug', 'component: visuals']"
654,24453033,620,8935948,2014-11-14 16:33:50,2014-11-15 13:08:47,closed,Glir queues at Canvas instead of Context.,"Whole system is more canvas-centric. There is a notion of an active canvas and canvasses make themselves active and deactive at the right moments so that gloo objects gets associated with the right canvas in an intuitive way.

Fixes #617 and fixes #600
",14,3,"['type: enhancement', 'component: gloo']"
655,24433243,618,8935948,2014-11-14 10:44:53,2015-01-18 05:46:16,closed,Removed closeEvent for qt backend,"Opening this PR for discussion:

When a canvas is closed using the Qt backend, it should be possible to show the canvas again by calling `show()` on it. It should only be closed permanently if the user requests that or if the canvas is collected.
",14,1,"['type: enhancement', 'component: app']"
656,24292945,616,8935948,2014-11-12 13:46:50,2014-11-15 16:49:55,closed,Support binary WebSocket in the WebGL backend,"The goal is to transfer NumPy arrays more efficiently from Python to the browser (only `DATA` GLIR commands). This is only possible in IPython >= 3.0dev ([link to the IPython PR](https://github.com/ipython/ipython/pull/6110)).

This PR should be ready for review/merge. Binary buffers are disabled for now; let's wait for the IPython 3.0 release to activate them by default (with base64 fallback if IPython < 3.0). This PR mainly implements a refactoring of the serialization logic for the GLIR commands, separating the buffers in an external object (necessary when using binary buffers).
- [x] Refactor serialization logic in a new module in `util`.
- [x] Use Comm send method to send binary buffers.
- [x] Test in IPython 3.0dev.
- Implement binary WebSocket by default unless IPython < 3.0, in which case fallback to base64 (to do in a later PR).
- There is a bug when binary WebSocket is activated and timer autostart is on (to do in a later PR).
",10,9,"['type: enhancement', 'component: jupyter-widget-backend']"
657,24282455,614,8935948,2014-11-12 10:22:52,2014-11-12 16:56:01,closed,Added new WebGL demo,"WebGL molecular viewer in the notebook.
[Video demo here](https://www.youtube.com/watch?v=4fnheP83pzY).

Ready to review/merge.

![Screenshot](https://cloud.githubusercontent.com/assets/1942359/5008634/b24c9eea-6a5e-11e4-8706-a9d4004f023b.png)
",5,1,"['type: example', 'component: jupyter-widget-backend']"
658,24099601,613,8935948,2014-11-08 09:52:16,2014-11-11 23:28:19,closed,Fix mandelbrot zooming on mouse scroll.,"Trying to scroll with the middle button of the mouse returns an error  

```
 ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
```

With this patch the example works as expected. 
",3,2,[]
659,24098398,612,8935948,2014-11-08 07:23:46,2015-03-25 17:47:02,closed,WIP: Volume rendering & camera changes,"This PR implements volume rendering. It's basically a port of the technique that I use in Visvis.
- New Volume visual with two rendering styles (iso and mip). 
- Volume example in examples/scene/volume.py Try it, and use the keys to switch cameras etc.
- Refactored cameras a bit in general
- Refactored TurnTableCamera: no more mode and distance. You can just change the fov while getting the same zoom level. Setting fov to 0 means orthographic. Zooming is done by moving camera backward.
- New FlyCamera to fly around your data. 

This is about ready. There are more things to do, but that can be picked up in another PR. (I added todo items for this in volume.py)

I wish to do more with the camera's, but we should probably discuss this first. Will make a new issue for this.

todo:
- [x] avoid warning when swithching render styles
- [x] camera's

closes issue #725

![volume](https://cloud.githubusercontent.com/assets/1942359/5230818/8495b5ec-772c-11e4-8560-d2ac7f393b22.png)

Closes #725
",86,27,"['type: enhancement', 'component: visuals']"
660,24062492,611,8935948,2014-11-07 16:05:52,2015-03-25 11:57:00,closed,Visual tutorial,"WIP: a set of tutorials that cover the basics of writing Visual classes:
- Using doc coordinates to make physical measurements
- Using framebuffer coordinates for antialiasing
- Using inverse transforms from the fragment shader
- Determining the camera direction (for material shading, volumes, etc.)

Presently I am hung up trying to fix some issues with the camera and projection transforms. 
I'd be glad to take requests for other tutorials..
",14,14,"['type: example', 'component: visuals']"
661,23448045,604,8935948,2014-10-28 11:00:46,2014-11-05 17:49:39,closed,frustrum transform: add explicit float conversion to avoid integer division,"I came across this minor issue when I got unexpected results when passing integer arguments to the perspective transform function.
",3,2,['type: bug']
662,23432253,603,8935948,2014-10-28 03:21:49,2014-11-05 03:57:49,closed,Fix shader recompile issues,"This is WIP and currently fixes #602.

Another issue is at `scene/cameras/cameras.py` line 443: 

```
tr = viewbox_tr * proj_tr * cam_tr
```

This line creates a new transform every time it is run, thus triggering a recompile downstream for any visuals in the scene.

Also fixes #605.
",9,11,[]
663,22995283,597,8935948,2014-10-20 06:39:55,2014-10-20 10:05:01,closed,Add support for real ES 2.0 (alt PR),"This is an alternative PR to #593 which is fully squashed just to see the size difference.
- rename angle to es2 and implement for Linux
- add dummy backend (each function raises error)
- Gloo initialize (for desktop/es2) compat implemented better
- gloo.gl handle desktop/es2 compat in GLIR
- Compat for initializing point sprites for desktop.
- Compat for modifying shading code.
- Program can now read variables with precision qualifiers.
- Qt now supports EGL on Linux. We can run real ES 2.0!
",5,1,[]
664,22971447,593,8935948,2014-10-18 19:02:20,2014-10-21 23:16:22,closed,Real es2,"This PR makes the Qt backend suitable for creating an EGL context, and adds the es2 gl backend. Together, this makes that we can now render using real OpenGL ES 2.0. The GLIR layer now takes care of the incompatibilities, like adding a `#version` pragma, adding precision qualifiers for ES2, removing precision qualifiers on desktop.

Having ES2 brings a couple of advantages:
- We can test visualizations on real ES 2.0 (in case something does not work on WebGL, its easier to track why)
- With minor modifications, vispy can run (efficiently) on the Raspberry pi
- ES2 (via Angle) provides a very robust GL implementation on Windows. 

What we still need to do (but not necessarily in this PR):
- make all examples work with ES2
- documentation on how to write GLSL that works both on desktop and ES2
- make it work on Windows
- make it work on Raspberry Pi
- make it work well on Linux. Although the EGL context seems correctly ""coupled"" to the QWidget, I was unable to make the visualization appear. So now euhm ... we do a read_pixels() and then copy that into a QImage which is then shown. 
",20,7,"['type: enhancement', 'component: app']"
665,22887922,592,8935948,2014-10-16 21:24:07,2014-11-11 21:58:37,closed,WebGL backend,"This PR implements an online WebGL backend on the IPython notebook.

Most of the JavaScript code is [there](https://github.com/vispy/vispy.js), and minified here (`vispy.min.js`).
### Event loop

I think I have figured out the best way to implement the event loop in the notebook. Everything is triggered from JavaScript exclusively. The reason is that regular WebGL applications have to implement `requestAnimationFrame()` for the event loop. Here is how it works:
- This JS callback function is called at a framerate depending on the screen refresh rate (this is handled by the browser). If the window is hidden or minified, the loop stops automatically (the browser does everything for us).
- When the user moves the mouse and do things in the canvas, events are saved in a JS queue.
- The event loop processes the queue, sends all events to Python, and clears the queue.
- When Python receives the events, it processes them through Vispy, and a list of GLIR commands is generated and sent back to the browser. These events are pushed into a GLIR queue in JS.
- In the JS event loop, if the GLIR queue is not empty, the events are processed by the WebGL backend.

This architecture unifies timer-based and event-based visualizations. It is efficient because the browser takes care of everything. If nothing happens (no mouse event) and if there's no timer, nothing happens in Python and JS, so we don't waste CPU cycles for nothing.
",69,50,['component: jupyter-widget-backend']
666,22709807,590,8935948,2014-10-14 13:09:25,2014-10-16 14:07:06,closed,Fix the fetching of demo data,"On my system the formatting for time.ctime was different from what was expected. I changed to using just the time module, which also simplifies the code.

Need to wait for #571 for Travis to work again :/
",4,1,[]
667,22619171,587,8935948,2014-10-12 19:27:36,2014-10-21 20:24:42,closed,Minor simplification in ndscatter example,"There's no need to compute the matrix exponential anymore. This will make easier the conversion of this example to WebGL.
",8,1,['type: example']
668,22168011,585,8935948,2014-10-02 20:31:40,2015-01-29 18:40:16,closed,new visuals/isocurve for tri mesh,"I add a new visual to show iso line on different level on triangular mesh with data at vertices. Possibility to choose color or colormap to color the isoline
",28,29,['component: visuals']
669,22108539,584,8935948,2014-10-01 22:13:50,2014-10-02 10:18:41,closed,Bugs fixes,"Bugs fixes due to set_ and get_ choice ...
",3,3,[]
670,22074923,583,8935948,2014-10-01 14:06:00,2014-10-02 16:46:19,closed,Clearer app msg and pyqt5 backend,"Someone needs to test the pyqt5 backend. Probably on Windows; there is no easy way to install PyQt5 on Linux.
",19,5,[]
671,21424444,574,8935948,2014-09-18 10:31:04,2014-09-18 21:08:18,closed,Modify run_tests_if_main() to bypass nose.,"Just run all functions in the script that start with 'test_'. In this way when there is an error, I can just jump to PM debug mode in my IDE and inspect what's wong. Nose first runs all tests and then displays a traceback. I want to _go_ there.

Ping @Eric89GXL 
",7,5,[]
672,21386824,573,8935948,2014-09-17 18:41:51,2014-09-17 21:17:36,closed,Fix mandelbrot_double example for Python 2,"@almarklein correctly pointed out in #563 that the mandelbrot double emulation example does not work on Python 2 because it relied on Python 3 division. I simply add `from __future__ import division` to the top of the file.
",9,2,[]
673,21375325,572,8935948,2014-09-17 15:43:12,2014-10-21 16:39:02,closed,Magnify,"Just a fun demo, although I could conceive of some real-world uses.

Questions:
- Should the transform classes be moved to `scene.transforms.nonlinear`, or should they live here in the demo?
- This implements camera subclasses as a way to insert the transform at exactly the correct spot in the scenegraph (it needs to be added to the beginning of `viewbox.scene.transform`, which is set by the camera). Would it make sense to just add an option to the base camera class that allows addition of any arbitrary transforms so that subclassing is not necessary here?

Notes:
- Use mouse wheel to change the lens magnification
- This is not a post-processing gimmick; the magnification is implemented as a nonlinear transform. 
- There is a bit of noise apparent in the grid line and image; this should be corrected by adding multisampling to those visuals.

![image](https://cloud.githubusercontent.com/assets/1942359/4583956/999380e4-4ff6-11e4-8292-75eed4f5c0be.png)
",46,29,['type: example']
674,21369232,571,8935948,2014-09-17 14:19:48,2014-10-15 21:00:35,closed,WIP: Ripping gloo in two via GLIR,"This PR refactors gloo to break it in two pieces, one is the high level gloo interface, which generates GLIR commands. The other is the GLIR interpreter.

In the progress I will also fix some outstanding issues with gloo, as described in #464, like getting rid of local strorage and allow specifying uniforms/attributes before the source code is set.

Closes #464, #510, #450, #338, #407, #351
## Overview of changes that this PR makes

All gloo objects:
- No more activate, deactivate methods. No more handle and target properties. Only an id property.
- Gloo objects are context aware. They are associated with the context that is current at the moment of instantiation. If no context is active, they are associated to a ""pending context"" which will become in use by the first app.Cancas that requests a canvas. This means all our examples still work. 

Program:
- The API of Program changes WRT attributes and uniforms. There are no more `active_uniforms`. Just a function to get info on _all_ variables in shading code. 
- There are no variable objects, `variable.py` is gone. These objects served mainly for deferred setting of values. The GLIR command queue takes over this function.
- There are no more VertexShader and FragmentShader classes, `shaders.py` is gone. It turns out that shaders do not really have a function other then temporarily existsting to compile the code. Vispy programs should now have more GPU memory available. Just call `program.set_shaders()` to set source code.
- There are now also warnings when attributes/uniforms are set that are not active. Due to this I found some unnecessary lines of code in some examples.

Buffer:
- No more local storage. This means that setting discontinuous data does not work anymore. Much simpler code though.
- As a consequence data cannot be set on views.
- No more automatic conversion. Passing float64 is not allowed. Or should we convert in this case?

Texture:
- There is no more local copy.
- Passing float64 is not allowed.
- You can use `set_size` with completely different size and format.
- You can now use `set_data` using any type and shape.
- Texture does not support views anymore.
- Texture with no data (only shape) can be initialized with `Texture((100,100))`

Framebuffer
- ColorBuffer, DepthBuffer and StencilBuffer are no more. Just use RenderBuffer. You do not have to specify the format, as the FrameBuffer will do this when attaching (if format is None).
- Deactivating a FrameBuffer will make the _previous_ framebuffer active. This is the job of the GLIR implementation, because in gloo you may not always have access to this information.
## Outstanding questions for GLIR spec
- Should GLIR pass enums by string or int? There seem to be more people in favor of strings.
## Work to do after this
- There is a call to glGetViewport in text.py. This needs to be removed; we need to get viewport from the event instead.
- GPU objects must be deleted when Gloo objects get cleaned up. I won't be surprised if that will cause problems, so let's do this after Vispy with the current changes seems stable. 
- Uniform arrays #345
",98,72,['component: gloo']
675,21200480,567,8935948,2014-09-14 04:37:32,2014-09-16 05:06:24,closed,ENH: Query system for DPI,"Currently only works on Windows (might work on Linux but is untested), but I think it should be possible to query this information on other OSes as well. Working on those next.
",8,8,[]
676,21187957,566,8935948,2014-09-13 01:35:14,2014-09-14 19:46:56,closed,Some functions with docstrings are omitted from the sphinx doc,"I mentioned this on the vispy gitter page...after looking into it, it seems the reason (at least in the case I noticed) is that methods with some of vispy's decorators do not preserve the `__doc__`, so sphinx doesn't know about their docstrings.

As far as I can tell, the standard basic fix is as in this PR, using `functools.wraps` (python2.5+) to preserve the docstring. This works and sphinx documents the decorated method. However, it gets the function signature wrong, and there doesn't seem to be a neat solution - the [decorator](http://micheles.googlecode.com/hg/decorator/documentation.html) module provides a replacement for `functools.wraps` that preserves this correctly, but is not in the stdlib. It's also possible to manually tell sphinx the correct docstring, but laborious and fragile to manually sync with the rst files. Stackoverflow reports a range of other hacks available...

So, I don't know what general solution you would want to use, but here's a report of the problem.
",18,6,[]
677,21123146,565,8935948,2014-09-11 22:51:40,2014-09-13 00:09:16,closed,Added docstring to AffineTransform rotate method,"Just a trivial change while learning about vispy (which is great!)
",6,5,[]
678,21110266,564,8935948,2014-09-11 19:12:52,2014-10-24 11:28:47,closed,Reorganize visuals layer,"Reorganization to make visuals a top-level package.  Fixes #448.
Only one example currently works; I'll deal with the rest after feed back on a couple of issues: 
1. Any complaints about the current structure?
2. Poll: should `transforms` be top-level as well?
3. There are many modules for users to import, so it would be nice to pick one place where most of the common names are imported by default. Currently there is a bit of this going on in `scene.__init__`, but it's a mess. I'd like to make many of the examples look like:

```
import vispy.scene

canvas = vispy.scene.SceneCanvas()
line = vispy.scene.Line(...)
line.transform = vispy.scene.AffineTransform()
```

`vispy.plot` should do something similar, but with a more extensive set of imports aimed toward scientific vis. 
",102,77,['component: visuals']
679,21104797,563,8935948,2014-09-11 17:47:30,2014-09-17 15:36:02,closed,Use emulated double precision in mandelbrot,"I followed the advice of @rossant in #485 to add double precision to the mandelbrot example. I have two questions:
1. Should we have a separate example called `mandelbrot-double.py`? This would be a simple way of making the double precision optional.
2. According to [this](http://www.thasler.org/blog/?p=133) blog post, NVIDIA compilers remove the double precision emulation by default, unless you add some pragmas. I added the pragmas to both shaders, but the problem persists when I run the example on an NVIDIA GPU (it works on my CPU). Could vispy be removing the `#pragma` lines?

I might make the colors smoother later on as well.
",27,1,['type: example']
680,21062916,562,8935948,2014-09-11 02:14:05,2014-09-16 11:43:21,closed,QtCanvas,"Adds QWidget subclasses that make it more natural to work with vispy from PyQt applications. The widgets `QtCanvas` and `QtSceneCanvas` each wrap methods from their `Canvas` and automatically embed the native QGLWidget.

Depends on #529
",3,8,[]
681,21040132,559,8935948,2014-09-10 18:28:54,2014-09-12 04:51:42,closed,"ENH: Silence py34, add run_tests_if_main, and simplify testing","@almarklein can you try this branch and see if the warnings are gone on your end? Works for me on Windows. WIP because I'm not particularly happy with this solution, but we might need to use it.

closes #555
",9,9,[]
682,20989493,552,8935948,2014-09-09 22:57:45,2014-09-10 23:31:35,closed,ENH: Add mesh viewer,"Adds a `vispy.plot.mesh` plotter. I tried to simplify `MeshData` a little bit in the process.

Closes #548.

Ready for review/merge.
",6,5,[]
683,20968776,547,8935948,2014-09-09 16:53:33,2014-09-10 18:25:46,closed,FIX: Tests pass under windows,"Finally got a decent Windows rig to test on. This gets tests passing, at least for the backends I have on my Windows Python3.4 install (`pyqt4`, `pyglet`, `glfw`).

Ready for review/merge.
",2,1,[]
684,20912227,546,8935948,2014-09-08 19:36:04,2014-09-08 21:21:42,closed,FIX: Fix example,"@rossant ready for review/merge. For some reason this segfaults on Travis even though it does not on my machine. For now we can skip testing it. Also note I made a couple of small tweaks.
",4,1,[]
685,20894954,544,8935948,2014-09-08 14:59:32,2014-09-08 15:35:34,closed,Fix error if weird key is pressed,"Closes #542
",2,1,[]
686,20851124,541,8935948,2014-09-06 17:32:50,2014-09-06 18:23:50,closed,Added interpolation and wrapping keyword arguments to texture creation,"Closes #538.
",8,4,"['type: enhancement', 'component: gloo']"
687,20850872,540,8935948,2014-09-06 17:07:13,2014-09-08 15:19:26,closed,Add shadertoy example,"Closes #420.

![image](https://cloud.githubusercontent.com/assets/1942359/4176487/3fe03f5a-3607-11e4-9399-4fe120dfe0ac.png)
",11,4,['type: example']
688,20850867,539,8935948,2014-09-06 17:06:26,2014-10-01 20:39:02,closed,Add bounding box calculation and other function in calculations.py,,21,14,['type: enhancement']
689,20820478,537,8935948,2014-09-05 16:56:29,2014-09-08 15:33:42,closed,Grid.add_widget sets single parent rather than adding parent,"The console example bug is caused because one of the views was assigned two parents, which makes it impossible to perform some transformation mappings. I have corrected the `Grid` widget to make this less likely to occur, and fixed the example to make only one parent assignment. 

Fixes #536
",11,3,[]
690,20792734,535,8935948,2014-09-05 07:48:04,2014-09-05 15:46:31,closed,Fix tutorial examples,"Closes #525
",1,1,[]
691,20780384,534,8935948,2014-09-04 23:42:16,2014-09-05 00:00:22,closed,Modified if-statement to reflect what was originally meant,"This resolves https://github.com/vispy/vispy/issues/533.
",2,1,[]
692,20773895,532,8935948,2014-09-04 21:25:29,2014-09-08 17:28:53,closed,ENH: Test examples,"Adds example testing to Travis. Can test locally using `make test` (which will run it) or `make examples`.

Closes #526.
",17,17,['type: enhancement']
693,20733232,531,8935948,2014-09-04 10:04:35,2014-09-04 15:18:01,closed,Fix couple of examples,"- post_processing needed to set viewport correctly - #523
- real_time signals needed data of proper shape - #528
- spacy dito

closes #523
closes #528
",3,1,[]
694,20705444,529,8935948,2014-09-03 20:57:34,2014-09-13 21:03:21,closed,WIP: Refactoring context and CanvasBackend,"The goal of this PR is to make the context more explicit, to associate one context object with each Canvas (or one context object can be shared), and to make this context object active upon drawing so that gloo can be made context aware.

As I changed the code, I also started refactoring CanvasBackend, since it seemed overly complex to me. Before I proceed, we should probably discuss whether this is going in the right direction. cc @Eric89GXL 

My main question is this: the only place where a CanvasBackend is created is from inside the Canvas. Nevertheless, the code seems to jump to hoops to make it possible to set the `_vispy_canvas` object at a later time. Why is that?
",22,17,[]
695,20702252,527,8935948,2014-09-03 20:05:53,2014-09-04 14:41:19,closed,FIX: Fix examples,"Closes #524.
Closes #522.

Ready for review/merge.
",3,1,[]
696,20686938,520,8935948,2014-09-03 16:02:15,2014-09-04 16:24:19,closed,ENH: Add more read options,"Closes #446.
",14,2,[]
697,20645739,519,8935948,2014-09-02 22:45:38,2014-09-05 15:49:45,closed,3D Cube,"This pull request implements basic 3D visuals, like a 3D polyhedron or a 3D cube. I think it is a prerequisite for completing volume rendering as a visual. (https://github.com/vispy/vispy/pull/458)
",42,16,[]
698,20627505,518,8935948,2014-09-02 17:28:09,2014-09-05 11:19:21,closed,ENH: Add console visual,"Ready for review/merge.

Closes #418.

Example output:

![screenshot from 2014-09-02 10 27 45](https://cloud.githubusercontent.com/assets/2365790/4122587/1b455534-32c6-11e4-9821-e0ca0e949bd6.png)
",26,5,[]
699,20582308,513,8935948,2014-09-01 18:25:09,2014-09-01 19:52:22,closed,FIX: Fix travis,"This should fix Travis. We'll see...
",2,1,[]
700,20562430,512,8935948,2014-09-01 09:32:53,2014-09-02 16:00:34,closed,Use string_types instead of str in isinstance.,"Ready for review/merge.
",7,2,[]
701,20551920,511,8935948,2014-09-01 01:33:48,2014-09-02 10:09:41,closed,FIX: Minor fixes to text and better warnings for gloo,"Ready for review/merge.
",4,2,[]
702,20546313,506,8935948,2014-08-31 15:07:39,2014-09-01 16:55:04,closed,"Adapt example ""examples/high-frequency.py"" from glumpy to vispy","First try to adapt example ""examples/high-frequency.py"" from glumpy to vispy (""examples/demo/gloo/high_frequency.py"").

Is it the right approach ? Mainly for transparency, timer and naming convention.

See issue #439, #435.
",8,4,['type: example']
703,20545966,505,8935948,2014-08-31 14:33:55,2015-03-26 11:56:10,closed,"Refactored util/transforms.py translate, scale and rotate to just return","Refactored translate, scale and return to just return a matrix to be multiplied instead of the matrix multiplication being done in the method

Adapted scenen linear transforms as appropriate

Adapted examples as appropriate (except for ipython notebooks, cannot test those)
",10,4,['type: enhancement']
704,20544708,504,8935948,2014-08-31 11:59:06,2014-08-31 15:24:31,closed,Fix for #503,"Added assert statement to catch wrong array size.

I also merged Cyrille's fix of the ""start_shaders"" example because I wasn't sure whether the tests would fail otherwise (but I presume this wasn't actually necessary).
",1,3,['type: bug']
705,20544499,502,8935948,2014-08-31 11:33:50,2014-08-31 15:23:31,closed,Minor fix in start_shaders example,"This bug was not detected by gloo: I'll raise a separate issue for that.
",1,1,['type: bug']
706,20544399,500,8935948,2014-08-31 11:19:32,2014-09-02 16:01:54,closed,Colormaps,"This implements colormaps as per https://github.com/vispy/vispy/issues/414 . It is a first pass that uses OpenGL functions. Visuals will need to integrate this, but it has already been done for the Line visual. It includes a new example 'colored_line.py' that cycles through all the colormaps.
",16,11,['type: enhancement']
707,20529220,493,8935948,2014-08-29 23:53:06,2014-08-30 00:16:55,closed,FIX: Add Zenodo to README,,2,1,[]
708,20526678,492,8935948,2014-08-29 22:24:48,2014-08-29 23:21:21,closed,Nicer versioning and fix release date,,5,2,[]
709,20518390,491,8935948,2014-08-29 19:19:49,2014-08-29 21:52:15,closed,ENH: Carousel arrows,"Ready for review/merge. @almarklein let me know when you're ready, and I'll also push my `_website` setup/file changes (_not_ image/html changes), and you can update.

Closes #481.
",19,1,[]
710,20508753,490,8935948,2014-08-29 16:15:01,2014-08-29 21:29:55,closed,FIX: Examples fix,"@almarklein should be ready for merge assuming you're happy with my last commit.
",4,3,[]
711,20499910,489,8935948,2014-08-29 13:44:22,2014-08-29 16:02:19,closed,Visual bounds,"Adds `Visual.bounds` method, allowing automatic zoom in `vispy.plot`
",4,2,[]
712,20498799,488,8935948,2014-08-29 13:22:42,2014-08-29 21:48:42,closed,Fixed several examples,"- Fix line - need to set to agg since gl is default
- Fix Line visual - agg always uses antialias, don't import
  pyopengl unless we need it
- Rename and fix gridlines.py and thus fix the grid demo
- Fix imshow_cuts demo, also fixed that variable.set_data needs
  to call buffer.set_data instead of buffer[...] = data
- Turn blending on in custom_visual.py

the camera.py example I cannot test, since I don't have opencv
installed, but I cannot imagine it having to do with vispy.

Ready for review/merge
",10,4,[]
713,20495043,487,8935948,2014-08-29 11:46:10,2014-08-29 13:45:43,closed,Fixed line example,"@rossant, this fixes the missing lines in the agg column of the `line` example.
",2,1,[]
714,20491686,486,8935948,2014-08-29 10:15:27,2014-08-29 10:35:43,closed,Fix raytracing example.,"(The error was quite similar to the gridlines error)
Note to all: please initialize GLSL variables to zero when necessary :)
",3,1,[]
715,20452703,484,8935948,2014-08-28 17:07:07,2014-08-28 21:39:35,closed,ENH: Hex colors,"@rossant ready for review/merge.

Closes #461.
",2,3,[]
716,20450687,483,8935948,2014-08-28 16:33:18,2014-08-28 16:34:12,closed,Added link to Vispy tutorial,"Ready for merging.
",0,1,[]
717,20431053,479,8935948,2014-08-28 10:55:15,2014-08-28 12:47:11,closed,put announcenemnts in readme,"Easier, otherwise the website gen must fiddle the announcements in the readme _after_ the first introductory paragraph.
",1,2,[]
718,20410230,478,8935948,2014-08-27 23:54:25,2014-08-28 08:23:03,closed,Add delimiters in readme,"This closes #468 

The website generator now takes the README.rst, cuts out the bit thats in between the `----` delimiters, and inject the corresponding html in the page. All in a small nifty sphinx extension.
",8,1,[]
719,20398619,477,8935948,2014-08-27 20:09:37,2014-09-05 16:31:18,closed,Meshdata update,"Some modification in meshdata structure and an example with qt backend to generate, cone, cylinder, sphere and arrow
",23,16,"['type: bug', 'type: example']"
720,20389824,476,8935948,2014-08-27 17:45:33,2014-08-27 18:36:19,closed,Adding a bit more information in the documentation,"There's much work that remains to be done on the documentation, but that should more or less do it for 0.3.

Closes #471.
",8,4,['docs-website']
721,20388086,474,8935948,2014-08-27 17:14:53,2014-08-28 16:33:43,closed,ENH: Show example of shared context,"Requires the new-visuals PR to be merged because text is broken on `master`.

Closes #171.
",11,2,[]
722,20384095,473,8935948,2014-08-27 16:12:11,2014-08-27 22:17:11,closed,ENH: Allow set_viewport to take tuple,"Closes #246.

Ready for review/merge.
",7,1,[]
723,20379734,469,8935948,2014-08-27 15:09:33,2014-08-27 15:10:36,closed,Changed README from Markdown to ReST,"First step towards #468.
",0,1,[]
724,20373135,467,8935948,2014-08-27 13:30:13,2014-08-27 15:03:21,closed,Delay program validation until Texture units are asigned.,"Hopefully this fixes #459. Also see #458.

Ping @izaid
",3,1,[]
725,20340721,466,8935948,2014-08-26 22:03:42,2014-08-26 22:23:13,closed,flake remaining from #465,,2,1,[]
726,20340150,465,8935948,2014-08-26 21:53:40,2014-08-26 21:55:07,closed,Misc small tweaks and fixes.,"- Updated readme to stick to 70 chars linewidth. Also minor
  changes to allow copy-pasting it into the index.rst for website.
- Make imshow not get stuck on building gallery
- Gallery building use Canvas context manager.

Ready for pushing green button
",8,1,[]
727,20325036,463,8935948,2014-08-26 17:47:22,2014-08-27 15:52:52,closed,FIX: Nest freetype imports,"@rossant feel free to review, test, and merge if it works.

Closes #462.
",2,1,[]
728,20287242,460,8935948,2014-08-26 04:26:00,2014-08-29 10:40:17,closed,New visuals,"fixed several issues.
",55,104,[]
729,20272856,458,8935948,2014-08-25 21:17:04,2014-12-08 19:38:50,closed,[WIP] Volume rendering,"This PR implements a simple volume rendering example using 3D textures.
",36,12,['type: enhancement']
730,20268550,457,8935948,2014-08-25 20:06:24,2014-08-26 04:47:54,closed,WIP: New visuals,"Your turn @lcampagn. I unified the lines and made it so that the `agg` lines could have color as an attribute. I also implemented a simplistic fix for #450 -- it might not be the best solution, but it seems to work. The examples now all run for me, but the meshes don't look quite right. I fixed a bunch of style issues. Tests also fail in a couple places.
",11,61,[]
731,20233882,455,8935948,2014-08-25 08:00:57,2014-08-25 14:30:54,closed,Text uses a global FontManager,"Ready for review/merge.
",8,3,[]
732,20223149,454,8935948,2014-08-24 19:55:03,2014-08-25 21:51:35,closed,Let all dynamic examples run at 60 fps,"This does a few things:
- Remove call to `canvas.update()` from `on_draw` in all examples. Use a timer instead.
- Gives `canvas.update()` an optional event arg (which is not used) so it can be used as an event handler, simplifying code that wants to call `update` via a timer.
- Improve measure_fps.

Todo:
- [x] If everyone agrees with the update of the `canvas.update()` method, use it in places where we now use awkward lambda. Otherwise change where I used it already.
- [x] Update use of timer to move `connect` and `start` in the initialize call.

Closes #229
",23,8,[]
733,20222152,453,8935948,2014-08-24 18:02:15,2014-08-25 07:04:46,closed,ENH: Imshow demos,"Ready for review/merge. I'll update the gallery once they're in.
",4,8,[]
734,20202829,449,8935948,2014-08-22 23:35:49,2014-08-25 04:50:02,closed,FIX: Reorganize modules,"Ready for review/merge. Moves a bunch of stuff around. There could be minor improvements (e.g., by consolidating things in `io` in particular files), but that should be done in a subsequent PR to reduce reviewing burden.

Tests pass over here, and docs look good on build (including examples I re-ran).

Closes #452.
Closes #445.
Closes #400.
Closes #194.
",16,5,[]
735,20193820,447,8935948,2014-08-22 20:02:12,2014-08-23 22:32:00,closed,Ipynb backend checks IPython version,"Ubuntu comes with < 2.0, so lots of people will get this

Close #441.
",12,3,['type: bug']
736,20146586,444,8935948,2014-08-22 00:18:16,2014-08-22 19:19:17,closed,ENH: Better text rendering,"Implements @rougier's suggestions for sharpening text rendering at large scales, and making it more robust at smaller scales. I also checked, and our size conversion is correct so long as the DPI is correct (currently fixed at 92 in the Text visual).

Ready for review/merge.

Closes #426.
",9,3,[]
737,20134150,442,8935948,2014-08-21 20:08:14,2014-08-22 18:45:10,closed,FIX: Fix docs,"Closes #428.

Docs look good to me. Ready for review/merge. Can be viewed by doing:

``` Bash
$ python make doc html && python make doc show
```
",19,12,[]
738,20095570,438,8935948,2014-08-21 08:20:24,2014-08-21 12:36:57,closed,Make Key objects hashable,"Ready for review/merge
",1,1,[]
739,20089133,437,8935948,2014-08-21 04:27:33,2014-08-25 20:04:38,closed,WIP: New visuals,"Adding some new visuals in this PR. The first is done: `Grid` draws grid lines inside a ViewBox. It works with nearly any type of coordinate system, and transitions major/minor grid lines smoothly as it scales. Have a peek in the `basics/scene/grid.py` example. Will be adding more over the next couple of days.

This also includes some cleanup of the transform methods in `SceneEvent`. I have picked the following coordinate system names:
- `ndc` refers to normalized device coordinates
- `framebuffer` refers to the current physical pixel / fbo being rendered to
- `canvas` refers to the logical pixel system of the canvas
- `document` refers to the current physical coordinate system (units of pixels, and will define `dpi` for unit conversions)

See https://github.com/lcampagn/vispy/blob/new-visuals/vispy/scene/events.py#L103
",20,58,['type: enhancement']
740,20080474,436,8935948,2014-08-20 23:06:12,2014-08-21 20:02:34,closed,FIX: Gallery,"Ready for review/merge.
",23,8,[]
741,20073361,433,8935948,2014-08-20 20:56:41,2014-08-21 19:43:54,closed,FIX: Minor text tweaks,"@almarklein ready for review/merge, just minor tweaks on your changes.
",4,2,[]
742,20065298,432,8935948,2014-08-20 18:48:23,2014-08-21 12:09:29,closed,Vnc backend final,"I took the liberty of copying #333 to finish it. There is little left to be done, but @mfkaptan seems busy :) Of course, the commits are left in place, so he gets credit/blame.
",15,26,[]
743,20060298,431,8935948,2014-08-20 17:29:03,2015-01-18 20:45:53,closed,WIP: Visuals tests for RectPolygon and left-out tests for remaining visuals,"Added basic visuals tests for RectPolygon. Reactive tests and more `assert_raises` to follow.
",14,3,['component: visuals']
744,20043242,429,8935948,2014-08-20 13:04:50,2014-08-20 22:21:09,closed,Update README,"- [x] Added more information about Vispy's current status.
- [x] Added links to developers' home pages.
",9,5,['docs-website']
745,20038298,425,8935948,2014-08-20 11:05:47,2014-08-20 20:34:38,closed,Text has point_size and pos properties,"And text always draws in that point size, even if inside a viewbox. There are two things to fix, see todo items:
- Is the pointsize correct like this?
- How to prevent recompilation on each draw?
",12,11,[]
746,19981080,424,8935948,2014-08-19 13:47:32,2014-08-19 17:02:05,closed,Tests windows,"Some improvements for Windows. This might fix #411
",6,4,[]
747,19956415,423,8935948,2014-08-19 02:02:58,2014-08-19 18:40:03,closed,Fix scenegraph examples,"Minor changes to reduce CPU usage in scenegraph examples. 
Also made `viewbox.py` resize with the canvas, and cleaned up `nested_viewbox.py`
Ready for review.
",6,4,[]
748,19935270,421,8935948,2014-08-18 18:25:44,2014-08-19 16:58:57,closed,Improve and clean examples. Update contributor list.,"In #349 Eric asked to fix up glsl-sandbox-cube.py and split-screen.py. One thing led to another and I did some more:
- I scrolled to all merged PR's and update the contributors list accordingly. Quite a few people have already helped out!
- Removed split-screen.py because it tried to show something that we can now do with ViewBox
- Removed client_buffers.py because we don't support client buffers :)
- Updated animate_image_slices.py to be more interesting, and fixed a bug in 3D texture.
- Modified some demos to fix them up or make a bit more interesting.

I will probably fool with the example some more. But this PR is ready to go. This also addresses issue #405.
",6,3,[]
749,19903162,412,8935948,2014-08-18 07:39:05,2014-08-21 14:42:33,closed,ENH: Better test coverage,"Not ready for review/merge yet.
",23,14,[]
750,19891036,409,8935948,2014-08-17 16:44:26,2014-08-17 18:41:26,closed,Real-time GPU-based ray tracing example,"Entirely implemented in the fragment shader.

![image](https://cloud.githubusercontent.com/assets/1942359/3945096/14128750-262d-11e4-9219-98faf08bdd64.png)

Ready for review/merge. 
",13,6,['type: example']
751,19888494,406,8935948,2014-08-17 11:08:51,2014-08-17 18:39:23,closed,"Added example showing how to plot a 2D function y=f(x,y) on the GPU",,4,2,['type: example']
752,19888077,404,8935948,2014-08-17 09:56:08,2014-08-20 16:52:33,closed,Implement __getitem__ and __setitem__ in ColorArray,"Close #388
",21,3,"['type: enhancement', 'component: color']"
753,19887565,403,8935948,2014-08-17 08:28:16,2014-08-18 18:23:27,closed,Add command-line option --fps to display FPS.,"Allow to do `python example.py --fps` to display the FPS.

The argument name, the output (display the FPS in the console or directly in the screen?), and the implementation are all subject to discussion! But this feature would be really useful.
",15,3,['type: enhancement']
754,19862274,396,8935948,2014-08-15 19:22:26,2014-08-18 19:43:48,closed,WIP: Rectpolygon with rounded corners,"Numpy optimizations are yet to be done.
",15,7,[]
755,19808447,394,8935948,2014-08-14 19:17:03,2014-08-18 03:24:07,closed,ENH: Fullscreen,"Closes #387.

I have only changed one example (`text_visual.py`), assuming people are happy with the other changes, I'll change all the other examples.
",41,11,[]
756,19796170,393,8935948,2014-08-14 15:50:38,2014-08-14 16:58:35,closed,FIX: Make tests pass again?,"Deals with some of the things mentioned in #374. We'll see if this makes Travis happy...
",11,3,[]
757,19744510,392,8935948,2014-08-13 18:50:52,2014-08-13 21:15:34,closed,FIX: Cleaner conditionals,"@lcampagn this was my attempt to fix the Py3k drawing by making several conditionals more explicit, but it did not work. But it might be useful to have this anyway, to prevent possible future sneaky issues.
",6,4,[]
758,19725195,391,8935948,2014-08-13 13:54:54,2014-08-17 18:33:14,closed,New n-dimensional scatter plot example with GPU-based smooth projections,"To-do list:
- [x] minor simplification in `OrthogonalPath`
- [x] drop dependency on sklearn by including the dataset in vispy (#389).
- [x] ~~support for n-dimensional data points (instead of 4 dimensions max here), related to #390~~ (to be done later)

Close #389.
",19,5,['type: example']
759,19704273,386,8935948,2014-08-13 04:17:15,2014-08-13 16:00:13,closed,Fix examples,"All visual and scene examples run again (under py2.7)
",11,6,[]
760,19646789,385,8935948,2014-08-12 07:42:18,2014-08-12 18:15:53,closed,FIX: Make testing slightly cleaner,"This does not fix the problems in `master`, but it should make them easier to diagnose. Ready for review/merge from my end. 
",2,2,[]
761,19627590,384,8935948,2014-08-11 21:04:15,2014-08-11 23:57:08,closed,ENH: Add entity print_tree function,"Ready for review/merge. Example output:

```
Omar-2:vispy larsoner$ python examples/basics/scene/viewbox.py 
SubScene
  +--ViewBox
  |  +--SubScene
  |     +--PanZoomCamera
  |     +--Line: nd box
  |     +--Line: unit box
  |     +--Line
  +--ViewBox
     +--SubScene
        +--Line: unit box
        +--Line
        +--PanZoomCamera
        +--TurntableCamera
        +--Line: nd box
        +--Line: unit box
        +--Line: nd box
```
",6,3,[]
762,19587894,381,8935948,2014-08-11 08:20:39,2014-08-11 15:54:53,closed,Adds egl API,"It is not 100% complete and the code to load the lib should be generalized, but this should be a good starting point.
I had a working demo with this some time ago.

This should help for #375
",3,1,[]
763,19583431,380,8935948,2014-08-11 05:30:02,2014-08-18 18:07:46,closed,Scenegraph optimizations,"Scenegraph is pretty snappy now, although there are plenty of opportunities left to optimize. Major changes:
- Added `TransformCache` class, which allows `ChainTransform` instances to be re-used across frames. This prevents most of the program recompiling.
- Canvas gets `ndc`, `framebuffer`, and `pixels` entities that are used to represent the coordinate systems it handles.
- Avoid generating throw-away `Variable` instances in `Function.__setitem__`. This was wasting a lot of time.

There is still some cleanup left to do, but once this is merged I think we finally have a usable scenegraph.
",34,20,[]
764,19576601,378,8935948,2014-08-10 19:58:08,2014-08-11 19:40:03,closed,Implement (partly) proper way to inherit from Entity,"That is, each Subclass does:

```
__init__(what=None, I=3, need=3, **kwargs):
    SuperClass.__init__(self, **kwargs)
```

I did not touch ModularVisual and their subclasses, as to not interfere with Erics MPL PR.

Also fixes to Text class and SceneCanvas can be other bgcolor than
black :)

Note that the text_visual example is broken, but I think this was already so.

closes #373
",9,5,[]
765,19575199,377,8935948,2014-08-10 17:10:29,2014-08-10 22:57:44,closed,Break scene.transforms into subpackage,"Just reorganization. All scene/visual examples work as previously.
Ready for review.
",12,7,[]
766,19571152,375,8935948,2014-08-10 06:10:47,2014-08-21 14:41:50,closed,WIP: EGL backend,"Doesn't really do much thus far. This is just a stub to remind me to get back to this later. @almarklein did you have in mind to have an `EGL` `app` backend like this for headless rendering? It seems like it might actually be possible, in which case I can investigate further.

On OSX I get the error `'Unable to load EGL library', 'dlopen(EGL, 10): image not found'`, which I expected because I don't have EGL installed. But in Ubuntu I think I'll just need to install the `libegl1-mesa` package to get it to work with software rendering at least. Assuming that works, I can read about how to set up a context with EGL and we might be onto something.
",21,8,[]
767,19523974,372,8935948,2014-08-08 12:22:50,2014-08-08 17:16:46,closed,"ctypes.WINFUNCTYPE, not ctypes.wintypes.WINFUNCTYPE","ping @Eric89GXL
",3,1,[]
768,19508866,371,8935948,2014-08-08 04:35:02,2014-08-09 19:29:52,closed,Visuals without scenegraph,"Brings proper transform support to visuals when used outside the scenegraph. All visual examples updated accordingly (visuals now draw to the pixel coordinate system, rather than ndc).

There are two ways to use visuals in the absence of a scenegraph:
1. Use `SceneCanvas.draw_visual(...)` 
2. Create a SceneDrawEvent with all the correct transform information and call `visual.draw(event)`.
",44,21,[]
769,19506281,370,8935948,2014-08-08 02:25:58,2014-08-23 19:24:18,closed,Gl-agg line visual,"Converts work by @rougier and @rossant into a nicely-antialiased line visual.
Depends on #369 and #371
",3,18,['component: visuals']
770,19502777,369,8935948,2014-08-08 00:05:09,2014-08-08 17:35:20,closed,Glsl static names,"Addresses some issues with the `Compiler` class:
- Avoids posible name conflicts during mangling:
  - reserved names
  - statically-declared variable names
  - function arguments
- Do not create mangled names > 32 chars
- Adds an optional faster (but uglier) compiling method
- Add `MainFunction(Function)` class that allows multiple function definitions in a single string

Ready for review. The motivation for these changes is to support the gl-agg line visual in #370.

Fixes #360 
Fixes #359
",13,11,[]
771,19422644,368,8935948,2014-08-06 18:35:55,2014-08-12 05:29:00,closed,WIP: Reactive Visual tests and integration of Color with visuals,"On a second thought, I will integrate Visuals with Color and then add the tests so that the changes can be included in few commits.
",30,6,[]
772,19415205,366,8935948,2014-08-06 16:30:01,2014-08-06 22:59:35,closed,ENH: Better text SDF calculation,"This improves the SDF calculation a little bit. Ready for review/merge from my end.
",4,1,[]
773,19333271,365,8935948,2014-08-05 10:15:46,2014-08-14 15:46:07,closed,Ipynb static backend,"This backend allows us to draw a single png image onto IPython notebook.
- It imports `display_png` from `IPython.display`
- Takes a screenshot, converts it to PNG and encodes with base64
- Displays it with `display_png` on `canvas.show()`
",8,3,[]
774,19327545,364,8935948,2014-08-05 08:04:18,2014-08-06 10:39:08,closed,Make Travis use py 3.4 + fix in find_font,"was: OMG tests fail if I run locally
- in util/image.py we try to set a string into a byte object
- in ext/freetype.py (line 36) we are using `.encode('utf-8')
  on a byte object.

Maybe this is because I use Python 3.4? If this is the case, we need to add a Travis machine for 3.4.
",13,3,[]
775,19317977,362,8935948,2014-08-05 01:27:00,2014-08-05 11:41:48,closed,FIX: Fix init order,"This addresses an issue where `on_draw` could be called before `canvas._backend` was set, which can be problematic. While fixing this and making tests more comprehensive, I also fixed an issue where `pyglet` could send more than one `on_initialize` event (whoops).

Closes #361.
",7,1,[]
776,19260662,358,8935948,2014-08-03 23:25:19,2014-08-14 12:39:20,closed,ENH: Basic mplexporter / pyplot interface,"The todo list:
- [x] Translate Cyrille's code to vispy submodule + example.
- [x] Make text display.
- [x] Make `Line` based on `Visual`.
- [x] Make `Marker` a visual.
- [x] Complete support for marker properties.
- [x] Change to use `SceneCanvas`. This should facilitate:
- [x] Deal with different plotting coordinate systems.
- [x] Deal with multiple axes.
- [x] Add image support.
- [x] Complete text display options, with proper scaling and location.
- [x] Improve image visual quality and fix view transformation.
- [x] Add tests.
- [ ] Complete support for line properties.
- [ ] Improve line quality (agg).
- [ ] Make it faster (it's _very_ slow currently).

Things that would be nice, but not 100% necessary to have things working (and probably difficult):
- [ ] Make collections work (efficiency).
",42,24,[]
777,19257950,357,8935948,2014-08-03 18:26:32,2014-08-06 21:34:50,closed,"FIX: Fix tests on windows, remove dep for tests","This PR proposes two related things:
1. It makes `requires_img_lib` skip tests on Windows. This is because, for some odd reason, importing PIL breaks tests on windows. Cyrille and I have both experienced it, but I couldn't track down why.
2. It adds an `ext` for pure-python PNG reading/writing. This is useful because it doesn't require PIL or imageio to be installed. In my experience PIL often has bugs, so I'd rather avoid using it if possible. And imageio does not have such widespread use, so we can't rely on people having that, either. This seems like a simple solution for basic PNG support.

Let me know what people think. Ready for review/merge from my end.
",37,1,[]
778,19251364,356,8935948,2014-08-03 01:03:58,2014-08-05 07:49:55,closed,ENH: Quieter testing,"This makes it so that the coverage doesn't print at the end of each test. It's not very useful to have it. Coveralls is way better. And if we want to look on our local computer, we can now do `make nose_coverage &&  make coverage_html` and the coverage results will be put in interactive form in the `htmlcov` directory.

Ready for review/merge.
",11,3,[]
779,19249902,355,8935948,2014-08-02 21:23:23,2014-08-19 08:23:26,closed,ENH: Add wxPython backend,"Before I get too far into this, is there any reason not to add a `wxPython` backend?
",22,14,[]
780,19249232,354,8935948,2014-08-02 20:08:42,2014-08-04 18:16:03,closed,FIX: Better prints on event failures,"Ready for review. Can be tested e.g. by running an example with `raise RuntimeError` in `on_draw`.

Closes #350.
",15,5,[]
781,19248822,353,8935948,2014-08-02 19:18:41,2014-08-06 16:26:51,closed,WIP: Reactive Visuals,,19,6,[]
782,19241851,352,8935948,2014-08-02 01:54:48,2014-09-10 18:19:52,closed,Add SceneCanvas.screenshot method,"Just a start. It implements the ability to render any portion of the canvas at any resolution. 
This is also a good test to ensure that visuals are correctly handling the doc / framebuffer / ndc coordinate systems.

To do:
- [ ] Automatic tiled rendering for very high resolution
- [x] Disentangle logic between `render` and `screenshot` to avoid warning messages.
",20,26,['component: scene']
783,19235921,349,8935948,2014-08-01 21:48:46,2014-08-06 22:57:51,closed,FIX: Fix and reorganize examples,"@almarklein mentioned that we should get all our examples working. Toward that end, I made a bunch of changes, some of which were necessary to make examples run on my system (OSX, picky GLSL compiler).

Here are the examples that still don't work for me -- can anyone else take a stab at fixing them?

Almar:
glsl-sandbox-cube.py (doesn't update)
howto/split-screen.py (doesn't display anything)

Luke:
scene/*
modular_shaders/sandbox.py (error)

Deleted:
techniques/grid/*
",30,1,[]
784,19217017,347,8935948,2014-08-01 15:38:18,2014-08-02 06:11:35,closed,FIX: Cleaner gloo,"Tiny example fixes, CC @rougier @izaid. Ready for review/merge.
",2,1,[]
785,19201889,346,8935948,2014-08-01 09:54:41,2014-08-01 15:11:29,closed,Added new Voronoi example.,"Ready for review/merge. Compute the Voronoi diagram of a set of points on the GPU (in the fragment shader). One of the points follows the mouse position and the Voronoi diagram is updated in real-time.

Here is an animated screenshot.

![voronoi](https://cloud.githubusercontent.com/assets/1942359/3777727/2e1d5ec8-1966-11e4-80df-252cd9dfadf8.gif)

Original version proposed by @xoolive.
",8,4,['type: example']
786,19178207,344,8935948,2014-07-31 20:58:16,2014-07-31 22:34:28,closed,Run tests with same interpreter that launched test,"This makes the tests on the backends run with the same
Python interpreter used to launch the test. i.e. when I do
`python3 make test pyside`, the tests should be done in
Python3, not Python2.
",2,1,[]
787,19169162,343,8935948,2014-07-31 18:24:23,2014-07-31 20:53:36,closed,FIX: Fix color test,"This should help with the recent Travis failures, sorry about that folks. Should be ready for review/merge.
",1,1,[]
788,19155167,342,8935948,2014-07-31 14:41:04,2014-07-31 15:15:45,closed,Fixed bug on real time demo with Intel GPU.,"Good to merge.
",3,1,[]
789,19131426,341,8935948,2014-07-31 03:58:38,2014-08-06 02:15:03,closed,Simplify camera / viewbox system,"This proposal simplifies control over sub-scene transforms by introducing a new `Viewer` class that is a helper to ViewBox that manages `viewbox.scene.transform` and handles user interaction. This results in several simplifications:
- `SubScene` loses most of its code
- No need for `PixelCamera`, `UnitCamera`
- Removed `SceneEvent.resolution`
- `ViewBox` / `SubScene` transform handling is much simpler because `Viewer` is not an Entity

Cameras are still supported via the `CameraViewer` class, but this is not fully implemented yet. 
I have only updated the `scene/grid` example, others will follow after initial review.
",53,33,[]
790,19123032,340,8935948,2014-07-30 22:50:14,2014-07-31 12:00:04,closed,WIP: new example with real-time digital signals,"Not ready yet. To do:
- [x] ncols and nrows parameter
- [x] GLSL-based clipping
- [x] separate x and y in the VBO to divide by 2 the amount of data transferred (compute x coordinate in the vertex shader)

![signals](https://cloud.githubusercontent.com/assets/1942359/3778623/bd99a57e-1976-11e4-9284-f3d90e265002.gif)

Close #135.
",10,4,['type: example']
791,19075983,339,8935948,2014-07-30 08:45:04,2014-08-20 18:34:26,closed,Added new example showing offscreen rendering,"Ready for review but not for merging:
- [x] ~~we should make it work with any backend (only tested with glfw, doesn't work with Qt yet)~~ (for another PR...)

In another PR, we could create an easy utility routine to simplify offscreen rendering (i.e. automatic creation of FBO, screenshot, etc.).
",8,1,['type: example']
792,18870281,336,8935948,2014-07-24 23:13:53,2014-07-25 21:26:12,closed,ENH: Better Color use and examples,"I added a simpler `Color` class (deriving from `ColorArray`), and implemented it in a bunch of examples. While I was at it, I changed a few examples over to the `app` system. Ready for review/merge. All of the modified examples work on my system _except_ the split screen one, but that was broken before I touched it (not sure why).
",6,1,[]
793,18859887,335,8935948,2014-07-24 19:56:13,2014-07-24 20:16:35,closed,Added `elapsed` property to `Timer` class and to `timer_timeout` event.,"Closes #247.
",4,1,['type: enhancement']
794,18855198,334,8935948,2014-07-24 18:33:37,2014-07-24 22:12:33,closed,"Added two examples: 3D brain viewer, and multichannel digital signal viewer","Come from [the examples of the Vispy article in the French Linux Magazine](https://github.com/vispy/linuxmag-article).

Close #137 and #195.
",8,4,['type: example']
795,18783519,333,8935948,2014-07-23 15:41:39,2014-08-20 19:07:16,closed,VNC backend update,"- Add IPython DOMWidget to _ipynb_vnc. Now, backend has its own widget to display.
- Edit setup.py, .js files will appear in build.
- No need to write Js code into notebook for event handling.
",29,30,['component: jupyter-widget-backend']
796,18747597,332,8935948,2014-07-22 22:57:31,2014-07-24 15:49:37,closed,FIX: Fix initialize events,"This ensures that we always get `initialize` and `close` events. Before some backends had these events, others didn't. Now they all should. Ready for review/merge.

Closes #331.
",10,3,[]
797,18687029,330,8935948,2014-07-21 23:32:47,2014-07-24 18:16:12,closed,ENH: Example of translating existing project,"I need to do this anyway for SDF-on-shader support, figured I might as well make an example out of it. @almarklein @rougier if either of you have spare time, I could use a little bit of help. I don't quite understand how to get the FrameBuffer working properly. I translated the JFA code into `glfw` calls in `jfa_translation.py`. This should work fine. There are some artifacts related to the calculation that I know how to correct -- you can ignore those for now.

The real issue comes in `jfa_vispy.py`, where I try to use all `vispy` code to do the same. I can't seem to get it to produce the same result. Looking at the two bits of code, any ideas why?

Note that the `vispy` and `translation` versions use slightly different shaders, but the translation of parameters was pretty straightforward (and the normal-display/F2 mode works fine) so I don't _think_ that's the issue.
",24,13,[]
798,18541242,327,8935948,2014-07-17 17:09:57,2014-07-29 02:12:39,closed,WIP: Visuals tests,"Currently basic tests for different types of polygons, ellipses and arcs have been added.
",81,18,['component: visuals']
799,18530765,326,8935948,2014-07-17 14:20:12,2014-07-30 14:30:34,closed,WIP: Canvas visual transforms,"This PR adds transforms to the base Canvas class, which will be necessary to ensure many visuals are able to render correctly. This is a major API change open for discussion--it assigns the task of managing glViewport and FBOs to the canvas. Aalthough it is still possible to do these manually, many visuals could fail to render correctly if the transforms are not properly configured. 

I have also updated much of the scenegraph to make use of these features, which removes some code from the scenegraph event system. New examples to try out: `scene/viewbox1.py` and `scene/grid.py`. (and `scene/viewbox.py` is broken, but could be resurrected with minor changes) 

To do before merge:
- FBOs still need some transform corrections
- More code cleanup in ViewBox and events
- Update visuals to make use of canvas.fb_transform and ndc_transform
",37,31,['component: app']
800,18520176,325,8935948,2014-07-17 10:26:40,2014-08-27 19:22:37,closed,[WIP] : add contour line and filled in surf mesh for vertex data,"Hi,

I post a example to create contour line of surface mesh data. But I have some questions :
- Is there an interest for vispy project to do this ?
- What is it the best place to include this capability (like a visual object ?)
- Have you project about colormap because i need them ?

If there is an interest i work on it in september ...
",9,17,[]
801,18441677,324,8935948,2014-07-15 23:23:55,2014-07-16 01:37:00,closed,Fix rotation in mesh example.,"This is done by disabling transform simplification in ModularVisual;
this should be re-enabled when that system is working again.

Fixes #323
",5,2,[]
802,18315965,322,8935948,2014-07-12 17:22:51,2014-07-21 15:48:28,closed,FIX: Fix commenting,"Just a couple of minor tweaks. This will improve our coverage a tiny bit.
",4,1,[]
803,18275483,319,8935948,2014-07-11 12:27:35,2014-07-24 15:57:53,closed,New camera example,"Add a new example showing the webcam feed in the canvas. This example requires OpenCV (Python 2 only AFAIK). If the library is not available, a dynamic white noise is shown.
",13,3,['type: example']
804,18249927,318,8935948,2014-07-10 22:13:12,2014-08-02 21:01:37,closed,WIP: GLSL function composition,"Basically adds two files: the new Function implementation and a file with examples and tests. High level users should mostly checkout the docstring of the Function class, and the examples in test_function.py.

Everything works (or should, I hope to add a test or two). I think the only remaining issue is that I am not sure yet how variables should work out. 

No need to wait for me to move this forward. If I don't like what you've done with it, I'll nag and we can re-discuss afterwards ;)
",65,75,['component: visuals']
805,18238565,317,8935948,2014-07-10 18:49:18,2014-07-27 13:25:28,closed,ENH: Text,"Currently working:
1. Calculation (in shaders) and utilization of SDF.
2. Linux text display and system font listing.
3. OSX text display and system font listing.
4. Win32 text display (auto-download of compiled 32- and 64-bit freetype libs) and system font listing.
5. Automatic downloading of a couple nice open-source fonts.
6. Make it a `Visual`.
7. Very basic testing, we can improve once the visual-testing PR is merged.
",112,2,['type: enhancement']
806,18221413,316,8935948,2014-07-10 14:11:04,2014-08-27 18:46:11,closed,meshdata.py and an example use it,"Some change in meshdata.py
- Add cone and arrow mesh primitive
- add () in line 401 because it's a function
- modifie meshdata.vertices becaus they are a conflict with vertex_normal and face_normal call

Add an example to manipulate the mesh primitive 
- I have a problem with the primitive_mesh_viewer.Canvas.setData because this function doesn't change the camera view. Look in the code and help me please ...
",50,23,[]
807,18199262,315,8935948,2014-07-10 03:34:38,2014-07-10 10:31:53,closed,Shader fixes,"Minor corrections to ModularProgram et al. 
demos still run, tests, pass, and flake is happy
(I think we are ok to merge this immediately)

@Almar, if you are basing current work off of ModularShader, you should probably include this.
",3,2,[]
808,18139722,314,8935948,2014-07-09 02:59:55,2014-08-19 13:24:49,closed,Triangulation,"Adds a marginally functional triangulation routine based on prior work by Suraj and myself.
Also updates PolygonVisual to make use of it. 
Not ready for merge yet--this code is complex and broken in many places; needs a lot of testing / fixing / cleaning. 

Anyone interested in helping to debug the beast can add test routines and/or run the `util/geometry/triangulation.py` file directly to get a visualization of the construction process (requires pyqtgraph).
",13,42,[]
809,18125887,313,8935948,2014-07-08 20:18:47,2014-07-24 16:07:16,closed,FIX: Fix test,"@rossant can you see if this fixes tests for you? (Other than the PIL failure, that is.) Also, please check to make sure your video drivers don't force a particular multisampling scheme. If they do, then we should talk about a better way to deal with this failure.
",6,1,['type: bug']
810,18100192,312,8935948,2014-07-08 12:59:50,2014-07-24 19:33:20,closed,Make it a bit easier to work on website,"`python make website` gives the commands you can use, but also
emmediately clones the website repository

`python make images` clones the images repository so that the
website builder can build the gallery.
",15,1,['build']
811,18099575,311,8935948,2014-07-08 12:46:23,2014-07-08 15:35:19,closed,scene: allow postmortem debugging after error in draw,"Also small improvement in similar code in event.py
",2,2,[]
812,18096751,310,8935948,2014-07-08 11:35:01,2014-07-08 11:48:02,closed,Fix ModularProgram that I broke in #308,"_activate_variables was renamed to _enable_variables in Program,
but not in ModularProgram yet.
",1,1,[]
813,18093445,309,8935948,2014-07-08 10:11:29,2014-07-08 11:26:20,closed,Nest scipy import in polygon.py,"This should bring us one step further in passing tests
for the scenegraph branch.
",0,1,[]
814,18050698,308,8935948,2014-07-07 15:28:22,2014-07-08 11:20:04,closed,Scene gloo clean,"Apply the same code as #307 applied to scenegraph branch.
",6,5,[]
815,18050521,307,8935948,2014-07-07 15:26:03,2014-07-08 11:21:18,closed,Gloo clean,"Basically, GLObject only provides _activate, and all objects now keep
track of _need_something, which they then ""do"" in the _activate method.
This may add a wee bit more code in some classes, but now at least it
is very clear what happens. This was especially problematic for the
Program class.

This should make sure that both master and scenegraph operate without errors. This PR replaces #219.

I will also make a PR for scenegraph so that both are synchronised. 
",9,4,[]
816,18022350,306,8935948,2014-07-06 22:22:23,2014-07-08 08:29:54,closed,FIX: Less stringent color test,"I got a random Travis failure because some set of random numbers pushed the limits of the array equivalence testing. This makes it less stringent.
",6,1,[]
817,18022293,305,8935948,2014-07-06 22:16:03,2014-07-06 22:33:53,closed,FIX: Fix first dt,"Closes #248.

Ready for review/merge. I was also +1 on @lcampagn's proposal :)

I changed `Timer.start()` to set `_last_emit_time` to the current time, and thus got rid of the conditional in `_timeout`. This should work as long as we're guaranteed that `start()` will be called before `_timeout()` is ever called -- I assume this is how the `Timer` class functions.
",1,1,[]
818,18019348,304,8935948,2014-07-06 15:58:50,2014-07-07 12:05:41,closed,FIX: Fix move button number,"Closes #250.

Can be tested manually with this:

``` Python
from vispy.app import Canvas

c = Canvas(close_keys='escape')

@c.events.mouse_move.connect
def on_move(event):
    print('move:  %s' % event.button)


@c.events.mouse_press.connect
def on_press(event):
    print('press: %s' % event.button)

c.show()
c.app.run()
```

Ready for review/merge, @rossant this fixes an issue you brought up.
",9,4,['component: app']
819,18019225,303,8935948,2014-07-06 15:42:43,2014-07-08 18:12:44,closed,Pure python PNG writer,"Add @lcampagn 's `make_png`. No need to import from another library.
Just `from vispy.util import make_png`
",14,8,"['component: jupyter-widget-backend', 'component: util']"
820,18018279,302,8935948,2014-07-06 13:28:26,2014-07-06 20:17:17,closed,Scenegraph update,"Allow program variables to be updated without rebuilding
Fixes #299.
",4,3,[]
821,18007001,301,8935948,2014-07-05 02:01:40,2014-07-06 05:24:25,closed,Flip the image in read_pixels and test read_pixels,"- In read_pixels, the result image is upside-down. Flip the image using `[::-1]`.
- Unit test for read_pixels: Draw a white square on top left, check sums of pixels in corners to compare result.
",12,11,[]
822,17998408,300,8935948,2014-07-04 15:09:29,2014-07-05 22:26:12,closed,Update read_pixels and its docstring,"- `read_pixels()` returns 3D array of pixels.
- When reading pixels we should also read the 'Alpha' values, so
  instead of `gl.GL_RGB`, we should use `gl.GL_RGBA`.
",10,4,[]
823,17913833,297,8935948,2014-07-02 21:37:17,2014-07-04 13:32:19,closed,Setup for a png-based ipynb app backend,"This is just the app stuff, but I think Kaptan already has the rest more or less finished. If we combine the two, we have an actual IPython backend!

One note: this backend should preferably set capabilities for position and size to False. However, the current system does not really allow that, because the Canvas _always_ sets position, size, and title. We probably should make the canvas ""capability aware"". But I leave that for another PR.
",11,7,[]
824,17890393,296,8935948,2014-07-02 14:49:18,2014-07-02 15:22:31,closed,STY: Explanation for capabilities,"Here you go @almarklein, ready for review/merge.
",2,1,[]
825,17883551,295,8935948,2014-07-02 12:46:59,2014-07-02 16:10:18,closed,"Properly log caught exceptions + traceback in event, systems","Adds `logger.log_exception()` to allow logging exception with full traceback when errors are caught and ignored.

Note that traceback.format_exception() does not generate a complete stack trace; it only includes the stack entries from the frame that generated the exception until the frame that caught the exception. All other stack entries must be retrieved separately.
",7,2,[]
826,17874839,294,8935948,2014-07-02 09:10:34,2014-07-02 14:27:07,closed,WIP : Add support for parent keyword at Canvas init.,"I am not yet done with this PR, but as I don't have all backends installed I would like to know what Travis says.

Basically I just added a parent entry to the backends capabilities and set it to False save for qt. That way trying to give a parent for a backend not supporting it raises a RuntimeError.
",10,3,[]
827,17827761,293,8935948,2014-07-01 12:43:50,2014-07-01 13:29:35,closed,Change qt -> pyqt4,"Fix regarding to the note: ""This is _not_ (anymore) a backend by itself! One has to explicitly use either PySide or PyQt4.""
",2,1,[]
828,17792861,292,8935948,2014-06-30 19:30:42,2014-08-01 15:33:46,closed,[WIP] 3D Textures,"Implementation of 3D textures using PyOpenGL.
",34,23,[]
829,17785589,291,8935948,2014-06-30 17:16:34,2014-07-02 11:15:58,closed,Visual split,"This splits the Visual class into a simple base Visual and ModularVisual, which implements the component system. Makes it clear what base coding is required to implement a new visual.
",6,7,[]
830,17768638,289,8935948,2014-06-30 11:44:45,2014-06-30 14:24:57,closed,Implement the sizeHint method of CanvasBacjkend in Qt,"This simply make the widget returns its size as a size hint.
",7,1,[]
831,17744805,288,8935948,2014-06-29 06:58:03,2014-07-06 15:16:40,closed,Fixing setup (missing vispy.util.geometry),"The package vispy.util.geometry was missing and without it a number of examples crash...
",11,1,[]
832,17694717,285,8935948,2014-06-27 09:58:12,2014-08-24 18:00:17,closed,Imshow example,"Simple example showing creation and use of colormaps.
",6,5,['type: example']
833,17621145,284,8935948,2014-06-25 22:41:50,2014-07-08 19:10:11,closed,"WIP: RectVisual, Regular polygon visuals, and more.","As a start, I have updated the EllipseVisual to support float input as radius to draw a circle. I have also replaced instances of `paint` with `draw` which wasn't done in PR #275
",19,1,[]
834,17585308,283,8935948,2014-06-25 11:46:40,2014-06-30 14:07:38,closed,Refactor use func,"This PR basically does three things:

1) `Application.use()` no longer exists. When you create an Application object, you specify the backend. No more backend-less state.
2) There is no more `app.default_app` because it is initially None, which makes things complicated. Instead, use `app.use_app()` to get the default app instance. 
3) There is now a `vispy.use()` function that acts as a proxy for `app.use_app` and `gloo.gl.use_gl`. 

Some explanation on 3: One can now do e.g. `vispy.use('glfw pyopengl')`. A more interesting example is `use('pyqt4 es2')` in which case the app backend must know that it should use EGL (instead of a desktop context). And later on ... `use('ipython_notebook')` or `use('browser'). This PR thus paves the way (a wee bit) towards use of ES2, Angle and browser-based rendering.
",20,19,[]
835,17571715,282,8935948,2014-06-25 04:49:43,2014-06-30 17:04:09,closed,Scenegraph reorganization,"Reorganization:
- Moved code from old scenegraph/entities to new scene/widgets
- Removed old scenegraph package
- Moved Widget, SubScene, cameras, and systems out of viewbox.py
- Moved viewbox to widgets/

This PR should be reviewed only after #281 is merged.
",11,10,[]
836,17560799,281,8935948,2014-06-24 22:05:11,2014-06-27 01:47:09,closed,Mouse interaction,"Adds basic mouse interaction to TwoDCamera. This can be tested in two of the boxes in the scenegraph/viewbox example.
",22,18,[]
837,17556069,280,8935948,2014-06-24 20:38:47,2014-06-24 20:56:26,closed,"Copied changes to app, util, and gloo from scenegraph branch","Let's try to address any problems in this PR before merging the scenegraph branch.

Presently, this seems to break the fireworks demo and one test in app/tests/test_app.py
",3,1,[]
838,17551465,279,8935948,2014-06-24 19:14:38,2014-06-24 19:40:23,closed,Sg tweak,"Does the following:
1. Fixes camelCase.
2. indexes/vertexes -> indices/vertices.
3. Fixes a couple tests.
4. Fixes module packaging in `setup.py`.

There should be only one failing test now, and it fails in all backends (`gloo`-change related). @almarklein @lcampagn you'll probably have to sort that one out...
",2,5,[]
839,17545198,278,8935948,2014-06-24 17:20:46,2014-06-24 17:44:58,closed,STY: Fix scenegraph style,"@lcampagn ready for review/merge. `make flake` passes over here.
",2,2,[]
840,17298782,276,8935948,2014-06-18 15:06:00,2014-06-18 17:31:13,closed,Made the 1d colormap contiguous. This makes the warning go away.,"Also updated to use gloo functions according to other demos.
",3,2,[]
841,17197305,275,8935948,2014-06-16 19:23:42,2014-06-25 16:19:17,closed,WIP: Visuals and geometry,,20,7,[]
842,17186390,274,8935948,2014-06-16 15:58:59,2014-06-16 16:15:31,closed,Scenegraph,"Documentation updates; should be ready for merge.
",0,4,[]
843,17182577,273,8935948,2014-06-16 14:57:12,2014-06-16 15:24:43,closed,WIP: Scenegraph,,0,169,['component: scene']
844,17107603,270,8935948,2014-06-13 12:56:18,2014-06-16 19:43:24,closed,WIP: vispy.geometry package,"Current status - triangulation with part of finalization and recursive legalization left.
To do - Add `geometry.Polygon` to support data handling for PolygonVisual (#269)
",0,2,"['type: enhancement', 'component: visuals']"
845,17070300,269,8935948,2014-06-12 18:07:56,2014-06-16 19:43:14,closed,WIP: PolygonVisual support,,14,2,"['type: enhancement', 'component: visuals']"
846,17064697,268,8935948,2014-06-12 16:20:51,2014-06-12 17:52:10,closed,WIP: PolygonVisual support,"PolygonVisual uses MeshVisual to draw the faces. To add border the LineVisual will be used.
",2,1,[]
847,17054722,267,8935948,2014-06-12 13:32:44,2014-07-08 10:28:14,closed,Fixed uniform and attribute parsing,"The current parser for uniforms and attributes does not accept multiple declaration as in:

attribute float a,b;
uniform float a, b;

Also, I added a removed comments function for case like:

// attribute float a;

were parsed  and the attribute was created.
",7,3,['type: bug']
848,17053721,266,8935948,2014-06-12 13:11:36,2014-06-12 13:30:30,closed,fix bug in game-of-life.py,,2,1,[]
849,16999885,265,8935948,2014-06-11 14:12:47,2014-06-11 14:51:32,closed,Add start_shaders script,"This script provides a convenient starting point to write a new gloo-based visualization with shaders.
",5,2,[]
850,16957973,264,8935948,2014-06-10 18:51:15,2014-08-19 08:22:01,closed,Fix buffer,"A small fix in offset computation or some example were not working in:
https://github.com/rougier/loops-tutorial

(Tutorial with Cyrille in Paris)
",4,1,['type: bug']
851,16913652,263,8935948,2014-06-09 22:57:11,2014-06-13 12:50:04,closed,WIP: Triangulation (with pyqtgraph),"Finalization and recursive legalization is being implemented. Also, pyqtgraph will be removed once code is completed and debugging is not needed.
",5,3,[]
852,16715826,262,8935948,2014-06-04 15:38:26,2014-06-05 09:27:57,closed,FIX: Paint to draw,"This should wrap up the changes required to shift to ""draw"" name scheme.

@almarklein I made a couple minor changes to the testing scheme while in there, feel free to just look at my last commit to see them.

@lcampagn, you can also have a look at the last commit (the only one I made) to see if you're happy.

Should be ready for review/merge. Tests pass here, we'll see what Travis says.
",4,6,[]
853,16329464,261,8935948,2014-05-26 09:52:49,2014-05-27 21:11:06,closed,vispy.testing is not imported by default,"Also made `python make test` print the test options rather than
run all tests. To run all tests, do `python make test full`.

Closes #260
",5,1,[]
854,16215957,259,8935948,2014-05-22 12:24:16,2014-06-01 03:25:43,closed,app: detect possible mixup of PyQt4 and PySide usage.,"Mixing the two may lead to unpredictable situations. e.g. I see segfaults on closing on Linux, but on other systems other effects may take place.
",37,5,[]
855,16157390,258,8935948,2014-05-21 11:14:29,2014-05-22 15:24:41,closed,gloo: Apply appropriate glPixelStorei in 2D tex upload,"Closes issue #257
",12,3,[]
856,15835251,254,8935948,2014-05-13 17:21:42,2014-06-10 11:31:05,closed,Tried @rougier's suggestion to fix the bug.,"Fix #252. Waiting for Travis.
",23,3,['type: bug']
857,15597699,245,8935948,2014-05-07 14:19:28,2014-05-07 14:37:56,closed,FIX: Fix line in cube example,"Closes #244.
",0,1,[]
858,15372022,243,8935948,2014-04-30 23:42:33,2014-05-17 19:59:52,closed,ENH: Make backend tests independent,"This makes it so that each backend runs the full set of tests. The full set of tests takes ~1 minute on my machine. One can now do:

``` Bash
$ make qt  # runs tests using qt
$ make nobackend  # run tests that don't require a backend
$ make nose  # runs tests using all backends, plus those that don't require one
$ make test  # runs all tests (incl. flake, lineendings)
```

Similarly, in Python one can now do:

```
>>> import vispy
>>> vispy.test('qt')
>>> vispy.test('nobackend')
>>> vispy.test('nose')
>>> vispy.test()  # i.e., test('full')
```

I also added `vispy.ext` to store our externals.
",53,45,[]
859,15316179,239,8935948,2014-04-29 22:17:48,2014-04-30 15:18:11,closed,Mandelbrot set demo,"I used vispy to make a cool little Mandelbrot set demo. It runs very smooth on my laptop's Intel integrated graphics, and I tested it on Python 2 and 3. The `min_scale` and `iterations` parameters`` can be tweaked to balance quality with performance. I don't know if this fits better in the demo directory or the tutorials/gloo directory. 

Let me know if it needs work!
",20,4,[]
860,15278312,238,8935948,2014-04-29 09:03:13,2014-05-02 13:25:03,closed,Fixes to gloo.texture related to updating texture data,"This also fixes the animate-images demo
",6,4,[]
861,15205287,237,8935948,2014-04-26 19:13:11,2014-06-23 23:41:29,closed,scene: use systems rather than event-propagation for drawing,"Note that this is a PR on the scenegraph branch.

WIP: this is not finished. I start the PR to show the direction in which I'd like to go, but we should discuss the role of Document and ViewBox, and whether/how to use systems.

This brings the scene layer more towards a system-component system, by making systems do the ""work"" (http://en.wikipedia.org/wiki/Entity_component_system). The entities (and visuals) themselves become more descriptive. The system (only implemented drawing system) walks through the hierarchy and performs the drawing. I think this has a few advantages:
- Code for drawing is contained in a unit, so should be easier to maintain and debug
- Since entities are more descriptive, it should be much easier to move to automatic collections: the system walks over the hierarchy and creates collections from entities that are ""collectable"".

So anyway, I only made it to barely work. The scenegraph/line.py example works though. This demonstrates the idea. Needs discussion before I move further...
",41,23,[]
862,15200244,236,8935948,2014-04-26 07:30:23,2014-08-21 17:55:46,closed,WIP: Documentation,"This is a dedicated branch for writing documentation. This is not to be merged right now.

This idea is to not pollute main branch with several commits.
# DO NOT MERGE !!
",17,9,[]
863,15196293,235,8935948,2014-04-25 23:45:31,2014-04-30 19:04:43,closed,ENH: Better backend treatment,"Moving toward what @rougier called ""unity"". This PR does the following:
1. backend.available use (instead of ImportError)
2. canvas gl configuration (stereo, double buffer, etc.)
3. context sharing (all backends except GLUT)
4. fullscreen, no decorator, no resize support (all backends except GLUT)
5. enumerating backend capability
6. Throw an error if a user tries to use a non-existent capability
7. Polling current `gl` capabilities
8. Implement `sdl2` backend

Ready for review.
",37,18,[]
864,15061220,233,8935948,2014-04-23 11:44:10,2014-06-04 15:36:55,closed,Replaced all occurrences of 'paint' with 'draw',,16,4,[]
865,15018549,232,8935948,2014-04-22 15:19:52,2014-04-23 02:58:41,closed,Refactor visuals and scenegraph into single scene package,"Note that this is a PR on the scenegraph branch.

It merges the visuals and scenegraph into a single subpackage as discussed on gitter last week. Visual inherits from Entity.

WIP: The visuals examples now work, the scenegraph stuff probably not yet. 
",6,2,[]
866,14924950,231,8935948,2014-04-18 16:51:47,2014-04-18 17:29:56,closed,"Fixed typos/grammar, fixed doc building","I read through the entirety of the documentation to learn more about vispy. Along the way, I fixed typos, reworded a sentence or two, and fixed one instance of an underline not being long enough.

The quality of the documentation and code is quite high, in my opinion!
",7,2,[]
867,14884920,230,8935948,2014-04-17 16:52:50,2014-04-18 12:59:46,closed,FIX: Fix Qt cleanup,"This allows demos to run on my machine, and tests to pass. @rossant feel free to have a try on your system. @almarklein @lcampagn, this touches the code that we've been dealing with.

Closes #228.
",1,1,[]
868,14835379,227,8935948,2014-04-16 17:26:52,2014-04-16 20:41:33,closed,FIX: Fix docs (somewhat),"This tweaks a bunch of things about the docs. It also cleans up our code so that it's more Sphinx-compliant. This isn't meant to 100% fix the docs, but it at least moves us in that direction.
",2,2,[]
869,14826384,226,8935948,2014-04-16 14:43:19,2014-04-16 16:07:32,closed,Fix example generation,"Issue #222 reports the following error when building the docs:

```
OSError: [Errno 2] No such file or directory: '/Users/me/src/vispy/doc/examples/techniques/grids'
```

I fixed that with a single-line change. `os.makedirs` is the recursive version of `os.mkdir`. the `grids` directory was getting created, but `techniques` didn't exist.

However, I am now getting the following error:

```
Exception occurred:
  File ""/home/david/build/vispy/doc/ext/glapigenerator.py"", line 36, in main
    glext_const_names, glext_func_names = parse_api(gl.ext)
AttributeError: 'module' object has no attribute 'ext'
```

Also, the following works in my shell:

``` python
In [5]: from vispy.gloo import gl

In [6]: gl.ext
Out[9]: <module 'vispy.gloo.gl.ext' from '/home/david/Dropbox/.virtualenvs/frackoptima/lib/python3.4/site-packages/vispy/gloo/gl/ext.py'>
```

So it seems to me `gl.ext` is generated somewhere when importing in the shell, but not in Sphinx.
",1,1,[]
870,14734389,225,8935948,2014-04-14 18:57:38,2014-04-20 18:47:19,closed,"ENH: Add event order, rearrange Canvas arguments","This allows setting the order of callbacks when using ""connect"". It also contains a proposal for reorganizing some of the `app` calls in a simpler manner. Let me know what people think.
",36,23,[]
871,14716188,224,8935948,2014-04-14 12:55:04,2014-04-14 13:48:21,closed,scene: make visuals/scenegraph py3k compatible plus few minor fixes.,"Note: this is a PR against the scenegraph branch.
",1,1,[]
872,14544996,220,8935948,2014-04-09 10:48:51,2014-04-10 16:50:10,closed,New demo: spacy + fixes to gloo/buffer.py,"The set_data method of a DataBuffer should have offset in vertices,
not in bytes...

Probably needs a rebase after #218 is merged.
",10,3,[]
873,14504265,219,8935948,2014-04-08 15:05:43,2014-07-07 15:31:34,closed,Copied changes from scenegraph branch,"Ready for review.
- gloo.program now separates program build from variable activation
- Added --vispy-log CLI flag
- Logger can now match against caller
- Various minor edits

Closes #150 
",15,3,[]
874,14486860,218,8935948,2014-04-08 07:44:32,2014-04-10 12:59:39,closed,Fix boids example and some bugs in gloo,"Related to buffer when data is not contiguous.
Ready for merge.
",5,2,[]
875,14477100,217,8935948,2014-04-07 23:43:35,2014-04-10 18:48:20,closed,ENH: Add set_state et al.,"Work in progress for Pythonizing some common commands. Feel free to comment if people want. Tests still need to be implemented, but the changes to `atom.py` give some idea of what can be done.

Closes #52.
",10,14,[]
876,14295040,216,8935948,2014-04-02 18:47:18,2014-04-10 23:35:27,closed,ENH: Better app consistency,"Implements (better) testing of:
1. mulitple windows
2. timers
3. glut

Some things still need to be fixed:
1. glut multi-window test doesn't work on Travis, even though it works on my machine. Not sure why.
2. ~~glfw is segfaulting. I also get errors on pyglet sometimes when I run the tests. I think it has to do with not ensuring that the context is set appropriately in all situations.~~
3. ~~There is an error in Pyglet testing, even though I didn't change those lines. I think it has to do with the context not being set properly. @almarklein maybe you can have a look?~~
4. ~~There is a failing `glfw` test because it doesn't handle paint events the same way as other backends.~~
5. ~~glut causes segfaults when `nose` exits. This isn't unique to our tests -- even just these four lines cause a segfault when I run `python test.py` from the command line:~~

``` Python
from vispy.app import Application, Canvas
a = Application()
a.use('glut')
Canvas(app=a, size=(100, 100))
```

Closes #215.
Closes #188.
",50,64,[]
877,14250499,214,8935948,2014-04-01 21:02:40,2014-04-07 14:25:07,closed,ENH: Use compressed format,"@almarklein see if this works for you. Addresses #213.
",4,1,[]
878,14214118,212,8935948,2014-04-01 07:41:13,2014-04-02 06:07:24,closed,Pyglet interactive (hopefull fix Travis stall problem),"Hopefully this fixes #211 
",8,7,[]
879,14081306,209,8935948,2014-03-27 20:44:51,2014-04-23 16:33:49,closed,WIP: Fixing broken howto examples,"Fixed display-points.py: Added `#version 120` in fragment shader as gl_PointCoord is defined 1.20 onward only

Fixed rotate-cube.py: Replaced `ElementBuffer` with `IndexBuffer` and `self.program.set_vars` with `self.program.bind`
",17,5,[]
880,14055840,208,8935948,2014-03-27 12:47:36,2014-04-02 09:48:02,closed,Gloo fixes,"Several improvements and fixes to current gloo. The new gloo was merged a bit in a hurry and these are some of the changes that were still pending. Quite a bit of stuff is putting back improvements and fixes that I applied to gloo earlier. 
### Summary
- re-applied fix for ATI bug in driver for glBufferSubData
- made docstrings numpy-compliant (and parameters go on class docstring)
- gloo does not unnecessarily copy data if not contiguous (gloo.gl takes care of that)
- remove unnecessary data copying in Buffer.**init**()
- re-applied improvements to shader error reporting
- fix bug in texture parametrization (parameters were set on each draw)
### Discussion / todo
- Gloo objects _can_ have a `__del__` that auto-deletes the object from the GPU, but this is dangerous. However, requiring the user to delete objects explicitly is very unpythonic. We need to do something about this.
- Gloo objects now have a public update() method. Why?
- Shader and Program actually compile/link in the `_create` method. It seems to make more sense to do this in the `_activate` method.
- Luke's scenegraph branch fixes a few bugs, we might want to add them to this PR.
- replace store/copy with a single arg

ping @rougier
",17,21,"['type: enhancement', 'type: regression']"
881,13958787,207,8935948,2014-03-25 15:39:15,2014-03-25 20:55:28,closed,Refactored vispy.util.testing,"Basically, the testing module is not imported by default. Stuff that
we need is moved out of it. Much test-related stuff is moved into it.
- app_opengl_context -> moved to vispy.app._util
- _TempDir -> moved to util._config
- requires_\* -> moved into util.testing
- Fixed sys_info() function (we had two versions omg)
",5,1,[]
882,13884936,206,8935948,2014-03-24 02:58:17,2015-01-15 17:59:31,closed,Add flake_diff make target,"Idea test: have travis flake-check only code that is touched by the current PR. This allows us to keep stricter flake tests, with the same yellow-light warning. BUT: with this change, we have the option of admitting code that fails flake but nevertheless passes the eyeball test. After such code is committed to the repository, flake will no longer complain about it (unless it is touched again).

(not ready for review)
",21,32,['code-quality']
883,13798743,205,8935948,2014-03-20 17:03:05,2014-03-24 01:53:51,closed,ENH: Split Travis tests,"This at least makes the Travis feedback clearer (regardless of what consensus we eventually reach on style). The functionality-related tests, which are really just `make nose` on different Python versions for now, get run on different workers from the style and file size checks. This makes it clearer to see where and how errors are popping up. It should hopefully also make the style & size-related feedback faster.
",18,5,[]
884,13743845,204,8935948,2014-03-19 16:04:50,2014-08-18 19:38:48,closed,Feature/screenshot,"A class that wraps the _screenshot function around the first on_paint frame of a Canvas.
I tried but failed to make it draw using app.process_events() like in the test framework and ""make images gallery""(1).
When I run (1), it also doesn't draw, and is stuck running app.process_events() forever.
Ideally I would like to fix this, but for now it is sufficient for me to just save the image when showing the canvas with app.run()
",28,3,['type: enhancement']
885,13693339,203,8935948,2014-03-18 16:31:44,2014-03-19 13:35:20,closed,Unstructured2D canvas example.,"Takes unstructured 2D locations, with corresponding 1 or 2 dimensional
scalar ""values"". Plots the values looked up from colormaps and
interpolated between the locations.
",6,5,[]
886,13682220,202,8935948,2014-03-18 13:03:30,2014-03-22 15:32:10,closed,Gl proxy class,"This class is autogenerated and can be subclassed for different
purposes, such as a main proxy, a debug proxy, webgl or IPython
backend, etc.

By putting the functions in a class, a new set of functions can
be easily ""created"" simply by instantiating the class. The functions
all use `__call__` to ""serialize"" the API calls. Subclasses can thus
simply implement `__call__` in the appropriate way.

This also adds a stub webgl backend that can be expanded later.
",7,4,[]
887,13640989,201,8935948,2014-03-17 15:56:35,2014-03-21 15:36:55,closed,Improvements to gloo.gl and its tests.,"- selecting of glDepthRange vs glDepthRangef is now better.
- revert default gl backend after each test module.
- Catch glGetShaderPrecisionFormat when not available.
",57,10,[]
888,13640332,200,8935948,2014-03-17 15:45:08,2014-04-01 21:04:47,closed,WIP FIX: No warmup,"For @rougier, do not merge.
",2,4,['type: bug']
889,13597578,197,8935948,2014-03-14 23:46:09,2014-03-17 14:51:46,closed,Check shader variable names,"Check that GLSL variable names are expected to work on any version of opengl
",4,2,['type: enhancement']
890,13586218,193,8935948,2014-03-14 18:44:55,2014-08-24 18:03:57,closed,Implemented Arcball rotation example,"Added 3D arcball rotation with mouse example.
",18,3,['type: example']
891,13344555,191,8935948,2014-03-08 19:17:50,2014-03-14 17:05:58,closed,Terrain generation using scipy delaunay triangulation,"Terrain generation using diamond-square algorithm and scipy Delaunay triangualation
",21,10,['type: example']
892,13344514,190,8935948,2014-03-08 19:11:24,2014-03-14 17:05:58,closed,Mouse arcball for 3D interaction,,2,2,['type: enhancement']
893,13344264,189,8935948,2014-03-08 18:34:27,2014-03-09 19:19:07,closed,Removed experimental stuff,"This is a proposal for removing experimental stuff in preparation of the 0.3 release.

Hope I did not delete too much stuff.
",10,4,['code-quality']
894,13340726,186,8935948,2014-03-08 09:21:08,2014-03-09 18:35:33,closed,FIX: GPU computing examples were missing the ping-pong mode,"Ping-pong mode allows to read and write to the same texture (using different channels).
Before, we were reading and writing to the same texture, leading to some inconsistent behaviors.

github told me I'm 128 commits ahead of master, I guess I did something wrong
",16,7,[]
895,13306920,185,8935948,2014-03-07 12:12:41,2015-03-25 23:48:04,closed,Add gloo.glplus namespace,"Functions from OpenGL.GL except deprecated and what we use in
gloo.gl. Safes over half the functions on my machine. Injects
all constants for now.
",33,3,['component: gloo']
896,13302543,184,8935948,2014-03-07 09:53:50,2014-03-08 16:41:38,closed,Fix that GL tests fail,"Hopefully this makes Master green again
",10,4,['component: gl']
897,13295762,183,8935948,2014-03-07 04:13:11,2014-03-07 08:53:48,closed,"Made a few error messages more descriptive, fixed some sys_info details",,0,1,[]
898,13294197,182,8935948,2014-03-07 02:45:14,2014-03-07 02:56:43,closed,FIX: Don't quit early,"I don't think `Travis` should quit early. Let's say there are 10 errors in my file that only occur on Travis, I will have to go through 10 iterations to find them all instead of 1...
",0,1,[]
899,13288331,180,8935948,2014-03-06 23:20:09,2014-03-12 14:23:25,closed,FIX: Qt app fixes,"Rebase of #174 with my fixes for `glfw` on top. @almarklein WDYT?
",14,5,['type: bug']
900,13231659,178,8935948,2014-03-05 20:56:50,2014-03-06 06:30:25,closed,Test gloo.gl test coverage,"Don't merge this. I removed most tests from setup.py so I can check the coverage of my tests. 
",0,6,[]
901,13165819,177,8935948,2014-03-04 15:26:44,2014-03-06 22:05:21,closed,Gl gloo merge2 tuts,"Starting fixing/reorganizing examples.
",18,21,[]
902,13162875,176,8935948,2014-03-04 14:23:49,2014-03-04 15:26:33,closed,Dont use `except:`!,"Second attempt at creating a PR against a PR. I think it worked this time.

This also triggers on KeyBoardInterrupt and SystemExit and can thus
prevent Python shutdown. Use `except Exception:` instead.
",4,1,[]
903,13162593,175,8935948,2014-03-04 14:16:13,2014-03-04 14:21:55,closed,No naked except,"My attempt to do a PR on a PR. But I think I failed, because it seems to want to merge into vispy:master.

Anyway, this gets rid of using `except:` which is bad practice.
",6,73,[]
904,13155362,174,8935948,2014-03-04 10:41:14,2014-03-06 23:23:53,closed,Fixes for qt apps related to selection and re-calling use(),"Pyglet was higher in the list then PySide and PyQt4, making it
be selected earlier if both pyglet and PySide were in sys.modules.

repeatedly calling app.use() with 'PySide' or 'Qt' did not work
because the backend name is something like 'PySide (qt)'.
",14,3,[]
905,13154218,173,8935948,2014-03-04 10:09:13,2014-03-04 14:31:36,closed,Nicer pyglet import error message if version not high enough,"The version of pyglet that we need is not released yet. So one needs to
do ""pip install http://pyglet.googlecode.com/archive/tip.zip"".

Also added a note; I found that the pyglet process events function
does not really process paint events, but this might need further
investigation.
",11,2,[]
906,13153304,172,8935948,2014-03-04 09:41:51,2014-03-06 22:21:27,closed,Gl gloo merge2,"Fixed @Eric89GXL 's gl-gloo-merge branch. Tests for gl-backends is still a WIP, but will work on it after the merge. I pushed to vispy main repo, so anyone (e.g. @rougier) can add commits to this PR.
",25,108,[]
907,13140665,170,8935948,2014-03-04 00:05:47,2014-03-07 03:55:38,closed,ENH: Add demo-data downloading,"Not ready for review yet, but the example at least works now.

Addresses #165.
",24,12,[]
908,13122066,169,8935948,2014-03-03 16:58:07,2014-03-06 22:21:28,closed,ENH: gl-gloo merge,"I went through and merged the two branches as best I could, up to the limit of my knowledge. This only has a couple failing tests. Hopefully @almarklein @rougier you can both take a look and see if you're happy :)

Feel free to open PRs on my branch, or open a PR of your own based off of this.
",4,66,[]
909,13118359,168,8935948,2014-03-03 15:41:24,2014-03-04 00:07:39,closed,"Adds the ""molecular viewer"" demo made during the ESRF code-camp 2014",,1,1,[]
910,13117574,167,8935948,2014-03-03 15:24:05,2014-03-03 15:33:01,closed,"Adds the ""molecular viewer"" demo made during the ESRF code-camp (2014)",,2,1,[]
911,13102336,166,8935948,2014-03-03 06:38:20,2014-03-06 22:21:40,closed,Gloo,"### New GLOO API

This is the (final ?) PR for the new gloo API. It is not yet finished and tested but we might want to merge it anyway since it is blocking other PR.

If you feel it needs more work, just le me know (I might not be able to work on it this week).

I still need to take Almar's comment + new GL backend into account, fix some of the examples and write a proper documentation through the tutorial.

Next step for gloo would be to reorganize examples (#104) and handle issues #114, #120, #149 & #150.

Then I can move on to handling GLSL > 3.0 shader syntax to check if this can be unified through gloo.
",10,28,[]
912,13093171,164,8935948,2014-03-02 16:06:03,2014-03-03 17:03:55,closed,FIX: E241,"@rougier this one was part of the old defaults, so when @almarklein and I changed these a few days ago, it got overwritten. Sorry about that... I'm fine with having this one in there.
",4,1,[]
913,13091103,163,8935948,2014-03-02 10:34:20,2014-03-02 17:49:53,closed,Gloo new api 2,"Attempt at rebasing the gloo new API.

I have not alekn comment into account yet but I would prefer to make them after merging, does that make sense ?
",20,28,[]
914,13060607,154,8935948,2014-02-28 17:23:37,2014-03-01 09:26:20,closed,ENH: Backport assert_in,"@almarklein ready for review. We might eventually want/need a `util/fixes.py` or so to collect these things, but I figured for now `misc.py` is an okay place.

Closes #153.
",5,4,[]
915,13033588,152,8935948,2014-02-28 01:14:36,2014-07-02 15:41:15,closed,ENH: Colors,"This adds some basic **Python-side**, user-level color interaction / conversion. I tried to build this to work as cleanly/sanely as possible for users at the Python end, and now need to think hard about how to hook it into the OpenGL/`gloo` pipeline. It may require extensive refactoring or rethinking of what should be where (this is radically different from what @lcampagn talked about), but at least the conversions all seem to work, so refactoring shouldn't be too bad.

The conversions also need to be ported to GLSL, but that should be fairly trivial once I figure out how to interface with `gloo` correctly.

Currently supported on the Python side:
1. Just about all of the color manipulation methods requested by @rougier in #121 (https://github.com/vispy/vispy/issues/121#issuecomment-36036156). See tests for examples.
2. String->color conversion, in particular web colors and hex (e.g. `#ffff00`).
3. RGB, HSV, and CIELAB space support.
4. Storing multiple (or single) colors. This is done by using the `ColorArray` class. This makes using many colors or a single color straightforward (see tests and class docstring). This should essentially cover both single-color and `Palette` use cases.
5. Basic linear gradient support. Based on how `ColorArray` is structured, this took only a few fairly trivial lines.

The goal of the `ColorArray` class is to basically keep everything stored in an Nx4 `._rgba` element. Setting the HSV or Lab values changes the underlying `_rgba` element. I chose to use `np.float64` representations for `_rgba` now to keep calculations as accurate as possible, but there is an argument for possibly making them `np.float32` for easy transfer to/from the GPU.

Feel free to take a look if you'd like, @lcampagn in particular I'd like to know if you can see any way the `ColorArray` class could hook into the `gloo` pipeline, since it would be very nice to keep the manipulation commands similar to how they are now.
",31,17,['type: enhancement']
916,13022080,151,8935948,2014-02-27 20:32:27,2014-02-27 20:45:28,closed,FIX: Travis tweaks,"Ready for review.
1. Adds check for sufficient Pyglet version >= 1.2.
2. Removes beta `PyOpenGL` test, since we don't need it with @almarklein's PR coming now.

Closes #144.
",1,2,[]
917,13003866,148,8935948,2014-02-27 14:13:25,2014-02-27 18:43:01,closed,More uniform make,"ping @Eric89GXL 
",2,2,['type: enhancement']
918,13002034,147,8935948,2014-02-27 13:25:08,2014-07-08 20:12:19,closed,Scenegraph,"Opening this PR for discussion; not ready for merge.
",61,281,"['type: enhancement', 'component: scene']"
919,12947142,138,8935948,2014-02-26 11:13:10,2014-03-04 14:17:40,closed,GL backends,"Code for our GL backend is auto-generated from `vispy/codegen`. The code ends up in `vispy/vispy/gloo/gl`. The idea that we use the GL ES 2.0 API and have multiple implementations that can be used.
### The backends

There are now 3 backends:
- desktop (our own fast OpenGL wrapper via ctypes)
- angle (via ctypes, Windows only, WIP because need libs)
- pyopengl (use pyopengl functions, for fallback and testing)

Future backends:
- mock (for testing, I might add this to the PR)
- proxy (send OpenGL commands anywhere else)
- webgl (like proxy, but specific for browser)
- Kivy (vispy on mobile?)
### The API

Currently the API is _almost_ compatible with the WebGL API. This makes things easier for the backends, but more importantly, it is a very clean API. This means a handful of function names are different with respect to e.g. pyopengl:
- genX ->  createX
- deleteXs -> deleteX
- getXiv -> getXParameter
- getBooleanv, getFloatv, getIntegerv, getString -> getParameter

We also decided last week that we use the ""gl"" prefix. Note that WebGL does _not_ use the gl prefix. So we are not _completely_ adopting that API. I think this is acceptable. Is eveyone ok with this?
### Extensions and OpenGL 3

Since the [GL ES 2.0 extensions](http://www.khronos.org/registry/gles/api/GLES2/gl2ext.h) and the [WebGL extensions](http://www.khronos.org/registry/webgl/extensions/) do barely overlap, I decided to completely omit the `gl.ext` stuff. The only overlap of interest is the float_textures (not floats on the GPU, but uploading of floats), half_float_textures, and perhaps vertex_half_float extensions. But these only require additional constants, not functions.

This means for instance no 3D textures :(  My proposal is to create a `gloo.glplus` (or similar name) that contains everything from OpenGL.GL except for the deprecated stuff and what we cover in `gloo.gl`. We should probably create a new PR for this.

So there should be a clear separation between ""bare ES 2.0"" that will run basically anywhere, and ""advanced GL"" that will run on most modern desktops, but using it means no more IPython notebook integration.
### Injection vs proxy

Users (and gloo) can use the `gloo.gl` namespace without worrying what backend implementation is used. But they can also use one of the backends directly, e.g. `gloo.gl.desktop`. To make the `gloo.gl` namespace work, there are two options: 1) [inject (i.e. copy) all functions](https://github.com/vispy/vispy/blob/gl-backend2/vispy/gloo/gl/__init__.py#L65) from a backend; 2) define functions that [call the corresponding function in the selected backend](https://github.com/vispy/vispy/blob/gl-backend2/vispy/gloo/gl/_main.py). 

The first option is obviously faster, because its safes one dict lookup and one function call. (Not a lot faster, but measurable nonetheless.) However, in gloo some function objects from `gloo.gl` are [stored at import time](https://github.com/vispy/vispy/blob/gl-backend2/vispy/gloo/variable.py#L140). I can see three options:

1) We use the proxy method and accept the minor inefficiency. (naah)
2) We use both methods, so that function objects stored at import time work as expected, but the rest of the code is fast. (current approach)
3) We modify gloo to store function names at import time and do `getattr(gl, stored_name)` at runtime. (my +1, but we should probably fix this in or after the new-gloo PR)
### Further notes

To make the Angle backend work, we need some way to ship the libraries to the user. We should address this issue in a separate discussion. For the time being, the angle backend uses hard-coded paths and will only work on my machine :)
",40,38,"['type: enhancement', 'component: gl']"
920,12897170,122,8935948,2014-02-25 10:50:36,2014-02-26 20:09:58,closed,Lineendings check,"Just a small test for when developing on Windows ...  and make current code base use consistent line ending (only one file was using RCLF).
",12,7,['code-quality']
921,12893166,120,8935948,2014-02-25 08:48:55,2014-10-27 18:58:55,closed,Share of texture with OpenCL ,"Hi,
I believe the example is now pretty clean and should work on most configurations (where openCL can run on the OpenGL device).

Cheers,
",60,41,['type: enhancement']
922,12871257,119,8935948,2014-02-24 20:04:27,2014-02-25 13:38:11,closed,STY: Allow newline whitespace,"Should be ready for review. We can always go back and put newline whitespace checking back in if I ever manage to convert people to the dark side :)
",5,3,['code-quality']
923,12865729,118,8935948,2014-02-24 18:04:12,2014-02-24 19:04:56,closed,FIX: Fixes for OpenCL and new example,"@rossant it looks like you might have merged some `pyopencl` commits into `master` that broke Travis (and also made tests fail on my system):

https://github.com/vispy/vispy/commit/6dcb94900ead6a56b9b336209f23a7f773e60de9

See last `master` build result:

https://travis-ci.org/vispy/vispy/builds/19449966

This PR should fix that problem.

This PR also fixes some PEP8 + pyflakes violations introduced in a subsequent merge that looks like it might have been by @rougier:

https://github.com/vispy/vispy/commit/7dd8fb832a5fbf38ea6ebc48977929ebaf8c8b50

Is there a policy for checking the Travis state before merge? Merging via PR as opposed to direct push has an advantage in this regard, although it's less convenient in some circumstances. It's also possible these merges were expedited as part of the code camp so they could be used quickly, which would make sense for that situation.
",5,2,[]
924,12833664,117,8935948,2014-02-23 17:29:22,2014-02-23 17:31:56,closed,New graph example.,"The edges are currently drawn with GL_LINES. We should make them nicer with antialiasing.
",0,1,[]
925,12800619,115,8935948,2014-02-21 17:11:11,2014-03-02 10:32:29,closed,Gloo new api,"This is the new gloo API that should ease the use of gloo.
All tests passed on my machine but 1 (that is expected and marked as such in  test_variable.py).

It did not rewrote examples yet, will do so in a few days hopefully and start reorganization of the repo as indicated in #104 if everyone agree.
",49,28,"['type: enhancement', 'code-quality']"
926,12593071,111,8935948,2014-02-16 17:04:12,2014-02-17 08:25:13,closed,ENH: flake8 testing,"I have a feeling this will trigger some needed fixes... we'll see.
",1,3,[]
927,12591994,110,8935948,2014-02-16 14:28:42,2014-02-17 19:37:28,closed,Add tests for checking that subpackages dont import each-other.,"Ensure with a test that vispy.util does not import vispy.app or anything. Keep subpackages independent.

Note: there is an explicit import of vispy.app in vispy/gloo/**init**.py
to test that Travis picks up the test correctly.
Will remove that in a next commit...
",8,12,[]
928,12588002,109,8935948,2014-02-16 00:35:14,2014-02-20 09:38:53,closed,Canvas object now provides fps,"canvas object now calculates and updates fps at every call of paint and the fps can be obtained at canvas.fps
",26,12,['type: enhancement']
929,12540616,108,8935948,2014-02-14 02:54:33,2014-02-21 06:58:03,closed,ENH: Add basic helpful debug info,"This at least will get us some useful info from `vispy.sys_info()`. Let me know if there are other good things to add, or if that's not a great method name. Current output on my Ubuntu system:

```
Platform: Linux-3.11.0-15-generic-x86_64-with-Ubuntu-13.10-saucy
Python:   2.7.5+ (default, Sep 19 2013, 13:48:49)  [GCC 4.8.1]
Backend:  PyQt4 (qt)
Qt:       PyQt4 /usr/lib/python2.7/dist-packages/PyQt4/QtOpenGL.so
Pyglet:   pyglet 1.2alpha1
glfw:     glfw (3, 1, 0)
glut:     from OpenGL 3.0.1
```
",24,13,['type: enhancement']
930,12477958,106,8935948,2014-02-12 19:20:17,2014-02-15 20:46:25,closed,ENH: Beta OpenGL case and better test coverage,"Closes #105. Also has a few tweaks to increase test coverage.
",3,7,[]
931,12449925,103,8935948,2014-02-12 05:53:17,2014-02-12 06:02:13,closed,FIX: Remove old shaders,"Addresses #101.
",0,1,[]
932,12449661,102,8935948,2014-02-12 05:36:22,2014-02-12 05:43:28,closed,ENH: Add donut example,"Not quite the same as in #74 (no clipping of points on the bottom part of the torus), but see what you think.
",4,1,[]
933,12402075,96,8935948,2014-02-11 03:40:51,2014-02-17 12:05:28,closed,ENH: Better logging,"Addresses #87. Should help debugging some of these issues. Tests illustrate use cases. Should be ready for review.
",22,10,['type: enhancement']
934,12392510,95,8935948,2014-02-10 21:57:06,2014-02-10 22:31:41,closed,ENH: Better debugging,"Addresses #93
",8,3,[]
935,12391533,94,8935948,2014-02-10 21:34:38,2014-02-10 22:20:32,closed,FIX: Util,"@rougier see if this fixes your Pyglet issue.
",3,2,[]
936,12369773,88,8935948,2014-02-10 12:54:08,2014-02-10 21:44:53,closed,Improve Canvas constructor (see issue #79),"see issue #79 
",9,5,[]
937,12017396,86,8935948,2014-01-30 00:10:00,2014-02-11 18:34:54,closed,ENH: Add GLFW,"Ready for review.
",36,14,['type: enhancement']
938,11957648,85,8935948,2014-01-28 18:06:00,2014-02-08 23:15:09,closed,ENH: Use logging instead of print statements,"Not ready for review until #84 is merged. It bulids on those changes, so this will need to be rebased.
",42,3,[]
939,11956861,84,8935948,2014-01-28 17:48:46,2014-02-05 22:02:07,closed,"FIX: Use nested, relative imports","Ready for review.
",18,6,[]
940,11761754,81,8935948,2014-01-22 15:55:27,2014-01-28 08:17:59,closed,ENH/FIX: Better coverage,"Ready for review.
",22,12,[]
941,11720142,80,8935948,2014-01-21 16:39:35,2014-01-23 13:04:03,closed,ENH: pep8,"`autopep8` corrected ~3,800 lines (!). I've gone through and dealt with `pyflakes` and remaining PEP8 errors. I have also added `flake8` to Travis.
",15,6,[]
942,11554127,77,8935948,2014-01-15 21:31:01,2014-01-21 10:12:41,closed,ENH: Add pyside and 2.6 build,"This adds Py2.6 to Travis.
",48,19,[]
943,11553136,75,8935948,2014-01-15 21:06:13,2014-01-17 22:59:55,closed,WIP ENH: Autopep8,"I ran `autopep8` on the codebase. Tests still pass, but I need to go through the files and make sure everything still makes sense, and check for e.g. pyflakes violations. Before I invest time in doing this, I figured I'd check to make sure now is a good time to actually undertake cleaning the code. It doesn't look like there are pending PRs, but I think people have some forks going...?
",5,1,[]
944,10577865,72,8935948,2013-12-06 00:31:35,2014-01-15 12:23:28,closed,"ENH: Add develop option to install, dev tools","I implemented some potential ideas that I've found useful during development on other packages, see what you think. This PR makes the following minor changes:
1. Changes what `nosetests` will output, defaulting to reporting coverage -- this is what the changes in `setup.cfg` do. This is an aesthetic change, see if you think it's worthwhile.
2. Add Makefile. This is nice because one can do `make test` to run tests, and it will automatically clean all the `.pyc` first for safety.
3. Use `setuptools` namespace for installation. This allows for `python setup.py develop`, which makes it easier for people to do development. Making a symlink isn't difficult, but it's not as nice as that one-liner. This does add a dependency on `setuptools`, though, so might not be worth it.
4. Updates `.gitignore` to ignore a couple annoying / irrelevant files.
5. Adds Travis and Coveralls config.
",12,4,[]
945,10490867,71,8935948,2013-12-03 21:45:08,2013-12-03 21:45:56,closed,Add a Bitdeli Badge to README,"Pull request made by @rossant at https://bitdeli.com
",0,1,[]
946,9872734,70,8935948,2013-11-12 07:57:41,2014-01-15 21:10:36,closed,Simplify setup py,"Here are some minor (?) changes to `setup.py`:
- I replaced the `__init__.py` parsing with a more Pythonic approach.
- Because the `install_requires` key is pointless with distutils, I switched to setuptools.
",4,2,[]
947,9171017,68,8935948,2013-10-17 12:26:44,2013-10-18 14:12:12,closed,keep it compatible with python 2.6,"Small piece of code to keep it python2.6 compliant.
",9,3,[]
948,8186316,60,8935948,2013-09-09 18:09:41,2013-09-10 15:58:59,closed,Tailed arrow marker,"Hey, finally got around to polishing up the tailed arrow marker code that I started during euroscipy sprint (my original attempt was missing an edge, and didn't scale nicely with line thickness - both issues are now fixed).  
",7,4,[]
949,7840447,27,8935948,2013-08-24 17:54:43,2013-08-24 23:07:59,closed,added required constants and input keys to handle 3d textures,"Hi,

Sorry, I had to leave in a hurry because of some issues at home. Nevertheless, I had some time on my way home to play with vispy: just awesome! Here's a small update to make 3d textures work. Maybe I find some time to add an example for that, too.

Keep up the good work,
Tom
",3,1,[]
